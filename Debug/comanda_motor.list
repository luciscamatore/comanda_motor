
comanda_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc94  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0800be68  0800be68  0000ce68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c324  0800c324  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c324  0800c324  0000d324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c32c  0800c32c  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c32c  0800c32c  0000d32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c330  0800c330  0000d330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800c334  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bd0  200001d8  0800c508  0000e1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000da8  0800c508  0000eda8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015112  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d41  00000000  00000000  00023316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  00026058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa0  00000000  00000000  00027458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021abb  00000000  00000000  000283f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017959  00000000  00000000  00049eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9d8b  00000000  00000000  0006180c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b597  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069b0  00000000  00000000  0012b5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00131f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800be4c 	.word	0x0800be4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800be4c 	.word	0x0800be4c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <map>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//USEFUL FUNCTIONS
char msg[400];
double map(long x, long in_min, long in_max, long out_min, long out_max) {
 8001024:	b5b0      	push	{r4, r5, r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	603b      	str	r3, [r7, #0]
	return (double) (x - in_min) * (out_max - out_min) / (in_max - in_min)
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fa93 	bl	8000564 <__aeabi_i2d>
 800103e:	4604      	mov	r4, r0
 8001040:	460d      	mov	r5, r1
 8001042:	6a3a      	ldr	r2, [r7, #32]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fa8b 	bl	8000564 <__aeabi_i2d>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4620      	mov	r0, r4
 8001054:	4629      	mov	r1, r5
 8001056:	f7ff faef 	bl	8000638 <__aeabi_dmul>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4614      	mov	r4, r2
 8001060:	461d      	mov	r5, r3
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fa7b 	bl	8000564 <__aeabi_i2d>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4620      	mov	r0, r4
 8001074:	4629      	mov	r1, r5
 8001076:	f7ff fc09 	bl	800088c <__aeabi_ddiv>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4614      	mov	r4, r2
 8001080:	461d      	mov	r5, r3
			+ out_min;
 8001082:	6838      	ldr	r0, [r7, #0]
 8001084:	f7ff fa6e 	bl	8000564 <__aeabi_i2d>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4620      	mov	r0, r4
 800108e:	4629      	mov	r1, r5
 8001090:	f7ff f91c 	bl	80002cc <__adddf3>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	ec43 2b17 	vmov	d7, r2, r3
}
 800109c:	eeb0 0a47 	vmov.f32	s0, s14
 80010a0:	eef0 0a67 	vmov.f32	s1, s15
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080010ac <percent2pwm>:
int32_t percent2pwm(int x) {
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	return (x - 0) * (65535 - 0) / (100 - 0) + 0;
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	041b      	lsls	r3, r3, #16
 80010ba:	1a9b      	subs	r3, r3, r2
 80010bc:	4a05      	ldr	r2, [pc, #20]	@ (80010d4 <percent2pwm+0x28>)
 80010be:	fb82 1203 	smull	r1, r2, r2, r3
 80010c2:	1152      	asrs	r2, r2, #5
 80010c4:	17db      	asrs	r3, r3, #31
 80010c6:	1ad3      	subs	r3, r2, r3
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	51eb851f 	.word	0x51eb851f

080010d8 <MOTOR_Init>:
	int32_t position, old_position;
	int speed;
	float speed_rpm, speed_rad;
}MOTOR;

void MOTOR_Init(MOTOR *motor){
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	motor->position = 0;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
	motor->old_position = 0;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	605a      	str	r2, [r3, #4]
	motor->speed = 0;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
	motor->speed_rpm = 0;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f04f 0200 	mov.w	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
	motor->speed_rad = 0;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <Controller_Init>:
//CONTROLLER STRUCT
typedef struct{
	int w, y, x;
}Controller;

void Controller_Init(Controller *ps4){
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
	ps4->w = 0;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
	ps4->y = 0;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	605a      	str	r2, [r3, #4]
	ps4->x = 0;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	0000      	movs	r0, r0
	...

08001138 <HAL_TIM_PeriodElapsedCallback>:
	tx_buffer[MAX_BUFFER_SIZE - 1] = '\0';
}

int small_counter = 0, big_counter = 0;
MOTOR fdr, fst, sdr, sst;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	if (htim == &htim9) {
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a89      	ldr	r2, [pc, #548]	@ (8001368 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001144:	4293      	cmp	r3, r2
 8001146:	f040 8105 	bne.w	8001354 <HAL_TIM_PeriodElapsedCallback+0x21c>
		//fdr
		fdr.position = __HAL_TIM_GET_COUNTER(&htim1);
 800114a:	4b88      	ldr	r3, [pc, #544]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x234>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001150:	461a      	mov	r2, r3
 8001152:	4b87      	ldr	r3, [pc, #540]	@ (8001370 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001154:	601a      	str	r2, [r3, #0]
		fdr.speed = fdr.position - fdr.old_position;
 8001156:	4b86      	ldr	r3, [pc, #536]	@ (8001370 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4b85      	ldr	r3, [pc, #532]	@ (8001370 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	4a83      	ldr	r2, [pc, #524]	@ (8001370 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001162:	6093      	str	r3, [r2, #8]
		fdr.speed_rpm = (fdr.speed * 60) / TICKS_PER_REVOLUTION;
 8001164:	4b82      	ldr	r3, [pc, #520]	@ (8001370 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	4613      	mov	r3, r2
 800116a:	011b      	lsls	r3, r3, #4
 800116c:	1a9b      	subs	r3, r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4a80      	ldr	r2, [pc, #512]	@ (8001374 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001172:	fb82 1203 	smull	r1, r2, r2, r3
 8001176:	441a      	add	r2, r3
 8001178:	1292      	asrs	r2, r2, #10
 800117a:	17db      	asrs	r3, r3, #31
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001186:	4b7a      	ldr	r3, [pc, #488]	@ (8001370 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001188:	edc3 7a03 	vstr	s15, [r3, #12]
		fdr.speed_rad = (fdr.speed_rpm / 60) * 2 * M_PI;
 800118c:	4b78      	ldr	r3, [pc, #480]	@ (8001370 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800118e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001192:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8001378 <HAL_TIM_PeriodElapsedCallback+0x240>
 8001196:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800119a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800119e:	ee17 0a90 	vmov	r0, s15
 80011a2:	f7ff f9f1 	bl	8000588 <__aeabi_f2d>
 80011a6:	a36e      	add	r3, pc, #440	@ (adr r3, 8001360 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	f7ff fa44 	bl	8000638 <__aeabi_dmul>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	f7ff fd36 	bl	8000c28 <__aeabi_d2f>
 80011bc:	4603      	mov	r3, r0
 80011be:	4a6c      	ldr	r2, [pc, #432]	@ (8001370 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80011c0:	6113      	str	r3, [r2, #16]
		fdr.old_position = fdr.position;
 80011c2:	4b6b      	ldr	r3, [pc, #428]	@ (8001370 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a6a      	ldr	r2, [pc, #424]	@ (8001370 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80011c8:	6053      	str	r3, [r2, #4]

		//fst
		fst.position = __HAL_TIM_GET_COUNTER(&htim1);
 80011ca:	4b68      	ldr	r3, [pc, #416]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x234>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b6a      	ldr	r3, [pc, #424]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80011d4:	601a      	str	r2, [r3, #0]
		fst.speed = fst.position - fst.old_position;
 80011d6:	4b69      	ldr	r3, [pc, #420]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b68      	ldr	r3, [pc, #416]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	4a66      	ldr	r2, [pc, #408]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80011e2:	6093      	str	r3, [r2, #8]
		fst.speed_rpm = (fst.speed * 60) / TICKS_PER_REVOLUTION;
 80011e4:	4b65      	ldr	r3, [pc, #404]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	4613      	mov	r3, r2
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	1a9b      	subs	r3, r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4a60      	ldr	r2, [pc, #384]	@ (8001374 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80011f2:	fb82 1203 	smull	r1, r2, r2, r3
 80011f6:	441a      	add	r2, r3
 80011f8:	1292      	asrs	r2, r2, #10
 80011fa:	17db      	asrs	r3, r3, #31
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	ee07 3a90 	vmov	s15, r3
 8001202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001206:	4b5d      	ldr	r3, [pc, #372]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001208:	edc3 7a03 	vstr	s15, [r3, #12]
		fst.speed_rad = (fst.speed_rpm / 60) * 2 * M_PI;
 800120c:	4b5b      	ldr	r3, [pc, #364]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800120e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001212:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8001378 <HAL_TIM_PeriodElapsedCallback+0x240>
 8001216:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800121a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800121e:	ee17 0a90 	vmov	r0, s15
 8001222:	f7ff f9b1 	bl	8000588 <__aeabi_f2d>
 8001226:	a34e      	add	r3, pc, #312	@ (adr r3, 8001360 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	f7ff fa04 	bl	8000638 <__aeabi_dmul>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	f7ff fcf6 	bl	8000c28 <__aeabi_d2f>
 800123c:	4603      	mov	r3, r0
 800123e:	4a4f      	ldr	r2, [pc, #316]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001240:	6113      	str	r3, [r2, #16]
		fst.old_position = fst.position;
 8001242:	4b4e      	ldr	r3, [pc, #312]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a4d      	ldr	r2, [pc, #308]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001248:	6053      	str	r3, [r2, #4]

		//sdr
		sdr.position = __HAL_TIM_GET_COUNTER(&htim1);
 800124a:	4b48      	ldr	r3, [pc, #288]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x234>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001250:	461a      	mov	r2, r3
 8001252:	4b4b      	ldr	r3, [pc, #300]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001254:	601a      	str	r2, [r3, #0]
		sdr.speed = sdr.position - sdr.old_position;
 8001256:	4b4a      	ldr	r3, [pc, #296]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	4b49      	ldr	r3, [pc, #292]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	4a47      	ldr	r2, [pc, #284]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001262:	6093      	str	r3, [r2, #8]
		sdr.speed_rpm = (sdr.speed * 60) / TICKS_PER_REVOLUTION;
 8001264:	4b46      	ldr	r3, [pc, #280]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	4613      	mov	r3, r2
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4a40      	ldr	r2, [pc, #256]	@ (8001374 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001272:	fb82 1203 	smull	r1, r2, r2, r3
 8001276:	441a      	add	r2, r3
 8001278:	1292      	asrs	r2, r2, #10
 800127a:	17db      	asrs	r3, r3, #31
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001286:	4b3e      	ldr	r3, [pc, #248]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001288:	edc3 7a03 	vstr	s15, [r3, #12]
		sdr.speed_rad = (sdr.speed_rpm / 60) * 2 * M_PI;
 800128c:	4b3c      	ldr	r3, [pc, #240]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800128e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001292:	eddf 6a39 	vldr	s13, [pc, #228]	@ 8001378 <HAL_TIM_PeriodElapsedCallback+0x240>
 8001296:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800129a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800129e:	ee17 0a90 	vmov	r0, s15
 80012a2:	f7ff f971 	bl	8000588 <__aeabi_f2d>
 80012a6:	a32e      	add	r3, pc, #184	@ (adr r3, 8001360 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff f9c4 	bl	8000638 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f7ff fcb6 	bl	8000c28 <__aeabi_d2f>
 80012bc:	4603      	mov	r3, r0
 80012be:	4a30      	ldr	r2, [pc, #192]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80012c0:	6113      	str	r3, [r2, #16]
		sdr.old_position = sdr.position;
 80012c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a2e      	ldr	r2, [pc, #184]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80012c8:	6053      	str	r3, [r2, #4]

		//sst
		sst.position = __HAL_TIM_GET_COUNTER(&htim1);
 80012ca:	4b28      	ldr	r3, [pc, #160]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x234>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80012d4:	601a      	str	r2, [r3, #0]
		sst.speed = sst.position - sst.old_position;
 80012d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4b2a      	ldr	r3, [pc, #168]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	4a28      	ldr	r2, [pc, #160]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80012e2:	6093      	str	r3, [r2, #8]
		sst.speed_rpm = (sst.speed * 60) / TICKS_PER_REVOLUTION;
 80012e4:	4b27      	ldr	r3, [pc, #156]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	4613      	mov	r3, r2
 80012ea:	011b      	lsls	r3, r3, #4
 80012ec:	1a9b      	subs	r3, r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4a20      	ldr	r2, [pc, #128]	@ (8001374 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80012f2:	fb82 1203 	smull	r1, r2, r2, r3
 80012f6:	441a      	add	r2, r3
 80012f8:	1292      	asrs	r2, r2, #10
 80012fa:	17db      	asrs	r3, r3, #31
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	ee07 3a90 	vmov	s15, r3
 8001302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001306:	4b1f      	ldr	r3, [pc, #124]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001308:	edc3 7a03 	vstr	s15, [r3, #12]
		sst.speed_rad = (sst.speed_rpm / 60) * 2 * M_PI;
 800130c:	4b1d      	ldr	r3, [pc, #116]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800130e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001312:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8001378 <HAL_TIM_PeriodElapsedCallback+0x240>
 8001316:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800131a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800131e:	ee17 0a90 	vmov	r0, s15
 8001322:	f7ff f931 	bl	8000588 <__aeabi_f2d>
 8001326:	a30e      	add	r3, pc, #56	@ (adr r3, 8001360 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132c:	f7ff f984 	bl	8000638 <__aeabi_dmul>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4610      	mov	r0, r2
 8001336:	4619      	mov	r1, r3
 8001338:	f7ff fc76 	bl	8000c28 <__aeabi_d2f>
 800133c:	4603      	mov	r3, r0
 800133e:	4a11      	ldr	r2, [pc, #68]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001340:	6113      	str	r3, [r2, #16]
		sst.old_position = sst.position;
 8001342:	4b10      	ldr	r3, [pc, #64]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a0f      	ldr	r2, [pc, #60]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001348:	6053      	str	r3, [r2, #4]
		small_counter++;
 800134a:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	4a0d      	ldr	r2, [pc, #52]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001352:	6013      	str	r3, [r2, #0]
	if(htim == &htim12){
//		process_data();
//		HAL_UART_Transmit(&huart2, (uint8_t *) tx_buffer, 25, HAL_MAX_DELAY);
//		big_counter++;
	}
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	f3af 8000 	nop.w
 8001360:	54442d18 	.word	0x54442d18
 8001364:	400921fb 	.word	0x400921fb
 8001368:	200003fc 	.word	0x200003fc
 800136c:	2000024c 	.word	0x2000024c
 8001370:	20000c04 	.word	0x20000c04
 8001374:	ea0ea0eb 	.word	0xea0ea0eb
 8001378:	42700000 	.word	0x42700000
 800137c:	20000c18 	.word	0x20000c18
 8001380:	20000c2c 	.word	0x20000c2c
 8001384:	20000c40 	.word	0x20000c40
 8001388:	20000c00 	.word	0x20000c00

0800138c <HAL_UART_TxCpltCallback>:


int delay = 1000;
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
//		process_data();
//		HAL_UART_Transmit_DMA(&huart2, (uint8_t*) tx_buffer,25);
//		big_counter++;
//		HAL_Delay(delay);
//	}
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b091      	sub	sp, #68	@ 0x44
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) { //ESP32
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a59      	ldr	r2, [pc, #356]	@ (8001510 <HAL_UART_RxCpltCallback+0x170>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d12c      	bne.n	800140a <HAL_UART_RxCpltCallback+0x6a>
		HAL_UART_Receive_DMA(&huart2, controller_buffer, 15);
 80013b0:	220f      	movs	r2, #15
 80013b2:	4958      	ldr	r1, [pc, #352]	@ (8001514 <HAL_UART_RxCpltCallback+0x174>)
 80013b4:	4856      	ldr	r0, [pc, #344]	@ (8001510 <HAL_UART_RxCpltCallback+0x170>)
 80013b6:	f005 f9ab 	bl	8006710 <HAL_UART_Receive_DMA>
		int joystick_values[3];
		int index = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
		char *token;

		token = strtok((char*) controller_buffer, ",");
 80013be:	4956      	ldr	r1, [pc, #344]	@ (8001518 <HAL_UART_RxCpltCallback+0x178>)
 80013c0:	4854      	ldr	r0, [pc, #336]	@ (8001514 <HAL_UART_RxCpltCallback+0x174>)
 80013c2:	f008 f959 	bl	8009678 <strtok>
 80013c6:	63b8      	str	r0, [r7, #56]	@ 0x38
		while (token != NULL && index < 3) {
 80013c8:	e010      	b.n	80013ec <HAL_UART_RxCpltCallback+0x4c>
			joystick_values[index++] = atoi(token);
 80013ca:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 80013cc:	1c63      	adds	r3, r4, #1
 80013ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80013d2:	f006 fd40 	bl	8007e56 <atoi>
 80013d6:	4602      	mov	r2, r0
 80013d8:	00a3      	lsls	r3, r4, #2
 80013da:	3340      	adds	r3, #64	@ 0x40
 80013dc:	443b      	add	r3, r7
 80013de:	f843 2c1c 	str.w	r2, [r3, #-28]
			token = strtok(NULL, ",");
 80013e2:	494d      	ldr	r1, [pc, #308]	@ (8001518 <HAL_UART_RxCpltCallback+0x178>)
 80013e4:	2000      	movs	r0, #0
 80013e6:	f008 f947 	bl	8009678 <strtok>
 80013ea:	63b8      	str	r0, [r7, #56]	@ 0x38
		while (token != NULL && index < 3) {
 80013ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d002      	beq.n	80013f8 <HAL_UART_RxCpltCallback+0x58>
 80013f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	dde8      	ble.n	80013ca <HAL_UART_RxCpltCallback+0x2a>
		}
		ps4.w = joystick_values[0]; //lx - w
 80013f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fa:	4a48      	ldr	r2, [pc, #288]	@ (800151c <HAL_UART_RxCpltCallback+0x17c>)
 80013fc:	6013      	str	r3, [r2, #0]
		ps4.y = joystick_values[1]; //rx - y
 80013fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001400:	4a46      	ldr	r2, [pc, #280]	@ (800151c <HAL_UART_RxCpltCallback+0x17c>)
 8001402:	6053      	str	r3, [r2, #4]
		ps4.x = joystick_values[2]; //ry - x
 8001404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001406:	4a45      	ldr	r2, [pc, #276]	@ (800151c <HAL_UART_RxCpltCallback+0x17c>)
 8001408:	6093      	str	r3, [r2, #8]
	}
	if (huart == &huart6) { //BLUEPILL
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a44      	ldr	r2, [pc, #272]	@ (8001520 <HAL_UART_RxCpltCallback+0x180>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d179      	bne.n	8001506 <HAL_UART_RxCpltCallback+0x166>
		HAL_UART_Receive_DMA(&huart6, odometry_buffer, 25);
 8001412:	2219      	movs	r2, #25
 8001414:	4943      	ldr	r1, [pc, #268]	@ (8001524 <HAL_UART_RxCpltCallback+0x184>)
 8001416:	4842      	ldr	r0, [pc, #264]	@ (8001520 <HAL_UART_RxCpltCallback+0x180>)
 8001418:	f005 f97a 	bl	8006710 <HAL_UART_Receive_DMA>
		double coordinates[3];
		int index = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	637b      	str	r3, [r7, #52]	@ 0x34
		char *token;

		token = strtok((char*) odometry_buffer, ",");
 8001420:	493d      	ldr	r1, [pc, #244]	@ (8001518 <HAL_UART_RxCpltCallback+0x178>)
 8001422:	4840      	ldr	r0, [pc, #256]	@ (8001524 <HAL_UART_RxCpltCallback+0x184>)
 8001424:	f008 f928 	bl	8009678 <strtok>
 8001428:	6338      	str	r0, [r7, #48]	@ 0x30
		while (token != NULL && index < 3) {
 800142a:	e015      	b.n	8001458 <HAL_UART_RxCpltCallback+0xb8>
			coordinates[index++] = strtod(token, NULL);
 800142c:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 800142e:	1c63      	adds	r3, r4, #1
 8001430:	637b      	str	r3, [r7, #52]	@ 0x34
 8001432:	2100      	movs	r1, #0
 8001434:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001436:	f007 fb17 	bl	8008a68 <strtod>
 800143a:	eeb0 7a40 	vmov.f32	s14, s0
 800143e:	eef0 7a60 	vmov.f32	s15, s1
 8001442:	00e3      	lsls	r3, r4, #3
 8001444:	3340      	adds	r3, #64	@ 0x40
 8001446:	443b      	add	r3, r7
 8001448:	3b38      	subs	r3, #56	@ 0x38
 800144a:	ed83 7b00 	vstr	d7, [r3]
			token = strtok(NULL, ",");
 800144e:	4932      	ldr	r1, [pc, #200]	@ (8001518 <HAL_UART_RxCpltCallback+0x178>)
 8001450:	2000      	movs	r0, #0
 8001452:	f008 f911 	bl	8009678 <strtok>
 8001456:	6338      	str	r0, [r7, #48]	@ 0x30
		while (token != NULL && index < 3) {
 8001458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <HAL_UART_RxCpltCallback+0xc4>
 800145e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001460:	2b02      	cmp	r3, #2
 8001462:	dde3      	ble.n	800142c <HAL_UART_RxCpltCallback+0x8c>
		}
		current_x = (double) ((int) (coordinates[0] * 100)) / 100;
 8001464:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	4b2e      	ldr	r3, [pc, #184]	@ (8001528 <HAL_UART_RxCpltCallback+0x188>)
 800146e:	f7ff f8e3 	bl	8000638 <__aeabi_dmul>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f7ff fb8d 	bl	8000b98 <__aeabi_d2iz>
 800147e:	4603      	mov	r3, r0
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f86f 	bl	8000564 <__aeabi_i2d>
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	4b27      	ldr	r3, [pc, #156]	@ (8001528 <HAL_UART_RxCpltCallback+0x188>)
 800148c:	f7ff f9fe 	bl	800088c <__aeabi_ddiv>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4925      	ldr	r1, [pc, #148]	@ (800152c <HAL_UART_RxCpltCallback+0x18c>)
 8001496:	e9c1 2300 	strd	r2, r3, [r1]
		current_y = (double) ((int) (coordinates[1] * 100)) / 100;
 800149a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	4b21      	ldr	r3, [pc, #132]	@ (8001528 <HAL_UART_RxCpltCallback+0x188>)
 80014a4:	f7ff f8c8 	bl	8000638 <__aeabi_dmul>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	f7ff fb72 	bl	8000b98 <__aeabi_d2iz>
 80014b4:	4603      	mov	r3, r0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff f854 	bl	8000564 <__aeabi_i2d>
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <HAL_UART_RxCpltCallback+0x188>)
 80014c2:	f7ff f9e3 	bl	800088c <__aeabi_ddiv>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4919      	ldr	r1, [pc, #100]	@ (8001530 <HAL_UART_RxCpltCallback+0x190>)
 80014cc:	e9c1 2300 	strd	r2, r3, [r1]
		current_h = (double) ((int) (coordinates[2] * 100)) / 100;
 80014d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <HAL_UART_RxCpltCallback+0x188>)
 80014da:	f7ff f8ad 	bl	8000638 <__aeabi_dmul>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4610      	mov	r0, r2
 80014e4:	4619      	mov	r1, r3
 80014e6:	f7ff fb57 	bl	8000b98 <__aeabi_d2iz>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff f839 	bl	8000564 <__aeabi_i2d>
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <HAL_UART_RxCpltCallback+0x188>)
 80014f8:	f7ff f9c8 	bl	800088c <__aeabi_ddiv>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	490c      	ldr	r1, [pc, #48]	@ (8001534 <HAL_UART_RxCpltCallback+0x194>)
 8001502:	e9c1 2300 	strd	r2, r3, [r1]
//		process_data();
//		HAL_UART_Transmit(&huart2, (uint8_t*) tx_buffer,25, HAL_MAX_DELAY);
	}
}
 8001506:	bf00      	nop
 8001508:	3744      	adds	r7, #68	@ 0x44
 800150a:	46bd      	mov	sp, r7
 800150c:	bd90      	pop	{r4, r7, pc}
 800150e:	bf00      	nop
 8001510:	200004d4 	.word	0x200004d4
 8001514:	20000bbc 	.word	0x20000bbc
 8001518:	0800be7c 	.word	0x0800be7c
 800151c:	20000bb0 	.word	0x20000bb0
 8001520:	20000564 	.word	0x20000564
 8001524:	20000bcc 	.word	0x20000bcc
 8001528:	40590000 	.word	0x40590000
 800152c:	20000be8 	.word	0x20000be8
 8001530:	20000bf0 	.word	0x20000bf0
 8001534:	20000bf8 	.word	0x20000bf8

08001538 <fdr_set_pwm>:

//MOTORS MOVEMENT
void fdr_set_pwm(int32_t pwm_value) {
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	if (pwm_value > 0) {
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	dd06      	ble.n	8001554 <fdr_set_pwm+0x1c>
		TIM4->CCR3 = 0; // L
 8001546:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <fdr_set_pwm+0x50>)
 8001548:	2200      	movs	r2, #0
 800154a:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM4->CCR4 = pwm_value; // R
 800154c:	4a0e      	ldr	r2, [pc, #56]	@ (8001588 <fdr_set_pwm+0x50>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM4->CCR3 = pwm_value * -1; // L
	} else if (pwm_value == 0) {
		TIM4->CCR4 = 0; // R
		TIM4->CCR3 = 0; // L
	}
}
 8001552:	e013      	b.n	800157c <fdr_set_pwm+0x44>
	} else if (pwm_value < 0) {
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	da07      	bge.n	800156a <fdr_set_pwm+0x32>
		TIM4->CCR4 = 0; // R
 800155a:	4b0b      	ldr	r3, [pc, #44]	@ (8001588 <fdr_set_pwm+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM4->CCR3 = pwm_value * -1; // L
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	425a      	negs	r2, r3
 8001564:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <fdr_set_pwm+0x50>)
 8001566:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001568:	e008      	b.n	800157c <fdr_set_pwm+0x44>
	} else if (pwm_value == 0) {
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d105      	bne.n	800157c <fdr_set_pwm+0x44>
		TIM4->CCR4 = 0; // R
 8001570:	4b05      	ldr	r3, [pc, #20]	@ (8001588 <fdr_set_pwm+0x50>)
 8001572:	2200      	movs	r2, #0
 8001574:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM4->CCR3 = 0; // L
 8001576:	4b04      	ldr	r3, [pc, #16]	@ (8001588 <fdr_set_pwm+0x50>)
 8001578:	2200      	movs	r2, #0
 800157a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	40000800 	.word	0x40000800

0800158c <fst_set_pwm>:
void fst_set_pwm(int32_t pwm_value) {
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	if (pwm_value > 0) {
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	dd06      	ble.n	80015a8 <fst_set_pwm+0x1c>
		TIM4->CCR2 = 0; // L
 800159a:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <fst_set_pwm+0x50>)
 800159c:	2200      	movs	r2, #0
 800159e:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM4->CCR1 = pwm_value; // R
 80015a0:	4a0e      	ldr	r2, [pc, #56]	@ (80015dc <fst_set_pwm+0x50>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM4->CCR2 = pwm_value * -1; // L
	} else if (pwm_value == 0) {
		TIM4->CCR1 = 0; // R
		TIM4->CCR2 = 0; // L
	}
}
 80015a6:	e013      	b.n	80015d0 <fst_set_pwm+0x44>
	} else if (pwm_value < 0) {
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	da07      	bge.n	80015be <fst_set_pwm+0x32>
		TIM4->CCR1 = 0; // R
 80015ae:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <fst_set_pwm+0x50>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM4->CCR2 = pwm_value * -1; // L
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	425a      	negs	r2, r3
 80015b8:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <fst_set_pwm+0x50>)
 80015ba:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80015bc:	e008      	b.n	80015d0 <fst_set_pwm+0x44>
	} else if (pwm_value == 0) {
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d105      	bne.n	80015d0 <fst_set_pwm+0x44>
		TIM4->CCR1 = 0; // R
 80015c4:	4b05      	ldr	r3, [pc, #20]	@ (80015dc <fst_set_pwm+0x50>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM4->CCR2 = 0; // L
 80015ca:	4b04      	ldr	r3, [pc, #16]	@ (80015dc <fst_set_pwm+0x50>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	40000800 	.word	0x40000800

080015e0 <sdr_set_pwm>:
void sdr_set_pwm(int32_t pwm_value) {
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	if (pwm_value > 0) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	dd06      	ble.n	80015fc <sdr_set_pwm+0x1c>
		TIM8->CCR3 = 0; // R
 80015ee:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <sdr_set_pwm+0x50>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM8->CCR4 = pwm_value; // L
 80015f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001630 <sdr_set_pwm+0x50>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM8->CCR3 = pwm_value * -1; // R
	} else if (pwm_value == 0) {
		TIM8->CCR4 = 0; // R
		TIM8->CCR3 = 0; // L
	}
}
 80015fa:	e013      	b.n	8001624 <sdr_set_pwm+0x44>
	} else if (pwm_value < 0) {
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	da07      	bge.n	8001612 <sdr_set_pwm+0x32>
		TIM8->CCR4 = 0; // L
 8001602:	4b0b      	ldr	r3, [pc, #44]	@ (8001630 <sdr_set_pwm+0x50>)
 8001604:	2200      	movs	r2, #0
 8001606:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM8->CCR3 = pwm_value * -1; // R
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	425a      	negs	r2, r3
 800160c:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <sdr_set_pwm+0x50>)
 800160e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001610:	e008      	b.n	8001624 <sdr_set_pwm+0x44>
	} else if (pwm_value == 0) {
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d105      	bne.n	8001624 <sdr_set_pwm+0x44>
		TIM8->CCR4 = 0; // R
 8001618:	4b05      	ldr	r3, [pc, #20]	@ (8001630 <sdr_set_pwm+0x50>)
 800161a:	2200      	movs	r2, #0
 800161c:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM8->CCR3 = 0; // L
 800161e:	4b04      	ldr	r3, [pc, #16]	@ (8001630 <sdr_set_pwm+0x50>)
 8001620:	2200      	movs	r2, #0
 8001622:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	40010400 	.word	0x40010400

08001634 <sst_set_pwm>:
void sst_set_pwm(int32_t pwm_value) {
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	if (pwm_value > 0) {
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	dd06      	ble.n	8001650 <sst_set_pwm+0x1c>
		TIM8->CCR2 = 0; // L
 8001642:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <sst_set_pwm+0x50>)
 8001644:	2200      	movs	r2, #0
 8001646:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM8->CCR1 = pwm_value; // R
 8001648:	4a0e      	ldr	r2, [pc, #56]	@ (8001684 <sst_set_pwm+0x50>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM8->CCR2 = pwm_value * -1; // L
	} else if (pwm_value == 0) {
		TIM8->CCR1 = 0; // R
		TIM8->CCR2 = 0; // L
	}
}
 800164e:	e013      	b.n	8001678 <sst_set_pwm+0x44>
	} else if (pwm_value < 0) {
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	da07      	bge.n	8001666 <sst_set_pwm+0x32>
		TIM8->CCR1 = 0; // R
 8001656:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <sst_set_pwm+0x50>)
 8001658:	2200      	movs	r2, #0
 800165a:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM8->CCR2 = pwm_value * -1; // L
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	425a      	negs	r2, r3
 8001660:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <sst_set_pwm+0x50>)
 8001662:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001664:	e008      	b.n	8001678 <sst_set_pwm+0x44>
	} else if (pwm_value == 0) {
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d105      	bne.n	8001678 <sst_set_pwm+0x44>
		TIM8->CCR1 = 0; // R
 800166c:	4b05      	ldr	r3, [pc, #20]	@ (8001684 <sst_set_pwm+0x50>)
 800166e:	2200      	movs	r2, #0
 8001670:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM8->CCR2 = 0; // L
 8001672:	4b04      	ldr	r3, [pc, #16]	@ (8001684 <sst_set_pwm+0x50>)
 8001674:	2200      	movs	r2, #0
 8001676:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	40010400 	.word	0x40010400

08001688 <tele_op_mode>:
//			break;
//		}
	}
}

void tele_op_mode() {
 8001688:	b5b0      	push	{r4, r5, r7, lr}
 800168a:	b08e      	sub	sp, #56	@ 0x38
 800168c:	af02      	add	r7, sp, #8
	int32_t fdr_pwm = 0, sdr_pwm = 0, fst_pwm = 0, sst_pwm = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001692:	2300      	movs	r3, #0
 8001694:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001696:	2300      	movs	r3, #0
 8001698:	627b      	str	r3, [r7, #36]	@ 0x24
 800169a:	2300      	movs	r3, #0
 800169c:	623b      	str	r3, [r7, #32]
	double fdr_ref = 0, sdr_ref = 0, fst_ref = 0, sst_ref = 0;
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	f04f 0300 	mov.w	r3, #0
 80016a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	f04f 0300 	mov.w	r3, #0
 80016be:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_UART_Receive_DMA(&huart2, controller_buffer, 15);
 80016ce:	220f      	movs	r2, #15
 80016d0:	49b4      	ldr	r1, [pc, #720]	@ (80019a4 <tele_op_mode+0x31c>)
 80016d2:	48b5      	ldr	r0, [pc, #724]	@ (80019a8 <tele_op_mode+0x320>)
 80016d4:	f005 f81c 	bl	8006710 <HAL_UART_Receive_DMA>
	//lx - ps4.w
	//rx - ps4.y
	//ry - ps4.x
	while (1) {
		HAL_UART_Receive_DMA(&huart2, controller_buffer, 15);
 80016d8:	220f      	movs	r2, #15
 80016da:	49b2      	ldr	r1, [pc, #712]	@ (80019a4 <tele_op_mode+0x31c>)
 80016dc:	48b2      	ldr	r0, [pc, #712]	@ (80019a8 <tele_op_mode+0x320>)
 80016de:	f005 f817 	bl	8006710 <HAL_UART_Receive_DMA>
		fdr_ref = map(-ps4.x, -512, 512, -1, 1) + map(-ps4.y, -512, 512, -1, 1)
 80016e2:	4bb2      	ldr	r3, [pc, #712]	@ (80019ac <tele_op_mode+0x324>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	4258      	negs	r0, r3
 80016e8:	2301      	movs	r3, #1
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	f04f 33ff 	mov.w	r3, #4294967295
 80016f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016f4:	49ae      	ldr	r1, [pc, #696]	@ (80019b0 <tele_op_mode+0x328>)
 80016f6:	f7ff fc95 	bl	8001024 <map>
 80016fa:	ec55 4b10 	vmov	r4, r5, d0
 80016fe:	4bab      	ldr	r3, [pc, #684]	@ (80019ac <tele_op_mode+0x324>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	4258      	negs	r0, r3
 8001704:	2301      	movs	r3, #1
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	f04f 33ff 	mov.w	r3, #4294967295
 800170c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001710:	49a7      	ldr	r1, [pc, #668]	@ (80019b0 <tele_op_mode+0x328>)
 8001712:	f7ff fc87 	bl	8001024 <map>
 8001716:	ec53 2b10 	vmov	r2, r3, d0
 800171a:	4620      	mov	r0, r4
 800171c:	4629      	mov	r1, r5
 800171e:	f7fe fdd5 	bl	80002cc <__adddf3>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4614      	mov	r4, r2
 8001728:	461d      	mov	r5, r3
				+ map(-ps4.w, -512, 512, -1, 1);
 800172a:	4ba0      	ldr	r3, [pc, #640]	@ (80019ac <tele_op_mode+0x324>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4258      	negs	r0, r3
 8001730:	2301      	movs	r3, #1
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	f04f 33ff 	mov.w	r3, #4294967295
 8001738:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800173c:	499c      	ldr	r1, [pc, #624]	@ (80019b0 <tele_op_mode+0x328>)
 800173e:	f7ff fc71 	bl	8001024 <map>
 8001742:	ec53 2b10 	vmov	r2, r3, d0
		fdr_ref = map(-ps4.x, -512, 512, -1, 1) + map(-ps4.y, -512, 512, -1, 1)
 8001746:	4620      	mov	r0, r4
 8001748:	4629      	mov	r1, r5
 800174a:	f7fe fdbf 	bl	80002cc <__adddf3>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	e9c7 2306 	strd	r2, r3, [r7, #24]
		sdr_ref = map(-ps4.x, -512, 512, -1, 1) - map(-ps4.y, -512, 512, -1, 1)
 8001756:	4b95      	ldr	r3, [pc, #596]	@ (80019ac <tele_op_mode+0x324>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	4258      	negs	r0, r3
 800175c:	2301      	movs	r3, #1
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	f04f 33ff 	mov.w	r3, #4294967295
 8001764:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001768:	4991      	ldr	r1, [pc, #580]	@ (80019b0 <tele_op_mode+0x328>)
 800176a:	f7ff fc5b 	bl	8001024 <map>
 800176e:	ec55 4b10 	vmov	r4, r5, d0
 8001772:	4b8e      	ldr	r3, [pc, #568]	@ (80019ac <tele_op_mode+0x324>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	4258      	negs	r0, r3
 8001778:	2301      	movs	r3, #1
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	f04f 33ff 	mov.w	r3, #4294967295
 8001780:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001784:	498a      	ldr	r1, [pc, #552]	@ (80019b0 <tele_op_mode+0x328>)
 8001786:	f7ff fc4d 	bl	8001024 <map>
 800178a:	ec53 2b10 	vmov	r2, r3, d0
 800178e:	4620      	mov	r0, r4
 8001790:	4629      	mov	r1, r5
 8001792:	f7fe fd99 	bl	80002c8 <__aeabi_dsub>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4614      	mov	r4, r2
 800179c:	461d      	mov	r5, r3
				+ map(-ps4.w, -512, 512, -1, 1);
 800179e:	4b83      	ldr	r3, [pc, #524]	@ (80019ac <tele_op_mode+0x324>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4258      	negs	r0, r3
 80017a4:	2301      	movs	r3, #1
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017b0:	497f      	ldr	r1, [pc, #508]	@ (80019b0 <tele_op_mode+0x328>)
 80017b2:	f7ff fc37 	bl	8001024 <map>
 80017b6:	ec53 2b10 	vmov	r2, r3, d0
		sdr_ref = map(-ps4.x, -512, 512, -1, 1) - map(-ps4.y, -512, 512, -1, 1)
 80017ba:	4620      	mov	r0, r4
 80017bc:	4629      	mov	r1, r5
 80017be:	f7fe fd85 	bl	80002cc <__adddf3>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
		fst_ref = map(-ps4.x, -512, 512, -1, 1) - map(-ps4.y, -512, 512, -1, 1)
 80017ca:	4b78      	ldr	r3, [pc, #480]	@ (80019ac <tele_op_mode+0x324>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	4258      	negs	r0, r3
 80017d0:	2301      	movs	r3, #1
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	f04f 33ff 	mov.w	r3, #4294967295
 80017d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017dc:	4974      	ldr	r1, [pc, #464]	@ (80019b0 <tele_op_mode+0x328>)
 80017de:	f7ff fc21 	bl	8001024 <map>
 80017e2:	ec55 4b10 	vmov	r4, r5, d0
 80017e6:	4b71      	ldr	r3, [pc, #452]	@ (80019ac <tele_op_mode+0x324>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	4258      	negs	r0, r3
 80017ec:	2301      	movs	r3, #1
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	f04f 33ff 	mov.w	r3, #4294967295
 80017f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017f8:	496d      	ldr	r1, [pc, #436]	@ (80019b0 <tele_op_mode+0x328>)
 80017fa:	f7ff fc13 	bl	8001024 <map>
 80017fe:	ec53 2b10 	vmov	r2, r3, d0
 8001802:	4620      	mov	r0, r4
 8001804:	4629      	mov	r1, r5
 8001806:	f7fe fd5f 	bl	80002c8 <__aeabi_dsub>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4614      	mov	r4, r2
 8001810:	461d      	mov	r5, r3
				- map(-ps4.w, -512, 512, -1, 1);
 8001812:	4b66      	ldr	r3, [pc, #408]	@ (80019ac <tele_op_mode+0x324>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4258      	negs	r0, r3
 8001818:	2301      	movs	r3, #1
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	f04f 33ff 	mov.w	r3, #4294967295
 8001820:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001824:	4962      	ldr	r1, [pc, #392]	@ (80019b0 <tele_op_mode+0x328>)
 8001826:	f7ff fbfd 	bl	8001024 <map>
 800182a:	ec53 2b10 	vmov	r2, r3, d0
		fst_ref = map(-ps4.x, -512, 512, -1, 1) - map(-ps4.y, -512, 512, -1, 1)
 800182e:	4620      	mov	r0, r4
 8001830:	4629      	mov	r1, r5
 8001832:	f7fe fd49 	bl	80002c8 <__aeabi_dsub>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		sst_ref = map(-ps4.x, -512, 512, -1, 1) + map(-ps4.y, -512, 512, -1, 1)
 800183e:	4b5b      	ldr	r3, [pc, #364]	@ (80019ac <tele_op_mode+0x324>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	4258      	negs	r0, r3
 8001844:	2301      	movs	r3, #1
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	f04f 33ff 	mov.w	r3, #4294967295
 800184c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001850:	4957      	ldr	r1, [pc, #348]	@ (80019b0 <tele_op_mode+0x328>)
 8001852:	f7ff fbe7 	bl	8001024 <map>
 8001856:	ec55 4b10 	vmov	r4, r5, d0
 800185a:	4b54      	ldr	r3, [pc, #336]	@ (80019ac <tele_op_mode+0x324>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4258      	negs	r0, r3
 8001860:	2301      	movs	r3, #1
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	f04f 33ff 	mov.w	r3, #4294967295
 8001868:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800186c:	4950      	ldr	r1, [pc, #320]	@ (80019b0 <tele_op_mode+0x328>)
 800186e:	f7ff fbd9 	bl	8001024 <map>
 8001872:	ec53 2b10 	vmov	r2, r3, d0
 8001876:	4620      	mov	r0, r4
 8001878:	4629      	mov	r1, r5
 800187a:	f7fe fd27 	bl	80002cc <__adddf3>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4614      	mov	r4, r2
 8001884:	461d      	mov	r5, r3
				- map(-ps4.w, -512, 512, -1, 1);
 8001886:	4b49      	ldr	r3, [pc, #292]	@ (80019ac <tele_op_mode+0x324>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4258      	negs	r0, r3
 800188c:	2301      	movs	r3, #1
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	f04f 33ff 	mov.w	r3, #4294967295
 8001894:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001898:	4945      	ldr	r1, [pc, #276]	@ (80019b0 <tele_op_mode+0x328>)
 800189a:	f7ff fbc3 	bl	8001024 <map>
 800189e:	ec53 2b10 	vmov	r2, r3, d0
		sst_ref = map(-ps4.x, -512, 512, -1, 1) + map(-ps4.y, -512, 512, -1, 1)
 80018a2:	4620      	mov	r0, r4
 80018a4:	4629      	mov	r1, r5
 80018a6:	f7fe fd0f 	bl	80002c8 <__aeabi_dsub>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	e9c7 2300 	strd	r2, r3, [r7]

		fdr_pwm = percent2pwm(fdr_ref * 100);
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	4b3f      	ldr	r3, [pc, #252]	@ (80019b4 <tele_op_mode+0x32c>)
 80018b8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80018bc:	f7fe febc 	bl	8000638 <__aeabi_dmul>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	f7ff f966 	bl	8000b98 <__aeabi_d2iz>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fbec 	bl	80010ac <percent2pwm>
 80018d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
		sdr_pwm = percent2pwm(sdr_ref * 100);
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	4b36      	ldr	r3, [pc, #216]	@ (80019b4 <tele_op_mode+0x32c>)
 80018dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018e0:	f7fe feaa 	bl	8000638 <__aeabi_dmul>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	f7ff f954 	bl	8000b98 <__aeabi_d2iz>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fbda 	bl	80010ac <percent2pwm>
 80018f8:	62b8      	str	r0, [r7, #40]	@ 0x28
		fst_pwm = percent2pwm(fst_ref * 100);
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	4b2d      	ldr	r3, [pc, #180]	@ (80019b4 <tele_op_mode+0x32c>)
 8001900:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001904:	f7fe fe98 	bl	8000638 <__aeabi_dmul>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f7ff f942 	bl	8000b98 <__aeabi_d2iz>
 8001914:	4603      	mov	r3, r0
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fbc8 	bl	80010ac <percent2pwm>
 800191c:	6278      	str	r0, [r7, #36]	@ 0x24
		sst_pwm = percent2pwm(sst_ref * 100);
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	4b24      	ldr	r3, [pc, #144]	@ (80019b4 <tele_op_mode+0x32c>)
 8001924:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001928:	f7fe fe86 	bl	8000638 <__aeabi_dmul>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	f7ff f930 	bl	8000b98 <__aeabi_d2iz>
 8001938:	4603      	mov	r3, r0
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fbb6 	bl	80010ac <percent2pwm>
 8001940:	6238      	str	r0, [r7, #32]

		fdr_pwm =
				(fdr_pwm > PWM_UPPER_LIMIT) ? PWM_UPPER_LIMIT :
 8001942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001948:	da12      	bge.n	8001970 <tele_op_mode+0x2e8>
				(fdr_pwm < -PWM_UPPER_LIMIT) ? -PWM_UPPER_LIMIT :
 800194a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800194c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001950:	dd0c      	ble.n	800196c <tele_op_mode+0x2e4>
				(fdr_pwm > -PWM_LOWER_LIMIT && fdr_pwm < PWM_LOWER_LIMIT) ?
						0 : fdr_pwm;
 8001952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001954:	4a18      	ldr	r2, [pc, #96]	@ (80019b8 <tele_op_mode+0x330>)
 8001956:	4293      	cmp	r3, r2
 8001958:	db04      	blt.n	8001964 <tele_op_mode+0x2dc>
				(fdr_pwm > -PWM_LOWER_LIMIT && fdr_pwm < PWM_LOWER_LIMIT) ?
 800195a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800195c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001960:	4293      	cmp	r3, r2
 8001962:	dd01      	ble.n	8001968 <tele_op_mode+0x2e0>
						0 : fdr_pwm;
 8001964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001966:	e005      	b.n	8001974 <tele_op_mode+0x2ec>
 8001968:	2300      	movs	r3, #0
 800196a:	e003      	b.n	8001974 <tele_op_mode+0x2ec>
				(fdr_pwm < -PWM_UPPER_LIMIT) ? -PWM_UPPER_LIMIT :
 800196c:	4b13      	ldr	r3, [pc, #76]	@ (80019bc <tele_op_mode+0x334>)
 800196e:	e001      	b.n	8001974 <tele_op_mode+0x2ec>
				(fdr_pwm > PWM_UPPER_LIMIT) ? PWM_UPPER_LIMIT :
 8001970:	f64f 73ff 	movw	r3, #65535	@ 0xffff
		fdr_pwm =
 8001974:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sdr_pwm =
				(sdr_pwm > PWM_UPPER_LIMIT) ? PWM_UPPER_LIMIT :
 8001976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800197c:	da20      	bge.n	80019c0 <tele_op_mode+0x338>
				(sdr_pwm < -PWM_UPPER_LIMIT) ? -PWM_UPPER_LIMIT :
 800197e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001980:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001984:	dd0c      	ble.n	80019a0 <tele_op_mode+0x318>
				(sdr_pwm > -PWM_LOWER_LIMIT && sdr_pwm < PWM_LOWER_LIMIT) ?
						0 : sdr_pwm;
 8001986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001988:	4a0b      	ldr	r2, [pc, #44]	@ (80019b8 <tele_op_mode+0x330>)
 800198a:	4293      	cmp	r3, r2
 800198c:	db04      	blt.n	8001998 <tele_op_mode+0x310>
				(sdr_pwm > -PWM_LOWER_LIMIT && sdr_pwm < PWM_LOWER_LIMIT) ?
 800198e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001990:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001994:	4293      	cmp	r3, r2
 8001996:	dd01      	ble.n	800199c <tele_op_mode+0x314>
						0 : sdr_pwm;
 8001998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800199a:	e013      	b.n	80019c4 <tele_op_mode+0x33c>
 800199c:	2300      	movs	r3, #0
 800199e:	e011      	b.n	80019c4 <tele_op_mode+0x33c>
				(sdr_pwm < -PWM_UPPER_LIMIT) ? -PWM_UPPER_LIMIT :
 80019a0:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <tele_op_mode+0x334>)
 80019a2:	e00f      	b.n	80019c4 <tele_op_mode+0x33c>
 80019a4:	20000bbc 	.word	0x20000bbc
 80019a8:	200004d4 	.word	0x200004d4
 80019ac:	20000bb0 	.word	0x20000bb0
 80019b0:	fffffe00 	.word	0xfffffe00
 80019b4:	40590000 	.word	0x40590000
 80019b8:	ffffd8f1 	.word	0xffffd8f1
 80019bc:	ffff0001 	.word	0xffff0001
				(sdr_pwm > PWM_UPPER_LIMIT) ? PWM_UPPER_LIMIT :
 80019c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
		sdr_pwm =
 80019c4:	62bb      	str	r3, [r7, #40]	@ 0x28
		fst_pwm =
				(fst_pwm > PWM_UPPER_LIMIT) ? PWM_UPPER_LIMIT :
 80019c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019cc:	da12      	bge.n	80019f4 <tele_op_mode+0x36c>
				(fst_pwm < -PWM_UPPER_LIMIT) ? -PWM_UPPER_LIMIT :
 80019ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80019d4:	dd0c      	ble.n	80019f0 <tele_op_mode+0x368>
				(fst_pwm > -PWM_LOWER_LIMIT && fst_pwm < PWM_LOWER_LIMIT) ?
						0 : fst_pwm;
 80019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001a48 <tele_op_mode+0x3c0>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	db04      	blt.n	80019e8 <tele_op_mode+0x360>
				(fst_pwm > -PWM_LOWER_LIMIT && fst_pwm < PWM_LOWER_LIMIT) ?
 80019de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80019e4:	4293      	cmp	r3, r2
 80019e6:	dd01      	ble.n	80019ec <tele_op_mode+0x364>
						0 : fst_pwm;
 80019e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ea:	e005      	b.n	80019f8 <tele_op_mode+0x370>
 80019ec:	2300      	movs	r3, #0
 80019ee:	e003      	b.n	80019f8 <tele_op_mode+0x370>
				(fst_pwm < -PWM_UPPER_LIMIT) ? -PWM_UPPER_LIMIT :
 80019f0:	4b16      	ldr	r3, [pc, #88]	@ (8001a4c <tele_op_mode+0x3c4>)
 80019f2:	e001      	b.n	80019f8 <tele_op_mode+0x370>
				(fst_pwm > PWM_UPPER_LIMIT) ? PWM_UPPER_LIMIT :
 80019f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
		fst_pwm =
 80019f8:	627b      	str	r3, [r7, #36]	@ 0x24
		sst_pwm =
				(sst_pwm > PWM_UPPER_LIMIT) ? PWM_UPPER_LIMIT :
 80019fa:	6a3b      	ldr	r3, [r7, #32]
 80019fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a00:	da12      	bge.n	8001a28 <tele_op_mode+0x3a0>
				(sst_pwm < -PWM_UPPER_LIMIT) ? -PWM_UPPER_LIMIT :
 8001a02:	6a3b      	ldr	r3, [r7, #32]
 8001a04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001a08:	dd0c      	ble.n	8001a24 <tele_op_mode+0x39c>
				(sst_pwm > -PWM_LOWER_LIMIT && sst_pwm < PWM_LOWER_LIMIT) ?
						0 : sst_pwm;
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	4a0e      	ldr	r2, [pc, #56]	@ (8001a48 <tele_op_mode+0x3c0>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	db04      	blt.n	8001a1c <tele_op_mode+0x394>
				(sst_pwm > -PWM_LOWER_LIMIT && sst_pwm < PWM_LOWER_LIMIT) ?
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	dd01      	ble.n	8001a20 <tele_op_mode+0x398>
						0 : sst_pwm;
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	e005      	b.n	8001a2c <tele_op_mode+0x3a4>
 8001a20:	2300      	movs	r3, #0
 8001a22:	e003      	b.n	8001a2c <tele_op_mode+0x3a4>
				(sst_pwm < -PWM_UPPER_LIMIT) ? -PWM_UPPER_LIMIT :
 8001a24:	4b09      	ldr	r3, [pc, #36]	@ (8001a4c <tele_op_mode+0x3c4>)
 8001a26:	e001      	b.n	8001a2c <tele_op_mode+0x3a4>
				(sst_pwm > PWM_UPPER_LIMIT) ? PWM_UPPER_LIMIT :
 8001a28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
		sst_pwm =
 8001a2c:	623b      	str	r3, [r7, #32]

		fdr_set_pwm(fdr_pwm);
 8001a2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001a30:	f7ff fd82 	bl	8001538 <fdr_set_pwm>
		sdr_set_pwm(sdr_pwm);
 8001a34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001a36:	f7ff fdd3 	bl	80015e0 <sdr_set_pwm>
		fst_set_pwm(fst_pwm);
 8001a3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a3c:	f7ff fda6 	bl	800158c <fst_set_pwm>
		sst_set_pwm(sst_pwm);
 8001a40:	6a38      	ldr	r0, [r7, #32]
 8001a42:	f7ff fdf7 	bl	8001634 <sst_set_pwm>
		HAL_UART_Receive_DMA(&huart2, controller_buffer, 15);
 8001a46:	e647      	b.n	80016d8 <tele_op_mode+0x50>
 8001a48:	ffffd8f1 	.word	0xffffd8f1
 8001a4c:	ffff0001 	.word	0xffff0001

08001a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a54:	f001 fcb0 	bl	80033b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a58:	f000 f87c 	bl	8001b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a5c:	f000 fd42 	bl	80024e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a60:	f000 fd02 	bl	8002468 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001a64:	f000 fc7c 	bl	8002360 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001a68:	f000 fcce 	bl	8002408 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 8001a6c:	f000 fa1e 	bl	8001eac <MX_TIM4_Init>
  MX_TIM1_Init();
 8001a70:	f000 f910 	bl	8001c94 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a74:	f000 f96a 	bl	8001d4c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a78:	f000 f9c0 	bl	8001dfc <MX_TIM3_Init>
  MX_TIM5_Init();
 8001a7c:	f000 faae 	bl	8001fdc <MX_TIM5_Init>
  MX_TIM8_Init();
 8001a80:	f000 fb04 	bl	800208c <MX_TIM8_Init>
  MX_TIM9_Init();
 8001a84:	f000 fbaa 	bl	80021dc <MX_TIM9_Init>
  MX_USART2_UART_Init();
 8001a88:	f000 fc40 	bl	800230c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001a8c:	f000 fc92 	bl	80023b4 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8001a90:	f000 f8cc 	bl	8001c2c <MX_SPI2_Init>
  MX_TIM10_Init();
 8001a94:	f000 fbdc 	bl	8002250 <MX_TIM10_Init>
  MX_TIM12_Init();
 8001a98:	f000 fbfe 	bl	8002298 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4822      	ldr	r0, [pc, #136]	@ (8001b28 <main+0xd8>)
 8001aa0:	f003 fd4a 	bl	8005538 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001aa4:	2104      	movs	r1, #4
 8001aa6:	4820      	ldr	r0, [pc, #128]	@ (8001b28 <main+0xd8>)
 8001aa8:	f003 fd46 	bl	8005538 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001aac:	2108      	movs	r1, #8
 8001aae:	481e      	ldr	r0, [pc, #120]	@ (8001b28 <main+0xd8>)
 8001ab0:	f003 fd42 	bl	8005538 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001ab4:	210c      	movs	r1, #12
 8001ab6:	481c      	ldr	r0, [pc, #112]	@ (8001b28 <main+0xd8>)
 8001ab8:	f003 fd3e 	bl	8005538 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001abc:	2100      	movs	r1, #0
 8001abe:	481b      	ldr	r0, [pc, #108]	@ (8001b2c <main+0xdc>)
 8001ac0:	f003 fd3a 	bl	8005538 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001ac4:	2104      	movs	r1, #4
 8001ac6:	4819      	ldr	r0, [pc, #100]	@ (8001b2c <main+0xdc>)
 8001ac8:	f003 fd36 	bl	8005538 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001acc:	2108      	movs	r1, #8
 8001ace:	4817      	ldr	r0, [pc, #92]	@ (8001b2c <main+0xdc>)
 8001ad0:	f003 fd32 	bl	8005538 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001ad4:	210c      	movs	r1, #12
 8001ad6:	4815      	ldr	r0, [pc, #84]	@ (8001b2c <main+0xdc>)
 8001ad8:	f003 fd2e 	bl	8005538 <HAL_TIM_PWM_Start>

	HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001adc:	2018      	movs	r0, #24
 8001ade:	f001 fdf8 	bl	80036d2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ae2:	2019      	movs	r0, #25
 8001ae4:	f001 fdf5 	bl	80036d2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001ae8:	202b      	movs	r0, #43	@ 0x2b
 8001aea:	f001 fdf2 	bl	80036d2 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim9);
 8001aee:	4810      	ldr	r0, [pc, #64]	@ (8001b30 <main+0xe0>)
 8001af0:	f003 fc62 	bl	80053b8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim12);
 8001af4:	480f      	ldr	r0, [pc, #60]	@ (8001b34 <main+0xe4>)
 8001af6:	f003 fc5f 	bl	80053b8 <HAL_TIM_Base_Start_IT>

	MOTOR_Init(&fdr);
 8001afa:	480f      	ldr	r0, [pc, #60]	@ (8001b38 <main+0xe8>)
 8001afc:	f7ff faec 	bl	80010d8 <MOTOR_Init>
	MOTOR_Init(&fst);
 8001b00:	480e      	ldr	r0, [pc, #56]	@ (8001b3c <main+0xec>)
 8001b02:	f7ff fae9 	bl	80010d8 <MOTOR_Init>
	MOTOR_Init(&sdr);
 8001b06:	480e      	ldr	r0, [pc, #56]	@ (8001b40 <main+0xf0>)
 8001b08:	f7ff fae6 	bl	80010d8 <MOTOR_Init>
	MOTOR_Init(&sst);
 8001b0c:	480d      	ldr	r0, [pc, #52]	@ (8001b44 <main+0xf4>)
 8001b0e:	f7ff fae3 	bl	80010d8 <MOTOR_Init>
	Controller_Init(&ps4);
 8001b12:	480d      	ldr	r0, [pc, #52]	@ (8001b48 <main+0xf8>)
 8001b14:	f7ff fafb 	bl	800110e <Controller_Init>

	HAL_UART_Receive_DMA(&huart6, odometry_buffer, 25);
 8001b18:	2219      	movs	r2, #25
 8001b1a:	490c      	ldr	r1, [pc, #48]	@ (8001b4c <main+0xfc>)
 8001b1c:	480c      	ldr	r0, [pc, #48]	@ (8001b50 <main+0x100>)
 8001b1e:	f004 fdf7 	bl	8006710 <HAL_UART_Receive_DMA>
//		HAL_Delay(delay);
//		lock_heading(ref);
//		tele_op_mode();
//		if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7)) {
//			//TELEOP
			tele_op_mode();
 8001b22:	f7ff fdb1 	bl	8001688 <tele_op_mode>
 8001b26:	e7fc      	b.n	8001b22 <main+0xd2>
 8001b28:	20000324 	.word	0x20000324
 8001b2c:	200003b4 	.word	0x200003b4
 8001b30:	200003fc 	.word	0x200003fc
 8001b34:	2000048c 	.word	0x2000048c
 8001b38:	20000c04 	.word	0x20000c04
 8001b3c:	20000c18 	.word	0x20000c18
 8001b40:	20000c2c 	.word	0x20000c2c
 8001b44:	20000c40 	.word	0x20000c40
 8001b48:	20000bb0 	.word	0x20000bb0
 8001b4c:	20000bcc 	.word	0x20000bcc
 8001b50:	20000564 	.word	0x20000564

08001b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b094      	sub	sp, #80	@ 0x50
 8001b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b5a:	f107 031c 	add.w	r3, r7, #28
 8001b5e:	2234      	movs	r2, #52	@ 0x34
 8001b60:	2100      	movs	r1, #0
 8001b62:	4618      	mov	r0, r3
 8001b64:	f007 fd6d 	bl	8009642 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b68:	f107 0308 	add.w	r3, r7, #8
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b78:	2300      	movs	r3, #0
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	4b29      	ldr	r3, [pc, #164]	@ (8001c24 <SystemClock_Config+0xd0>)
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b80:	4a28      	ldr	r2, [pc, #160]	@ (8001c24 <SystemClock_Config+0xd0>)
 8001b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b86:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b88:	4b26      	ldr	r3, [pc, #152]	@ (8001c24 <SystemClock_Config+0xd0>)
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b94:	2300      	movs	r3, #0
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	4b23      	ldr	r3, [pc, #140]	@ (8001c28 <SystemClock_Config+0xd4>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a22      	ldr	r2, [pc, #136]	@ (8001c28 <SystemClock_Config+0xd4>)
 8001b9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	4b20      	ldr	r3, [pc, #128]	@ (8001c28 <SystemClock_Config+0xd4>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bac:	603b      	str	r3, [r7, #0]
 8001bae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bb8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bbe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bc4:	2308      	movs	r3, #8
 8001bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8001bc8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001bcc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001bce:	2304      	movs	r3, #4
 8001bd0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001bd2:	2308      	movs	r3, #8
 8001bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bda:	f107 031c 	add.w	r3, r7, #28
 8001bde:	4618      	mov	r0, r3
 8001be0:	f003 f88e 	bl	8004d00 <HAL_RCC_OscConfig>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001bea:	f000 fdb3 	bl	8002754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bee:	230f      	movs	r3, #15
 8001bf0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c04:	f107 0308 	add.w	r3, r7, #8
 8001c08:	2103      	movs	r1, #3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f002 fc8a 	bl	8004524 <HAL_RCC_ClockConfig>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001c16:	f000 fd9d 	bl	8002754 <Error_Handler>
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	3750      	adds	r7, #80	@ 0x50
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40007000 	.word	0x40007000

08001c2c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c30:	4b16      	ldr	r3, [pc, #88]	@ (8001c8c <MX_SPI2_Init+0x60>)
 8001c32:	4a17      	ldr	r2, [pc, #92]	@ (8001c90 <MX_SPI2_Init+0x64>)
 8001c34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8001c36:	4b15      	ldr	r3, [pc, #84]	@ (8001c8c <MX_SPI2_Init+0x60>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001c3c:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <MX_SPI2_Init+0x60>)
 8001c3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c44:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <MX_SPI2_Init+0x60>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c4a:	4b10      	ldr	r3, [pc, #64]	@ (8001c8c <MX_SPI2_Init+0x60>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c50:	4b0e      	ldr	r3, [pc, #56]	@ (8001c8c <MX_SPI2_Init+0x60>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c56:	4b0d      	ldr	r3, [pc, #52]	@ (8001c8c <MX_SPI2_Init+0x60>)
 8001c58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c5c:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c8c <MX_SPI2_Init+0x60>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c64:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <MX_SPI2_Init+0x60>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c6a:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <MX_SPI2_Init+0x60>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001c70:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <MX_SPI2_Init+0x60>)
 8001c72:	220a      	movs	r2, #10
 8001c74:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c76:	4805      	ldr	r0, [pc, #20]	@ (8001c8c <MX_SPI2_Init+0x60>)
 8001c78:	f003 fac6 	bl	8005208 <HAL_SPI_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_SPI2_Init+0x5a>
  {
    Error_Handler();
 8001c82:	f000 fd67 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200001f4 	.word	0x200001f4
 8001c90:	40003800 	.word	0x40003800

08001c94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08c      	sub	sp, #48	@ 0x30
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	2224      	movs	r2, #36	@ 0x24
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f007 fccd 	bl	8009642 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cb0:	4b24      	ldr	r3, [pc, #144]	@ (8001d44 <MX_TIM1_Init+0xb0>)
 8001cb2:	4a25      	ldr	r2, [pc, #148]	@ (8001d48 <MX_TIM1_Init+0xb4>)
 8001cb4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001cb6:	4b23      	ldr	r3, [pc, #140]	@ (8001d44 <MX_TIM1_Init+0xb0>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cbc:	4b21      	ldr	r3, [pc, #132]	@ (8001d44 <MX_TIM1_Init+0xb0>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001cc2:	4b20      	ldr	r3, [pc, #128]	@ (8001d44 <MX_TIM1_Init+0xb0>)
 8001cc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cc8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cca:	4b1e      	ldr	r3, [pc, #120]	@ (8001d44 <MX_TIM1_Init+0xb0>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d44 <MX_TIM1_Init+0xb0>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d44 <MX_TIM1_Init+0xb0>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	4619      	mov	r1, r3
 8001d06:	480f      	ldr	r0, [pc, #60]	@ (8001d44 <MX_TIM1_Init+0xb0>)
 8001d08:	f003 fcde 	bl	80056c8 <HAL_TIM_Encoder_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001d12:	f000 fd1f 	bl	8002754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d16:	2300      	movs	r3, #0
 8001d18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	4619      	mov	r1, r3
 8001d22:	4808      	ldr	r0, [pc, #32]	@ (8001d44 <MX_TIM1_Init+0xb0>)
 8001d24:	f004 fbc2 	bl	80064ac <HAL_TIMEx_MasterConfigSynchronization>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001d2e:	f000 fd11 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001d32:	213c      	movs	r1, #60	@ 0x3c
 8001d34:	4803      	ldr	r0, [pc, #12]	@ (8001d44 <MX_TIM1_Init+0xb0>)
 8001d36:	f003 fd6d 	bl	8005814 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM1_Init 2 */

}
 8001d3a:	bf00      	nop
 8001d3c:	3730      	adds	r7, #48	@ 0x30
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	2000024c 	.word	0x2000024c
 8001d48:	40010000 	.word	0x40010000

08001d4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08c      	sub	sp, #48	@ 0x30
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	2224      	movs	r2, #36	@ 0x24
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f007 fc71 	bl	8009642 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d60:	1d3b      	adds	r3, r7, #4
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d68:	4b23      	ldr	r3, [pc, #140]	@ (8001df8 <MX_TIM2_Init+0xac>)
 8001d6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d70:	4b21      	ldr	r3, [pc, #132]	@ (8001df8 <MX_TIM2_Init+0xac>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d76:	4b20      	ldr	r3, [pc, #128]	@ (8001df8 <MX_TIM2_Init+0xac>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001d7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001df8 <MX_TIM2_Init+0xac>)
 8001d7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d84:	4b1c      	ldr	r3, [pc, #112]	@ (8001df8 <MX_TIM2_Init+0xac>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001df8 <MX_TIM2_Init+0xac>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d90:	2303      	movs	r3, #3
 8001d92:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d94:	2300      	movs	r3, #0
 8001d96:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001da4:	2300      	movs	r3, #0
 8001da6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001da8:	2301      	movs	r3, #1
 8001daa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001dac:	2300      	movs	r3, #0
 8001dae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	4619      	mov	r1, r3
 8001dba:	480f      	ldr	r0, [pc, #60]	@ (8001df8 <MX_TIM2_Init+0xac>)
 8001dbc:	f003 fc84 	bl	80056c8 <HAL_TIM_Encoder_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001dc6:	f000 fcc5 	bl	8002754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4808      	ldr	r0, [pc, #32]	@ (8001df8 <MX_TIM2_Init+0xac>)
 8001dd8:	f004 fb68 	bl	80064ac <HAL_TIMEx_MasterConfigSynchronization>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001de2:	f000 fcb7 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001de6:	213c      	movs	r1, #60	@ 0x3c
 8001de8:	4803      	ldr	r0, [pc, #12]	@ (8001df8 <MX_TIM2_Init+0xac>)
 8001dea:	f003 fd13 	bl	8005814 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM2_Init 2 */

}
 8001dee:	bf00      	nop
 8001df0:	3730      	adds	r7, #48	@ 0x30
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000294 	.word	0x20000294

08001dfc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08c      	sub	sp, #48	@ 0x30
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e02:	f107 030c 	add.w	r3, r7, #12
 8001e06:	2224      	movs	r2, #36	@ 0x24
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f007 fc19 	bl	8009642 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e10:	1d3b      	adds	r3, r7, #4
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e18:	4b22      	ldr	r3, [pc, #136]	@ (8001ea4 <MX_TIM3_Init+0xa8>)
 8001e1a:	4a23      	ldr	r2, [pc, #140]	@ (8001ea8 <MX_TIM3_Init+0xac>)
 8001e1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e1e:	4b21      	ldr	r3, [pc, #132]	@ (8001ea4 <MX_TIM3_Init+0xa8>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e24:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea4 <MX_TIM3_Init+0xa8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea4 <MX_TIM3_Init+0xa8>)
 8001e2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e32:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea4 <MX_TIM3_Init+0xa8>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e38:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea4 <MX_TIM3_Init+0xa8>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e46:	2301      	movs	r3, #1
 8001e48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e52:	2300      	movs	r3, #0
 8001e54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e56:	2301      	movs	r3, #1
 8001e58:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e62:	f107 030c 	add.w	r3, r7, #12
 8001e66:	4619      	mov	r1, r3
 8001e68:	480e      	ldr	r0, [pc, #56]	@ (8001ea4 <MX_TIM3_Init+0xa8>)
 8001e6a:	f003 fc2d 	bl	80056c8 <HAL_TIM_Encoder_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001e74:	f000 fc6e 	bl	8002754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	4619      	mov	r1, r3
 8001e84:	4807      	ldr	r0, [pc, #28]	@ (8001ea4 <MX_TIM3_Init+0xa8>)
 8001e86:	f004 fb11 	bl	80064ac <HAL_TIMEx_MasterConfigSynchronization>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001e90:	f000 fc60 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001e94:	213c      	movs	r1, #60	@ 0x3c
 8001e96:	4803      	ldr	r0, [pc, #12]	@ (8001ea4 <MX_TIM3_Init+0xa8>)
 8001e98:	f003 fcbc 	bl	8005814 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM3_Init 2 */

}
 8001e9c:	bf00      	nop
 8001e9e:	3730      	adds	r7, #48	@ 0x30
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	200002dc 	.word	0x200002dc
 8001ea8:	40000400 	.word	0x40000400

08001eac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08e      	sub	sp, #56	@ 0x38
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec0:	f107 0320 	add.w	r3, r7, #32
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
 8001ed8:	615a      	str	r2, [r3, #20]
 8001eda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001edc:	4b3d      	ldr	r3, [pc, #244]	@ (8001fd4 <MX_TIM4_Init+0x128>)
 8001ede:	4a3e      	ldr	r2, [pc, #248]	@ (8001fd8 <MX_TIM4_Init+0x12c>)
 8001ee0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ee2:	4b3c      	ldr	r3, [pc, #240]	@ (8001fd4 <MX_TIM4_Init+0x128>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee8:	4b3a      	ldr	r3, [pc, #232]	@ (8001fd4 <MX_TIM4_Init+0x128>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001eee:	4b39      	ldr	r3, [pc, #228]	@ (8001fd4 <MX_TIM4_Init+0x128>)
 8001ef0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ef4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef6:	4b37      	ldr	r3, [pc, #220]	@ (8001fd4 <MX_TIM4_Init+0x128>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001efc:	4b35      	ldr	r3, [pc, #212]	@ (8001fd4 <MX_TIM4_Init+0x128>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f02:	4834      	ldr	r0, [pc, #208]	@ (8001fd4 <MX_TIM4_Init+0x128>)
 8001f04:	f003 fa09 	bl	800531a <HAL_TIM_Base_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001f0e:	f000 fc21 	bl	8002754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f16:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f18:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	482d      	ldr	r0, [pc, #180]	@ (8001fd4 <MX_TIM4_Init+0x128>)
 8001f20:	f003 feb8 	bl	8005c94 <HAL_TIM_ConfigClockSource>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001f2a:	f000 fc13 	bl	8002754 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f2e:	4829      	ldr	r0, [pc, #164]	@ (8001fd4 <MX_TIM4_Init+0x128>)
 8001f30:	f003 fab2 	bl	8005498 <HAL_TIM_PWM_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001f3a:	f000 fc0b 	bl	8002754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f46:	f107 0320 	add.w	r3, r7, #32
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4821      	ldr	r0, [pc, #132]	@ (8001fd4 <MX_TIM4_Init+0x128>)
 8001f4e:	f004 faad 	bl	80064ac <HAL_TIMEx_MasterConfigSynchronization>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001f58:	f000 fbfc 	bl	8002754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f5c:	2360      	movs	r3, #96	@ 0x60
 8001f5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	2200      	movs	r2, #0
 8001f70:	4619      	mov	r1, r3
 8001f72:	4818      	ldr	r0, [pc, #96]	@ (8001fd4 <MX_TIM4_Init+0x128>)
 8001f74:	f003 fdcc 	bl	8005b10 <HAL_TIM_PWM_ConfigChannel>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001f7e:	f000 fbe9 	bl	8002754 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f82:	1d3b      	adds	r3, r7, #4
 8001f84:	2204      	movs	r2, #4
 8001f86:	4619      	mov	r1, r3
 8001f88:	4812      	ldr	r0, [pc, #72]	@ (8001fd4 <MX_TIM4_Init+0x128>)
 8001f8a:	f003 fdc1 	bl	8005b10 <HAL_TIM_PWM_ConfigChannel>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001f94:	f000 fbde 	bl	8002754 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	2208      	movs	r2, #8
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	480d      	ldr	r0, [pc, #52]	@ (8001fd4 <MX_TIM4_Init+0x128>)
 8001fa0:	f003 fdb6 	bl	8005b10 <HAL_TIM_PWM_ConfigChannel>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001faa:	f000 fbd3 	bl	8002754 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	220c      	movs	r2, #12
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4807      	ldr	r0, [pc, #28]	@ (8001fd4 <MX_TIM4_Init+0x128>)
 8001fb6:	f003 fdab 	bl	8005b10 <HAL_TIM_PWM_ConfigChannel>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001fc0:	f000 fbc8 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001fc4:	4803      	ldr	r0, [pc, #12]	@ (8001fd4 <MX_TIM4_Init+0x128>)
 8001fc6:	f000 fe13 	bl	8002bf0 <HAL_TIM_MspPostInit>

}
 8001fca:	bf00      	nop
 8001fcc:	3738      	adds	r7, #56	@ 0x38
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000324 	.word	0x20000324
 8001fd8:	40000800 	.word	0x40000800

08001fdc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08c      	sub	sp, #48	@ 0x30
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fe2:	f107 030c 	add.w	r3, r7, #12
 8001fe6:	2224      	movs	r2, #36	@ 0x24
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4618      	mov	r0, r3
 8001fec:	f007 fb29 	bl	8009642 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ff8:	4b22      	ldr	r3, [pc, #136]	@ (8002084 <MX_TIM5_Init+0xa8>)
 8001ffa:	4a23      	ldr	r2, [pc, #140]	@ (8002088 <MX_TIM5_Init+0xac>)
 8001ffc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001ffe:	4b21      	ldr	r3, [pc, #132]	@ (8002084 <MX_TIM5_Init+0xa8>)
 8002000:	2200      	movs	r2, #0
 8002002:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002004:	4b1f      	ldr	r3, [pc, #124]	@ (8002084 <MX_TIM5_Init+0xa8>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800200a:	4b1e      	ldr	r3, [pc, #120]	@ (8002084 <MX_TIM5_Init+0xa8>)
 800200c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002010:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002012:	4b1c      	ldr	r3, [pc, #112]	@ (8002084 <MX_TIM5_Init+0xa8>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002018:	4b1a      	ldr	r3, [pc, #104]	@ (8002084 <MX_TIM5_Init+0xa8>)
 800201a:	2200      	movs	r2, #0
 800201c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800201e:	2303      	movs	r3, #3
 8002020:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002026:	2301      	movs	r3, #1
 8002028:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800202a:	2300      	movs	r3, #0
 800202c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002036:	2301      	movs	r3, #1
 8002038:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800203a:	2300      	movs	r3, #0
 800203c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002042:	f107 030c 	add.w	r3, r7, #12
 8002046:	4619      	mov	r1, r3
 8002048:	480e      	ldr	r0, [pc, #56]	@ (8002084 <MX_TIM5_Init+0xa8>)
 800204a:	f003 fb3d 	bl	80056c8 <HAL_TIM_Encoder_Init>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002054:	f000 fb7e 	bl	8002754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002058:	2300      	movs	r3, #0
 800205a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	4619      	mov	r1, r3
 8002064:	4807      	ldr	r0, [pc, #28]	@ (8002084 <MX_TIM5_Init+0xa8>)
 8002066:	f004 fa21 	bl	80064ac <HAL_TIMEx_MasterConfigSynchronization>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002070:	f000 fb70 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8002074:	213c      	movs	r1, #60	@ 0x3c
 8002076:	4803      	ldr	r0, [pc, #12]	@ (8002084 <MX_TIM5_Init+0xa8>)
 8002078:	f003 fbcc 	bl	8005814 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM5_Init 2 */

}
 800207c:	bf00      	nop
 800207e:	3730      	adds	r7, #48	@ 0x30
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	2000036c 	.word	0x2000036c
 8002088:	40000c00 	.word	0x40000c00

0800208c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b092      	sub	sp, #72	@ 0x48
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002092:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800209c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
 80020ac:	615a      	str	r2, [r3, #20]
 80020ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020b0:	1d3b      	adds	r3, r7, #4
 80020b2:	2220      	movs	r2, #32
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f007 fac3 	bl	8009642 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80020bc:	4b45      	ldr	r3, [pc, #276]	@ (80021d4 <MX_TIM8_Init+0x148>)
 80020be:	4a46      	ldr	r2, [pc, #280]	@ (80021d8 <MX_TIM8_Init+0x14c>)
 80020c0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80020c2:	4b44      	ldr	r3, [pc, #272]	@ (80021d4 <MX_TIM8_Init+0x148>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c8:	4b42      	ldr	r3, [pc, #264]	@ (80021d4 <MX_TIM8_Init+0x148>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80020ce:	4b41      	ldr	r3, [pc, #260]	@ (80021d4 <MX_TIM8_Init+0x148>)
 80020d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020d4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d6:	4b3f      	ldr	r3, [pc, #252]	@ (80021d4 <MX_TIM8_Init+0x148>)
 80020d8:	2200      	movs	r2, #0
 80020da:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80020dc:	4b3d      	ldr	r3, [pc, #244]	@ (80021d4 <MX_TIM8_Init+0x148>)
 80020de:	2200      	movs	r2, #0
 80020e0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e2:	4b3c      	ldr	r3, [pc, #240]	@ (80021d4 <MX_TIM8_Init+0x148>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80020e8:	483a      	ldr	r0, [pc, #232]	@ (80021d4 <MX_TIM8_Init+0x148>)
 80020ea:	f003 f9d5 	bl	8005498 <HAL_TIM_PWM_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80020f4:	f000 fb2e 	bl	8002754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f8:	2300      	movs	r3, #0
 80020fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002100:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002104:	4619      	mov	r1, r3
 8002106:	4833      	ldr	r0, [pc, #204]	@ (80021d4 <MX_TIM8_Init+0x148>)
 8002108:	f004 f9d0 	bl	80064ac <HAL_TIMEx_MasterConfigSynchronization>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002112:	f000 fb1f 	bl	8002754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002116:	2360      	movs	r3, #96	@ 0x60
 8002118:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800211e:	2300      	movs	r3, #0
 8002120:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002122:	2300      	movs	r3, #0
 8002124:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800212a:	2300      	movs	r3, #0
 800212c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800212e:	2300      	movs	r3, #0
 8002130:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002132:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002136:	2200      	movs	r2, #0
 8002138:	4619      	mov	r1, r3
 800213a:	4826      	ldr	r0, [pc, #152]	@ (80021d4 <MX_TIM8_Init+0x148>)
 800213c:	f003 fce8 	bl	8005b10 <HAL_TIM_PWM_ConfigChannel>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002146:	f000 fb05 	bl	8002754 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800214a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800214e:	2204      	movs	r2, #4
 8002150:	4619      	mov	r1, r3
 8002152:	4820      	ldr	r0, [pc, #128]	@ (80021d4 <MX_TIM8_Init+0x148>)
 8002154:	f003 fcdc 	bl	8005b10 <HAL_TIM_PWM_ConfigChannel>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800215e:	f000 faf9 	bl	8002754 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002166:	2208      	movs	r2, #8
 8002168:	4619      	mov	r1, r3
 800216a:	481a      	ldr	r0, [pc, #104]	@ (80021d4 <MX_TIM8_Init+0x148>)
 800216c:	f003 fcd0 	bl	8005b10 <HAL_TIM_PWM_ConfigChannel>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8002176:	f000 faed 	bl	8002754 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800217a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800217e:	220c      	movs	r2, #12
 8002180:	4619      	mov	r1, r3
 8002182:	4814      	ldr	r0, [pc, #80]	@ (80021d4 <MX_TIM8_Init+0x148>)
 8002184:	f003 fcc4 	bl	8005b10 <HAL_TIM_PWM_ConfigChannel>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 800218e:	f000 fae1 	bl	8002754 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002192:	2300      	movs	r3, #0
 8002194:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80021b0:	1d3b      	adds	r3, r7, #4
 80021b2:	4619      	mov	r1, r3
 80021b4:	4807      	ldr	r0, [pc, #28]	@ (80021d4 <MX_TIM8_Init+0x148>)
 80021b6:	f004 f9f5 	bl	80065a4 <HAL_TIMEx_ConfigBreakDeadTime>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 80021c0:	f000 fac8 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80021c4:	4803      	ldr	r0, [pc, #12]	@ (80021d4 <MX_TIM8_Init+0x148>)
 80021c6:	f000 fd13 	bl	8002bf0 <HAL_TIM_MspPostInit>

}
 80021ca:	bf00      	nop
 80021cc:	3748      	adds	r7, #72	@ 0x48
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200003b4 	.word	0x200003b4
 80021d8:	40010400 	.word	0x40010400

080021dc <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021e2:	463b      	mov	r3, r7
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80021ee:	4b16      	ldr	r3, [pc, #88]	@ (8002248 <MX_TIM9_Init+0x6c>)
 80021f0:	4a16      	ldr	r2, [pc, #88]	@ (800224c <MX_TIM9_Init+0x70>)
 80021f2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 146;
 80021f4:	4b14      	ldr	r3, [pc, #80]	@ (8002248 <MX_TIM9_Init+0x6c>)
 80021f6:	2292      	movs	r2, #146	@ 0x92
 80021f8:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fa:	4b13      	ldr	r3, [pc, #76]	@ (8002248 <MX_TIM9_Init+0x6c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8002200:	4b11      	ldr	r3, [pc, #68]	@ (8002248 <MX_TIM9_Init+0x6c>)
 8002202:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002206:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002208:	4b0f      	ldr	r3, [pc, #60]	@ (8002248 <MX_TIM9_Init+0x6c>)
 800220a:	2200      	movs	r2, #0
 800220c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800220e:	4b0e      	ldr	r3, [pc, #56]	@ (8002248 <MX_TIM9_Init+0x6c>)
 8002210:	2200      	movs	r2, #0
 8002212:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002214:	480c      	ldr	r0, [pc, #48]	@ (8002248 <MX_TIM9_Init+0x6c>)
 8002216:	f003 f880 	bl	800531a <HAL_TIM_Base_Init>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8002220:	f000 fa98 	bl	8002754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002224:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002228:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800222a:	463b      	mov	r3, r7
 800222c:	4619      	mov	r1, r3
 800222e:	4806      	ldr	r0, [pc, #24]	@ (8002248 <MX_TIM9_Init+0x6c>)
 8002230:	f003 fd30 	bl	8005c94 <HAL_TIM_ConfigClockSource>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800223a:	f000 fa8b 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	200003fc 	.word	0x200003fc
 800224c:	40014000 	.word	0x40014000

08002250 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002254:	4b0e      	ldr	r3, [pc, #56]	@ (8002290 <MX_TIM10_Init+0x40>)
 8002256:	4a0f      	ldr	r2, [pc, #60]	@ (8002294 <MX_TIM10_Init+0x44>)
 8002258:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1500;
 800225a:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <MX_TIM10_Init+0x40>)
 800225c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002260:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002262:	4b0b      	ldr	r3, [pc, #44]	@ (8002290 <MX_TIM10_Init+0x40>)
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002268:	4b09      	ldr	r3, [pc, #36]	@ (8002290 <MX_TIM10_Init+0x40>)
 800226a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800226e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002270:	4b07      	ldr	r3, [pc, #28]	@ (8002290 <MX_TIM10_Init+0x40>)
 8002272:	2200      	movs	r2, #0
 8002274:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002276:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <MX_TIM10_Init+0x40>)
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800227c:	4804      	ldr	r0, [pc, #16]	@ (8002290 <MX_TIM10_Init+0x40>)
 800227e:	f003 f84c 	bl	800531a <HAL_TIM_Base_Init>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002288:	f000 fa64 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000444 	.word	0x20000444
 8002294:	40014400 	.word	0x40014400

08002298 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800229e:	463b      	mov	r3, r7
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80022aa:	4b16      	ldr	r3, [pc, #88]	@ (8002304 <MX_TIM12_Init+0x6c>)
 80022ac:	4a16      	ldr	r2, [pc, #88]	@ (8002308 <MX_TIM12_Init+0x70>)
 80022ae:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1500;
 80022b0:	4b14      	ldr	r3, [pc, #80]	@ (8002304 <MX_TIM12_Init+0x6c>)
 80022b2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80022b6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b8:	4b12      	ldr	r3, [pc, #72]	@ (8002304 <MX_TIM12_Init+0x6c>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80022be:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <MX_TIM12_Init+0x6c>)
 80022c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022c4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002304 <MX_TIM12_Init+0x6c>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002304 <MX_TIM12_Init+0x6c>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80022d2:	480c      	ldr	r0, [pc, #48]	@ (8002304 <MX_TIM12_Init+0x6c>)
 80022d4:	f003 f821 	bl	800531a <HAL_TIM_Base_Init>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 80022de:	f000 fa39 	bl	8002754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022e6:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80022e8:	463b      	mov	r3, r7
 80022ea:	4619      	mov	r1, r3
 80022ec:	4805      	ldr	r0, [pc, #20]	@ (8002304 <MX_TIM12_Init+0x6c>)
 80022ee:	f003 fcd1 	bl	8005c94 <HAL_TIM_ConfigClockSource>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 80022f8:	f000 fa2c 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80022fc:	bf00      	nop
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	2000048c 	.word	0x2000048c
 8002308:	40001800 	.word	0x40001800

0800230c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002310:	4b11      	ldr	r3, [pc, #68]	@ (8002358 <MX_USART2_UART_Init+0x4c>)
 8002312:	4a12      	ldr	r2, [pc, #72]	@ (800235c <MX_USART2_UART_Init+0x50>)
 8002314:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002316:	4b10      	ldr	r3, [pc, #64]	@ (8002358 <MX_USART2_UART_Init+0x4c>)
 8002318:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800231c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800231e:	4b0e      	ldr	r3, [pc, #56]	@ (8002358 <MX_USART2_UART_Init+0x4c>)
 8002320:	2200      	movs	r2, #0
 8002322:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002324:	4b0c      	ldr	r3, [pc, #48]	@ (8002358 <MX_USART2_UART_Init+0x4c>)
 8002326:	2200      	movs	r2, #0
 8002328:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800232a:	4b0b      	ldr	r3, [pc, #44]	@ (8002358 <MX_USART2_UART_Init+0x4c>)
 800232c:	2200      	movs	r2, #0
 800232e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002330:	4b09      	ldr	r3, [pc, #36]	@ (8002358 <MX_USART2_UART_Init+0x4c>)
 8002332:	220c      	movs	r2, #12
 8002334:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002336:	4b08      	ldr	r3, [pc, #32]	@ (8002358 <MX_USART2_UART_Init+0x4c>)
 8002338:	2200      	movs	r2, #0
 800233a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800233c:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <MX_USART2_UART_Init+0x4c>)
 800233e:	2200      	movs	r2, #0
 8002340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002342:	4805      	ldr	r0, [pc, #20]	@ (8002358 <MX_USART2_UART_Init+0x4c>)
 8002344:	f004 f994 	bl	8006670 <HAL_UART_Init>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800234e:	f000 fa01 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	200004d4 	.word	0x200004d4
 800235c:	40004400 	.word	0x40004400

08002360 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002364:	4b11      	ldr	r3, [pc, #68]	@ (80023ac <MX_USART3_UART_Init+0x4c>)
 8002366:	4a12      	ldr	r2, [pc, #72]	@ (80023b0 <MX_USART3_UART_Init+0x50>)
 8002368:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800236a:	4b10      	ldr	r3, [pc, #64]	@ (80023ac <MX_USART3_UART_Init+0x4c>)
 800236c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002370:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002372:	4b0e      	ldr	r3, [pc, #56]	@ (80023ac <MX_USART3_UART_Init+0x4c>)
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002378:	4b0c      	ldr	r3, [pc, #48]	@ (80023ac <MX_USART3_UART_Init+0x4c>)
 800237a:	2200      	movs	r2, #0
 800237c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800237e:	4b0b      	ldr	r3, [pc, #44]	@ (80023ac <MX_USART3_UART_Init+0x4c>)
 8002380:	2200      	movs	r2, #0
 8002382:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002384:	4b09      	ldr	r3, [pc, #36]	@ (80023ac <MX_USART3_UART_Init+0x4c>)
 8002386:	220c      	movs	r2, #12
 8002388:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800238a:	4b08      	ldr	r3, [pc, #32]	@ (80023ac <MX_USART3_UART_Init+0x4c>)
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002390:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <MX_USART3_UART_Init+0x4c>)
 8002392:	2200      	movs	r2, #0
 8002394:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002396:	4805      	ldr	r0, [pc, #20]	@ (80023ac <MX_USART3_UART_Init+0x4c>)
 8002398:	f004 f96a 	bl	8006670 <HAL_UART_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80023a2:	f000 f9d7 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	2000051c 	.word	0x2000051c
 80023b0:	40004800 	.word	0x40004800

080023b4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80023b8:	4b11      	ldr	r3, [pc, #68]	@ (8002400 <MX_USART6_UART_Init+0x4c>)
 80023ba:	4a12      	ldr	r2, [pc, #72]	@ (8002404 <MX_USART6_UART_Init+0x50>)
 80023bc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80023be:	4b10      	ldr	r3, [pc, #64]	@ (8002400 <MX_USART6_UART_Init+0x4c>)
 80023c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023c4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80023c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002400 <MX_USART6_UART_Init+0x4c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80023cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002400 <MX_USART6_UART_Init+0x4c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80023d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <MX_USART6_UART_Init+0x4c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80023d8:	4b09      	ldr	r3, [pc, #36]	@ (8002400 <MX_USART6_UART_Init+0x4c>)
 80023da:	220c      	movs	r2, #12
 80023dc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023de:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <MX_USART6_UART_Init+0x4c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80023e4:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <MX_USART6_UART_Init+0x4c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80023ea:	4805      	ldr	r0, [pc, #20]	@ (8002400 <MX_USART6_UART_Init+0x4c>)
 80023ec:	f004 f940 	bl	8006670 <HAL_UART_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80023f6:	f000 f9ad 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000564 	.word	0x20000564
 8002404:	40011400 	.word	0x40011400

08002408 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800240c:	4b15      	ldr	r3, [pc, #84]	@ (8002464 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800240e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002412:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002414:	4b13      	ldr	r3, [pc, #76]	@ (8002464 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002416:	2206      	movs	r2, #6
 8002418:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800241a:	4b12      	ldr	r3, [pc, #72]	@ (8002464 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800241c:	2202      	movs	r2, #2
 800241e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002420:	4b10      	ldr	r3, [pc, #64]	@ (8002464 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002422:	2200      	movs	r2, #0
 8002424:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002426:	4b0f      	ldr	r3, [pc, #60]	@ (8002464 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002428:	2202      	movs	r2, #2
 800242a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800242c:	4b0d      	ldr	r3, [pc, #52]	@ (8002464 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800242e:	2201      	movs	r2, #1
 8002430:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002432:	4b0c      	ldr	r3, [pc, #48]	@ (8002464 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002434:	2200      	movs	r2, #0
 8002436:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002438:	4b0a      	ldr	r3, [pc, #40]	@ (8002464 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800243a:	2200      	movs	r2, #0
 800243c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800243e:	4b09      	ldr	r3, [pc, #36]	@ (8002464 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002440:	2201      	movs	r2, #1
 8002442:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002444:	4b07      	ldr	r3, [pc, #28]	@ (8002464 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002446:	2201      	movs	r2, #1
 8002448:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800244a:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800244c:	2200      	movs	r2, #0
 800244e:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002450:	4804      	ldr	r0, [pc, #16]	@ (8002464 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002452:	f001 ff2c 	bl	80042ae <HAL_PCD_Init>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 800245c:	f000 f97a 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002460:	bf00      	nop
 8002462:	bd80      	pop	{r7, pc}
 8002464:	200006cc 	.word	0x200006cc

08002468 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	607b      	str	r3, [r7, #4]
 8002472:	4b1b      	ldr	r3, [pc, #108]	@ (80024e0 <MX_DMA_Init+0x78>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	4a1a      	ldr	r2, [pc, #104]	@ (80024e0 <MX_DMA_Init+0x78>)
 8002478:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800247c:	6313      	str	r3, [r2, #48]	@ 0x30
 800247e:	4b18      	ldr	r3, [pc, #96]	@ (80024e0 <MX_DMA_Init+0x78>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002486:	607b      	str	r3, [r7, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	603b      	str	r3, [r7, #0]
 800248e:	4b14      	ldr	r3, [pc, #80]	@ (80024e0 <MX_DMA_Init+0x78>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	4a13      	ldr	r2, [pc, #76]	@ (80024e0 <MX_DMA_Init+0x78>)
 8002494:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002498:	6313      	str	r3, [r2, #48]	@ 0x30
 800249a:	4b11      	ldr	r3, [pc, #68]	@ (80024e0 <MX_DMA_Init+0x78>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024a2:	603b      	str	r3, [r7, #0]
 80024a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2100      	movs	r1, #0
 80024aa:	200c      	movs	r0, #12
 80024ac:	f001 f8f5 	bl	800369a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80024b0:	200c      	movs	r0, #12
 80024b2:	f001 f90e 	bl	80036d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2100      	movs	r1, #0
 80024ba:	2010      	movs	r0, #16
 80024bc:	f001 f8ed 	bl	800369a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80024c0:	2010      	movs	r0, #16
 80024c2:	f001 f906 	bl	80036d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80024c6:	2200      	movs	r2, #0
 80024c8:	2100      	movs	r1, #0
 80024ca:	2039      	movs	r0, #57	@ 0x39
 80024cc:	f001 f8e5 	bl	800369a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80024d0:	2039      	movs	r0, #57	@ 0x39
 80024d2:	f001 f8fe 	bl	80036d2 <HAL_NVIC_EnableIRQ>

}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800

080024e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08e      	sub	sp, #56	@ 0x38
 80024e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	609a      	str	r2, [r3, #8]
 80024f6:	60da      	str	r2, [r3, #12]
 80024f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	623b      	str	r3, [r7, #32]
 80024fe:	4b8e      	ldr	r3, [pc, #568]	@ (8002738 <MX_GPIO_Init+0x254>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	4a8d      	ldr	r2, [pc, #564]	@ (8002738 <MX_GPIO_Init+0x254>)
 8002504:	f043 0304 	orr.w	r3, r3, #4
 8002508:	6313      	str	r3, [r2, #48]	@ 0x30
 800250a:	4b8b      	ldr	r3, [pc, #556]	@ (8002738 <MX_GPIO_Init+0x254>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	623b      	str	r3, [r7, #32]
 8002514:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
 800251a:	4b87      	ldr	r3, [pc, #540]	@ (8002738 <MX_GPIO_Init+0x254>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	4a86      	ldr	r2, [pc, #536]	@ (8002738 <MX_GPIO_Init+0x254>)
 8002520:	f043 0320 	orr.w	r3, r3, #32
 8002524:	6313      	str	r3, [r2, #48]	@ 0x30
 8002526:	4b84      	ldr	r3, [pc, #528]	@ (8002738 <MX_GPIO_Init+0x254>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	61fb      	str	r3, [r7, #28]
 8002530:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	61bb      	str	r3, [r7, #24]
 8002536:	4b80      	ldr	r3, [pc, #512]	@ (8002738 <MX_GPIO_Init+0x254>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253a:	4a7f      	ldr	r2, [pc, #508]	@ (8002738 <MX_GPIO_Init+0x254>)
 800253c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002540:	6313      	str	r3, [r2, #48]	@ 0x30
 8002542:	4b7d      	ldr	r3, [pc, #500]	@ (8002738 <MX_GPIO_Init+0x254>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800254a:	61bb      	str	r3, [r7, #24]
 800254c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	4b79      	ldr	r3, [pc, #484]	@ (8002738 <MX_GPIO_Init+0x254>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	4a78      	ldr	r2, [pc, #480]	@ (8002738 <MX_GPIO_Init+0x254>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6313      	str	r3, [r2, #48]	@ 0x30
 800255e:	4b76      	ldr	r3, [pc, #472]	@ (8002738 <MX_GPIO_Init+0x254>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	4b72      	ldr	r3, [pc, #456]	@ (8002738 <MX_GPIO_Init+0x254>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	4a71      	ldr	r2, [pc, #452]	@ (8002738 <MX_GPIO_Init+0x254>)
 8002574:	f043 0310 	orr.w	r3, r3, #16
 8002578:	6313      	str	r3, [r2, #48]	@ 0x30
 800257a:	4b6f      	ldr	r3, [pc, #444]	@ (8002738 <MX_GPIO_Init+0x254>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257e:	f003 0310 	and.w	r3, r3, #16
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	4b6b      	ldr	r3, [pc, #428]	@ (8002738 <MX_GPIO_Init+0x254>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258e:	4a6a      	ldr	r2, [pc, #424]	@ (8002738 <MX_GPIO_Init+0x254>)
 8002590:	f043 0302 	orr.w	r3, r3, #2
 8002594:	6313      	str	r3, [r2, #48]	@ 0x30
 8002596:	4b68      	ldr	r3, [pc, #416]	@ (8002738 <MX_GPIO_Init+0x254>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	4b64      	ldr	r3, [pc, #400]	@ (8002738 <MX_GPIO_Init+0x254>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025aa:	4a63      	ldr	r2, [pc, #396]	@ (8002738 <MX_GPIO_Init+0x254>)
 80025ac:	f043 0308 	orr.w	r3, r3, #8
 80025b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b2:	4b61      	ldr	r3, [pc, #388]	@ (8002738 <MX_GPIO_Init+0x254>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]
 80025c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002738 <MX_GPIO_Init+0x254>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	4a5c      	ldr	r2, [pc, #368]	@ (8002738 <MX_GPIO_Init+0x254>)
 80025c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ce:	4b5a      	ldr	r3, [pc, #360]	@ (8002738 <MX_GPIO_Init+0x254>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025d6:	607b      	str	r3, [r7, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 80025da:	2200      	movs	r2, #0
 80025dc:	2180      	movs	r1, #128	@ 0x80
 80025de:	4857      	ldr	r0, [pc, #348]	@ (800273c <MX_GPIO_Init+0x258>)
 80025e0:	f001 fe28 	bl	8004234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80025e4:	2200      	movs	r2, #0
 80025e6:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80025ea:	4855      	ldr	r0, [pc, #340]	@ (8002740 <MX_GPIO_Init+0x25c>)
 80025ec:	f001 fe22 	bl	8004234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80025f0:	2200      	movs	r2, #0
 80025f2:	2140      	movs	r1, #64	@ 0x40
 80025f4:	4853      	ldr	r0, [pc, #332]	@ (8002744 <MX_GPIO_Init+0x260>)
 80025f6:	f001 fe1d 	bl	8004234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80025fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002600:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002604:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800260a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800260e:	4619      	mov	r1, r3
 8002610:	484d      	ldr	r0, [pc, #308]	@ (8002748 <MX_GPIO_Init+0x264>)
 8002612:	f001 fc7b 	bl	8003f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002616:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800261a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800261c:	2300      	movs	r3, #0
 800261e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002624:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002628:	4619      	mov	r1, r3
 800262a:	4848      	ldr	r0, [pc, #288]	@ (800274c <MX_GPIO_Init+0x268>)
 800262c:	f001 fc6e 	bl	8003f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002630:	2380      	movs	r3, #128	@ 0x80
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002634:	2301      	movs	r3, #1
 8002636:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263c:	2300      	movs	r3, #0
 800263e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002640:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002644:	4619      	mov	r1, r3
 8002646:	483d      	ldr	r0, [pc, #244]	@ (800273c <MX_GPIO_Init+0x258>)
 8002648:	f001 fc60 	bl	8003f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800264c:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8002650:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002652:	2301      	movs	r3, #1
 8002654:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265a:	2300      	movs	r3, #0
 800265c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800265e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002662:	4619      	mov	r1, r3
 8002664:	4836      	ldr	r0, [pc, #216]	@ (8002740 <MX_GPIO_Init+0x25c>)
 8002666:	f001 fc51 	bl	8003f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800266a:	230c      	movs	r3, #12
 800266c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800266e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002672:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	2300      	movs	r3, #0
 8002676:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002678:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800267c:	4619      	mov	r1, r3
 800267e:	4831      	ldr	r0, [pc, #196]	@ (8002744 <MX_GPIO_Init+0x260>)
 8002680:	f001 fc44 	bl	8003f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002684:	2340      	movs	r3, #64	@ 0x40
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002688:	2301      	movs	r3, #1
 800268a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002690:	2300      	movs	r3, #0
 8002692:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002694:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002698:	4619      	mov	r1, r3
 800269a:	482a      	ldr	r0, [pc, #168]	@ (8002744 <MX_GPIO_Init+0x260>)
 800269c:	f001 fc36 	bl	8003f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80026a0:	2380      	movs	r3, #128	@ 0x80
 80026a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026a4:	2300      	movs	r3, #0
 80026a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80026ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026b0:	4619      	mov	r1, r3
 80026b2:	4824      	ldr	r0, [pc, #144]	@ (8002744 <MX_GPIO_Init+0x260>)
 80026b4:	f001 fc2a 	bl	8003f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80026b8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80026bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80026be:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80026c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026cc:	4619      	mov	r1, r3
 80026ce:	481e      	ldr	r0, [pc, #120]	@ (8002748 <MX_GPIO_Init+0x264>)
 80026d0:	f001 fc1c 	bl	8003f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026d4:	23c0      	movs	r3, #192	@ 0xc0
 80026d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80026d8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80026dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026e6:	4619      	mov	r1, r3
 80026e8:	4819      	ldr	r0, [pc, #100]	@ (8002750 <MX_GPIO_Init+0x26c>)
 80026ea:	f001 fc0f 	bl	8003f0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80026ee:	2200      	movs	r2, #0
 80026f0:	2100      	movs	r1, #0
 80026f2:	2008      	movs	r0, #8
 80026f4:	f000 ffd1 	bl	800369a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80026f8:	2008      	movs	r0, #8
 80026fa:	f000 ffea 	bl	80036d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80026fe:	2200      	movs	r2, #0
 8002700:	2100      	movs	r1, #0
 8002702:	2009      	movs	r0, #9
 8002704:	f000 ffc9 	bl	800369a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002708:	2009      	movs	r0, #9
 800270a:	f000 ffe2 	bl	80036d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800270e:	2200      	movs	r2, #0
 8002710:	2100      	movs	r1, #0
 8002712:	2017      	movs	r0, #23
 8002714:	f000 ffc1 	bl	800369a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002718:	2017      	movs	r0, #23
 800271a:	f000 ffda 	bl	80036d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800271e:	2200      	movs	r2, #0
 8002720:	2100      	movs	r1, #0
 8002722:	2028      	movs	r0, #40	@ 0x28
 8002724:	f000 ffb9 	bl	800369a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002728:	2028      	movs	r0, #40	@ 0x28
 800272a:	f000 ffd2 	bl	80036d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800272e:	bf00      	nop
 8002730:	3738      	adds	r7, #56	@ 0x38
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800
 800273c:	40021000 	.word	0x40021000
 8002740:	40020400 	.word	0x40020400
 8002744:	40021800 	.word	0x40021800
 8002748:	40020800 	.word	0x40020800
 800274c:	40021400 	.word	0x40021400
 8002750:	40020c00 	.word	0x40020c00

08002754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002758:	b672      	cpsid	i
}
 800275a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800275c:	bf00      	nop
 800275e:	e7fd      	b.n	800275c <Error_Handler+0x8>

08002760 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	607b      	str	r3, [r7, #4]
 800276a:	4b10      	ldr	r3, [pc, #64]	@ (80027ac <HAL_MspInit+0x4c>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276e:	4a0f      	ldr	r2, [pc, #60]	@ (80027ac <HAL_MspInit+0x4c>)
 8002770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002774:	6453      	str	r3, [r2, #68]	@ 0x44
 8002776:	4b0d      	ldr	r3, [pc, #52]	@ (80027ac <HAL_MspInit+0x4c>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800277e:	607b      	str	r3, [r7, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	603b      	str	r3, [r7, #0]
 8002786:	4b09      	ldr	r3, [pc, #36]	@ (80027ac <HAL_MspInit+0x4c>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	4a08      	ldr	r2, [pc, #32]	@ (80027ac <HAL_MspInit+0x4c>)
 800278c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002790:	6413      	str	r3, [r2, #64]	@ 0x40
 8002792:	4b06      	ldr	r3, [pc, #24]	@ (80027ac <HAL_MspInit+0x4c>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800

080027b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08a      	sub	sp, #40	@ 0x28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a28      	ldr	r2, [pc, #160]	@ (8002870 <HAL_SPI_MspInit+0xc0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d14a      	bne.n	8002868 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	4b27      	ldr	r3, [pc, #156]	@ (8002874 <HAL_SPI_MspInit+0xc4>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	4a26      	ldr	r2, [pc, #152]	@ (8002874 <HAL_SPI_MspInit+0xc4>)
 80027dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027e2:	4b24      	ldr	r3, [pc, #144]	@ (8002874 <HAL_SPI_MspInit+0xc4>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	4b20      	ldr	r3, [pc, #128]	@ (8002874 <HAL_SPI_MspInit+0xc4>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002874 <HAL_SPI_MspInit+0xc4>)
 80027f8:	f043 0304 	orr.w	r3, r3, #4
 80027fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002874 <HAL_SPI_MspInit+0xc4>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	4b19      	ldr	r3, [pc, #100]	@ (8002874 <HAL_SPI_MspInit+0xc4>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002812:	4a18      	ldr	r2, [pc, #96]	@ (8002874 <HAL_SPI_MspInit+0xc4>)
 8002814:	f043 0302 	orr.w	r3, r3, #2
 8002818:	6313      	str	r3, [r2, #48]	@ 0x30
 800281a:	4b16      	ldr	r3, [pc, #88]	@ (8002874 <HAL_SPI_MspInit+0xc4>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	60bb      	str	r3, [r7, #8]
 8002824:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002826:	2308      	movs	r3, #8
 8002828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282a:	2302      	movs	r3, #2
 800282c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002832:	2303      	movs	r3, #3
 8002834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002836:	2305      	movs	r3, #5
 8002838:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800283a:	f107 0314 	add.w	r3, r7, #20
 800283e:	4619      	mov	r1, r3
 8002840:	480d      	ldr	r0, [pc, #52]	@ (8002878 <HAL_SPI_MspInit+0xc8>)
 8002842:	f001 fb63 	bl	8003f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002846:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800284a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284c:	2302      	movs	r3, #2
 800284e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002854:	2303      	movs	r3, #3
 8002856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002858:	2305      	movs	r3, #5
 800285a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	4619      	mov	r1, r3
 8002862:	4806      	ldr	r0, [pc, #24]	@ (800287c <HAL_SPI_MspInit+0xcc>)
 8002864:	f001 fb52 	bl	8003f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002868:	bf00      	nop
 800286a:	3728      	adds	r7, #40	@ 0x28
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40003800 	.word	0x40003800
 8002874:	40023800 	.word	0x40023800
 8002878:	40020800 	.word	0x40020800
 800287c:	40020400 	.word	0x40020400

08002880 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b090      	sub	sp, #64	@ 0x40
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002888:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a7b      	ldr	r2, [pc, #492]	@ (8002a8c <HAL_TIM_Encoder_MspInit+0x20c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d13d      	bne.n	800291e <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028a6:	4b7a      	ldr	r3, [pc, #488]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x210>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028aa:	4a79      	ldr	r2, [pc, #484]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x210>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80028b2:	4b77      	ldr	r3, [pc, #476]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x210>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c2:	4b73      	ldr	r3, [pc, #460]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x210>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	4a72      	ldr	r2, [pc, #456]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x210>)
 80028c8:	f043 0310 	orr.w	r3, r3, #16
 80028cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ce:	4b70      	ldr	r3, [pc, #448]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x210>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80028da:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80028de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e0:	2302      	movs	r3, #2
 80028e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e8:	2300      	movs	r3, #0
 80028ea:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028ec:	2301      	movs	r3, #1
 80028ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028f4:	4619      	mov	r1, r3
 80028f6:	4867      	ldr	r0, [pc, #412]	@ (8002a94 <HAL_TIM_Encoder_MspInit+0x214>)
 80028f8:	f001 fb08 	bl	8003f0c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80028fc:	2200      	movs	r2, #0
 80028fe:	2100      	movs	r1, #0
 8002900:	2018      	movs	r0, #24
 8002902:	f000 feca 	bl	800369a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002906:	2018      	movs	r0, #24
 8002908:	f000 fee3 	bl	80036d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800290c:	2200      	movs	r2, #0
 800290e:	2100      	movs	r1, #0
 8002910:	2019      	movs	r0, #25
 8002912:	f000 fec2 	bl	800369a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002916:	2019      	movs	r0, #25
 8002918:	f000 fedb 	bl	80036d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800291c:	e0b2      	b.n	8002a84 <HAL_TIM_Encoder_MspInit+0x204>
  else if(htim_encoder->Instance==TIM2)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002926:	d12c      	bne.n	8002982 <HAL_TIM_Encoder_MspInit+0x102>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002928:	2300      	movs	r3, #0
 800292a:	623b      	str	r3, [r7, #32]
 800292c:	4b58      	ldr	r3, [pc, #352]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x210>)
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	4a57      	ldr	r2, [pc, #348]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x210>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6413      	str	r3, [r2, #64]	@ 0x40
 8002938:	4b55      	ldr	r3, [pc, #340]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x210>)
 800293a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	623b      	str	r3, [r7, #32]
 8002942:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002944:	2300      	movs	r3, #0
 8002946:	61fb      	str	r3, [r7, #28]
 8002948:	4b51      	ldr	r3, [pc, #324]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x210>)
 800294a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294c:	4a50      	ldr	r2, [pc, #320]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x210>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	6313      	str	r3, [r2, #48]	@ 0x30
 8002954:	4b4e      	ldr	r3, [pc, #312]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x210>)
 8002956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002960:	2303      	movs	r3, #3
 8002962:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002964:	2302      	movs	r3, #2
 8002966:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296c:	2300      	movs	r3, #0
 800296e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002970:	2301      	movs	r3, #1
 8002972:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002974:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002978:	4619      	mov	r1, r3
 800297a:	4847      	ldr	r0, [pc, #284]	@ (8002a98 <HAL_TIM_Encoder_MspInit+0x218>)
 800297c:	f001 fac6 	bl	8003f0c <HAL_GPIO_Init>
}
 8002980:	e080      	b.n	8002a84 <HAL_TIM_Encoder_MspInit+0x204>
  else if(htim_encoder->Instance==TIM3)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a45      	ldr	r2, [pc, #276]	@ (8002a9c <HAL_TIM_Encoder_MspInit+0x21c>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d14a      	bne.n	8002a22 <HAL_TIM_Encoder_MspInit+0x1a2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800298c:	2300      	movs	r3, #0
 800298e:	61bb      	str	r3, [r7, #24]
 8002990:	4b3f      	ldr	r3, [pc, #252]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x210>)
 8002992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002994:	4a3e      	ldr	r2, [pc, #248]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x210>)
 8002996:	f043 0302 	orr.w	r3, r3, #2
 800299a:	6413      	str	r3, [r2, #64]	@ 0x40
 800299c:	4b3c      	ldr	r3, [pc, #240]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x210>)
 800299e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	61bb      	str	r3, [r7, #24]
 80029a6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	4b38      	ldr	r3, [pc, #224]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x210>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b0:	4a37      	ldr	r2, [pc, #220]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x210>)
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80029b8:	4b35      	ldr	r3, [pc, #212]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x210>)
 80029ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c4:	2300      	movs	r3, #0
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	4b31      	ldr	r3, [pc, #196]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x210>)
 80029ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029cc:	4a30      	ldr	r2, [pc, #192]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x210>)
 80029ce:	f043 0302 	orr.w	r3, r3, #2
 80029d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80029d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x210>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029e0:	2340      	movs	r3, #64	@ 0x40
 80029e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e4:	2302      	movs	r3, #2
 80029e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ec:	2300      	movs	r3, #0
 80029ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029f0:	2302      	movs	r3, #2
 80029f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029f8:	4619      	mov	r1, r3
 80029fa:	4827      	ldr	r0, [pc, #156]	@ (8002a98 <HAL_TIM_Encoder_MspInit+0x218>)
 80029fc:	f001 fa86 	bl	8003f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a00:	2320      	movs	r3, #32
 8002a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a04:	2302      	movs	r3, #2
 8002a06:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a10:	2302      	movs	r3, #2
 8002a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4821      	ldr	r0, [pc, #132]	@ (8002aa0 <HAL_TIM_Encoder_MspInit+0x220>)
 8002a1c:	f001 fa76 	bl	8003f0c <HAL_GPIO_Init>
}
 8002a20:	e030      	b.n	8002a84 <HAL_TIM_Encoder_MspInit+0x204>
  else if(htim_encoder->Instance==TIM5)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a1f      	ldr	r2, [pc, #124]	@ (8002aa4 <HAL_TIM_Encoder_MspInit+0x224>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d12b      	bne.n	8002a84 <HAL_TIM_Encoder_MspInit+0x204>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	4b17      	ldr	r3, [pc, #92]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x210>)
 8002a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a34:	4a16      	ldr	r2, [pc, #88]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x210>)
 8002a36:	f043 0308 	orr.w	r3, r3, #8
 8002a3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a3c:	4b14      	ldr	r3, [pc, #80]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x210>)
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	4b10      	ldr	r3, [pc, #64]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x210>)
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a50:	4a0f      	ldr	r2, [pc, #60]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x210>)
 8002a52:	f043 0320 	orr.w	r3, r3, #32
 8002a56:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a58:	4b0d      	ldr	r3, [pc, #52]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x210>)
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5c:	f003 0320 	and.w	r3, r3, #32
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002a64:	2318      	movs	r3, #24
 8002a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a70:	2300      	movs	r3, #0
 8002a72:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a74:	2302      	movs	r3, #2
 8002a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	480a      	ldr	r0, [pc, #40]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x228>)
 8002a80:	f001 fa44 	bl	8003f0c <HAL_GPIO_Init>
}
 8002a84:	bf00      	nop
 8002a86:	3740      	adds	r7, #64	@ 0x40
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40010000 	.word	0x40010000
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40020000 	.word	0x40020000
 8002a9c:	40000400 	.word	0x40000400
 8002aa0:	40020400 	.word	0x40020400
 8002aa4:	40000c00 	.word	0x40000c00
 8002aa8:	40021400 	.word	0x40021400

08002aac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a34      	ldr	r2, [pc, #208]	@ (8002b8c <HAL_TIM_Base_MspInit+0xe0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d10e      	bne.n	8002adc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	4b33      	ldr	r3, [pc, #204]	@ (8002b90 <HAL_TIM_Base_MspInit+0xe4>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	4a32      	ldr	r2, [pc, #200]	@ (8002b90 <HAL_TIM_Base_MspInit+0xe4>)
 8002ac8:	f043 0304 	orr.w	r3, r3, #4
 8002acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ace:	4b30      	ldr	r3, [pc, #192]	@ (8002b90 <HAL_TIM_Base_MspInit+0xe4>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002ada:	e052      	b.n	8002b82 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM9)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a2c      	ldr	r2, [pc, #176]	@ (8002b94 <HAL_TIM_Base_MspInit+0xe8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d116      	bne.n	8002b14 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	4b29      	ldr	r3, [pc, #164]	@ (8002b90 <HAL_TIM_Base_MspInit+0xe4>)
 8002aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aee:	4a28      	ldr	r2, [pc, #160]	@ (8002b90 <HAL_TIM_Base_MspInit+0xe4>)
 8002af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002af6:	4b26      	ldr	r3, [pc, #152]	@ (8002b90 <HAL_TIM_Base_MspInit+0xe4>)
 8002af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002b02:	2200      	movs	r2, #0
 8002b04:	2100      	movs	r1, #0
 8002b06:	2018      	movs	r0, #24
 8002b08:	f000 fdc7 	bl	800369a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002b0c:	2018      	movs	r0, #24
 8002b0e:	f000 fde0 	bl	80036d2 <HAL_NVIC_EnableIRQ>
}
 8002b12:	e036      	b.n	8002b82 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM10)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a1f      	ldr	r2, [pc, #124]	@ (8002b98 <HAL_TIM_Base_MspInit+0xec>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d116      	bne.n	8002b4c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	4b1b      	ldr	r3, [pc, #108]	@ (8002b90 <HAL_TIM_Base_MspInit+0xe4>)
 8002b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b26:	4a1a      	ldr	r2, [pc, #104]	@ (8002b90 <HAL_TIM_Base_MspInit+0xe4>)
 8002b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b2e:	4b18      	ldr	r3, [pc, #96]	@ (8002b90 <HAL_TIM_Base_MspInit+0xe4>)
 8002b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	2019      	movs	r0, #25
 8002b40:	f000 fdab 	bl	800369a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002b44:	2019      	movs	r0, #25
 8002b46:	f000 fdc4 	bl	80036d2 <HAL_NVIC_EnableIRQ>
}
 8002b4a:	e01a      	b.n	8002b82 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM12)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a12      	ldr	r2, [pc, #72]	@ (8002b9c <HAL_TIM_Base_MspInit+0xf0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d115      	bne.n	8002b82 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b90 <HAL_TIM_Base_MspInit+0xe4>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5e:	4a0c      	ldr	r2, [pc, #48]	@ (8002b90 <HAL_TIM_Base_MspInit+0xe4>)
 8002b60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b66:	4b0a      	ldr	r3, [pc, #40]	@ (8002b90 <HAL_TIM_Base_MspInit+0xe4>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b6e:	60bb      	str	r3, [r7, #8]
 8002b70:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002b72:	2200      	movs	r2, #0
 8002b74:	2100      	movs	r1, #0
 8002b76:	202b      	movs	r0, #43	@ 0x2b
 8002b78:	f000 fd8f 	bl	800369a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002b7c:	202b      	movs	r0, #43	@ 0x2b
 8002b7e:	f000 fda8 	bl	80036d2 <HAL_NVIC_EnableIRQ>
}
 8002b82:	bf00      	nop
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40000800 	.word	0x40000800
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40014000 	.word	0x40014000
 8002b98:	40014400 	.word	0x40014400
 8002b9c:	40001800 	.word	0x40001800

08002ba0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a0e      	ldr	r2, [pc, #56]	@ (8002be8 <HAL_TIM_PWM_MspInit+0x48>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d115      	bne.n	8002bde <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8002bec <HAL_TIM_PWM_MspInit+0x4c>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bba:	4a0c      	ldr	r2, [pc, #48]	@ (8002bec <HAL_TIM_PWM_MspInit+0x4c>)
 8002bbc:	f043 0302 	orr.w	r3, r3, #2
 8002bc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bec <HAL_TIM_PWM_MspInit+0x4c>)
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	202b      	movs	r0, #43	@ 0x2b
 8002bd4:	f000 fd61 	bl	800369a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002bd8:	202b      	movs	r0, #43	@ 0x2b
 8002bda:	f000 fd7a 	bl	80036d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002bde:	bf00      	nop
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40010400 	.word	0x40010400
 8002bec:	40023800 	.word	0x40023800

08002bf0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08a      	sub	sp, #40	@ 0x28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf8:	f107 0314 	add.w	r3, r7, #20
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	605a      	str	r2, [r3, #4]
 8002c02:	609a      	str	r2, [r3, #8]
 8002c04:	60da      	str	r2, [r3, #12]
 8002c06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a25      	ldr	r2, [pc, #148]	@ (8002ca4 <HAL_TIM_MspPostInit+0xb4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d11f      	bne.n	8002c52 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	4b24      	ldr	r3, [pc, #144]	@ (8002ca8 <HAL_TIM_MspPostInit+0xb8>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1a:	4a23      	ldr	r2, [pc, #140]	@ (8002ca8 <HAL_TIM_MspPostInit+0xb8>)
 8002c1c:	f043 0308 	orr.w	r3, r3, #8
 8002c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c22:	4b21      	ldr	r3, [pc, #132]	@ (8002ca8 <HAL_TIM_MspPostInit+0xb8>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	613b      	str	r3, [r7, #16]
 8002c2c:	693b      	ldr	r3, [r7, #16]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002c2e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c34:	2302      	movs	r3, #2
 8002c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c40:	2302      	movs	r3, #2
 8002c42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c44:	f107 0314 	add.w	r3, r7, #20
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4818      	ldr	r0, [pc, #96]	@ (8002cac <HAL_TIM_MspPostInit+0xbc>)
 8002c4c:	f001 f95e 	bl	8003f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002c50:	e023      	b.n	8002c9a <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a16      	ldr	r2, [pc, #88]	@ (8002cb0 <HAL_TIM_MspPostInit+0xc0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d11e      	bne.n	8002c9a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <HAL_TIM_MspPostInit+0xb8>)
 8002c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c64:	4a10      	ldr	r2, [pc, #64]	@ (8002ca8 <HAL_TIM_MspPostInit+0xb8>)
 8002c66:	f043 0304 	orr.w	r3, r3, #4
 8002c6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca8 <HAL_TIM_MspPostInit+0xb8>)
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002c78:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c86:	2300      	movs	r3, #0
 8002c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c8e:	f107 0314 	add.w	r3, r7, #20
 8002c92:	4619      	mov	r1, r3
 8002c94:	4807      	ldr	r0, [pc, #28]	@ (8002cb4 <HAL_TIM_MspPostInit+0xc4>)
 8002c96:	f001 f939 	bl	8003f0c <HAL_GPIO_Init>
}
 8002c9a:	bf00      	nop
 8002c9c:	3728      	adds	r7, #40	@ 0x28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40000800 	.word	0x40000800
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40020c00 	.word	0x40020c00
 8002cb0:	40010400 	.word	0x40010400
 8002cb4:	40020800 	.word	0x40020800

08002cb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08e      	sub	sp, #56	@ 0x38
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a99      	ldr	r2, [pc, #612]	@ (8002f3c <HAL_UART_MspInit+0x284>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d162      	bne.n	8002da0 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	623b      	str	r3, [r7, #32]
 8002cde:	4b98      	ldr	r3, [pc, #608]	@ (8002f40 <HAL_UART_MspInit+0x288>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce2:	4a97      	ldr	r2, [pc, #604]	@ (8002f40 <HAL_UART_MspInit+0x288>)
 8002ce4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cea:	4b95      	ldr	r3, [pc, #596]	@ (8002f40 <HAL_UART_MspInit+0x288>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf2:	623b      	str	r3, [r7, #32]
 8002cf4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
 8002cfa:	4b91      	ldr	r3, [pc, #580]	@ (8002f40 <HAL_UART_MspInit+0x288>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfe:	4a90      	ldr	r2, [pc, #576]	@ (8002f40 <HAL_UART_MspInit+0x288>)
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d06:	4b8e      	ldr	r3, [pc, #568]	@ (8002f40 <HAL_UART_MspInit+0x288>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	61fb      	str	r3, [r7, #28]
 8002d10:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d12:	230c      	movs	r3, #12
 8002d14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d16:	2302      	movs	r3, #2
 8002d18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d22:	2307      	movs	r3, #7
 8002d24:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4885      	ldr	r0, [pc, #532]	@ (8002f44 <HAL_UART_MspInit+0x28c>)
 8002d2e:	f001 f8ed 	bl	8003f0c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002d32:	4b85      	ldr	r3, [pc, #532]	@ (8002f48 <HAL_UART_MspInit+0x290>)
 8002d34:	4a85      	ldr	r2, [pc, #532]	@ (8002f4c <HAL_UART_MspInit+0x294>)
 8002d36:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002d38:	4b83      	ldr	r3, [pc, #524]	@ (8002f48 <HAL_UART_MspInit+0x290>)
 8002d3a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002d3e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d40:	4b81      	ldr	r3, [pc, #516]	@ (8002f48 <HAL_UART_MspInit+0x290>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d46:	4b80      	ldr	r3, [pc, #512]	@ (8002f48 <HAL_UART_MspInit+0x290>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d4c:	4b7e      	ldr	r3, [pc, #504]	@ (8002f48 <HAL_UART_MspInit+0x290>)
 8002d4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d52:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d54:	4b7c      	ldr	r3, [pc, #496]	@ (8002f48 <HAL_UART_MspInit+0x290>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d5a:	4b7b      	ldr	r3, [pc, #492]	@ (8002f48 <HAL_UART_MspInit+0x290>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002d60:	4b79      	ldr	r3, [pc, #484]	@ (8002f48 <HAL_UART_MspInit+0x290>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d66:	4b78      	ldr	r3, [pc, #480]	@ (8002f48 <HAL_UART_MspInit+0x290>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d6c:	4b76      	ldr	r3, [pc, #472]	@ (8002f48 <HAL_UART_MspInit+0x290>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002d72:	4875      	ldr	r0, [pc, #468]	@ (8002f48 <HAL_UART_MspInit+0x290>)
 8002d74:	f000 fcc8 	bl	8003708 <HAL_DMA_Init>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002d7e:	f7ff fce9 	bl	8002754 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a70      	ldr	r2, [pc, #448]	@ (8002f48 <HAL_UART_MspInit+0x290>)
 8002d86:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d88:	4a6f      	ldr	r2, [pc, #444]	@ (8002f48 <HAL_UART_MspInit+0x290>)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2100      	movs	r1, #0
 8002d92:	2026      	movs	r0, #38	@ 0x26
 8002d94:	f000 fc81 	bl	800369a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d98:	2026      	movs	r0, #38	@ 0x26
 8002d9a:	f000 fc9a 	bl	80036d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002d9e:	e0c8      	b.n	8002f32 <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART3)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a6a      	ldr	r2, [pc, #424]	@ (8002f50 <HAL_UART_MspInit+0x298>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d15b      	bne.n	8002e62 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	61bb      	str	r3, [r7, #24]
 8002dae:	4b64      	ldr	r3, [pc, #400]	@ (8002f40 <HAL_UART_MspInit+0x288>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db2:	4a63      	ldr	r2, [pc, #396]	@ (8002f40 <HAL_UART_MspInit+0x288>)
 8002db4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002db8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dba:	4b61      	ldr	r3, [pc, #388]	@ (8002f40 <HAL_UART_MspInit+0x288>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dc2:	61bb      	str	r3, [r7, #24]
 8002dc4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	4b5d      	ldr	r3, [pc, #372]	@ (8002f40 <HAL_UART_MspInit+0x288>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dce:	4a5c      	ldr	r2, [pc, #368]	@ (8002f40 <HAL_UART_MspInit+0x288>)
 8002dd0:	f043 0308 	orr.w	r3, r3, #8
 8002dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dd6:	4b5a      	ldr	r3, [pc, #360]	@ (8002f40 <HAL_UART_MspInit+0x288>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002de2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002de6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de8:	2302      	movs	r3, #2
 8002dea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df0:	2303      	movs	r3, #3
 8002df2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002df4:	2307      	movs	r3, #7
 8002df6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002df8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4855      	ldr	r0, [pc, #340]	@ (8002f54 <HAL_UART_MspInit+0x29c>)
 8002e00:	f001 f884 	bl	8003f0c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002e04:	4b54      	ldr	r3, [pc, #336]	@ (8002f58 <HAL_UART_MspInit+0x2a0>)
 8002e06:	4a55      	ldr	r2, [pc, #340]	@ (8002f5c <HAL_UART_MspInit+0x2a4>)
 8002e08:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002e0a:	4b53      	ldr	r3, [pc, #332]	@ (8002f58 <HAL_UART_MspInit+0x2a0>)
 8002e0c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002e10:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e12:	4b51      	ldr	r3, [pc, #324]	@ (8002f58 <HAL_UART_MspInit+0x2a0>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e18:	4b4f      	ldr	r3, [pc, #316]	@ (8002f58 <HAL_UART_MspInit+0x2a0>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e1e:	4b4e      	ldr	r3, [pc, #312]	@ (8002f58 <HAL_UART_MspInit+0x2a0>)
 8002e20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e24:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e26:	4b4c      	ldr	r3, [pc, #304]	@ (8002f58 <HAL_UART_MspInit+0x2a0>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e2c:	4b4a      	ldr	r3, [pc, #296]	@ (8002f58 <HAL_UART_MspInit+0x2a0>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002e32:	4b49      	ldr	r3, [pc, #292]	@ (8002f58 <HAL_UART_MspInit+0x2a0>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e38:	4b47      	ldr	r3, [pc, #284]	@ (8002f58 <HAL_UART_MspInit+0x2a0>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e3e:	4b46      	ldr	r3, [pc, #280]	@ (8002f58 <HAL_UART_MspInit+0x2a0>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002e44:	4844      	ldr	r0, [pc, #272]	@ (8002f58 <HAL_UART_MspInit+0x2a0>)
 8002e46:	f000 fc5f 	bl	8003708 <HAL_DMA_Init>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8002e50:	f7ff fc80 	bl	8002754 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a40      	ldr	r2, [pc, #256]	@ (8002f58 <HAL_UART_MspInit+0x2a0>)
 8002e58:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e5a:	4a3f      	ldr	r2, [pc, #252]	@ (8002f58 <HAL_UART_MspInit+0x2a0>)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002e60:	e067      	b.n	8002f32 <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART6)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a3e      	ldr	r2, [pc, #248]	@ (8002f60 <HAL_UART_MspInit+0x2a8>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d162      	bne.n	8002f32 <HAL_UART_MspInit+0x27a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	4b33      	ldr	r3, [pc, #204]	@ (8002f40 <HAL_UART_MspInit+0x288>)
 8002e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e74:	4a32      	ldr	r2, [pc, #200]	@ (8002f40 <HAL_UART_MspInit+0x288>)
 8002e76:	f043 0320 	orr.w	r3, r3, #32
 8002e7a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e7c:	4b30      	ldr	r3, [pc, #192]	@ (8002f40 <HAL_UART_MspInit+0x288>)
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	4b2c      	ldr	r3, [pc, #176]	@ (8002f40 <HAL_UART_MspInit+0x288>)
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e90:	4a2b      	ldr	r2, [pc, #172]	@ (8002f40 <HAL_UART_MspInit+0x288>)
 8002e92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e96:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e98:	4b29      	ldr	r3, [pc, #164]	@ (8002f40 <HAL_UART_MspInit+0x288>)
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8002ea4:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8002ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002eb6:	2308      	movs	r3, #8
 8002eb8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002eba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4828      	ldr	r0, [pc, #160]	@ (8002f64 <HAL_UART_MspInit+0x2ac>)
 8002ec2:	f001 f823 	bl	8003f0c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002ec6:	4b28      	ldr	r3, [pc, #160]	@ (8002f68 <HAL_UART_MspInit+0x2b0>)
 8002ec8:	4a28      	ldr	r2, [pc, #160]	@ (8002f6c <HAL_UART_MspInit+0x2b4>)
 8002eca:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002ecc:	4b26      	ldr	r3, [pc, #152]	@ (8002f68 <HAL_UART_MspInit+0x2b0>)
 8002ece:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002ed2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ed4:	4b24      	ldr	r3, [pc, #144]	@ (8002f68 <HAL_UART_MspInit+0x2b0>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eda:	4b23      	ldr	r3, [pc, #140]	@ (8002f68 <HAL_UART_MspInit+0x2b0>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ee0:	4b21      	ldr	r3, [pc, #132]	@ (8002f68 <HAL_UART_MspInit+0x2b0>)
 8002ee2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ee6:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ee8:	4b1f      	ldr	r3, [pc, #124]	@ (8002f68 <HAL_UART_MspInit+0x2b0>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002eee:	4b1e      	ldr	r3, [pc, #120]	@ (8002f68 <HAL_UART_MspInit+0x2b0>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8002f68 <HAL_UART_MspInit+0x2b0>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002efa:	4b1b      	ldr	r3, [pc, #108]	@ (8002f68 <HAL_UART_MspInit+0x2b0>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f00:	4b19      	ldr	r3, [pc, #100]	@ (8002f68 <HAL_UART_MspInit+0x2b0>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002f06:	4818      	ldr	r0, [pc, #96]	@ (8002f68 <HAL_UART_MspInit+0x2b0>)
 8002f08:	f000 fbfe 	bl	8003708 <HAL_DMA_Init>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 8002f12:	f7ff fc1f 	bl	8002754 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a13      	ldr	r2, [pc, #76]	@ (8002f68 <HAL_UART_MspInit+0x2b0>)
 8002f1a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002f1c:	4a12      	ldr	r2, [pc, #72]	@ (8002f68 <HAL_UART_MspInit+0x2b0>)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002f22:	2200      	movs	r2, #0
 8002f24:	2100      	movs	r1, #0
 8002f26:	2047      	movs	r0, #71	@ 0x47
 8002f28:	f000 fbb7 	bl	800369a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002f2c:	2047      	movs	r0, #71	@ 0x47
 8002f2e:	f000 fbd0 	bl	80036d2 <HAL_NVIC_EnableIRQ>
}
 8002f32:	bf00      	nop
 8002f34:	3738      	adds	r7, #56	@ 0x38
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40004400 	.word	0x40004400
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40020000 	.word	0x40020000
 8002f48:	200005ac 	.word	0x200005ac
 8002f4c:	40026088 	.word	0x40026088
 8002f50:	40004800 	.word	0x40004800
 8002f54:	40020c00 	.word	0x40020c00
 8002f58:	2000060c 	.word	0x2000060c
 8002f5c:	40026028 	.word	0x40026028
 8002f60:	40011400 	.word	0x40011400
 8002f64:	40021800 	.word	0x40021800
 8002f68:	2000066c 	.word	0x2000066c
 8002f6c:	40026428 	.word	0x40026428

08002f70 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b098      	sub	sp, #96	@ 0x60
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f78:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f88:	f107 0310 	add.w	r3, r7, #16
 8002f8c:	223c      	movs	r2, #60	@ 0x3c
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4618      	mov	r0, r3
 8002f92:	f006 fb56 	bl	8009642 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f9e:	d14d      	bne.n	800303c <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002fa0:	2320      	movs	r3, #32
 8002fa2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fa8:	f107 0310 	add.w	r3, r7, #16
 8002fac:	4618      	mov	r0, r3
 8002fae:	f001 fcd9 	bl	8004964 <HAL_RCCEx_PeriphCLKConfig>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8002fb8:	f7ff fbcc 	bl	8002754 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	4b20      	ldr	r3, [pc, #128]	@ (8003044 <HAL_PCD_MspInit+0xd4>)
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc4:	4a1f      	ldr	r2, [pc, #124]	@ (8003044 <HAL_PCD_MspInit+0xd4>)
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8003044 <HAL_PCD_MspInit+0xd4>)
 8002fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002fd8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002fdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fde:	2302      	movs	r3, #2
 8002fe0:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002fea:	230a      	movs	r3, #10
 8002fec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fee:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4814      	ldr	r0, [pc, #80]	@ (8003048 <HAL_PCD_MspInit+0xd8>)
 8002ff6:	f000 ff89 	bl	8003f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002ffa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003000:	2300      	movs	r3, #0
 8003002:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003004:	2300      	movs	r3, #0
 8003006:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003008:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800300c:	4619      	mov	r1, r3
 800300e:	480e      	ldr	r0, [pc, #56]	@ (8003048 <HAL_PCD_MspInit+0xd8>)
 8003010:	f000 ff7c 	bl	8003f0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003014:	4b0b      	ldr	r3, [pc, #44]	@ (8003044 <HAL_PCD_MspInit+0xd4>)
 8003016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003018:	4a0a      	ldr	r2, [pc, #40]	@ (8003044 <HAL_PCD_MspInit+0xd4>)
 800301a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800301e:	6353      	str	r3, [r2, #52]	@ 0x34
 8003020:	2300      	movs	r3, #0
 8003022:	60bb      	str	r3, [r7, #8]
 8003024:	4b07      	ldr	r3, [pc, #28]	@ (8003044 <HAL_PCD_MspInit+0xd4>)
 8003026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003028:	4a06      	ldr	r2, [pc, #24]	@ (8003044 <HAL_PCD_MspInit+0xd4>)
 800302a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800302e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003030:	4b04      	ldr	r3, [pc, #16]	@ (8003044 <HAL_PCD_MspInit+0xd4>)
 8003032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003034:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800303c:	bf00      	nop
 800303e:	3760      	adds	r7, #96	@ 0x60
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40023800 	.word	0x40023800
 8003048:	40020000 	.word	0x40020000

0800304c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003050:	bf00      	nop
 8003052:	e7fd      	b.n	8003050 <NMI_Handler+0x4>

08003054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003058:	bf00      	nop
 800305a:	e7fd      	b.n	8003058 <HardFault_Handler+0x4>

0800305c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003060:	bf00      	nop
 8003062:	e7fd      	b.n	8003060 <MemManage_Handler+0x4>

08003064 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003068:	bf00      	nop
 800306a:	e7fd      	b.n	8003068 <BusFault_Handler+0x4>

0800306c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003070:	bf00      	nop
 8003072:	e7fd      	b.n	8003070 <UsageFault_Handler+0x4>

08003074 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003078:	bf00      	nop
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003082:	b480      	push	{r7}
 8003084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030a2:	f000 f9db 	bl	800345c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}

080030aa <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80030ae:	2004      	movs	r0, #4
 80030b0:	f001 f8da 	bl	8004268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80030b4:	bf00      	nop
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80030bc:	2008      	movs	r0, #8
 80030be:	f001 f8d3 	bl	8004268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80030cc:	4802      	ldr	r0, [pc, #8]	@ (80030d8 <DMA1_Stream1_IRQHandler+0x10>)
 80030ce:	f000 fcb3 	bl	8003a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	2000060c 	.word	0x2000060c

080030dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80030e0:	4802      	ldr	r0, [pc, #8]	@ (80030ec <DMA1_Stream5_IRQHandler+0x10>)
 80030e2:	f000 fca9 	bl	8003a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	200005ac 	.word	0x200005ac

080030f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80030f4:	2040      	movs	r0, #64	@ 0x40
 80030f6:	f001 f8b7 	bl	8004268 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80030fa:	2080      	movs	r0, #128	@ 0x80
 80030fc:	f001 f8b4 	bl	8004268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003100:	bf00      	nop
 8003102:	bd80      	pop	{r7, pc}

08003104 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003108:	4803      	ldr	r0, [pc, #12]	@ (8003118 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800310a:	f002 fc11 	bl	8005930 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800310e:	4803      	ldr	r0, [pc, #12]	@ (800311c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8003110:	f002 fc0e 	bl	8005930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003114:	bf00      	nop
 8003116:	bd80      	pop	{r7, pc}
 8003118:	2000024c 	.word	0x2000024c
 800311c:	200003fc 	.word	0x200003fc

08003120 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003124:	4803      	ldr	r0, [pc, #12]	@ (8003134 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003126:	f002 fc03 	bl	8005930 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800312a:	4803      	ldr	r0, [pc, #12]	@ (8003138 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800312c:	f002 fc00 	bl	8005930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003130:	bf00      	nop
 8003132:	bd80      	pop	{r7, pc}
 8003134:	2000024c 	.word	0x2000024c
 8003138:	20000444 	.word	0x20000444

0800313c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003140:	4802      	ldr	r0, [pc, #8]	@ (800314c <USART2_IRQHandler+0x10>)
 8003142:	f003 fb0b 	bl	800675c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003146:	bf00      	nop
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	200004d4 	.word	0x200004d4

08003150 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003154:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003158:	f001 f886 	bl	8004268 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800315c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003160:	f001 f882 	bl	8004268 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8003164:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003168:	f001 f87e 	bl	8004268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800316c:	bf00      	nop
 800316e:	bd80      	pop	{r7, pc}

08003170 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003174:	4803      	ldr	r0, [pc, #12]	@ (8003184 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8003176:	f002 fbdb 	bl	8005930 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800317a:	4803      	ldr	r0, [pc, #12]	@ (8003188 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 800317c:	f002 fbd8 	bl	8005930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003180:	bf00      	nop
 8003182:	bd80      	pop	{r7, pc}
 8003184:	200003b4 	.word	0x200003b4
 8003188:	2000048c 	.word	0x2000048c

0800318c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003190:	4802      	ldr	r0, [pc, #8]	@ (800319c <DMA2_Stream1_IRQHandler+0x10>)
 8003192:	f000 fc51 	bl	8003a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	2000066c 	.word	0x2000066c

080031a0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80031a4:	4802      	ldr	r0, [pc, #8]	@ (80031b0 <USART6_IRQHandler+0x10>)
 80031a6:	f003 fad9 	bl	800675c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20000564 	.word	0x20000564

080031b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return 1;
 80031b8:	2301      	movs	r3, #1
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <_kill>:

int _kill(int pid, int sig)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031ce:	f006 faf9 	bl	80097c4 <__errno>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2216      	movs	r2, #22
 80031d6:	601a      	str	r2, [r3, #0]
  return -1;
 80031d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <_exit>:

void _exit (int status)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031ec:	f04f 31ff 	mov.w	r1, #4294967295
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff ffe7 	bl	80031c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80031f6:	bf00      	nop
 80031f8:	e7fd      	b.n	80031f6 <_exit+0x12>

080031fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b086      	sub	sp, #24
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003206:	2300      	movs	r3, #0
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	e00a      	b.n	8003222 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800320c:	f3af 8000 	nop.w
 8003210:	4601      	mov	r1, r0
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	60ba      	str	r2, [r7, #8]
 8003218:	b2ca      	uxtb	r2, r1
 800321a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	3301      	adds	r3, #1
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	429a      	cmp	r2, r3
 8003228:	dbf0      	blt.n	800320c <_read+0x12>
  }

  return len;
 800322a:	687b      	ldr	r3, [r7, #4]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	e009      	b.n	800325a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	60ba      	str	r2, [r7, #8]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	3301      	adds	r3, #1
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	429a      	cmp	r2, r3
 8003260:	dbf1      	blt.n	8003246 <_write+0x12>
  }
  return len;
 8003262:	687b      	ldr	r3, [r7, #4]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <_close>:

int _close(int file)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003274:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003294:	605a      	str	r2, [r3, #4]
  return 0;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <_isatty>:

int _isatty(int file)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80032ac:	2301      	movs	r3, #1
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b085      	sub	sp, #20
 80032be:	af00      	add	r7, sp, #0
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032dc:	4a14      	ldr	r2, [pc, #80]	@ (8003330 <_sbrk+0x5c>)
 80032de:	4b15      	ldr	r3, [pc, #84]	@ (8003334 <_sbrk+0x60>)
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032e8:	4b13      	ldr	r3, [pc, #76]	@ (8003338 <_sbrk+0x64>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d102      	bne.n	80032f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032f0:	4b11      	ldr	r3, [pc, #68]	@ (8003338 <_sbrk+0x64>)
 80032f2:	4a12      	ldr	r2, [pc, #72]	@ (800333c <_sbrk+0x68>)
 80032f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032f6:	4b10      	ldr	r3, [pc, #64]	@ (8003338 <_sbrk+0x64>)
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4413      	add	r3, r2
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	429a      	cmp	r2, r3
 8003302:	d207      	bcs.n	8003314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003304:	f006 fa5e 	bl	80097c4 <__errno>
 8003308:	4603      	mov	r3, r0
 800330a:	220c      	movs	r2, #12
 800330c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800330e:	f04f 33ff 	mov.w	r3, #4294967295
 8003312:	e009      	b.n	8003328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003314:	4b08      	ldr	r3, [pc, #32]	@ (8003338 <_sbrk+0x64>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800331a:	4b07      	ldr	r3, [pc, #28]	@ (8003338 <_sbrk+0x64>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4413      	add	r3, r2
 8003322:	4a05      	ldr	r2, [pc, #20]	@ (8003338 <_sbrk+0x64>)
 8003324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003326:	68fb      	ldr	r3, [r7, #12]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	20040000 	.word	0x20040000
 8003334:	00000400 	.word	0x00000400
 8003338:	20000c54 	.word	0x20000c54
 800333c:	20000da8 	.word	0x20000da8

08003340 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003344:	4b06      	ldr	r3, [pc, #24]	@ (8003360 <SystemInit+0x20>)
 8003346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800334a:	4a05      	ldr	r2, [pc, #20]	@ (8003360 <SystemInit+0x20>)
 800334c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003350:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003354:	bf00      	nop
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	e000ed00 	.word	0xe000ed00

08003364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8003364:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800339c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003368:	480d      	ldr	r0, [pc, #52]	@ (80033a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800336a:	490e      	ldr	r1, [pc, #56]	@ (80033a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800336c:	4a0e      	ldr	r2, [pc, #56]	@ (80033a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800336e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003370:	e002      	b.n	8003378 <LoopCopyDataInit>

08003372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003376:	3304      	adds	r3, #4

08003378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800337a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800337c:	d3f9      	bcc.n	8003372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800337e:	4a0b      	ldr	r2, [pc, #44]	@ (80033ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003380:	4c0b      	ldr	r4, [pc, #44]	@ (80033b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003384:	e001      	b.n	800338a <LoopFillZerobss>

08003386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003388:	3204      	adds	r2, #4

0800338a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800338a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800338c:	d3fb      	bcc.n	8003386 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800338e:	f7ff ffd7 	bl	8003340 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003392:	f006 fa1d 	bl	80097d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003396:	f7fe fb5b 	bl	8001a50 <main>
  bx  lr    
 800339a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800339c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80033a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033a4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80033a8:	0800c334 	.word	0x0800c334
  ldr r2, =_sbss
 80033ac:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80033b0:	20000da8 	.word	0x20000da8

080033b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033b4:	e7fe      	b.n	80033b4 <ADC_IRQHandler>
	...

080033b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033bc:	4b0e      	ldr	r3, [pc, #56]	@ (80033f8 <HAL_Init+0x40>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a0d      	ldr	r2, [pc, #52]	@ (80033f8 <HAL_Init+0x40>)
 80033c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033c8:	4b0b      	ldr	r3, [pc, #44]	@ (80033f8 <HAL_Init+0x40>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a0a      	ldr	r2, [pc, #40]	@ (80033f8 <HAL_Init+0x40>)
 80033ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033d4:	4b08      	ldr	r3, [pc, #32]	@ (80033f8 <HAL_Init+0x40>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a07      	ldr	r2, [pc, #28]	@ (80033f8 <HAL_Init+0x40>)
 80033da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033e0:	2003      	movs	r0, #3
 80033e2:	f000 f94f 	bl	8003684 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033e6:	2000      	movs	r0, #0
 80033e8:	f000 f808 	bl	80033fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033ec:	f7ff f9b8 	bl	8002760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40023c00 	.word	0x40023c00

080033fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003404:	4b12      	ldr	r3, [pc, #72]	@ (8003450 <HAL_InitTick+0x54>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4b12      	ldr	r3, [pc, #72]	@ (8003454 <HAL_InitTick+0x58>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	4619      	mov	r1, r3
 800340e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003412:	fbb3 f3f1 	udiv	r3, r3, r1
 8003416:	fbb2 f3f3 	udiv	r3, r2, r3
 800341a:	4618      	mov	r0, r3
 800341c:	f000 f967 	bl	80036ee <HAL_SYSTICK_Config>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e00e      	b.n	8003448 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b0f      	cmp	r3, #15
 800342e:	d80a      	bhi.n	8003446 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003430:	2200      	movs	r2, #0
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	f04f 30ff 	mov.w	r0, #4294967295
 8003438:	f000 f92f 	bl	800369a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800343c:	4a06      	ldr	r2, [pc, #24]	@ (8003458 <HAL_InitTick+0x5c>)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	e000      	b.n	8003448 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
}
 8003448:	4618      	mov	r0, r3
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	20000000 	.word	0x20000000
 8003454:	20000008 	.word	0x20000008
 8003458:	20000004 	.word	0x20000004

0800345c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003460:	4b06      	ldr	r3, [pc, #24]	@ (800347c <HAL_IncTick+0x20>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	4b06      	ldr	r3, [pc, #24]	@ (8003480 <HAL_IncTick+0x24>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4413      	add	r3, r2
 800346c:	4a04      	ldr	r2, [pc, #16]	@ (8003480 <HAL_IncTick+0x24>)
 800346e:	6013      	str	r3, [r2, #0]
}
 8003470:	bf00      	nop
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	20000008 	.word	0x20000008
 8003480:	20000c58 	.word	0x20000c58

08003484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  return uwTick;
 8003488:	4b03      	ldr	r3, [pc, #12]	@ (8003498 <HAL_GetTick+0x14>)
 800348a:	681b      	ldr	r3, [r3, #0]
}
 800348c:	4618      	mov	r0, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	20000c58 	.word	0x20000c58

0800349c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034a4:	f7ff ffee 	bl	8003484 <HAL_GetTick>
 80034a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b4:	d005      	beq.n	80034c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034b6:	4b0a      	ldr	r3, [pc, #40]	@ (80034e0 <HAL_Delay+0x44>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4413      	add	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034c2:	bf00      	nop
 80034c4:	f7ff ffde 	bl	8003484 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d8f7      	bhi.n	80034c4 <HAL_Delay+0x28>
  {
  }
}
 80034d4:	bf00      	nop
 80034d6:	bf00      	nop
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20000008 	.word	0x20000008

080034e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003528 <__NVIC_SetPriorityGrouping+0x44>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003500:	4013      	ands	r3, r2
 8003502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800350c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003510:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003516:	4a04      	ldr	r2, [pc, #16]	@ (8003528 <__NVIC_SetPriorityGrouping+0x44>)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	60d3      	str	r3, [r2, #12]
}
 800351c:	bf00      	nop
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	e000ed00 	.word	0xe000ed00

0800352c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003530:	4b04      	ldr	r3, [pc, #16]	@ (8003544 <__NVIC_GetPriorityGrouping+0x18>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	0a1b      	lsrs	r3, r3, #8
 8003536:	f003 0307 	and.w	r3, r3, #7
}
 800353a:	4618      	mov	r0, r3
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	e000ed00 	.word	0xe000ed00

08003548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003556:	2b00      	cmp	r3, #0
 8003558:	db0b      	blt.n	8003572 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800355a:	79fb      	ldrb	r3, [r7, #7]
 800355c:	f003 021f 	and.w	r2, r3, #31
 8003560:	4907      	ldr	r1, [pc, #28]	@ (8003580 <__NVIC_EnableIRQ+0x38>)
 8003562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	2001      	movs	r0, #1
 800356a:	fa00 f202 	lsl.w	r2, r0, r2
 800356e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	e000e100 	.word	0xe000e100

08003584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	6039      	str	r1, [r7, #0]
 800358e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003594:	2b00      	cmp	r3, #0
 8003596:	db0a      	blt.n	80035ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	b2da      	uxtb	r2, r3
 800359c:	490c      	ldr	r1, [pc, #48]	@ (80035d0 <__NVIC_SetPriority+0x4c>)
 800359e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a2:	0112      	lsls	r2, r2, #4
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	440b      	add	r3, r1
 80035a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035ac:	e00a      	b.n	80035c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	4908      	ldr	r1, [pc, #32]	@ (80035d4 <__NVIC_SetPriority+0x50>)
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	3b04      	subs	r3, #4
 80035bc:	0112      	lsls	r2, r2, #4
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	440b      	add	r3, r1
 80035c2:	761a      	strb	r2, [r3, #24]
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	e000e100 	.word	0xe000e100
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d8:	b480      	push	{r7}
 80035da:	b089      	sub	sp, #36	@ 0x24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f1c3 0307 	rsb	r3, r3, #7
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	bf28      	it	cs
 80035f6:	2304      	movcs	r3, #4
 80035f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	3304      	adds	r3, #4
 80035fe:	2b06      	cmp	r3, #6
 8003600:	d902      	bls.n	8003608 <NVIC_EncodePriority+0x30>
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3b03      	subs	r3, #3
 8003606:	e000      	b.n	800360a <NVIC_EncodePriority+0x32>
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800360c:	f04f 32ff 	mov.w	r2, #4294967295
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43da      	mvns	r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	401a      	ands	r2, r3
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003620:	f04f 31ff 	mov.w	r1, #4294967295
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	fa01 f303 	lsl.w	r3, r1, r3
 800362a:	43d9      	mvns	r1, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003630:	4313      	orrs	r3, r2
         );
}
 8003632:	4618      	mov	r0, r3
 8003634:	3724      	adds	r7, #36	@ 0x24
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3b01      	subs	r3, #1
 800364c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003650:	d301      	bcc.n	8003656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003652:	2301      	movs	r3, #1
 8003654:	e00f      	b.n	8003676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003656:	4a0a      	ldr	r2, [pc, #40]	@ (8003680 <SysTick_Config+0x40>)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3b01      	subs	r3, #1
 800365c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800365e:	210f      	movs	r1, #15
 8003660:	f04f 30ff 	mov.w	r0, #4294967295
 8003664:	f7ff ff8e 	bl	8003584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003668:	4b05      	ldr	r3, [pc, #20]	@ (8003680 <SysTick_Config+0x40>)
 800366a:	2200      	movs	r2, #0
 800366c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800366e:	4b04      	ldr	r3, [pc, #16]	@ (8003680 <SysTick_Config+0x40>)
 8003670:	2207      	movs	r2, #7
 8003672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	e000e010 	.word	0xe000e010

08003684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7ff ff29 	bl	80034e4 <__NVIC_SetPriorityGrouping>
}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800369a:	b580      	push	{r7, lr}
 800369c:	b086      	sub	sp, #24
 800369e:	af00      	add	r7, sp, #0
 80036a0:	4603      	mov	r3, r0
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
 80036a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036ac:	f7ff ff3e 	bl	800352c <__NVIC_GetPriorityGrouping>
 80036b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	6978      	ldr	r0, [r7, #20]
 80036b8:	f7ff ff8e 	bl	80035d8 <NVIC_EncodePriority>
 80036bc:	4602      	mov	r2, r0
 80036be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036c2:	4611      	mov	r1, r2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff ff5d 	bl	8003584 <__NVIC_SetPriority>
}
 80036ca:	bf00      	nop
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b082      	sub	sp, #8
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	4603      	mov	r3, r0
 80036da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff ff31 	bl	8003548 <__NVIC_EnableIRQ>
}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b082      	sub	sp, #8
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7ff ffa2 	bl	8003640 <SysTick_Config>
 80036fc:	4603      	mov	r3, r0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003714:	f7ff feb6 	bl	8003484 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e099      	b.n	8003858 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0201 	bic.w	r2, r2, #1
 8003742:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003744:	e00f      	b.n	8003766 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003746:	f7ff fe9d 	bl	8003484 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b05      	cmp	r3, #5
 8003752:	d908      	bls.n	8003766 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2220      	movs	r2, #32
 8003758:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2203      	movs	r2, #3
 800375e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e078      	b.n	8003858 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e8      	bne.n	8003746 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	4b38      	ldr	r3, [pc, #224]	@ (8003860 <HAL_DMA_Init+0x158>)
 8003780:	4013      	ands	r3, r2
 8003782:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003792:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800379e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d107      	bne.n	80037d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c8:	4313      	orrs	r3, r2
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f023 0307 	bic.w	r3, r3, #7
 80037e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d117      	bne.n	800382a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00e      	beq.n	800382a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 fb01 	bl	8003e14 <DMA_CheckFifoParam>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2240      	movs	r2, #64	@ 0x40
 800381c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003826:	2301      	movs	r3, #1
 8003828:	e016      	b.n	8003858 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fab8 	bl	8003da8 <DMA_CalcBaseAndBitshift>
 8003838:	4603      	mov	r3, r0
 800383a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003840:	223f      	movs	r2, #63	@ 0x3f
 8003842:	409a      	lsls	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	f010803f 	.word	0xf010803f

08003864 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_DMA_Start_IT+0x26>
 8003886:	2302      	movs	r3, #2
 8003888:	e040      	b.n	800390c <HAL_DMA_Start_IT+0xa8>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b01      	cmp	r3, #1
 800389c:	d12f      	bne.n	80038fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2202      	movs	r2, #2
 80038a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 fa4a 	bl	8003d4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038bc:	223f      	movs	r2, #63	@ 0x3f
 80038be:	409a      	lsls	r2, r3
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0216 	orr.w	r2, r2, #22
 80038d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d007      	beq.n	80038ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0208 	orr.w	r2, r2, #8
 80038ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	e005      	b.n	800390a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003906:	2302      	movs	r3, #2
 8003908:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800390a:	7dfb      	ldrb	r3, [r7, #23]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003920:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003922:	f7ff fdaf 	bl	8003484 <HAL_GetTick>
 8003926:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d008      	beq.n	8003946 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2280      	movs	r2, #128	@ 0x80
 8003938:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e052      	b.n	80039ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0216 	bic.w	r2, r2, #22
 8003954:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003964:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396a:	2b00      	cmp	r3, #0
 800396c:	d103      	bne.n	8003976 <HAL_DMA_Abort+0x62>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003972:	2b00      	cmp	r3, #0
 8003974:	d007      	beq.n	8003986 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0208 	bic.w	r2, r2, #8
 8003984:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0201 	bic.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003996:	e013      	b.n	80039c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003998:	f7ff fd74 	bl	8003484 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b05      	cmp	r3, #5
 80039a4:	d90c      	bls.n	80039c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2220      	movs	r2, #32
 80039aa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2203      	movs	r2, #3
 80039b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e015      	b.n	80039ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1e4      	bne.n	8003998 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d2:	223f      	movs	r2, #63	@ 0x3f
 80039d4:	409a      	lsls	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d004      	beq.n	8003a12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2280      	movs	r2, #128	@ 0x80
 8003a0c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e00c      	b.n	8003a2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2205      	movs	r2, #5
 8003a16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0201 	bic.w	r2, r2, #1
 8003a28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a44:	4b8e      	ldr	r3, [pc, #568]	@ (8003c80 <HAL_DMA_IRQHandler+0x248>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a8e      	ldr	r2, [pc, #568]	@ (8003c84 <HAL_DMA_IRQHandler+0x24c>)
 8003a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4e:	0a9b      	lsrs	r3, r3, #10
 8003a50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a62:	2208      	movs	r2, #8
 8003a64:	409a      	lsls	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d01a      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d013      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0204 	bic.w	r2, r2, #4
 8003a8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a90:	2208      	movs	r2, #8
 8003a92:	409a      	lsls	r2, r3
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a9c:	f043 0201 	orr.w	r2, r3, #1
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d012      	beq.n	8003ada <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00b      	beq.n	8003ada <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ad2:	f043 0202 	orr.w	r2, r3, #2
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ade:	2204      	movs	r2, #4
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d012      	beq.n	8003b10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00b      	beq.n	8003b10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afc:	2204      	movs	r2, #4
 8003afe:	409a      	lsls	r2, r3
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b08:	f043 0204 	orr.w	r2, r3, #4
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b14:	2210      	movs	r2, #16
 8003b16:	409a      	lsls	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d043      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d03c      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b32:	2210      	movs	r2, #16
 8003b34:	409a      	lsls	r2, r3
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d018      	beq.n	8003b7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d108      	bne.n	8003b68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d024      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	4798      	blx	r3
 8003b66:	e01f      	b.n	8003ba8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d01b      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	4798      	blx	r3
 8003b78:	e016      	b.n	8003ba8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d107      	bne.n	8003b98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0208 	bic.w	r2, r2, #8
 8003b96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bac:	2220      	movs	r2, #32
 8003bae:	409a      	lsls	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 808f 	beq.w	8003cd8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 8087 	beq.w	8003cd8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bce:	2220      	movs	r2, #32
 8003bd0:	409a      	lsls	r2, r3
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b05      	cmp	r3, #5
 8003be0:	d136      	bne.n	8003c50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0216 	bic.w	r2, r2, #22
 8003bf0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695a      	ldr	r2, [r3, #20]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d103      	bne.n	8003c12 <HAL_DMA_IRQHandler+0x1da>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d007      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0208 	bic.w	r2, r2, #8
 8003c20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c26:	223f      	movs	r2, #63	@ 0x3f
 8003c28:	409a      	lsls	r2, r3
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d07e      	beq.n	8003d44 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	4798      	blx	r3
        }
        return;
 8003c4e:	e079      	b.n	8003d44 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d01d      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10d      	bne.n	8003c88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d031      	beq.n	8003cd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	4798      	blx	r3
 8003c7c:	e02c      	b.n	8003cd8 <HAL_DMA_IRQHandler+0x2a0>
 8003c7e:	bf00      	nop
 8003c80:	20000000 	.word	0x20000000
 8003c84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d023      	beq.n	8003cd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	4798      	blx	r3
 8003c98:	e01e      	b.n	8003cd8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10f      	bne.n	8003cc8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0210 	bic.w	r2, r2, #16
 8003cb6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d032      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d022      	beq.n	8003d32 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2205      	movs	r2, #5
 8003cf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0201 	bic.w	r2, r2, #1
 8003d02:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	3301      	adds	r3, #1
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d307      	bcc.n	8003d20 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f2      	bne.n	8003d04 <HAL_DMA_IRQHandler+0x2cc>
 8003d1e:	e000      	b.n	8003d22 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003d20:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d005      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	4798      	blx	r3
 8003d42:	e000      	b.n	8003d46 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d44:	bf00      	nop
    }
  }
}
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
 8003d58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b40      	cmp	r3, #64	@ 0x40
 8003d78:	d108      	bne.n	8003d8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d8a:	e007      	b.n	8003d9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	60da      	str	r2, [r3, #12]
}
 8003d9c:	bf00      	nop
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	3b10      	subs	r3, #16
 8003db8:	4a14      	ldr	r2, [pc, #80]	@ (8003e0c <DMA_CalcBaseAndBitshift+0x64>)
 8003dba:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbe:	091b      	lsrs	r3, r3, #4
 8003dc0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003dc2:	4a13      	ldr	r2, [pc, #76]	@ (8003e10 <DMA_CalcBaseAndBitshift+0x68>)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2b03      	cmp	r3, #3
 8003dd4:	d909      	bls.n	8003dea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003dde:	f023 0303 	bic.w	r3, r3, #3
 8003de2:	1d1a      	adds	r2, r3, #4
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	659a      	str	r2, [r3, #88]	@ 0x58
 8003de8:	e007      	b.n	8003dfa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003df2:	f023 0303 	bic.w	r3, r3, #3
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	aaaaaaab 	.word	0xaaaaaaab
 8003e10:	0800be98 	.word	0x0800be98

08003e14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d11f      	bne.n	8003e6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2b03      	cmp	r3, #3
 8003e32:	d856      	bhi.n	8003ee2 <DMA_CheckFifoParam+0xce>
 8003e34:	a201      	add	r2, pc, #4	@ (adr r2, 8003e3c <DMA_CheckFifoParam+0x28>)
 8003e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3a:	bf00      	nop
 8003e3c:	08003e4d 	.word	0x08003e4d
 8003e40:	08003e5f 	.word	0x08003e5f
 8003e44:	08003e4d 	.word	0x08003e4d
 8003e48:	08003ee3 	.word	0x08003ee3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d046      	beq.n	8003ee6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e5c:	e043      	b.n	8003ee6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e62:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e66:	d140      	bne.n	8003eea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e6c:	e03d      	b.n	8003eea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e76:	d121      	bne.n	8003ebc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	d837      	bhi.n	8003eee <DMA_CheckFifoParam+0xda>
 8003e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e84 <DMA_CheckFifoParam+0x70>)
 8003e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e84:	08003e95 	.word	0x08003e95
 8003e88:	08003e9b 	.word	0x08003e9b
 8003e8c:	08003e95 	.word	0x08003e95
 8003e90:	08003ead 	.word	0x08003ead
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	73fb      	strb	r3, [r7, #15]
      break;
 8003e98:	e030      	b.n	8003efc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d025      	beq.n	8003ef2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eaa:	e022      	b.n	8003ef2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003eb4:	d11f      	bne.n	8003ef6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003eba:	e01c      	b.n	8003ef6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d903      	bls.n	8003eca <DMA_CheckFifoParam+0xb6>
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b03      	cmp	r3, #3
 8003ec6:	d003      	beq.n	8003ed0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ec8:	e018      	b.n	8003efc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	73fb      	strb	r3, [r7, #15]
      break;
 8003ece:	e015      	b.n	8003efc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00e      	beq.n	8003efa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee0:	e00b      	b.n	8003efa <DMA_CheckFifoParam+0xe6>
      break;
 8003ee2:	bf00      	nop
 8003ee4:	e00a      	b.n	8003efc <DMA_CheckFifoParam+0xe8>
      break;
 8003ee6:	bf00      	nop
 8003ee8:	e008      	b.n	8003efc <DMA_CheckFifoParam+0xe8>
      break;
 8003eea:	bf00      	nop
 8003eec:	e006      	b.n	8003efc <DMA_CheckFifoParam+0xe8>
      break;
 8003eee:	bf00      	nop
 8003ef0:	e004      	b.n	8003efc <DMA_CheckFifoParam+0xe8>
      break;
 8003ef2:	bf00      	nop
 8003ef4:	e002      	b.n	8003efc <DMA_CheckFifoParam+0xe8>
      break;   
 8003ef6:	bf00      	nop
 8003ef8:	e000      	b.n	8003efc <DMA_CheckFifoParam+0xe8>
      break;
 8003efa:	bf00      	nop
    }
  } 
  
  return status; 
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop

08003f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b089      	sub	sp, #36	@ 0x24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f22:	2300      	movs	r3, #0
 8003f24:	61fb      	str	r3, [r7, #28]
 8003f26:	e165      	b.n	80041f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f28:	2201      	movs	r2, #1
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	f040 8154 	bne.w	80041ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d005      	beq.n	8003f5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d130      	bne.n	8003fc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	2203      	movs	r2, #3
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	43db      	mvns	r3, r3
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4013      	ands	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f94:	2201      	movs	r2, #1
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	43db      	mvns	r3, r3
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	091b      	lsrs	r3, r3, #4
 8003faa:	f003 0201 	and.w	r2, r3, #1
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f003 0303 	and.w	r3, r3, #3
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d017      	beq.n	8003ffc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	2203      	movs	r2, #3
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f003 0303 	and.w	r3, r3, #3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d123      	bne.n	8004050 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	08da      	lsrs	r2, r3, #3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3208      	adds	r2, #8
 8004010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004014:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	220f      	movs	r2, #15
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	43db      	mvns	r3, r3
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4013      	ands	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	691a      	ldr	r2, [r3, #16]
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	4313      	orrs	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	08da      	lsrs	r2, r3, #3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3208      	adds	r2, #8
 800404a:	69b9      	ldr	r1, [r7, #24]
 800404c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	2203      	movs	r2, #3
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	43db      	mvns	r3, r3
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	4013      	ands	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f003 0203 	and.w	r2, r3, #3
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	4313      	orrs	r3, r2
 800407c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 80ae 	beq.w	80041ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	4b5d      	ldr	r3, [pc, #372]	@ (800420c <HAL_GPIO_Init+0x300>)
 8004098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409a:	4a5c      	ldr	r2, [pc, #368]	@ (800420c <HAL_GPIO_Init+0x300>)
 800409c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80040a2:	4b5a      	ldr	r3, [pc, #360]	@ (800420c <HAL_GPIO_Init+0x300>)
 80040a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040ae:	4a58      	ldr	r2, [pc, #352]	@ (8004210 <HAL_GPIO_Init+0x304>)
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	089b      	lsrs	r3, r3, #2
 80040b4:	3302      	adds	r3, #2
 80040b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f003 0303 	and.w	r3, r3, #3
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	220f      	movs	r2, #15
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	43db      	mvns	r3, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4013      	ands	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a4f      	ldr	r2, [pc, #316]	@ (8004214 <HAL_GPIO_Init+0x308>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d025      	beq.n	8004126 <HAL_GPIO_Init+0x21a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a4e      	ldr	r2, [pc, #312]	@ (8004218 <HAL_GPIO_Init+0x30c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d01f      	beq.n	8004122 <HAL_GPIO_Init+0x216>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a4d      	ldr	r2, [pc, #308]	@ (800421c <HAL_GPIO_Init+0x310>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d019      	beq.n	800411e <HAL_GPIO_Init+0x212>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a4c      	ldr	r2, [pc, #304]	@ (8004220 <HAL_GPIO_Init+0x314>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d013      	beq.n	800411a <HAL_GPIO_Init+0x20e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a4b      	ldr	r2, [pc, #300]	@ (8004224 <HAL_GPIO_Init+0x318>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00d      	beq.n	8004116 <HAL_GPIO_Init+0x20a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a4a      	ldr	r2, [pc, #296]	@ (8004228 <HAL_GPIO_Init+0x31c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d007      	beq.n	8004112 <HAL_GPIO_Init+0x206>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a49      	ldr	r2, [pc, #292]	@ (800422c <HAL_GPIO_Init+0x320>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d101      	bne.n	800410e <HAL_GPIO_Init+0x202>
 800410a:	2306      	movs	r3, #6
 800410c:	e00c      	b.n	8004128 <HAL_GPIO_Init+0x21c>
 800410e:	2307      	movs	r3, #7
 8004110:	e00a      	b.n	8004128 <HAL_GPIO_Init+0x21c>
 8004112:	2305      	movs	r3, #5
 8004114:	e008      	b.n	8004128 <HAL_GPIO_Init+0x21c>
 8004116:	2304      	movs	r3, #4
 8004118:	e006      	b.n	8004128 <HAL_GPIO_Init+0x21c>
 800411a:	2303      	movs	r3, #3
 800411c:	e004      	b.n	8004128 <HAL_GPIO_Init+0x21c>
 800411e:	2302      	movs	r3, #2
 8004120:	e002      	b.n	8004128 <HAL_GPIO_Init+0x21c>
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <HAL_GPIO_Init+0x21c>
 8004126:	2300      	movs	r3, #0
 8004128:	69fa      	ldr	r2, [r7, #28]
 800412a:	f002 0203 	and.w	r2, r2, #3
 800412e:	0092      	lsls	r2, r2, #2
 8004130:	4093      	lsls	r3, r2
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	4313      	orrs	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004138:	4935      	ldr	r1, [pc, #212]	@ (8004210 <HAL_GPIO_Init+0x304>)
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	089b      	lsrs	r3, r3, #2
 800413e:	3302      	adds	r3, #2
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004146:	4b3a      	ldr	r3, [pc, #232]	@ (8004230 <HAL_GPIO_Init+0x324>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	43db      	mvns	r3, r3
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4013      	ands	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800416a:	4a31      	ldr	r2, [pc, #196]	@ (8004230 <HAL_GPIO_Init+0x324>)
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004170:	4b2f      	ldr	r3, [pc, #188]	@ (8004230 <HAL_GPIO_Init+0x324>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	43db      	mvns	r3, r3
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	4013      	ands	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004194:	4a26      	ldr	r2, [pc, #152]	@ (8004230 <HAL_GPIO_Init+0x324>)
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800419a:	4b25      	ldr	r3, [pc, #148]	@ (8004230 <HAL_GPIO_Init+0x324>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	43db      	mvns	r3, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4013      	ands	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041be:	4a1c      	ldr	r2, [pc, #112]	@ (8004230 <HAL_GPIO_Init+0x324>)
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004230 <HAL_GPIO_Init+0x324>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	43db      	mvns	r3, r3
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4013      	ands	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041e8:	4a11      	ldr	r2, [pc, #68]	@ (8004230 <HAL_GPIO_Init+0x324>)
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	3301      	adds	r3, #1
 80041f2:	61fb      	str	r3, [r7, #28]
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	2b0f      	cmp	r3, #15
 80041f8:	f67f ae96 	bls.w	8003f28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041fc:	bf00      	nop
 80041fe:	bf00      	nop
 8004200:	3724      	adds	r7, #36	@ 0x24
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40023800 	.word	0x40023800
 8004210:	40013800 	.word	0x40013800
 8004214:	40020000 	.word	0x40020000
 8004218:	40020400 	.word	0x40020400
 800421c:	40020800 	.word	0x40020800
 8004220:	40020c00 	.word	0x40020c00
 8004224:	40021000 	.word	0x40021000
 8004228:	40021400 	.word	0x40021400
 800422c:	40021800 	.word	0x40021800
 8004230:	40013c00 	.word	0x40013c00

08004234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	460b      	mov	r3, r1
 800423e:	807b      	strh	r3, [r7, #2]
 8004240:	4613      	mov	r3, r2
 8004242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004244:	787b      	ldrb	r3, [r7, #1]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800424a:	887a      	ldrh	r2, [r7, #2]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004250:	e003      	b.n	800425a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004252:	887b      	ldrh	r3, [r7, #2]
 8004254:	041a      	lsls	r2, r3, #16
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	619a      	str	r2, [r3, #24]
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
	...

08004268 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	4603      	mov	r3, r0
 8004270:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004272:	4b08      	ldr	r3, [pc, #32]	@ (8004294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004274:	695a      	ldr	r2, [r3, #20]
 8004276:	88fb      	ldrh	r3, [r7, #6]
 8004278:	4013      	ands	r3, r2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d006      	beq.n	800428c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800427e:	4a05      	ldr	r2, [pc, #20]	@ (8004294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004280:	88fb      	ldrh	r3, [r7, #6]
 8004282:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004284:	88fb      	ldrh	r3, [r7, #6]
 8004286:	4618      	mov	r0, r3
 8004288:	f000 f806 	bl	8004298 <HAL_GPIO_EXTI_Callback>
  }
}
 800428c:	bf00      	nop
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40013c00 	.word	0x40013c00

08004298 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b086      	sub	sp, #24
 80042b2:	af02      	add	r7, sp, #8
 80042b4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e108      	b.n	80044d2 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d106      	bne.n	80042e0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7fe fe48 	bl	8002f70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2203      	movs	r2, #3
 80042e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042ee:	d102      	bne.n	80042f6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f003 fb16 	bl	800792c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6818      	ldr	r0, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	7c1a      	ldrb	r2, [r3, #16]
 8004308:	f88d 2000 	strb.w	r2, [sp]
 800430c:	3304      	adds	r3, #4
 800430e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004310:	f003 faa8 	bl	8007864 <USB_CoreInit>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2202      	movs	r2, #2
 800431e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e0d5      	b.n	80044d2 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2100      	movs	r1, #0
 800432c:	4618      	mov	r0, r3
 800432e:	f003 fb0e 	bl	800794e <USB_SetCurrentMode>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d005      	beq.n	8004344 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e0c6      	b.n	80044d2 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004344:	2300      	movs	r3, #0
 8004346:	73fb      	strb	r3, [r7, #15]
 8004348:	e04a      	b.n	80043e0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800434a:	7bfa      	ldrb	r2, [r7, #15]
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	3315      	adds	r3, #21
 800435a:	2201      	movs	r2, #1
 800435c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800435e:	7bfa      	ldrb	r2, [r7, #15]
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	4613      	mov	r3, r2
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	4413      	add	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	440b      	add	r3, r1
 800436c:	3314      	adds	r3, #20
 800436e:	7bfa      	ldrb	r2, [r7, #15]
 8004370:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004372:	7bfa      	ldrb	r2, [r7, #15]
 8004374:	7bfb      	ldrb	r3, [r7, #15]
 8004376:	b298      	uxth	r0, r3
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	4613      	mov	r3, r2
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	4413      	add	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	440b      	add	r3, r1
 8004384:	332e      	adds	r3, #46	@ 0x2e
 8004386:	4602      	mov	r2, r0
 8004388:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800438a:	7bfa      	ldrb	r2, [r7, #15]
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	4413      	add	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	3318      	adds	r3, #24
 800439a:	2200      	movs	r2, #0
 800439c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800439e:	7bfa      	ldrb	r2, [r7, #15]
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	4613      	mov	r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	4413      	add	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	331c      	adds	r3, #28
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80043b2:	7bfa      	ldrb	r2, [r7, #15]
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	4613      	mov	r3, r2
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	4413      	add	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	440b      	add	r3, r1
 80043c0:	3320      	adds	r3, #32
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80043c6:	7bfa      	ldrb	r2, [r7, #15]
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	4413      	add	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	3324      	adds	r3, #36	@ 0x24
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043da:	7bfb      	ldrb	r3, [r7, #15]
 80043dc:	3301      	adds	r3, #1
 80043de:	73fb      	strb	r3, [r7, #15]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	791b      	ldrb	r3, [r3, #4]
 80043e4:	7bfa      	ldrb	r2, [r7, #15]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d3af      	bcc.n	800434a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043ea:	2300      	movs	r3, #0
 80043ec:	73fb      	strb	r3, [r7, #15]
 80043ee:	e044      	b.n	800447a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80043f0:	7bfa      	ldrb	r2, [r7, #15]
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	4613      	mov	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	4413      	add	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004402:	2200      	movs	r2, #0
 8004404:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004406:	7bfa      	ldrb	r2, [r7, #15]
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	4613      	mov	r3, r2
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	4413      	add	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	440b      	add	r3, r1
 8004414:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004418:	7bfa      	ldrb	r2, [r7, #15]
 800441a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800441c:	7bfa      	ldrb	r2, [r7, #15]
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	4613      	mov	r3, r2
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4413      	add	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800442e:	2200      	movs	r2, #0
 8004430:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004432:	7bfa      	ldrb	r2, [r7, #15]
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	4413      	add	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	440b      	add	r3, r1
 8004440:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004448:	7bfa      	ldrb	r2, [r7, #15]
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800445e:	7bfa      	ldrb	r2, [r7, #15]
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	4613      	mov	r3, r2
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	4413      	add	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	440b      	add	r3, r1
 800446c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	3301      	adds	r3, #1
 8004478:	73fb      	strb	r3, [r7, #15]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	791b      	ldrb	r3, [r3, #4]
 800447e:	7bfa      	ldrb	r2, [r7, #15]
 8004480:	429a      	cmp	r2, r3
 8004482:	d3b5      	bcc.n	80043f0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6818      	ldr	r0, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	7c1a      	ldrb	r2, [r3, #16]
 800448c:	f88d 2000 	strb.w	r2, [sp]
 8004490:	3304      	adds	r3, #4
 8004492:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004494:	f003 faa8 	bl	80079e8 <USB_DevInit>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d005      	beq.n	80044aa <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2202      	movs	r2, #2
 80044a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e013      	b.n	80044d2 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	7b1b      	ldrb	r3, [r3, #12]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d102      	bne.n	80044c6 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f80a 	bl	80044da <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f003 fc63 	bl	8007d96 <USB_DevDisconnect>

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80044da:	b480      	push	{r7}
 80044dc:	b085      	sub	sp, #20
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800450c:	f043 0303 	orr.w	r3, r3, #3
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
	...

08004524 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e0cc      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004538:	4b68      	ldr	r3, [pc, #416]	@ (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	429a      	cmp	r2, r3
 8004544:	d90c      	bls.n	8004560 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004546:	4b65      	ldr	r3, [pc, #404]	@ (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800454e:	4b63      	ldr	r3, [pc, #396]	@ (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d001      	beq.n	8004560 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e0b8      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d020      	beq.n	80045ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004578:	4b59      	ldr	r3, [pc, #356]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	4a58      	ldr	r2, [pc, #352]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004582:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004590:	4b53      	ldr	r3, [pc, #332]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	4a52      	ldr	r2, [pc, #328]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800459a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800459c:	4b50      	ldr	r3, [pc, #320]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	494d      	ldr	r1, [pc, #308]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d044      	beq.n	8004644 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d107      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c2:	4b47      	ldr	r3, [pc, #284]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d119      	bne.n	8004602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e07f      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d003      	beq.n	80045e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d107      	bne.n	80045f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e2:	4b3f      	ldr	r3, [pc, #252]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d109      	bne.n	8004602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e06f      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f2:	4b3b      	ldr	r3, [pc, #236]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e067      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004602:	4b37      	ldr	r3, [pc, #220]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f023 0203 	bic.w	r2, r3, #3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	4934      	ldr	r1, [pc, #208]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004610:	4313      	orrs	r3, r2
 8004612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004614:	f7fe ff36 	bl	8003484 <HAL_GetTick>
 8004618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800461a:	e00a      	b.n	8004632 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800461c:	f7fe ff32 	bl	8003484 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e04f      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004632:	4b2b      	ldr	r3, [pc, #172]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 020c 	and.w	r2, r3, #12
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	429a      	cmp	r2, r3
 8004642:	d1eb      	bne.n	800461c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004644:	4b25      	ldr	r3, [pc, #148]	@ (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	429a      	cmp	r2, r3
 8004650:	d20c      	bcs.n	800466c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004652:	4b22      	ldr	r3, [pc, #136]	@ (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800465a:	4b20      	ldr	r3, [pc, #128]	@ (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d001      	beq.n	800466c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e032      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004678:	4b19      	ldr	r3, [pc, #100]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	4916      	ldr	r1, [pc, #88]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	4313      	orrs	r3, r2
 8004688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004696:	4b12      	ldr	r3, [pc, #72]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	490e      	ldr	r1, [pc, #56]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046aa:	f000 f821 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 80046ae:	4602      	mov	r2, r0
 80046b0:	4b0b      	ldr	r3, [pc, #44]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	490a      	ldr	r1, [pc, #40]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c0>)
 80046bc:	5ccb      	ldrb	r3, [r1, r3]
 80046be:	fa22 f303 	lsr.w	r3, r2, r3
 80046c2:	4a09      	ldr	r2, [pc, #36]	@ (80046e8 <HAL_RCC_ClockConfig+0x1c4>)
 80046c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046c6:	4b09      	ldr	r3, [pc, #36]	@ (80046ec <HAL_RCC_ClockConfig+0x1c8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fe fe96 	bl	80033fc <HAL_InitTick>

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40023c00 	.word	0x40023c00
 80046e0:	40023800 	.word	0x40023800
 80046e4:	0800be80 	.word	0x0800be80
 80046e8:	20000000 	.word	0x20000000
 80046ec:	20000004 	.word	0x20000004

080046f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046f4:	b094      	sub	sp, #80	@ 0x50
 80046f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80046fc:	2300      	movs	r3, #0
 80046fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004700:	2300      	movs	r3, #0
 8004702:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004708:	4b79      	ldr	r3, [pc, #484]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 030c 	and.w	r3, r3, #12
 8004710:	2b08      	cmp	r3, #8
 8004712:	d00d      	beq.n	8004730 <HAL_RCC_GetSysClockFreq+0x40>
 8004714:	2b08      	cmp	r3, #8
 8004716:	f200 80e1 	bhi.w	80048dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <HAL_RCC_GetSysClockFreq+0x34>
 800471e:	2b04      	cmp	r3, #4
 8004720:	d003      	beq.n	800472a <HAL_RCC_GetSysClockFreq+0x3a>
 8004722:	e0db      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004724:	4b73      	ldr	r3, [pc, #460]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004726:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004728:	e0db      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800472a:	4b73      	ldr	r3, [pc, #460]	@ (80048f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800472c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800472e:	e0d8      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004730:	4b6f      	ldr	r3, [pc, #444]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004738:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800473a:	4b6d      	ldr	r3, [pc, #436]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d063      	beq.n	800480e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004746:	4b6a      	ldr	r3, [pc, #424]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	099b      	lsrs	r3, r3, #6
 800474c:	2200      	movs	r2, #0
 800474e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004750:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004758:	633b      	str	r3, [r7, #48]	@ 0x30
 800475a:	2300      	movs	r3, #0
 800475c:	637b      	str	r3, [r7, #52]	@ 0x34
 800475e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004762:	4622      	mov	r2, r4
 8004764:	462b      	mov	r3, r5
 8004766:	f04f 0000 	mov.w	r0, #0
 800476a:	f04f 0100 	mov.w	r1, #0
 800476e:	0159      	lsls	r1, r3, #5
 8004770:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004774:	0150      	lsls	r0, r2, #5
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	4621      	mov	r1, r4
 800477c:	1a51      	subs	r1, r2, r1
 800477e:	6139      	str	r1, [r7, #16]
 8004780:	4629      	mov	r1, r5
 8004782:	eb63 0301 	sbc.w	r3, r3, r1
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	f04f 0200 	mov.w	r2, #0
 800478c:	f04f 0300 	mov.w	r3, #0
 8004790:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004794:	4659      	mov	r1, fp
 8004796:	018b      	lsls	r3, r1, #6
 8004798:	4651      	mov	r1, sl
 800479a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800479e:	4651      	mov	r1, sl
 80047a0:	018a      	lsls	r2, r1, #6
 80047a2:	4651      	mov	r1, sl
 80047a4:	ebb2 0801 	subs.w	r8, r2, r1
 80047a8:	4659      	mov	r1, fp
 80047aa:	eb63 0901 	sbc.w	r9, r3, r1
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	f04f 0300 	mov.w	r3, #0
 80047b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047c2:	4690      	mov	r8, r2
 80047c4:	4699      	mov	r9, r3
 80047c6:	4623      	mov	r3, r4
 80047c8:	eb18 0303 	adds.w	r3, r8, r3
 80047cc:	60bb      	str	r3, [r7, #8]
 80047ce:	462b      	mov	r3, r5
 80047d0:	eb49 0303 	adc.w	r3, r9, r3
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	f04f 0200 	mov.w	r2, #0
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047e2:	4629      	mov	r1, r5
 80047e4:	024b      	lsls	r3, r1, #9
 80047e6:	4621      	mov	r1, r4
 80047e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047ec:	4621      	mov	r1, r4
 80047ee:	024a      	lsls	r2, r1, #9
 80047f0:	4610      	mov	r0, r2
 80047f2:	4619      	mov	r1, r3
 80047f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047f6:	2200      	movs	r2, #0
 80047f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004800:	f7fc fa62 	bl	8000cc8 <__aeabi_uldivmod>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4613      	mov	r3, r2
 800480a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800480c:	e058      	b.n	80048c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800480e:	4b38      	ldr	r3, [pc, #224]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	099b      	lsrs	r3, r3, #6
 8004814:	2200      	movs	r2, #0
 8004816:	4618      	mov	r0, r3
 8004818:	4611      	mov	r1, r2
 800481a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800481e:	623b      	str	r3, [r7, #32]
 8004820:	2300      	movs	r3, #0
 8004822:	627b      	str	r3, [r7, #36]	@ 0x24
 8004824:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004828:	4642      	mov	r2, r8
 800482a:	464b      	mov	r3, r9
 800482c:	f04f 0000 	mov.w	r0, #0
 8004830:	f04f 0100 	mov.w	r1, #0
 8004834:	0159      	lsls	r1, r3, #5
 8004836:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800483a:	0150      	lsls	r0, r2, #5
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4641      	mov	r1, r8
 8004842:	ebb2 0a01 	subs.w	sl, r2, r1
 8004846:	4649      	mov	r1, r9
 8004848:	eb63 0b01 	sbc.w	fp, r3, r1
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004858:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800485c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004860:	ebb2 040a 	subs.w	r4, r2, sl
 8004864:	eb63 050b 	sbc.w	r5, r3, fp
 8004868:	f04f 0200 	mov.w	r2, #0
 800486c:	f04f 0300 	mov.w	r3, #0
 8004870:	00eb      	lsls	r3, r5, #3
 8004872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004876:	00e2      	lsls	r2, r4, #3
 8004878:	4614      	mov	r4, r2
 800487a:	461d      	mov	r5, r3
 800487c:	4643      	mov	r3, r8
 800487e:	18e3      	adds	r3, r4, r3
 8004880:	603b      	str	r3, [r7, #0]
 8004882:	464b      	mov	r3, r9
 8004884:	eb45 0303 	adc.w	r3, r5, r3
 8004888:	607b      	str	r3, [r7, #4]
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	f04f 0300 	mov.w	r3, #0
 8004892:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004896:	4629      	mov	r1, r5
 8004898:	028b      	lsls	r3, r1, #10
 800489a:	4621      	mov	r1, r4
 800489c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048a0:	4621      	mov	r1, r4
 80048a2:	028a      	lsls	r2, r1, #10
 80048a4:	4610      	mov	r0, r2
 80048a6:	4619      	mov	r1, r3
 80048a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048aa:	2200      	movs	r2, #0
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	61fa      	str	r2, [r7, #28]
 80048b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048b4:	f7fc fa08 	bl	8000cc8 <__aeabi_uldivmod>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4613      	mov	r3, r2
 80048be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048c0:	4b0b      	ldr	r3, [pc, #44]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	0c1b      	lsrs	r3, r3, #16
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	3301      	adds	r3, #1
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80048d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048da:	e002      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048dc:	4b05      	ldr	r3, [pc, #20]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80048de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3750      	adds	r7, #80	@ 0x50
 80048e8:	46bd      	mov	sp, r7
 80048ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ee:	bf00      	nop
 80048f0:	40023800 	.word	0x40023800
 80048f4:	00f42400 	.word	0x00f42400
 80048f8:	007a1200 	.word	0x007a1200

080048fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004900:	4b03      	ldr	r3, [pc, #12]	@ (8004910 <HAL_RCC_GetHCLKFreq+0x14>)
 8004902:	681b      	ldr	r3, [r3, #0]
}
 8004904:	4618      	mov	r0, r3
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	20000000 	.word	0x20000000

08004914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004918:	f7ff fff0 	bl	80048fc <HAL_RCC_GetHCLKFreq>
 800491c:	4602      	mov	r2, r0
 800491e:	4b05      	ldr	r3, [pc, #20]	@ (8004934 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	0a9b      	lsrs	r3, r3, #10
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	4903      	ldr	r1, [pc, #12]	@ (8004938 <HAL_RCC_GetPCLK1Freq+0x24>)
 800492a:	5ccb      	ldrb	r3, [r1, r3]
 800492c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004930:	4618      	mov	r0, r3
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40023800 	.word	0x40023800
 8004938:	0800be90 	.word	0x0800be90

0800493c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004940:	f7ff ffdc 	bl	80048fc <HAL_RCC_GetHCLKFreq>
 8004944:	4602      	mov	r2, r0
 8004946:	4b05      	ldr	r3, [pc, #20]	@ (800495c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	0b5b      	lsrs	r3, r3, #13
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	4903      	ldr	r1, [pc, #12]	@ (8004960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004952:	5ccb      	ldrb	r3, [r1, r3]
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004958:	4618      	mov	r0, r3
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40023800 	.word	0x40023800
 8004960:	0800be90 	.word	0x0800be90

08004964 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d010      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004984:	4b87      	ldr	r3, [pc, #540]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004986:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800498a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	4984      	ldr	r1, [pc, #528]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 80049a2:	2301      	movs	r3, #1
 80049a4:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d010      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80049b2:	4b7c      	ldr	r3, [pc, #496]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049b8:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	4978      	ldr	r1, [pc, #480]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 80049d0:	2301      	movs	r3, #1
 80049d2:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 8083 	beq.w	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80049e2:	2300      	movs	r3, #0
 80049e4:	60bb      	str	r3, [r7, #8]
 80049e6:	4b6f      	ldr	r3, [pc, #444]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ea:	4a6e      	ldr	r2, [pc, #440]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80049f2:	4b6c      	ldr	r3, [pc, #432]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049fa:	60bb      	str	r3, [r7, #8]
 80049fc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80049fe:	4b6a      	ldr	r3, [pc, #424]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a69      	ldr	r2, [pc, #420]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a08:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a0a:	f7fe fd3b 	bl	8003484 <HAL_GetTick>
 8004a0e:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a10:	e008      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a12:	f7fe fd37 	bl	8003484 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e162      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a24:	4b60      	ldr	r3, [pc, #384]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0f0      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a30:	4b5c      	ldr	r3, [pc, #368]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a38:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d02f      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d028      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a4e:	4b55      	ldr	r3, [pc, #340]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a56:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a58:	4b54      	ldr	r3, [pc, #336]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a5e:	4b53      	ldr	r3, [pc, #332]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004a64:	4a4f      	ldr	r2, [pc, #316]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a6a:	4b4e      	ldr	r3, [pc, #312]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d114      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004a76:	f7fe fd05 	bl	8003484 <HAL_GetTick>
 8004a7a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a7c:	e00a      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a7e:	f7fe fd01 	bl	8003484 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e12a      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a94:	4b43      	ldr	r3, [pc, #268]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d0ee      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aa8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004aac:	d10d      	bne.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004aae:	4b3d      	ldr	r3, [pc, #244]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004abe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ac2:	4938      	ldr	r1, [pc, #224]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	608b      	str	r3, [r1, #8]
 8004ac8:	e005      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004aca:	4b36      	ldr	r3, [pc, #216]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	4a35      	ldr	r2, [pc, #212]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ad0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004ad4:	6093      	str	r3, [r2, #8]
 8004ad6:	4b33      	ldr	r3, [pc, #204]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ad8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ae2:	4930      	ldr	r1, [pc, #192]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d004      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8004afa:	4b2d      	ldr	r3, [pc, #180]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004afc:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0310 	and.w	r3, r3, #16
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004b0a:	4b26      	ldr	r3, [pc, #152]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b10:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b18:	4922      	ldr	r1, [pc, #136]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0320 	and.w	r3, r3, #32
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d011      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b32:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b3a:	491a      	ldr	r1, [pc, #104]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b4a:	d101      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004b5c:	4b11      	ldr	r3, [pc, #68]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b62:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	490e      	ldr	r1, [pc, #56]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d004      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b80      	cmp	r3, #128	@ 0x80
 8004b7e:	f040 8091 	bne.w	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b82:	4b0c      	ldr	r3, [pc, #48]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b88:	f7fe fc7c 	bl	8003484 <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b8e:	e013      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b90:	f7fe fc78 	bl	8003484 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d90c      	bls.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e0a3      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004ba2:	bf00      	nop
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	40007000 	.word	0x40007000
 8004bac:	42470e40 	.word	0x42470e40
 8004bb0:	424711e0 	.word	0x424711e0
 8004bb4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bb8:	4b4e      	ldr	r3, [pc, #312]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1e5      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8004bc4:	4a4c      	ldr	r2, [pc, #304]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bca:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d003      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d023      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d019      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d004      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c08:	d00e      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d019      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d115      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c26:	d110      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	019b      	lsls	r3, r3, #6
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	061b      	lsls	r3, r3, #24
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	071b      	lsls	r3, r3, #28
 8004c42:	492c      	ldr	r1, [pc, #176]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d010      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	019b      	lsls	r3, r3, #6
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	061b      	lsls	r3, r3, #24
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	071b      	lsls	r3, r3, #28
 8004c70:	4920      	ldr	r1, [pc, #128]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c78:	4b20      	ldr	r3, [pc, #128]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c7e:	f7fe fc01 	bl	8003484 <HAL_GetTick>
 8004c82:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c84:	e008      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c86:	f7fe fbfd 	bl	8003484 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e028      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c98:	4b16      	ldr	r3, [pc, #88]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0f0      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cb0:	4b10      	ldr	r3, [pc, #64]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cb6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbe:	490d      	ldr	r1, [pc, #52]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004cd2:	4b08      	ldr	r3, [pc, #32]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cd8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce0:	4904      	ldr	r1, [pc, #16]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	424710d8 	.word	0x424710d8
 8004cfc:	42470068 	.word	0x42470068

08004d00 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e273      	b.n	80051fa <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d075      	beq.n	8004e0a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004d1e:	4b88      	ldr	r3, [pc, #544]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 030c 	and.w	r3, r3, #12
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d00c      	beq.n	8004d44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d2a:	4b85      	ldr	r3, [pc, #532]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004d32:	2b08      	cmp	r3, #8
 8004d34:	d112      	bne.n	8004d5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d36:	4b82      	ldr	r3, [pc, #520]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d42:	d10b      	bne.n	8004d5c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d44:	4b7e      	ldr	r3, [pc, #504]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d05b      	beq.n	8004e08 <HAL_RCC_OscConfig+0x108>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d157      	bne.n	8004e08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e24e      	b.n	80051fa <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d64:	d106      	bne.n	8004d74 <HAL_RCC_OscConfig+0x74>
 8004d66:	4b76      	ldr	r3, [pc, #472]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a75      	ldr	r2, [pc, #468]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d70:	6013      	str	r3, [r2, #0]
 8004d72:	e01d      	b.n	8004db0 <HAL_RCC_OscConfig+0xb0>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d7c:	d10c      	bne.n	8004d98 <HAL_RCC_OscConfig+0x98>
 8004d7e:	4b70      	ldr	r3, [pc, #448]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a6f      	ldr	r2, [pc, #444]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004d84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d88:	6013      	str	r3, [r2, #0]
 8004d8a:	4b6d      	ldr	r3, [pc, #436]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a6c      	ldr	r2, [pc, #432]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	e00b      	b.n	8004db0 <HAL_RCC_OscConfig+0xb0>
 8004d98:	4b69      	ldr	r3, [pc, #420]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a68      	ldr	r2, [pc, #416]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	4b66      	ldr	r3, [pc, #408]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a65      	ldr	r2, [pc, #404]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004daa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d013      	beq.n	8004de0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db8:	f7fe fb64 	bl	8003484 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dc0:	f7fe fb60 	bl	8003484 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b64      	cmp	r3, #100	@ 0x64
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e213      	b.n	80051fa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dd2:	4b5b      	ldr	r3, [pc, #364]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0f0      	beq.n	8004dc0 <HAL_RCC_OscConfig+0xc0>
 8004dde:	e014      	b.n	8004e0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de0:	f7fe fb50 	bl	8003484 <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004de8:	f7fe fb4c 	bl	8003484 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b64      	cmp	r3, #100	@ 0x64
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e1ff      	b.n	80051fa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dfa:	4b51      	ldr	r3, [pc, #324]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1f0      	bne.n	8004de8 <HAL_RCC_OscConfig+0xe8>
 8004e06:	e000      	b.n	8004e0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d063      	beq.n	8004ede <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004e16:	4b4a      	ldr	r3, [pc, #296]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 030c 	and.w	r3, r3, #12
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00b      	beq.n	8004e3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e22:	4b47      	ldr	r3, [pc, #284]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004e2a:	2b08      	cmp	r3, #8
 8004e2c:	d11c      	bne.n	8004e68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e2e:	4b44      	ldr	r3, [pc, #272]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d116      	bne.n	8004e68 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e3a:	4b41      	ldr	r3, [pc, #260]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d005      	beq.n	8004e52 <HAL_RCC_OscConfig+0x152>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d001      	beq.n	8004e52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e1d3      	b.n	80051fa <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e52:	4b3b      	ldr	r3, [pc, #236]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	4937      	ldr	r1, [pc, #220]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e66:	e03a      	b.n	8004ede <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d020      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e70:	4b34      	ldr	r3, [pc, #208]	@ (8004f44 <HAL_RCC_OscConfig+0x244>)
 8004e72:	2201      	movs	r2, #1
 8004e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e76:	f7fe fb05 	bl	8003484 <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e7e:	f7fe fb01 	bl	8003484 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e1b4      	b.n	80051fa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e90:	4b2b      	ldr	r3, [pc, #172]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0f0      	beq.n	8004e7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e9c:	4b28      	ldr	r3, [pc, #160]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	4925      	ldr	r1, [pc, #148]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	600b      	str	r3, [r1, #0]
 8004eb0:	e015      	b.n	8004ede <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eb2:	4b24      	ldr	r3, [pc, #144]	@ (8004f44 <HAL_RCC_OscConfig+0x244>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb8:	f7fe fae4 	bl	8003484 <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ec0:	f7fe fae0 	bl	8003484 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e193      	b.n	80051fa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1f0      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0308 	and.w	r3, r3, #8
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d036      	beq.n	8004f58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d016      	beq.n	8004f20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ef2:	4b15      	ldr	r3, [pc, #84]	@ (8004f48 <HAL_RCC_OscConfig+0x248>)
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef8:	f7fe fac4 	bl	8003484 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f00:	f7fe fac0 	bl	8003484 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e173      	b.n	80051fa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f12:	4b0b      	ldr	r3, [pc, #44]	@ (8004f40 <HAL_RCC_OscConfig+0x240>)
 8004f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0f0      	beq.n	8004f00 <HAL_RCC_OscConfig+0x200>
 8004f1e:	e01b      	b.n	8004f58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f20:	4b09      	ldr	r3, [pc, #36]	@ (8004f48 <HAL_RCC_OscConfig+0x248>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f26:	f7fe faad 	bl	8003484 <HAL_GetTick>
 8004f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f2c:	e00e      	b.n	8004f4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f2e:	f7fe faa9 	bl	8003484 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d907      	bls.n	8004f4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e15c      	b.n	80051fa <HAL_RCC_OscConfig+0x4fa>
 8004f40:	40023800 	.word	0x40023800
 8004f44:	42470000 	.word	0x42470000
 8004f48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f4c:	4b8a      	ldr	r3, [pc, #552]	@ (8005178 <HAL_RCC_OscConfig+0x478>)
 8004f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1ea      	bne.n	8004f2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 8097 	beq.w	8005094 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f66:	2300      	movs	r3, #0
 8004f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f6a:	4b83      	ldr	r3, [pc, #524]	@ (8005178 <HAL_RCC_OscConfig+0x478>)
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10f      	bne.n	8004f96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f76:	2300      	movs	r3, #0
 8004f78:	60bb      	str	r3, [r7, #8]
 8004f7a:	4b7f      	ldr	r3, [pc, #508]	@ (8005178 <HAL_RCC_OscConfig+0x478>)
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7e:	4a7e      	ldr	r2, [pc, #504]	@ (8005178 <HAL_RCC_OscConfig+0x478>)
 8004f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f86:	4b7c      	ldr	r3, [pc, #496]	@ (8005178 <HAL_RCC_OscConfig+0x478>)
 8004f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f8e:	60bb      	str	r3, [r7, #8]
 8004f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f92:	2301      	movs	r3, #1
 8004f94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f96:	4b79      	ldr	r3, [pc, #484]	@ (800517c <HAL_RCC_OscConfig+0x47c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d118      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fa2:	4b76      	ldr	r3, [pc, #472]	@ (800517c <HAL_RCC_OscConfig+0x47c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a75      	ldr	r2, [pc, #468]	@ (800517c <HAL_RCC_OscConfig+0x47c>)
 8004fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fae:	f7fe fa69 	bl	8003484 <HAL_GetTick>
 8004fb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fb6:	f7fe fa65 	bl	8003484 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e118      	b.n	80051fa <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc8:	4b6c      	ldr	r3, [pc, #432]	@ (800517c <HAL_RCC_OscConfig+0x47c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0f0      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d106      	bne.n	8004fea <HAL_RCC_OscConfig+0x2ea>
 8004fdc:	4b66      	ldr	r3, [pc, #408]	@ (8005178 <HAL_RCC_OscConfig+0x478>)
 8004fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe0:	4a65      	ldr	r2, [pc, #404]	@ (8005178 <HAL_RCC_OscConfig+0x478>)
 8004fe2:	f043 0301 	orr.w	r3, r3, #1
 8004fe6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fe8:	e01c      	b.n	8005024 <HAL_RCC_OscConfig+0x324>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	2b05      	cmp	r3, #5
 8004ff0:	d10c      	bne.n	800500c <HAL_RCC_OscConfig+0x30c>
 8004ff2:	4b61      	ldr	r3, [pc, #388]	@ (8005178 <HAL_RCC_OscConfig+0x478>)
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff6:	4a60      	ldr	r2, [pc, #384]	@ (8005178 <HAL_RCC_OscConfig+0x478>)
 8004ff8:	f043 0304 	orr.w	r3, r3, #4
 8004ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ffe:	4b5e      	ldr	r3, [pc, #376]	@ (8005178 <HAL_RCC_OscConfig+0x478>)
 8005000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005002:	4a5d      	ldr	r2, [pc, #372]	@ (8005178 <HAL_RCC_OscConfig+0x478>)
 8005004:	f043 0301 	orr.w	r3, r3, #1
 8005008:	6713      	str	r3, [r2, #112]	@ 0x70
 800500a:	e00b      	b.n	8005024 <HAL_RCC_OscConfig+0x324>
 800500c:	4b5a      	ldr	r3, [pc, #360]	@ (8005178 <HAL_RCC_OscConfig+0x478>)
 800500e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005010:	4a59      	ldr	r2, [pc, #356]	@ (8005178 <HAL_RCC_OscConfig+0x478>)
 8005012:	f023 0301 	bic.w	r3, r3, #1
 8005016:	6713      	str	r3, [r2, #112]	@ 0x70
 8005018:	4b57      	ldr	r3, [pc, #348]	@ (8005178 <HAL_RCC_OscConfig+0x478>)
 800501a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800501c:	4a56      	ldr	r2, [pc, #344]	@ (8005178 <HAL_RCC_OscConfig+0x478>)
 800501e:	f023 0304 	bic.w	r3, r3, #4
 8005022:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d015      	beq.n	8005058 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800502c:	f7fe fa2a 	bl	8003484 <HAL_GetTick>
 8005030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005032:	e00a      	b.n	800504a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005034:	f7fe fa26 	bl	8003484 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005042:	4293      	cmp	r3, r2
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e0d7      	b.n	80051fa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800504a:	4b4b      	ldr	r3, [pc, #300]	@ (8005178 <HAL_RCC_OscConfig+0x478>)
 800504c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0ee      	beq.n	8005034 <HAL_RCC_OscConfig+0x334>
 8005056:	e014      	b.n	8005082 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005058:	f7fe fa14 	bl	8003484 <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800505e:	e00a      	b.n	8005076 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005060:	f7fe fa10 	bl	8003484 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800506e:	4293      	cmp	r3, r2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e0c1      	b.n	80051fa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005076:	4b40      	ldr	r3, [pc, #256]	@ (8005178 <HAL_RCC_OscConfig+0x478>)
 8005078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1ee      	bne.n	8005060 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005082:	7dfb      	ldrb	r3, [r7, #23]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d105      	bne.n	8005094 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005088:	4b3b      	ldr	r3, [pc, #236]	@ (8005178 <HAL_RCC_OscConfig+0x478>)
 800508a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508c:	4a3a      	ldr	r2, [pc, #232]	@ (8005178 <HAL_RCC_OscConfig+0x478>)
 800508e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005092:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 80ad 	beq.w	80051f8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800509e:	4b36      	ldr	r3, [pc, #216]	@ (8005178 <HAL_RCC_OscConfig+0x478>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 030c 	and.w	r3, r3, #12
 80050a6:	2b08      	cmp	r3, #8
 80050a8:	d060      	beq.n	800516c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d145      	bne.n	800513e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050b2:	4b33      	ldr	r3, [pc, #204]	@ (8005180 <HAL_RCC_OscConfig+0x480>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b8:	f7fe f9e4 	bl	8003484 <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050c0:	f7fe f9e0 	bl	8003484 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e093      	b.n	80051fa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050d2:	4b29      	ldr	r3, [pc, #164]	@ (8005178 <HAL_RCC_OscConfig+0x478>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f0      	bne.n	80050c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69da      	ldr	r2, [r3, #28]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ec:	019b      	lsls	r3, r3, #6
 80050ee:	431a      	orrs	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f4:	085b      	lsrs	r3, r3, #1
 80050f6:	3b01      	subs	r3, #1
 80050f8:	041b      	lsls	r3, r3, #16
 80050fa:	431a      	orrs	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005100:	061b      	lsls	r3, r3, #24
 8005102:	431a      	orrs	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005108:	071b      	lsls	r3, r3, #28
 800510a:	491b      	ldr	r1, [pc, #108]	@ (8005178 <HAL_RCC_OscConfig+0x478>)
 800510c:	4313      	orrs	r3, r2
 800510e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005110:	4b1b      	ldr	r3, [pc, #108]	@ (8005180 <HAL_RCC_OscConfig+0x480>)
 8005112:	2201      	movs	r2, #1
 8005114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005116:	f7fe f9b5 	bl	8003484 <HAL_GetTick>
 800511a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800511c:	e008      	b.n	8005130 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800511e:	f7fe f9b1 	bl	8003484 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d901      	bls.n	8005130 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e064      	b.n	80051fa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005130:	4b11      	ldr	r3, [pc, #68]	@ (8005178 <HAL_RCC_OscConfig+0x478>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d0f0      	beq.n	800511e <HAL_RCC_OscConfig+0x41e>
 800513c:	e05c      	b.n	80051f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800513e:	4b10      	ldr	r3, [pc, #64]	@ (8005180 <HAL_RCC_OscConfig+0x480>)
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005144:	f7fe f99e 	bl	8003484 <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800514c:	f7fe f99a 	bl	8003484 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e04d      	b.n	80051fa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800515e:	4b06      	ldr	r3, [pc, #24]	@ (8005178 <HAL_RCC_OscConfig+0x478>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1f0      	bne.n	800514c <HAL_RCC_OscConfig+0x44c>
 800516a:	e045      	b.n	80051f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d107      	bne.n	8005184 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e040      	b.n	80051fa <HAL_RCC_OscConfig+0x4fa>
 8005178:	40023800 	.word	0x40023800
 800517c:	40007000 	.word	0x40007000
 8005180:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005184:	4b1f      	ldr	r3, [pc, #124]	@ (8005204 <HAL_RCC_OscConfig+0x504>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d030      	beq.n	80051f4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800519c:	429a      	cmp	r2, r3
 800519e:	d129      	bne.n	80051f4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d122      	bne.n	80051f4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80051b4:	4013      	ands	r3, r2
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80051ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051bc:	4293      	cmp	r3, r2
 80051be:	d119      	bne.n	80051f4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ca:	085b      	lsrs	r3, r3, #1
 80051cc:	3b01      	subs	r3, #1
 80051ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d10f      	bne.n	80051f4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d107      	bne.n	80051f4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d001      	beq.n	80051f8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e000      	b.n	80051fa <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3718      	adds	r7, #24
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	40023800 	.word	0x40023800

08005208 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e07b      	b.n	8005312 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521e:	2b00      	cmp	r3, #0
 8005220:	d108      	bne.n	8005234 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800522a:	d009      	beq.n	8005240 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	61da      	str	r2, [r3, #28]
 8005232:	e005      	b.n	8005240 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7fd faa8 	bl	80027b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005276:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005288:	431a      	orrs	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005292:	431a      	orrs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	431a      	orrs	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	431a      	orrs	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052b0:	431a      	orrs	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052ba:	431a      	orrs	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052c4:	ea42 0103 	orr.w	r1, r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052cc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	0c1b      	lsrs	r3, r3, #16
 80052de:	f003 0104 	and.w	r1, r3, #4
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e6:	f003 0210 	and.w	r2, r3, #16
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	69da      	ldr	r2, [r3, #28]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005300:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b082      	sub	sp, #8
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e041      	b.n	80053b0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d106      	bne.n	8005346 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7fd fbb3 	bl	8002aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2202      	movs	r2, #2
 800534a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3304      	adds	r3, #4
 8005356:	4619      	mov	r1, r3
 8005358:	4610      	mov	r0, r2
 800535a:	f000 fd8b 	bl	8005e74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d001      	beq.n	80053d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e04e      	b.n	800546e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2202      	movs	r2, #2
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68da      	ldr	r2, [r3, #12]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0201 	orr.w	r2, r2, #1
 80053e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a23      	ldr	r2, [pc, #140]	@ (800547c <HAL_TIM_Base_Start_IT+0xc4>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d022      	beq.n	8005438 <HAL_TIM_Base_Start_IT+0x80>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053fa:	d01d      	beq.n	8005438 <HAL_TIM_Base_Start_IT+0x80>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a1f      	ldr	r2, [pc, #124]	@ (8005480 <HAL_TIM_Base_Start_IT+0xc8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d018      	beq.n	8005438 <HAL_TIM_Base_Start_IT+0x80>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a1e      	ldr	r2, [pc, #120]	@ (8005484 <HAL_TIM_Base_Start_IT+0xcc>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d013      	beq.n	8005438 <HAL_TIM_Base_Start_IT+0x80>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a1c      	ldr	r2, [pc, #112]	@ (8005488 <HAL_TIM_Base_Start_IT+0xd0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d00e      	beq.n	8005438 <HAL_TIM_Base_Start_IT+0x80>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a1b      	ldr	r2, [pc, #108]	@ (800548c <HAL_TIM_Base_Start_IT+0xd4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d009      	beq.n	8005438 <HAL_TIM_Base_Start_IT+0x80>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a19      	ldr	r2, [pc, #100]	@ (8005490 <HAL_TIM_Base_Start_IT+0xd8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d004      	beq.n	8005438 <HAL_TIM_Base_Start_IT+0x80>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a18      	ldr	r2, [pc, #96]	@ (8005494 <HAL_TIM_Base_Start_IT+0xdc>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d111      	bne.n	800545c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b06      	cmp	r3, #6
 8005448:	d010      	beq.n	800546c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f042 0201 	orr.w	r2, r2, #1
 8005458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545a:	e007      	b.n	800546c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	40010000 	.word	0x40010000
 8005480:	40000400 	.word	0x40000400
 8005484:	40000800 	.word	0x40000800
 8005488:	40000c00 	.word	0x40000c00
 800548c:	40010400 	.word	0x40010400
 8005490:	40014000 	.word	0x40014000
 8005494:	40001800 	.word	0x40001800

08005498 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e041      	b.n	800552e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d106      	bne.n	80054c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7fd fb6e 	bl	8002ba0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	3304      	adds	r3, #4
 80054d4:	4619      	mov	r1, r3
 80054d6:	4610      	mov	r0, r2
 80054d8:	f000 fccc 	bl	8005e74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
	...

08005538 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d109      	bne.n	800555c <HAL_TIM_PWM_Start+0x24>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b01      	cmp	r3, #1
 8005552:	bf14      	ite	ne
 8005554:	2301      	movne	r3, #1
 8005556:	2300      	moveq	r3, #0
 8005558:	b2db      	uxtb	r3, r3
 800555a:	e022      	b.n	80055a2 <HAL_TIM_PWM_Start+0x6a>
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	2b04      	cmp	r3, #4
 8005560:	d109      	bne.n	8005576 <HAL_TIM_PWM_Start+0x3e>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b01      	cmp	r3, #1
 800556c:	bf14      	ite	ne
 800556e:	2301      	movne	r3, #1
 8005570:	2300      	moveq	r3, #0
 8005572:	b2db      	uxtb	r3, r3
 8005574:	e015      	b.n	80055a2 <HAL_TIM_PWM_Start+0x6a>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b08      	cmp	r3, #8
 800557a:	d109      	bne.n	8005590 <HAL_TIM_PWM_Start+0x58>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b01      	cmp	r3, #1
 8005586:	bf14      	ite	ne
 8005588:	2301      	movne	r3, #1
 800558a:	2300      	moveq	r3, #0
 800558c:	b2db      	uxtb	r3, r3
 800558e:	e008      	b.n	80055a2 <HAL_TIM_PWM_Start+0x6a>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b01      	cmp	r3, #1
 800559a:	bf14      	ite	ne
 800559c:	2301      	movne	r3, #1
 800559e:	2300      	moveq	r3, #0
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e07c      	b.n	80056a4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d104      	bne.n	80055ba <HAL_TIM_PWM_Start+0x82>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055b8:	e013      	b.n	80055e2 <HAL_TIM_PWM_Start+0xaa>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b04      	cmp	r3, #4
 80055be:	d104      	bne.n	80055ca <HAL_TIM_PWM_Start+0x92>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055c8:	e00b      	b.n	80055e2 <HAL_TIM_PWM_Start+0xaa>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d104      	bne.n	80055da <HAL_TIM_PWM_Start+0xa2>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055d8:	e003      	b.n	80055e2 <HAL_TIM_PWM_Start+0xaa>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2202      	movs	r2, #2
 80055de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2201      	movs	r2, #1
 80055e8:	6839      	ldr	r1, [r7, #0]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 ff38 	bl	8006460 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a2d      	ldr	r2, [pc, #180]	@ (80056ac <HAL_TIM_PWM_Start+0x174>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d004      	beq.n	8005604 <HAL_TIM_PWM_Start+0xcc>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a2c      	ldr	r2, [pc, #176]	@ (80056b0 <HAL_TIM_PWM_Start+0x178>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d101      	bne.n	8005608 <HAL_TIM_PWM_Start+0xd0>
 8005604:	2301      	movs	r3, #1
 8005606:	e000      	b.n	800560a <HAL_TIM_PWM_Start+0xd2>
 8005608:	2300      	movs	r3, #0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d007      	beq.n	800561e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800561c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a22      	ldr	r2, [pc, #136]	@ (80056ac <HAL_TIM_PWM_Start+0x174>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d022      	beq.n	800566e <HAL_TIM_PWM_Start+0x136>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005630:	d01d      	beq.n	800566e <HAL_TIM_PWM_Start+0x136>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a1f      	ldr	r2, [pc, #124]	@ (80056b4 <HAL_TIM_PWM_Start+0x17c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d018      	beq.n	800566e <HAL_TIM_PWM_Start+0x136>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a1d      	ldr	r2, [pc, #116]	@ (80056b8 <HAL_TIM_PWM_Start+0x180>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d013      	beq.n	800566e <HAL_TIM_PWM_Start+0x136>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a1c      	ldr	r2, [pc, #112]	@ (80056bc <HAL_TIM_PWM_Start+0x184>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00e      	beq.n	800566e <HAL_TIM_PWM_Start+0x136>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a16      	ldr	r2, [pc, #88]	@ (80056b0 <HAL_TIM_PWM_Start+0x178>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d009      	beq.n	800566e <HAL_TIM_PWM_Start+0x136>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a18      	ldr	r2, [pc, #96]	@ (80056c0 <HAL_TIM_PWM_Start+0x188>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d004      	beq.n	800566e <HAL_TIM_PWM_Start+0x136>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a16      	ldr	r2, [pc, #88]	@ (80056c4 <HAL_TIM_PWM_Start+0x18c>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d111      	bne.n	8005692 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b06      	cmp	r3, #6
 800567e:	d010      	beq.n	80056a2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0201 	orr.w	r2, r2, #1
 800568e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005690:	e007      	b.n	80056a2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f042 0201 	orr.w	r2, r2, #1
 80056a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	40010000 	.word	0x40010000
 80056b0:	40010400 	.word	0x40010400
 80056b4:	40000400 	.word	0x40000400
 80056b8:	40000800 	.word	0x40000800
 80056bc:	40000c00 	.word	0x40000c00
 80056c0:	40014000 	.word	0x40014000
 80056c4:	40001800 	.word	0x40001800

080056c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e097      	b.n	800580c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d106      	bne.n	80056f6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f7fd f8c5 	bl	8002880 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2202      	movs	r2, #2
 80056fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	6812      	ldr	r2, [r2, #0]
 8005708:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800570c:	f023 0307 	bic.w	r3, r3, #7
 8005710:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	3304      	adds	r3, #4
 800571a:	4619      	mov	r1, r3
 800571c:	4610      	mov	r0, r2
 800571e:	f000 fba9 	bl	8005e74 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	4313      	orrs	r3, r2
 8005742:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800574a:	f023 0303 	bic.w	r3, r3, #3
 800574e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	021b      	lsls	r3, r3, #8
 800575a:	4313      	orrs	r3, r2
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	4313      	orrs	r3, r2
 8005760:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005768:	f023 030c 	bic.w	r3, r3, #12
 800576c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005774:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005778:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	021b      	lsls	r3, r3, #8
 8005784:	4313      	orrs	r3, r2
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	011a      	lsls	r2, r3, #4
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	031b      	lsls	r3, r3, #12
 8005798:	4313      	orrs	r3, r2
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	4313      	orrs	r3, r2
 800579e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80057a6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80057ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	4313      	orrs	r3, r2
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005824:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800582c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005834:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800583c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d110      	bne.n	8005866 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005844:	7bfb      	ldrb	r3, [r7, #15]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d102      	bne.n	8005850 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800584a:	7b7b      	ldrb	r3, [r7, #13]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d001      	beq.n	8005854 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e069      	b.n	8005928 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005864:	e031      	b.n	80058ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b04      	cmp	r3, #4
 800586a:	d110      	bne.n	800588e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800586c:	7bbb      	ldrb	r3, [r7, #14]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d102      	bne.n	8005878 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005872:	7b3b      	ldrb	r3, [r7, #12]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d001      	beq.n	800587c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e055      	b.n	8005928 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800588c:	e01d      	b.n	80058ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800588e:	7bfb      	ldrb	r3, [r7, #15]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d108      	bne.n	80058a6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005894:	7bbb      	ldrb	r3, [r7, #14]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d105      	bne.n	80058a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800589a:	7b7b      	ldrb	r3, [r7, #13]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d102      	bne.n	80058a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058a0:	7b3b      	ldrb	r3, [r7, #12]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d001      	beq.n	80058aa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e03e      	b.n	8005928 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2202      	movs	r2, #2
 80058ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2202      	movs	r2, #2
 80058b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2202      	movs	r2, #2
 80058be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2202      	movs	r2, #2
 80058c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <HAL_TIM_Encoder_Start+0xc4>
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	2b04      	cmp	r3, #4
 80058d4:	d008      	beq.n	80058e8 <HAL_TIM_Encoder_Start+0xd4>
 80058d6:	e00f      	b.n	80058f8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2201      	movs	r2, #1
 80058de:	2100      	movs	r1, #0
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 fdbd 	bl	8006460 <TIM_CCxChannelCmd>
      break;
 80058e6:	e016      	b.n	8005916 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2201      	movs	r2, #1
 80058ee:	2104      	movs	r1, #4
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 fdb5 	bl	8006460 <TIM_CCxChannelCmd>
      break;
 80058f6:	e00e      	b.n	8005916 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2201      	movs	r2, #1
 80058fe:	2100      	movs	r1, #0
 8005900:	4618      	mov	r0, r3
 8005902:	f000 fdad 	bl	8006460 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2201      	movs	r2, #1
 800590c:	2104      	movs	r1, #4
 800590e:	4618      	mov	r0, r3
 8005910:	f000 fda6 	bl	8006460 <TIM_CCxChannelCmd>
      break;
 8005914:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f042 0201 	orr.w	r2, r2, #1
 8005924:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d020      	beq.n	8005994 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01b      	beq.n	8005994 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f06f 0202 	mvn.w	r2, #2
 8005964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fa5b 	bl	8005e36 <HAL_TIM_IC_CaptureCallback>
 8005980:	e005      	b.n	800598e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fa4d 	bl	8005e22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 fa5e 	bl	8005e4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	f003 0304 	and.w	r3, r3, #4
 800599a:	2b00      	cmp	r3, #0
 800599c:	d020      	beq.n	80059e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d01b      	beq.n	80059e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f06f 0204 	mvn.w	r2, #4
 80059b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2202      	movs	r2, #2
 80059b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fa35 	bl	8005e36 <HAL_TIM_IC_CaptureCallback>
 80059cc:	e005      	b.n	80059da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fa27 	bl	8005e22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 fa38 	bl	8005e4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f003 0308 	and.w	r3, r3, #8
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d020      	beq.n	8005a2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f003 0308 	and.w	r3, r3, #8
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d01b      	beq.n	8005a2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f06f 0208 	mvn.w	r2, #8
 80059fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2204      	movs	r2, #4
 8005a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 fa0f 	bl	8005e36 <HAL_TIM_IC_CaptureCallback>
 8005a18:	e005      	b.n	8005a26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fa01 	bl	8005e22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 fa12 	bl	8005e4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f003 0310 	and.w	r3, r3, #16
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d020      	beq.n	8005a78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f003 0310 	and.w	r3, r3, #16
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d01b      	beq.n	8005a78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f06f 0210 	mvn.w	r2, #16
 8005a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2208      	movs	r2, #8
 8005a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f9e9 	bl	8005e36 <HAL_TIM_IC_CaptureCallback>
 8005a64:	e005      	b.n	8005a72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f9db 	bl	8005e22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f9ec 	bl	8005e4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00c      	beq.n	8005a9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d007      	beq.n	8005a9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f06f 0201 	mvn.w	r2, #1
 8005a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7fb fb4e 	bl	8001138 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00c      	beq.n	8005ac0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d007      	beq.n	8005ac0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fdce 	bl	800665c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00c      	beq.n	8005ae4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d007      	beq.n	8005ae4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f9bd 	bl	8005e5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f003 0320 	and.w	r3, r3, #32
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00c      	beq.n	8005b08 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f003 0320 	and.w	r3, r3, #32
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d007      	beq.n	8005b08 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f06f 0220 	mvn.w	r2, #32
 8005b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fda0 	bl	8006648 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b08:	bf00      	nop
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d101      	bne.n	8005b2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	e0ae      	b.n	8005c8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b0c      	cmp	r3, #12
 8005b3a:	f200 809f 	bhi.w	8005c7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b44:	08005b79 	.word	0x08005b79
 8005b48:	08005c7d 	.word	0x08005c7d
 8005b4c:	08005c7d 	.word	0x08005c7d
 8005b50:	08005c7d 	.word	0x08005c7d
 8005b54:	08005bb9 	.word	0x08005bb9
 8005b58:	08005c7d 	.word	0x08005c7d
 8005b5c:	08005c7d 	.word	0x08005c7d
 8005b60:	08005c7d 	.word	0x08005c7d
 8005b64:	08005bfb 	.word	0x08005bfb
 8005b68:	08005c7d 	.word	0x08005c7d
 8005b6c:	08005c7d 	.word	0x08005c7d
 8005b70:	08005c7d 	.word	0x08005c7d
 8005b74:	08005c3b 	.word	0x08005c3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68b9      	ldr	r1, [r7, #8]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 fa24 	bl	8005fcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	699a      	ldr	r2, [r3, #24]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0208 	orr.w	r2, r2, #8
 8005b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 0204 	bic.w	r2, r2, #4
 8005ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6999      	ldr	r1, [r3, #24]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	691a      	ldr	r2, [r3, #16]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	619a      	str	r2, [r3, #24]
      break;
 8005bb6:	e064      	b.n	8005c82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68b9      	ldr	r1, [r7, #8]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 fa74 	bl	80060ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	699a      	ldr	r2, [r3, #24]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699a      	ldr	r2, [r3, #24]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005be2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6999      	ldr	r1, [r3, #24]
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	021a      	lsls	r2, r3, #8
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	619a      	str	r2, [r3, #24]
      break;
 8005bf8:	e043      	b.n	8005c82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68b9      	ldr	r1, [r7, #8]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 fac9 	bl	8006198 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	69da      	ldr	r2, [r3, #28]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f042 0208 	orr.w	r2, r2, #8
 8005c14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	69da      	ldr	r2, [r3, #28]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0204 	bic.w	r2, r2, #4
 8005c24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69d9      	ldr	r1, [r3, #28]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	691a      	ldr	r2, [r3, #16]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	61da      	str	r2, [r3, #28]
      break;
 8005c38:	e023      	b.n	8005c82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68b9      	ldr	r1, [r7, #8]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 fb1d 	bl	8006280 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69da      	ldr	r2, [r3, #28]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	69da      	ldr	r2, [r3, #28]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69d9      	ldr	r1, [r3, #28]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	021a      	lsls	r2, r3, #8
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	61da      	str	r2, [r3, #28]
      break;
 8005c7a:	e002      	b.n	8005c82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d101      	bne.n	8005cb0 <HAL_TIM_ConfigClockSource+0x1c>
 8005cac:	2302      	movs	r3, #2
 8005cae:	e0b4      	b.n	8005e1a <HAL_TIM_ConfigClockSource+0x186>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ce8:	d03e      	beq.n	8005d68 <HAL_TIM_ConfigClockSource+0xd4>
 8005cea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cee:	f200 8087 	bhi.w	8005e00 <HAL_TIM_ConfigClockSource+0x16c>
 8005cf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cf6:	f000 8086 	beq.w	8005e06 <HAL_TIM_ConfigClockSource+0x172>
 8005cfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cfe:	d87f      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x16c>
 8005d00:	2b70      	cmp	r3, #112	@ 0x70
 8005d02:	d01a      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0xa6>
 8005d04:	2b70      	cmp	r3, #112	@ 0x70
 8005d06:	d87b      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x16c>
 8005d08:	2b60      	cmp	r3, #96	@ 0x60
 8005d0a:	d050      	beq.n	8005dae <HAL_TIM_ConfigClockSource+0x11a>
 8005d0c:	2b60      	cmp	r3, #96	@ 0x60
 8005d0e:	d877      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x16c>
 8005d10:	2b50      	cmp	r3, #80	@ 0x50
 8005d12:	d03c      	beq.n	8005d8e <HAL_TIM_ConfigClockSource+0xfa>
 8005d14:	2b50      	cmp	r3, #80	@ 0x50
 8005d16:	d873      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x16c>
 8005d18:	2b40      	cmp	r3, #64	@ 0x40
 8005d1a:	d058      	beq.n	8005dce <HAL_TIM_ConfigClockSource+0x13a>
 8005d1c:	2b40      	cmp	r3, #64	@ 0x40
 8005d1e:	d86f      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x16c>
 8005d20:	2b30      	cmp	r3, #48	@ 0x30
 8005d22:	d064      	beq.n	8005dee <HAL_TIM_ConfigClockSource+0x15a>
 8005d24:	2b30      	cmp	r3, #48	@ 0x30
 8005d26:	d86b      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x16c>
 8005d28:	2b20      	cmp	r3, #32
 8005d2a:	d060      	beq.n	8005dee <HAL_TIM_ConfigClockSource+0x15a>
 8005d2c:	2b20      	cmp	r3, #32
 8005d2e:	d867      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x16c>
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d05c      	beq.n	8005dee <HAL_TIM_ConfigClockSource+0x15a>
 8005d34:	2b10      	cmp	r3, #16
 8005d36:	d05a      	beq.n	8005dee <HAL_TIM_ConfigClockSource+0x15a>
 8005d38:	e062      	b.n	8005e00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d4a:	f000 fb69 	bl	8006420 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	609a      	str	r2, [r3, #8]
      break;
 8005d66:	e04f      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d78:	f000 fb52 	bl	8006420 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d8a:	609a      	str	r2, [r3, #8]
      break;
 8005d8c:	e03c      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f000 fac6 	bl	800632c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2150      	movs	r1, #80	@ 0x50
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 fb1f 	bl	80063ea <TIM_ITRx_SetConfig>
      break;
 8005dac:	e02c      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f000 fae5 	bl	800638a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2160      	movs	r1, #96	@ 0x60
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 fb0f 	bl	80063ea <TIM_ITRx_SetConfig>
      break;
 8005dcc:	e01c      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f000 faa6 	bl	800632c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2140      	movs	r1, #64	@ 0x40
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 faff 	bl	80063ea <TIM_ITRx_SetConfig>
      break;
 8005dec:	e00c      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4619      	mov	r1, r3
 8005df8:	4610      	mov	r0, r2
 8005dfa:	f000 faf6 	bl	80063ea <TIM_ITRx_SetConfig>
      break;
 8005dfe:	e003      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	73fb      	strb	r3, [r7, #15]
      break;
 8005e04:	e000      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b083      	sub	sp, #12
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e3e:	bf00      	nop
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b083      	sub	sp, #12
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e52:	bf00      	nop
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
	...

08005e74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a46      	ldr	r2, [pc, #280]	@ (8005fa0 <TIM_Base_SetConfig+0x12c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d013      	beq.n	8005eb4 <TIM_Base_SetConfig+0x40>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e92:	d00f      	beq.n	8005eb4 <TIM_Base_SetConfig+0x40>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a43      	ldr	r2, [pc, #268]	@ (8005fa4 <TIM_Base_SetConfig+0x130>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00b      	beq.n	8005eb4 <TIM_Base_SetConfig+0x40>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a42      	ldr	r2, [pc, #264]	@ (8005fa8 <TIM_Base_SetConfig+0x134>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d007      	beq.n	8005eb4 <TIM_Base_SetConfig+0x40>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a41      	ldr	r2, [pc, #260]	@ (8005fac <TIM_Base_SetConfig+0x138>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d003      	beq.n	8005eb4 <TIM_Base_SetConfig+0x40>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a40      	ldr	r2, [pc, #256]	@ (8005fb0 <TIM_Base_SetConfig+0x13c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d108      	bne.n	8005ec6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a35      	ldr	r2, [pc, #212]	@ (8005fa0 <TIM_Base_SetConfig+0x12c>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d02b      	beq.n	8005f26 <TIM_Base_SetConfig+0xb2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ed4:	d027      	beq.n	8005f26 <TIM_Base_SetConfig+0xb2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a32      	ldr	r2, [pc, #200]	@ (8005fa4 <TIM_Base_SetConfig+0x130>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d023      	beq.n	8005f26 <TIM_Base_SetConfig+0xb2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a31      	ldr	r2, [pc, #196]	@ (8005fa8 <TIM_Base_SetConfig+0x134>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d01f      	beq.n	8005f26 <TIM_Base_SetConfig+0xb2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a30      	ldr	r2, [pc, #192]	@ (8005fac <TIM_Base_SetConfig+0x138>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d01b      	beq.n	8005f26 <TIM_Base_SetConfig+0xb2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a2f      	ldr	r2, [pc, #188]	@ (8005fb0 <TIM_Base_SetConfig+0x13c>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d017      	beq.n	8005f26 <TIM_Base_SetConfig+0xb2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a2e      	ldr	r2, [pc, #184]	@ (8005fb4 <TIM_Base_SetConfig+0x140>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d013      	beq.n	8005f26 <TIM_Base_SetConfig+0xb2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a2d      	ldr	r2, [pc, #180]	@ (8005fb8 <TIM_Base_SetConfig+0x144>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d00f      	beq.n	8005f26 <TIM_Base_SetConfig+0xb2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a2c      	ldr	r2, [pc, #176]	@ (8005fbc <TIM_Base_SetConfig+0x148>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d00b      	beq.n	8005f26 <TIM_Base_SetConfig+0xb2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a2b      	ldr	r2, [pc, #172]	@ (8005fc0 <TIM_Base_SetConfig+0x14c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d007      	beq.n	8005f26 <TIM_Base_SetConfig+0xb2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a2a      	ldr	r2, [pc, #168]	@ (8005fc4 <TIM_Base_SetConfig+0x150>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d003      	beq.n	8005f26 <TIM_Base_SetConfig+0xb2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a29      	ldr	r2, [pc, #164]	@ (8005fc8 <TIM_Base_SetConfig+0x154>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d108      	bne.n	8005f38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a10      	ldr	r2, [pc, #64]	@ (8005fa0 <TIM_Base_SetConfig+0x12c>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d003      	beq.n	8005f6c <TIM_Base_SetConfig+0xf8>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a12      	ldr	r2, [pc, #72]	@ (8005fb0 <TIM_Base_SetConfig+0x13c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d103      	bne.n	8005f74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	691a      	ldr	r2, [r3, #16]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d105      	bne.n	8005f92 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	f023 0201 	bic.w	r2, r3, #1
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	611a      	str	r2, [r3, #16]
  }
}
 8005f92:	bf00      	nop
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	40010000 	.word	0x40010000
 8005fa4:	40000400 	.word	0x40000400
 8005fa8:	40000800 	.word	0x40000800
 8005fac:	40000c00 	.word	0x40000c00
 8005fb0:	40010400 	.word	0x40010400
 8005fb4:	40014000 	.word	0x40014000
 8005fb8:	40014400 	.word	0x40014400
 8005fbc:	40014800 	.word	0x40014800
 8005fc0:	40001800 	.word	0x40001800
 8005fc4:	40001c00 	.word	0x40001c00
 8005fc8:	40002000 	.word	0x40002000

08005fcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b087      	sub	sp, #28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	f023 0201 	bic.w	r2, r3, #1
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f023 0303 	bic.w	r3, r3, #3
 8006002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f023 0302 	bic.w	r3, r3, #2
 8006014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	4313      	orrs	r3, r2
 800601e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a20      	ldr	r2, [pc, #128]	@ (80060a4 <TIM_OC1_SetConfig+0xd8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d003      	beq.n	8006030 <TIM_OC1_SetConfig+0x64>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a1f      	ldr	r2, [pc, #124]	@ (80060a8 <TIM_OC1_SetConfig+0xdc>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d10c      	bne.n	800604a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f023 0308 	bic.w	r3, r3, #8
 8006036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	4313      	orrs	r3, r2
 8006040:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f023 0304 	bic.w	r3, r3, #4
 8006048:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a15      	ldr	r2, [pc, #84]	@ (80060a4 <TIM_OC1_SetConfig+0xd8>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d003      	beq.n	800605a <TIM_OC1_SetConfig+0x8e>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a14      	ldr	r2, [pc, #80]	@ (80060a8 <TIM_OC1_SetConfig+0xdc>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d111      	bne.n	800607e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4313      	orrs	r3, r2
 8006072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	4313      	orrs	r3, r2
 800607c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	621a      	str	r2, [r3, #32]
}
 8006098:	bf00      	nop
 800609a:	371c      	adds	r7, #28
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	40010000 	.word	0x40010000
 80060a8:	40010400 	.word	0x40010400

080060ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	f023 0210 	bic.w	r2, r3, #16
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	021b      	lsls	r3, r3, #8
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f023 0320 	bic.w	r3, r3, #32
 80060f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	011b      	lsls	r3, r3, #4
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	4313      	orrs	r3, r2
 8006102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a22      	ldr	r2, [pc, #136]	@ (8006190 <TIM_OC2_SetConfig+0xe4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d003      	beq.n	8006114 <TIM_OC2_SetConfig+0x68>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a21      	ldr	r2, [pc, #132]	@ (8006194 <TIM_OC2_SetConfig+0xe8>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d10d      	bne.n	8006130 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800611a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	011b      	lsls	r3, r3, #4
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	4313      	orrs	r3, r2
 8006126:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800612e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a17      	ldr	r2, [pc, #92]	@ (8006190 <TIM_OC2_SetConfig+0xe4>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d003      	beq.n	8006140 <TIM_OC2_SetConfig+0x94>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a16      	ldr	r2, [pc, #88]	@ (8006194 <TIM_OC2_SetConfig+0xe8>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d113      	bne.n	8006168 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006146:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800614e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	4313      	orrs	r3, r2
 800615a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	4313      	orrs	r3, r2
 8006166:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	621a      	str	r2, [r3, #32]
}
 8006182:	bf00      	nop
 8006184:	371c      	adds	r7, #28
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	40010000 	.word	0x40010000
 8006194:	40010400 	.word	0x40010400

08006198 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a1b      	ldr	r3, [r3, #32]
 80061ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f023 0303 	bic.w	r3, r3, #3
 80061ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	021b      	lsls	r3, r3, #8
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a21      	ldr	r2, [pc, #132]	@ (8006278 <TIM_OC3_SetConfig+0xe0>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d003      	beq.n	80061fe <TIM_OC3_SetConfig+0x66>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a20      	ldr	r2, [pc, #128]	@ (800627c <TIM_OC3_SetConfig+0xe4>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d10d      	bne.n	800621a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006204:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	021b      	lsls	r3, r3, #8
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	4313      	orrs	r3, r2
 8006210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a16      	ldr	r2, [pc, #88]	@ (8006278 <TIM_OC3_SetConfig+0xe0>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d003      	beq.n	800622a <TIM_OC3_SetConfig+0x92>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a15      	ldr	r2, [pc, #84]	@ (800627c <TIM_OC3_SetConfig+0xe4>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d113      	bne.n	8006252 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	011b      	lsls	r3, r3, #4
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	4313      	orrs	r3, r2
 8006250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	621a      	str	r2, [r3, #32]
}
 800626c:	bf00      	nop
 800626e:	371c      	adds	r7, #28
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	40010000 	.word	0x40010000
 800627c:	40010400 	.word	0x40010400

08006280 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	021b      	lsls	r3, r3, #8
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	031b      	lsls	r3, r3, #12
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a12      	ldr	r2, [pc, #72]	@ (8006324 <TIM_OC4_SetConfig+0xa4>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d003      	beq.n	80062e8 <TIM_OC4_SetConfig+0x68>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a11      	ldr	r2, [pc, #68]	@ (8006328 <TIM_OC4_SetConfig+0xa8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d109      	bne.n	80062fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	019b      	lsls	r3, r3, #6
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	621a      	str	r2, [r3, #32]
}
 8006316:	bf00      	nop
 8006318:	371c      	adds	r7, #28
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	40010000 	.word	0x40010000
 8006328:	40010400 	.word	0x40010400

0800632c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800632c:	b480      	push	{r7}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	f023 0201 	bic.w	r2, r3, #1
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4313      	orrs	r3, r2
 8006360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f023 030a 	bic.w	r3, r3, #10
 8006368:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	4313      	orrs	r3, r2
 8006370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	621a      	str	r2, [r3, #32]
}
 800637e:	bf00      	nop
 8006380:	371c      	adds	r7, #28
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800638a:	b480      	push	{r7}
 800638c:	b087      	sub	sp, #28
 800638e:	af00      	add	r7, sp, #0
 8006390:	60f8      	str	r0, [r7, #12]
 8006392:	60b9      	str	r1, [r7, #8]
 8006394:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	f023 0210 	bic.w	r2, r3, #16
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	031b      	lsls	r3, r3, #12
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	4313      	orrs	r3, r2
 80063be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80063c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	011b      	lsls	r3, r3, #4
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	621a      	str	r2, [r3, #32]
}
 80063de:	bf00      	nop
 80063e0:	371c      	adds	r7, #28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b085      	sub	sp, #20
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006400:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4313      	orrs	r3, r2
 8006408:	f043 0307 	orr.w	r3, r3, #7
 800640c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	609a      	str	r2, [r3, #8]
}
 8006414:	bf00      	nop
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
 800642c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800643a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	021a      	lsls	r2, r3, #8
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	431a      	orrs	r2, r3
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	4313      	orrs	r3, r2
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	4313      	orrs	r3, r2
 800644c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	609a      	str	r2, [r3, #8]
}
 8006454:	bf00      	nop
 8006456:	371c      	adds	r7, #28
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f003 031f 	and.w	r3, r3, #31
 8006472:	2201      	movs	r2, #1
 8006474:	fa02 f303 	lsl.w	r3, r2, r3
 8006478:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6a1a      	ldr	r2, [r3, #32]
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	43db      	mvns	r3, r3
 8006482:	401a      	ands	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6a1a      	ldr	r2, [r3, #32]
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	f003 031f 	and.w	r3, r3, #31
 8006492:	6879      	ldr	r1, [r7, #4]
 8006494:	fa01 f303 	lsl.w	r3, r1, r3
 8006498:	431a      	orrs	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	621a      	str	r2, [r3, #32]
}
 800649e:	bf00      	nop
 80064a0:	371c      	adds	r7, #28
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
	...

080064ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d101      	bne.n	80064c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064c0:	2302      	movs	r3, #2
 80064c2:	e05a      	b.n	800657a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a21      	ldr	r2, [pc, #132]	@ (8006588 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d022      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006510:	d01d      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a1d      	ldr	r2, [pc, #116]	@ (800658c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d018      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1b      	ldr	r2, [pc, #108]	@ (8006590 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d013      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a1a      	ldr	r2, [pc, #104]	@ (8006594 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d00e      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a18      	ldr	r2, [pc, #96]	@ (8006598 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d009      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a17      	ldr	r2, [pc, #92]	@ (800659c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d004      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a15      	ldr	r2, [pc, #84]	@ (80065a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d10c      	bne.n	8006568 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006554:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	4313      	orrs	r3, r2
 800655e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	40010000 	.word	0x40010000
 800658c:	40000400 	.word	0x40000400
 8006590:	40000800 	.word	0x40000800
 8006594:	40000c00 	.word	0x40000c00
 8006598:	40010400 	.word	0x40010400
 800659c:	40014000 	.word	0x40014000
 80065a0:	40001800 	.word	0x40001800

080065a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d101      	bne.n	80065c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065bc:	2302      	movs	r3, #2
 80065be:	e03d      	b.n	800663c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	4313      	orrs	r3, r2
 800661a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	69db      	ldr	r3, [r3, #28]
 8006626:	4313      	orrs	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e042      	b.n	8006708 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d106      	bne.n	800669c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7fc fb0e 	bl	8002cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2224      	movs	r2, #36	@ 0x24
 80066a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68da      	ldr	r2, [r3, #12]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fe61 	bl	800737c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	691a      	ldr	r2, [r3, #16]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	695a      	ldr	r2, [r3, #20]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68da      	ldr	r2, [r3, #12]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2220      	movs	r2, #32
 80066f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2220      	movs	r2, #32
 80066fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	4613      	mov	r3, r2
 800671c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b20      	cmp	r3, #32
 8006728:	d112      	bne.n	8006750 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d002      	beq.n	8006736 <HAL_UART_Receive_DMA+0x26>
 8006730:	88fb      	ldrh	r3, [r7, #6]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e00b      	b.n	8006752 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006740:	88fb      	ldrh	r3, [r7, #6]
 8006742:	461a      	mov	r2, r3
 8006744:	68b9      	ldr	r1, [r7, #8]
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f000 fbb8 	bl	8006ebc <UART_Start_Receive_DMA>
 800674c:	4603      	mov	r3, r0
 800674e:	e000      	b.n	8006752 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006750:	2302      	movs	r3, #2
  }
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
	...

0800675c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b0ba      	sub	sp, #232	@ 0xe8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006782:	2300      	movs	r3, #0
 8006784:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006788:	2300      	movs	r3, #0
 800678a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800678e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006792:	f003 030f 	and.w	r3, r3, #15
 8006796:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800679a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10f      	bne.n	80067c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067a6:	f003 0320 	and.w	r3, r3, #32
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d009      	beq.n	80067c2 <HAL_UART_IRQHandler+0x66>
 80067ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067b2:	f003 0320 	and.w	r3, r3, #32
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fd1f 	bl	80071fe <UART_Receive_IT>
      return;
 80067c0:	e25b      	b.n	8006c7a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80067c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 80de 	beq.w	8006988 <HAL_UART_IRQHandler+0x22c>
 80067cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067d0:	f003 0301 	and.w	r3, r3, #1
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d106      	bne.n	80067e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 80d1 	beq.w	8006988 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00b      	beq.n	800680a <HAL_UART_IRQHandler+0xae>
 80067f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d005      	beq.n	800680a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006802:	f043 0201 	orr.w	r2, r3, #1
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800680a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800680e:	f003 0304 	and.w	r3, r3, #4
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00b      	beq.n	800682e <HAL_UART_IRQHandler+0xd2>
 8006816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b00      	cmp	r3, #0
 8006820:	d005      	beq.n	800682e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006826:	f043 0202 	orr.w	r2, r3, #2
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800682e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00b      	beq.n	8006852 <HAL_UART_IRQHandler+0xf6>
 800683a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b00      	cmp	r3, #0
 8006844:	d005      	beq.n	8006852 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800684a:	f043 0204 	orr.w	r2, r3, #4
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006856:	f003 0308 	and.w	r3, r3, #8
 800685a:	2b00      	cmp	r3, #0
 800685c:	d011      	beq.n	8006882 <HAL_UART_IRQHandler+0x126>
 800685e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006862:	f003 0320 	and.w	r3, r3, #32
 8006866:	2b00      	cmp	r3, #0
 8006868:	d105      	bne.n	8006876 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800686a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b00      	cmp	r3, #0
 8006874:	d005      	beq.n	8006882 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800687a:	f043 0208 	orr.w	r2, r3, #8
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006886:	2b00      	cmp	r3, #0
 8006888:	f000 81f2 	beq.w	8006c70 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800688c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006890:	f003 0320 	and.w	r3, r3, #32
 8006894:	2b00      	cmp	r3, #0
 8006896:	d008      	beq.n	80068aa <HAL_UART_IRQHandler+0x14e>
 8006898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800689c:	f003 0320 	and.w	r3, r3, #32
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d002      	beq.n	80068aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 fcaa 	bl	80071fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068b4:	2b40      	cmp	r3, #64	@ 0x40
 80068b6:	bf0c      	ite	eq
 80068b8:	2301      	moveq	r3, #1
 80068ba:	2300      	movne	r3, #0
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068c6:	f003 0308 	and.w	r3, r3, #8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d103      	bne.n	80068d6 <HAL_UART_IRQHandler+0x17a>
 80068ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d04f      	beq.n	8006976 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fbb2 	bl	8007040 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068e6:	2b40      	cmp	r3, #64	@ 0x40
 80068e8:	d141      	bne.n	800696e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3314      	adds	r3, #20
 80068f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80068f8:	e853 3f00 	ldrex	r3, [r3]
 80068fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006900:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006904:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006908:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3314      	adds	r3, #20
 8006912:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006916:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800691a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006922:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800692e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1d9      	bne.n	80068ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800693a:	2b00      	cmp	r3, #0
 800693c:	d013      	beq.n	8006966 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006942:	4a7e      	ldr	r2, [pc, #504]	@ (8006b3c <HAL_UART_IRQHandler+0x3e0>)
 8006944:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800694a:	4618      	mov	r0, r3
 800694c:	f7fd f852 	bl	80039f4 <HAL_DMA_Abort_IT>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d016      	beq.n	8006984 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800695a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006960:	4610      	mov	r0, r2
 8006962:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006964:	e00e      	b.n	8006984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f994 	bl	8006c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800696c:	e00a      	b.n	8006984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f990 	bl	8006c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006974:	e006      	b.n	8006984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f98c 	bl	8006c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006982:	e175      	b.n	8006c70 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006984:	bf00      	nop
    return;
 8006986:	e173      	b.n	8006c70 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800698c:	2b01      	cmp	r3, #1
 800698e:	f040 814f 	bne.w	8006c30 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006996:	f003 0310 	and.w	r3, r3, #16
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 8148 	beq.w	8006c30 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80069a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069a4:	f003 0310 	and.w	r3, r3, #16
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 8141 	beq.w	8006c30 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069ae:	2300      	movs	r3, #0
 80069b0:	60bb      	str	r3, [r7, #8]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	60bb      	str	r3, [r7, #8]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	60bb      	str	r3, [r7, #8]
 80069c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ce:	2b40      	cmp	r3, #64	@ 0x40
 80069d0:	f040 80b6 	bne.w	8006b40 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 8145 	beq.w	8006c74 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80069ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069f2:	429a      	cmp	r2, r3
 80069f4:	f080 813e 	bcs.w	8006c74 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a0a:	f000 8088 	beq.w	8006b1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	330c      	adds	r3, #12
 8006a14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006a24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	330c      	adds	r3, #12
 8006a36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006a3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006a3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a42:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006a46:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006a4a:	e841 2300 	strex	r3, r2, [r1]
 8006a4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006a52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1d9      	bne.n	8006a0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	3314      	adds	r3, #20
 8006a60:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a64:	e853 3f00 	ldrex	r3, [r3]
 8006a68:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006a6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a6c:	f023 0301 	bic.w	r3, r3, #1
 8006a70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	3314      	adds	r3, #20
 8006a7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a7e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006a82:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a84:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006a86:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006a8a:	e841 2300 	strex	r3, r2, [r1]
 8006a8e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006a90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1e1      	bne.n	8006a5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	3314      	adds	r3, #20
 8006a9c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006aa0:	e853 3f00 	ldrex	r3, [r3]
 8006aa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006aa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006aa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006aac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	3314      	adds	r3, #20
 8006ab6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006aba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006abc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ac0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006ac2:	e841 2300 	strex	r3, r2, [r1]
 8006ac6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ac8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1e3      	bne.n	8006a96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	330c      	adds	r3, #12
 8006ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ae6:	e853 3f00 	ldrex	r3, [r3]
 8006aea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006aec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006aee:	f023 0310 	bic.w	r3, r3, #16
 8006af2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	330c      	adds	r3, #12
 8006afc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006b00:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006b02:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b08:	e841 2300 	strex	r3, r2, [r1]
 8006b0c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e3      	bne.n	8006adc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fc fefb 	bl	8003914 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2202      	movs	r2, #2
 8006b22:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f8b7 	bl	8006ca8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b3a:	e09b      	b.n	8006c74 <HAL_UART_IRQHandler+0x518>
 8006b3c:	08007107 	.word	0x08007107
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f000 808e 	beq.w	8006c78 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006b5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f000 8089 	beq.w	8006c78 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	330c      	adds	r3, #12
 8006b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	330c      	adds	r3, #12
 8006b86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006b8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b92:	e841 2300 	strex	r3, r2, [r1]
 8006b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e3      	bne.n	8006b66 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3314      	adds	r3, #20
 8006ba4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba8:	e853 3f00 	ldrex	r3, [r3]
 8006bac:	623b      	str	r3, [r7, #32]
   return(result);
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	f023 0301 	bic.w	r3, r3, #1
 8006bb4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	3314      	adds	r3, #20
 8006bbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006bc2:	633a      	str	r2, [r7, #48]	@ 0x30
 8006bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bca:	e841 2300 	strex	r3, r2, [r1]
 8006bce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1e3      	bne.n	8006b9e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2220      	movs	r2, #32
 8006bda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	330c      	adds	r3, #12
 8006bea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	e853 3f00 	ldrex	r3, [r3]
 8006bf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f023 0310 	bic.w	r3, r3, #16
 8006bfa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	330c      	adds	r3, #12
 8006c04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006c08:	61fa      	str	r2, [r7, #28]
 8006c0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0c:	69b9      	ldr	r1, [r7, #24]
 8006c0e:	69fa      	ldr	r2, [r7, #28]
 8006c10:	e841 2300 	strex	r3, r2, [r1]
 8006c14:	617b      	str	r3, [r7, #20]
   return(result);
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1e3      	bne.n	8006be4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f83d 	bl	8006ca8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c2e:	e023      	b.n	8006c78 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d009      	beq.n	8006c50 <HAL_UART_IRQHandler+0x4f4>
 8006c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fa70 	bl	800712e <UART_Transmit_IT>
    return;
 8006c4e:	e014      	b.n	8006c7a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00e      	beq.n	8006c7a <HAL_UART_IRQHandler+0x51e>
 8006c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d008      	beq.n	8006c7a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fab0 	bl	80071ce <UART_EndTransmit_IT>
    return;
 8006c6e:	e004      	b.n	8006c7a <HAL_UART_IRQHandler+0x51e>
    return;
 8006c70:	bf00      	nop
 8006c72:	e002      	b.n	8006c7a <HAL_UART_IRQHandler+0x51e>
      return;
 8006c74:	bf00      	nop
 8006c76:	e000      	b.n	8006c7a <HAL_UART_IRQHandler+0x51e>
      return;
 8006c78:	bf00      	nop
  }
}
 8006c7a:	37e8      	adds	r7, #232	@ 0xe8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b09c      	sub	sp, #112	@ 0x70
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ccc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d172      	bne.n	8006dc2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006cdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cde:	2200      	movs	r2, #0
 8006ce0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ce2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	330c      	adds	r3, #12
 8006ce8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cec:	e853 3f00 	ldrex	r3, [r3]
 8006cf0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006cf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	330c      	adds	r3, #12
 8006d00:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006d02:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006d04:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d0a:	e841 2300 	strex	r3, r2, [r1]
 8006d0e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1e5      	bne.n	8006ce2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3314      	adds	r3, #20
 8006d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d20:	e853 3f00 	ldrex	r3, [r3]
 8006d24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d28:	f023 0301 	bic.w	r3, r3, #1
 8006d2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3314      	adds	r3, #20
 8006d34:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006d36:	647a      	str	r2, [r7, #68]	@ 0x44
 8006d38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d3e:	e841 2300 	strex	r3, r2, [r1]
 8006d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1e5      	bne.n	8006d16 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	3314      	adds	r3, #20
 8006d50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d54:	e853 3f00 	ldrex	r3, [r3]
 8006d58:	623b      	str	r3, [r7, #32]
   return(result);
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d60:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	3314      	adds	r3, #20
 8006d68:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006d6a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d72:	e841 2300 	strex	r3, r2, [r1]
 8006d76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1e5      	bne.n	8006d4a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d80:	2220      	movs	r2, #32
 8006d82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d119      	bne.n	8006dc2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	330c      	adds	r3, #12
 8006d94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	e853 3f00 	ldrex	r3, [r3]
 8006d9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f023 0310 	bic.w	r3, r3, #16
 8006da4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006da6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	330c      	adds	r3, #12
 8006dac:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006dae:	61fa      	str	r2, [r7, #28]
 8006db0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db2:	69b9      	ldr	r1, [r7, #24]
 8006db4:	69fa      	ldr	r2, [r7, #28]
 8006db6:	e841 2300 	strex	r3, r2, [r1]
 8006dba:	617b      	str	r3, [r7, #20]
   return(result);
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1e5      	bne.n	8006d8e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d106      	bne.n	8006dde <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dd2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006dd8:	f7ff ff66 	bl	8006ca8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ddc:	e002      	b.n	8006de4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006dde:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006de0:	f7fa fade 	bl	80013a0 <HAL_UART_RxCpltCallback>
}
 8006de4:	bf00      	nop
 8006de6:	3770      	adds	r7, #112	@ 0x70
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d108      	bne.n	8006e1a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e0c:	085b      	lsrs	r3, r3, #1
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	4619      	mov	r1, r3
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f7ff ff48 	bl	8006ca8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e18:	e002      	b.n	8006e20 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f7ff ff30 	bl	8006c80 <HAL_UART_RxHalfCpltCallback>
}
 8006e20:	bf00      	nop
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006e30:	2300      	movs	r3, #0
 8006e32:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e38:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	695b      	ldr	r3, [r3, #20]
 8006e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e44:	2b80      	cmp	r3, #128	@ 0x80
 8006e46:	bf0c      	ite	eq
 8006e48:	2301      	moveq	r3, #1
 8006e4a:	2300      	movne	r3, #0
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b21      	cmp	r3, #33	@ 0x21
 8006e5a:	d108      	bne.n	8006e6e <UART_DMAError+0x46>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d005      	beq.n	8006e6e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2200      	movs	r2, #0
 8006e66:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006e68:	68b8      	ldr	r0, [r7, #8]
 8006e6a:	f000 f8c1 	bl	8006ff0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e78:	2b40      	cmp	r3, #64	@ 0x40
 8006e7a:	bf0c      	ite	eq
 8006e7c:	2301      	moveq	r3, #1
 8006e7e:	2300      	movne	r3, #0
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b22      	cmp	r3, #34	@ 0x22
 8006e8e:	d108      	bne.n	8006ea2 <UART_DMAError+0x7a>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d005      	beq.n	8006ea2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006e9c:	68b8      	ldr	r0, [r7, #8]
 8006e9e:	f000 f8cf 	bl	8007040 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ea6:	f043 0210 	orr.w	r2, r3, #16
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006eae:	68b8      	ldr	r0, [r7, #8]
 8006eb0:	f7ff fef0 	bl	8006c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eb4:	bf00      	nop
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b098      	sub	sp, #96	@ 0x60
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	88fa      	ldrh	r2, [r7, #6]
 8006ed4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2222      	movs	r2, #34	@ 0x22
 8006ee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee8:	4a3e      	ldr	r2, [pc, #248]	@ (8006fe4 <UART_Start_Receive_DMA+0x128>)
 8006eea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ef0:	4a3d      	ldr	r2, [pc, #244]	@ (8006fe8 <UART_Start_Receive_DMA+0x12c>)
 8006ef2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ef8:	4a3c      	ldr	r2, [pc, #240]	@ (8006fec <UART_Start_Receive_DMA+0x130>)
 8006efa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f00:	2200      	movs	r2, #0
 8006f02:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006f04:	f107 0308 	add.w	r3, r7, #8
 8006f08:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3304      	adds	r3, #4
 8006f14:	4619      	mov	r1, r3
 8006f16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	88fb      	ldrh	r3, [r7, #6]
 8006f1c:	f7fc fca2 	bl	8003864 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006f20:	2300      	movs	r3, #0
 8006f22:	613b      	str	r3, [r7, #16]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	613b      	str	r3, [r7, #16]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	613b      	str	r3, [r7, #16]
 8006f34:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d019      	beq.n	8006f72 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	330c      	adds	r3, #12
 8006f44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f48:	e853 3f00 	ldrex	r3, [r3]
 8006f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f54:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	330c      	adds	r3, #12
 8006f5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f5e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006f60:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f62:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006f64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f66:	e841 2300 	strex	r3, r2, [r1]
 8006f6a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006f6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1e5      	bne.n	8006f3e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	3314      	adds	r3, #20
 8006f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f7c:	e853 3f00 	ldrex	r3, [r3]
 8006f80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f84:	f043 0301 	orr.w	r3, r3, #1
 8006f88:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	3314      	adds	r3, #20
 8006f90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f92:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006f94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f96:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006f98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f9a:	e841 2300 	strex	r3, r2, [r1]
 8006f9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1e5      	bne.n	8006f72 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	3314      	adds	r3, #20
 8006fac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	e853 3f00 	ldrex	r3, [r3]
 8006fb4:	617b      	str	r3, [r7, #20]
   return(result);
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fbc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	3314      	adds	r3, #20
 8006fc4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006fc6:	627a      	str	r2, [r7, #36]	@ 0x24
 8006fc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fca:	6a39      	ldr	r1, [r7, #32]
 8006fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fce:	e841 2300 	strex	r3, r2, [r1]
 8006fd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1e5      	bne.n	8006fa6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3760      	adds	r7, #96	@ 0x60
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	08006cc1 	.word	0x08006cc1
 8006fe8:	08006ded 	.word	0x08006ded
 8006fec:	08006e29 	.word	0x08006e29

08006ff0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b089      	sub	sp, #36	@ 0x24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	330c      	adds	r3, #12
 8006ffe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	e853 3f00 	ldrex	r3, [r3]
 8007006:	60bb      	str	r3, [r7, #8]
   return(result);
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800700e:	61fb      	str	r3, [r7, #28]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	330c      	adds	r3, #12
 8007016:	69fa      	ldr	r2, [r7, #28]
 8007018:	61ba      	str	r2, [r7, #24]
 800701a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701c:	6979      	ldr	r1, [r7, #20]
 800701e:	69ba      	ldr	r2, [r7, #24]
 8007020:	e841 2300 	strex	r3, r2, [r1]
 8007024:	613b      	str	r3, [r7, #16]
   return(result);
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1e5      	bne.n	8006ff8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2220      	movs	r2, #32
 8007030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007034:	bf00      	nop
 8007036:	3724      	adds	r7, #36	@ 0x24
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007040:	b480      	push	{r7}
 8007042:	b095      	sub	sp, #84	@ 0x54
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	330c      	adds	r3, #12
 800704e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007052:	e853 3f00 	ldrex	r3, [r3]
 8007056:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800705e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	330c      	adds	r3, #12
 8007066:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007068:	643a      	str	r2, [r7, #64]	@ 0x40
 800706a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800706e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007070:	e841 2300 	strex	r3, r2, [r1]
 8007074:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1e5      	bne.n	8007048 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	3314      	adds	r3, #20
 8007082:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007084:	6a3b      	ldr	r3, [r7, #32]
 8007086:	e853 3f00 	ldrex	r3, [r3]
 800708a:	61fb      	str	r3, [r7, #28]
   return(result);
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	f023 0301 	bic.w	r3, r3, #1
 8007092:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3314      	adds	r3, #20
 800709a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800709c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800709e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070a4:	e841 2300 	strex	r3, r2, [r1]
 80070a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1e5      	bne.n	800707c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d119      	bne.n	80070ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	330c      	adds	r3, #12
 80070be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	e853 3f00 	ldrex	r3, [r3]
 80070c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	f023 0310 	bic.w	r3, r3, #16
 80070ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	330c      	adds	r3, #12
 80070d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070d8:	61ba      	str	r2, [r7, #24]
 80070da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070dc:	6979      	ldr	r1, [r7, #20]
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	e841 2300 	strex	r3, r2, [r1]
 80070e4:	613b      	str	r3, [r7, #16]
   return(result);
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e5      	bne.n	80070b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2220      	movs	r2, #32
 80070f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80070fa:	bf00      	nop
 80070fc:	3754      	adds	r7, #84	@ 0x54
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b084      	sub	sp, #16
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007112:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f7ff fdb7 	bl	8006c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007126:	bf00      	nop
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800712e:	b480      	push	{r7}
 8007130:	b085      	sub	sp, #20
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b21      	cmp	r3, #33	@ 0x21
 8007140:	d13e      	bne.n	80071c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800714a:	d114      	bne.n	8007176 <UART_Transmit_IT+0x48>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d110      	bne.n	8007176 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a1b      	ldr	r3, [r3, #32]
 8007158:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	881b      	ldrh	r3, [r3, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007168:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	1c9a      	adds	r2, r3, #2
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	621a      	str	r2, [r3, #32]
 8007174:	e008      	b.n	8007188 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	1c59      	adds	r1, r3, #1
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	6211      	str	r1, [r2, #32]
 8007180:	781a      	ldrb	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800718c:	b29b      	uxth	r3, r3
 800718e:	3b01      	subs	r3, #1
 8007190:	b29b      	uxth	r3, r3
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	4619      	mov	r1, r3
 8007196:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10f      	bne.n	80071bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68da      	ldr	r2, [r3, #12]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80071aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68da      	ldr	r2, [r3, #12]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80071bc:	2300      	movs	r3, #0
 80071be:	e000      	b.n	80071c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80071c0:	2302      	movs	r3, #2
  }
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b082      	sub	sp, #8
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68da      	ldr	r2, [r3, #12]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2220      	movs	r2, #32
 80071ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f7fa f8cc 	bl	800138c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b08c      	sub	sp, #48	@ 0x30
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b22      	cmp	r3, #34	@ 0x22
 8007210:	f040 80ae 	bne.w	8007370 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800721c:	d117      	bne.n	800724e <UART_Receive_IT+0x50>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d113      	bne.n	800724e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007226:	2300      	movs	r3, #0
 8007228:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800722e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	b29b      	uxth	r3, r3
 8007238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800723c:	b29a      	uxth	r2, r3
 800723e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007240:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007246:	1c9a      	adds	r2, r3, #2
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	629a      	str	r2, [r3, #40]	@ 0x28
 800724c:	e026      	b.n	800729c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007252:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007254:	2300      	movs	r3, #0
 8007256:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007260:	d007      	beq.n	8007272 <UART_Receive_IT+0x74>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10a      	bne.n	8007280 <UART_Receive_IT+0x82>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d106      	bne.n	8007280 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	b2da      	uxtb	r2, r3
 800727a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800727c:	701a      	strb	r2, [r3, #0]
 800727e:	e008      	b.n	8007292 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	b2db      	uxtb	r3, r3
 8007288:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800728c:	b2da      	uxtb	r2, r3
 800728e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007290:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007296:	1c5a      	adds	r2, r3, #1
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	3b01      	subs	r3, #1
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	4619      	mov	r1, r3
 80072aa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d15d      	bne.n	800736c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68da      	ldr	r2, [r3, #12]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 0220 	bic.w	r2, r2, #32
 80072be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68da      	ldr	r2, [r3, #12]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80072ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	695a      	ldr	r2, [r3, #20]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 0201 	bic.w	r2, r2, #1
 80072de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2220      	movs	r2, #32
 80072e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d135      	bne.n	8007362 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	330c      	adds	r3, #12
 8007302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	e853 3f00 	ldrex	r3, [r3]
 800730a:	613b      	str	r3, [r7, #16]
   return(result);
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	f023 0310 	bic.w	r3, r3, #16
 8007312:	627b      	str	r3, [r7, #36]	@ 0x24
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	330c      	adds	r3, #12
 800731a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800731c:	623a      	str	r2, [r7, #32]
 800731e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007320:	69f9      	ldr	r1, [r7, #28]
 8007322:	6a3a      	ldr	r2, [r7, #32]
 8007324:	e841 2300 	strex	r3, r2, [r1]
 8007328:	61bb      	str	r3, [r7, #24]
   return(result);
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1e5      	bne.n	80072fc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0310 	and.w	r3, r3, #16
 800733a:	2b10      	cmp	r3, #16
 800733c:	d10a      	bne.n	8007354 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800733e:	2300      	movs	r3, #0
 8007340:	60fb      	str	r3, [r7, #12]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	60fb      	str	r3, [r7, #12]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	60fb      	str	r3, [r7, #12]
 8007352:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff fca4 	bl	8006ca8 <HAL_UARTEx_RxEventCallback>
 8007360:	e002      	b.n	8007368 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7fa f81c 	bl	80013a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007368:	2300      	movs	r3, #0
 800736a:	e002      	b.n	8007372 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800736c:	2300      	movs	r3, #0
 800736e:	e000      	b.n	8007372 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007370:	2302      	movs	r3, #2
  }
}
 8007372:	4618      	mov	r0, r3
 8007374:	3730      	adds	r7, #48	@ 0x30
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
	...

0800737c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800737c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007380:	b0c0      	sub	sp, #256	@ 0x100
 8007382:	af00      	add	r7, sp, #0
 8007384:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007398:	68d9      	ldr	r1, [r3, #12]
 800739a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	ea40 0301 	orr.w	r3, r0, r1
 80073a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073aa:	689a      	ldr	r2, [r3, #8]
 80073ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	431a      	orrs	r2, r3
 80073b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	431a      	orrs	r2, r3
 80073bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80073c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80073d4:	f021 010c 	bic.w	r1, r1, #12
 80073d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80073e2:	430b      	orrs	r3, r1
 80073e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80073f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073f6:	6999      	ldr	r1, [r3, #24]
 80073f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	ea40 0301 	orr.w	r3, r0, r1
 8007402:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	4b8f      	ldr	r3, [pc, #572]	@ (8007648 <UART_SetConfig+0x2cc>)
 800740c:	429a      	cmp	r2, r3
 800740e:	d005      	beq.n	800741c <UART_SetConfig+0xa0>
 8007410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	4b8d      	ldr	r3, [pc, #564]	@ (800764c <UART_SetConfig+0x2d0>)
 8007418:	429a      	cmp	r2, r3
 800741a:	d104      	bne.n	8007426 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800741c:	f7fd fa8e 	bl	800493c <HAL_RCC_GetPCLK2Freq>
 8007420:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007424:	e003      	b.n	800742e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007426:	f7fd fa75 	bl	8004914 <HAL_RCC_GetPCLK1Freq>
 800742a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800742e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007432:	69db      	ldr	r3, [r3, #28]
 8007434:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007438:	f040 810c 	bne.w	8007654 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800743c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007440:	2200      	movs	r2, #0
 8007442:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007446:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800744a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800744e:	4622      	mov	r2, r4
 8007450:	462b      	mov	r3, r5
 8007452:	1891      	adds	r1, r2, r2
 8007454:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007456:	415b      	adcs	r3, r3
 8007458:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800745a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800745e:	4621      	mov	r1, r4
 8007460:	eb12 0801 	adds.w	r8, r2, r1
 8007464:	4629      	mov	r1, r5
 8007466:	eb43 0901 	adc.w	r9, r3, r1
 800746a:	f04f 0200 	mov.w	r2, #0
 800746e:	f04f 0300 	mov.w	r3, #0
 8007472:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007476:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800747a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800747e:	4690      	mov	r8, r2
 8007480:	4699      	mov	r9, r3
 8007482:	4623      	mov	r3, r4
 8007484:	eb18 0303 	adds.w	r3, r8, r3
 8007488:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800748c:	462b      	mov	r3, r5
 800748e:	eb49 0303 	adc.w	r3, r9, r3
 8007492:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80074a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80074a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80074aa:	460b      	mov	r3, r1
 80074ac:	18db      	adds	r3, r3, r3
 80074ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80074b0:	4613      	mov	r3, r2
 80074b2:	eb42 0303 	adc.w	r3, r2, r3
 80074b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80074b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80074bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80074c0:	f7f9 fc02 	bl	8000cc8 <__aeabi_uldivmod>
 80074c4:	4602      	mov	r2, r0
 80074c6:	460b      	mov	r3, r1
 80074c8:	4b61      	ldr	r3, [pc, #388]	@ (8007650 <UART_SetConfig+0x2d4>)
 80074ca:	fba3 2302 	umull	r2, r3, r3, r2
 80074ce:	095b      	lsrs	r3, r3, #5
 80074d0:	011c      	lsls	r4, r3, #4
 80074d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074d6:	2200      	movs	r2, #0
 80074d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80074dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80074e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80074e4:	4642      	mov	r2, r8
 80074e6:	464b      	mov	r3, r9
 80074e8:	1891      	adds	r1, r2, r2
 80074ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80074ec:	415b      	adcs	r3, r3
 80074ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80074f4:	4641      	mov	r1, r8
 80074f6:	eb12 0a01 	adds.w	sl, r2, r1
 80074fa:	4649      	mov	r1, r9
 80074fc:	eb43 0b01 	adc.w	fp, r3, r1
 8007500:	f04f 0200 	mov.w	r2, #0
 8007504:	f04f 0300 	mov.w	r3, #0
 8007508:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800750c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007510:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007514:	4692      	mov	sl, r2
 8007516:	469b      	mov	fp, r3
 8007518:	4643      	mov	r3, r8
 800751a:	eb1a 0303 	adds.w	r3, sl, r3
 800751e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007522:	464b      	mov	r3, r9
 8007524:	eb4b 0303 	adc.w	r3, fp, r3
 8007528:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800752c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007538:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800753c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007540:	460b      	mov	r3, r1
 8007542:	18db      	adds	r3, r3, r3
 8007544:	643b      	str	r3, [r7, #64]	@ 0x40
 8007546:	4613      	mov	r3, r2
 8007548:	eb42 0303 	adc.w	r3, r2, r3
 800754c:	647b      	str	r3, [r7, #68]	@ 0x44
 800754e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007552:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007556:	f7f9 fbb7 	bl	8000cc8 <__aeabi_uldivmod>
 800755a:	4602      	mov	r2, r0
 800755c:	460b      	mov	r3, r1
 800755e:	4611      	mov	r1, r2
 8007560:	4b3b      	ldr	r3, [pc, #236]	@ (8007650 <UART_SetConfig+0x2d4>)
 8007562:	fba3 2301 	umull	r2, r3, r3, r1
 8007566:	095b      	lsrs	r3, r3, #5
 8007568:	2264      	movs	r2, #100	@ 0x64
 800756a:	fb02 f303 	mul.w	r3, r2, r3
 800756e:	1acb      	subs	r3, r1, r3
 8007570:	00db      	lsls	r3, r3, #3
 8007572:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007576:	4b36      	ldr	r3, [pc, #216]	@ (8007650 <UART_SetConfig+0x2d4>)
 8007578:	fba3 2302 	umull	r2, r3, r3, r2
 800757c:	095b      	lsrs	r3, r3, #5
 800757e:	005b      	lsls	r3, r3, #1
 8007580:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007584:	441c      	add	r4, r3
 8007586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800758a:	2200      	movs	r2, #0
 800758c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007590:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007594:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007598:	4642      	mov	r2, r8
 800759a:	464b      	mov	r3, r9
 800759c:	1891      	adds	r1, r2, r2
 800759e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80075a0:	415b      	adcs	r3, r3
 80075a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80075a8:	4641      	mov	r1, r8
 80075aa:	1851      	adds	r1, r2, r1
 80075ac:	6339      	str	r1, [r7, #48]	@ 0x30
 80075ae:	4649      	mov	r1, r9
 80075b0:	414b      	adcs	r3, r1
 80075b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80075b4:	f04f 0200 	mov.w	r2, #0
 80075b8:	f04f 0300 	mov.w	r3, #0
 80075bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80075c0:	4659      	mov	r1, fp
 80075c2:	00cb      	lsls	r3, r1, #3
 80075c4:	4651      	mov	r1, sl
 80075c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075ca:	4651      	mov	r1, sl
 80075cc:	00ca      	lsls	r2, r1, #3
 80075ce:	4610      	mov	r0, r2
 80075d0:	4619      	mov	r1, r3
 80075d2:	4603      	mov	r3, r0
 80075d4:	4642      	mov	r2, r8
 80075d6:	189b      	adds	r3, r3, r2
 80075d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80075dc:	464b      	mov	r3, r9
 80075de:	460a      	mov	r2, r1
 80075e0:	eb42 0303 	adc.w	r3, r2, r3
 80075e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80075e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80075f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80075f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80075fc:	460b      	mov	r3, r1
 80075fe:	18db      	adds	r3, r3, r3
 8007600:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007602:	4613      	mov	r3, r2
 8007604:	eb42 0303 	adc.w	r3, r2, r3
 8007608:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800760a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800760e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007612:	f7f9 fb59 	bl	8000cc8 <__aeabi_uldivmod>
 8007616:	4602      	mov	r2, r0
 8007618:	460b      	mov	r3, r1
 800761a:	4b0d      	ldr	r3, [pc, #52]	@ (8007650 <UART_SetConfig+0x2d4>)
 800761c:	fba3 1302 	umull	r1, r3, r3, r2
 8007620:	095b      	lsrs	r3, r3, #5
 8007622:	2164      	movs	r1, #100	@ 0x64
 8007624:	fb01 f303 	mul.w	r3, r1, r3
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	00db      	lsls	r3, r3, #3
 800762c:	3332      	adds	r3, #50	@ 0x32
 800762e:	4a08      	ldr	r2, [pc, #32]	@ (8007650 <UART_SetConfig+0x2d4>)
 8007630:	fba2 2303 	umull	r2, r3, r2, r3
 8007634:	095b      	lsrs	r3, r3, #5
 8007636:	f003 0207 	and.w	r2, r3, #7
 800763a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4422      	add	r2, r4
 8007642:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007644:	e106      	b.n	8007854 <UART_SetConfig+0x4d8>
 8007646:	bf00      	nop
 8007648:	40011000 	.word	0x40011000
 800764c:	40011400 	.word	0x40011400
 8007650:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007658:	2200      	movs	r2, #0
 800765a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800765e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007662:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007666:	4642      	mov	r2, r8
 8007668:	464b      	mov	r3, r9
 800766a:	1891      	adds	r1, r2, r2
 800766c:	6239      	str	r1, [r7, #32]
 800766e:	415b      	adcs	r3, r3
 8007670:	627b      	str	r3, [r7, #36]	@ 0x24
 8007672:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007676:	4641      	mov	r1, r8
 8007678:	1854      	adds	r4, r2, r1
 800767a:	4649      	mov	r1, r9
 800767c:	eb43 0501 	adc.w	r5, r3, r1
 8007680:	f04f 0200 	mov.w	r2, #0
 8007684:	f04f 0300 	mov.w	r3, #0
 8007688:	00eb      	lsls	r3, r5, #3
 800768a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800768e:	00e2      	lsls	r2, r4, #3
 8007690:	4614      	mov	r4, r2
 8007692:	461d      	mov	r5, r3
 8007694:	4643      	mov	r3, r8
 8007696:	18e3      	adds	r3, r4, r3
 8007698:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800769c:	464b      	mov	r3, r9
 800769e:	eb45 0303 	adc.w	r3, r5, r3
 80076a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80076a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80076b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80076b6:	f04f 0200 	mov.w	r2, #0
 80076ba:	f04f 0300 	mov.w	r3, #0
 80076be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80076c2:	4629      	mov	r1, r5
 80076c4:	008b      	lsls	r3, r1, #2
 80076c6:	4621      	mov	r1, r4
 80076c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076cc:	4621      	mov	r1, r4
 80076ce:	008a      	lsls	r2, r1, #2
 80076d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80076d4:	f7f9 faf8 	bl	8000cc8 <__aeabi_uldivmod>
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	4b60      	ldr	r3, [pc, #384]	@ (8007860 <UART_SetConfig+0x4e4>)
 80076de:	fba3 2302 	umull	r2, r3, r3, r2
 80076e2:	095b      	lsrs	r3, r3, #5
 80076e4:	011c      	lsls	r4, r3, #4
 80076e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076ea:	2200      	movs	r2, #0
 80076ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80076f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80076f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80076f8:	4642      	mov	r2, r8
 80076fa:	464b      	mov	r3, r9
 80076fc:	1891      	adds	r1, r2, r2
 80076fe:	61b9      	str	r1, [r7, #24]
 8007700:	415b      	adcs	r3, r3
 8007702:	61fb      	str	r3, [r7, #28]
 8007704:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007708:	4641      	mov	r1, r8
 800770a:	1851      	adds	r1, r2, r1
 800770c:	6139      	str	r1, [r7, #16]
 800770e:	4649      	mov	r1, r9
 8007710:	414b      	adcs	r3, r1
 8007712:	617b      	str	r3, [r7, #20]
 8007714:	f04f 0200 	mov.w	r2, #0
 8007718:	f04f 0300 	mov.w	r3, #0
 800771c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007720:	4659      	mov	r1, fp
 8007722:	00cb      	lsls	r3, r1, #3
 8007724:	4651      	mov	r1, sl
 8007726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800772a:	4651      	mov	r1, sl
 800772c:	00ca      	lsls	r2, r1, #3
 800772e:	4610      	mov	r0, r2
 8007730:	4619      	mov	r1, r3
 8007732:	4603      	mov	r3, r0
 8007734:	4642      	mov	r2, r8
 8007736:	189b      	adds	r3, r3, r2
 8007738:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800773c:	464b      	mov	r3, r9
 800773e:	460a      	mov	r2, r1
 8007740:	eb42 0303 	adc.w	r3, r2, r3
 8007744:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007752:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007754:	f04f 0200 	mov.w	r2, #0
 8007758:	f04f 0300 	mov.w	r3, #0
 800775c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007760:	4649      	mov	r1, r9
 8007762:	008b      	lsls	r3, r1, #2
 8007764:	4641      	mov	r1, r8
 8007766:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800776a:	4641      	mov	r1, r8
 800776c:	008a      	lsls	r2, r1, #2
 800776e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007772:	f7f9 faa9 	bl	8000cc8 <__aeabi_uldivmod>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	4611      	mov	r1, r2
 800777c:	4b38      	ldr	r3, [pc, #224]	@ (8007860 <UART_SetConfig+0x4e4>)
 800777e:	fba3 2301 	umull	r2, r3, r3, r1
 8007782:	095b      	lsrs	r3, r3, #5
 8007784:	2264      	movs	r2, #100	@ 0x64
 8007786:	fb02 f303 	mul.w	r3, r2, r3
 800778a:	1acb      	subs	r3, r1, r3
 800778c:	011b      	lsls	r3, r3, #4
 800778e:	3332      	adds	r3, #50	@ 0x32
 8007790:	4a33      	ldr	r2, [pc, #204]	@ (8007860 <UART_SetConfig+0x4e4>)
 8007792:	fba2 2303 	umull	r2, r3, r2, r3
 8007796:	095b      	lsrs	r3, r3, #5
 8007798:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800779c:	441c      	add	r4, r3
 800779e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077a2:	2200      	movs	r2, #0
 80077a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80077a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80077a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80077ac:	4642      	mov	r2, r8
 80077ae:	464b      	mov	r3, r9
 80077b0:	1891      	adds	r1, r2, r2
 80077b2:	60b9      	str	r1, [r7, #8]
 80077b4:	415b      	adcs	r3, r3
 80077b6:	60fb      	str	r3, [r7, #12]
 80077b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077bc:	4641      	mov	r1, r8
 80077be:	1851      	adds	r1, r2, r1
 80077c0:	6039      	str	r1, [r7, #0]
 80077c2:	4649      	mov	r1, r9
 80077c4:	414b      	adcs	r3, r1
 80077c6:	607b      	str	r3, [r7, #4]
 80077c8:	f04f 0200 	mov.w	r2, #0
 80077cc:	f04f 0300 	mov.w	r3, #0
 80077d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80077d4:	4659      	mov	r1, fp
 80077d6:	00cb      	lsls	r3, r1, #3
 80077d8:	4651      	mov	r1, sl
 80077da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077de:	4651      	mov	r1, sl
 80077e0:	00ca      	lsls	r2, r1, #3
 80077e2:	4610      	mov	r0, r2
 80077e4:	4619      	mov	r1, r3
 80077e6:	4603      	mov	r3, r0
 80077e8:	4642      	mov	r2, r8
 80077ea:	189b      	adds	r3, r3, r2
 80077ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077ee:	464b      	mov	r3, r9
 80077f0:	460a      	mov	r2, r1
 80077f2:	eb42 0303 	adc.w	r3, r2, r3
 80077f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80077f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	663b      	str	r3, [r7, #96]	@ 0x60
 8007802:	667a      	str	r2, [r7, #100]	@ 0x64
 8007804:	f04f 0200 	mov.w	r2, #0
 8007808:	f04f 0300 	mov.w	r3, #0
 800780c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007810:	4649      	mov	r1, r9
 8007812:	008b      	lsls	r3, r1, #2
 8007814:	4641      	mov	r1, r8
 8007816:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800781a:	4641      	mov	r1, r8
 800781c:	008a      	lsls	r2, r1, #2
 800781e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007822:	f7f9 fa51 	bl	8000cc8 <__aeabi_uldivmod>
 8007826:	4602      	mov	r2, r0
 8007828:	460b      	mov	r3, r1
 800782a:	4b0d      	ldr	r3, [pc, #52]	@ (8007860 <UART_SetConfig+0x4e4>)
 800782c:	fba3 1302 	umull	r1, r3, r3, r2
 8007830:	095b      	lsrs	r3, r3, #5
 8007832:	2164      	movs	r1, #100	@ 0x64
 8007834:	fb01 f303 	mul.w	r3, r1, r3
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	011b      	lsls	r3, r3, #4
 800783c:	3332      	adds	r3, #50	@ 0x32
 800783e:	4a08      	ldr	r2, [pc, #32]	@ (8007860 <UART_SetConfig+0x4e4>)
 8007840:	fba2 2303 	umull	r2, r3, r2, r3
 8007844:	095b      	lsrs	r3, r3, #5
 8007846:	f003 020f 	and.w	r2, r3, #15
 800784a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4422      	add	r2, r4
 8007852:	609a      	str	r2, [r3, #8]
}
 8007854:	bf00      	nop
 8007856:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800785a:	46bd      	mov	sp, r7
 800785c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007860:	51eb851f 	.word	0x51eb851f

08007864 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007864:	b084      	sub	sp, #16
 8007866:	b580      	push	{r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	f107 001c 	add.w	r0, r7, #28
 8007872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007876:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800787a:	2b01      	cmp	r3, #1
 800787c:	d123      	bne.n	80078c6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007882:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007892:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80078a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d105      	bne.n	80078ba <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fa9a 	bl	8007df4 <USB_CoreReset>
 80078c0:	4603      	mov	r3, r0
 80078c2:	73fb      	strb	r3, [r7, #15]
 80078c4:	e01b      	b.n	80078fe <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fa8e 	bl	8007df4 <USB_CoreReset>
 80078d8:	4603      	mov	r3, r0
 80078da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80078dc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d106      	bne.n	80078f2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80078f0:	e005      	b.n	80078fe <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80078fe:	7fbb      	ldrb	r3, [r7, #30]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d10b      	bne.n	800791c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	f043 0206 	orr.w	r2, r3, #6
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f043 0220 	orr.w	r2, r3, #32
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800791c:	7bfb      	ldrb	r3, [r7, #15]
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007928:	b004      	add	sp, #16
 800792a:	4770      	bx	lr

0800792c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f023 0201 	bic.w	r2, r3, #1
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b084      	sub	sp, #16
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	460b      	mov	r3, r1
 8007958:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800795a:	2300      	movs	r3, #0
 800795c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800796a:	78fb      	ldrb	r3, [r7, #3]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d115      	bne.n	800799c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800797c:	200a      	movs	r0, #10
 800797e:	f7fb fd8d 	bl	800349c <HAL_Delay>
      ms += 10U;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	330a      	adds	r3, #10
 8007986:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fa25 	bl	8007dd8 <USB_GetMode>
 800798e:	4603      	mov	r3, r0
 8007990:	2b01      	cmp	r3, #1
 8007992:	d01e      	beq.n	80079d2 <USB_SetCurrentMode+0x84>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2bc7      	cmp	r3, #199	@ 0xc7
 8007998:	d9f0      	bls.n	800797c <USB_SetCurrentMode+0x2e>
 800799a:	e01a      	b.n	80079d2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800799c:	78fb      	ldrb	r3, [r7, #3]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d115      	bne.n	80079ce <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80079ae:	200a      	movs	r0, #10
 80079b0:	f7fb fd74 	bl	800349c <HAL_Delay>
      ms += 10U;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	330a      	adds	r3, #10
 80079b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fa0c 	bl	8007dd8 <USB_GetMode>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d005      	beq.n	80079d2 <USB_SetCurrentMode+0x84>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2bc7      	cmp	r3, #199	@ 0xc7
 80079ca:	d9f0      	bls.n	80079ae <USB_SetCurrentMode+0x60>
 80079cc:	e001      	b.n	80079d2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e005      	b.n	80079de <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2bc8      	cmp	r3, #200	@ 0xc8
 80079d6:	d101      	bne.n	80079dc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e000      	b.n	80079de <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
	...

080079e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079e8:	b084      	sub	sp, #16
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b086      	sub	sp, #24
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
 80079f2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80079f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007a02:	2300      	movs	r3, #0
 8007a04:	613b      	str	r3, [r7, #16]
 8007a06:	e009      	b.n	8007a1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	3340      	adds	r3, #64	@ 0x40
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4413      	add	r3, r2
 8007a12:	2200      	movs	r2, #0
 8007a14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	613b      	str	r3, [r7, #16]
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	2b0e      	cmp	r3, #14
 8007a20:	d9f2      	bls.n	8007a08 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007a22:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d11c      	bne.n	8007a64 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a38:	f043 0302 	orr.w	r3, r3, #2
 8007a3c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a42:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	601a      	str	r2, [r3, #0]
 8007a62:	e005      	b.n	8007a70 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a68:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007a76:	461a      	mov	r2, r3
 8007a78:	2300      	movs	r3, #0
 8007a7a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a7c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d10d      	bne.n	8007aa0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007a84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d104      	bne.n	8007a96 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f968 	bl	8007d64 <USB_SetDevSpeed>
 8007a94:	e008      	b.n	8007aa8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007a96:	2101      	movs	r1, #1
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f963 	bl	8007d64 <USB_SetDevSpeed>
 8007a9e:	e003      	b.n	8007aa8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007aa0:	2103      	movs	r1, #3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 f95e 	bl	8007d64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007aa8:	2110      	movs	r1, #16
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f8fa 	bl	8007ca4 <USB_FlushTxFifo>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d001      	beq.n	8007aba <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f924 	bl	8007d08 <USB_FlushRxFifo>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d001      	beq.n	8007aca <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007adc:	461a      	mov	r2, r3
 8007ade:	2300      	movs	r3, #0
 8007ae0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ae8:	461a      	mov	r2, r3
 8007aea:	2300      	movs	r3, #0
 8007aec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007aee:	2300      	movs	r3, #0
 8007af0:	613b      	str	r3, [r7, #16]
 8007af2:	e043      	b.n	8007b7c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	015a      	lsls	r2, r3, #5
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b0a:	d118      	bne.n	8007b3e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10a      	bne.n	8007b28 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	015a      	lsls	r2, r3, #5
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	4413      	add	r3, r2
 8007b1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b1e:	461a      	mov	r2, r3
 8007b20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007b24:	6013      	str	r3, [r2, #0]
 8007b26:	e013      	b.n	8007b50 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	015a      	lsls	r2, r3, #5
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	4413      	add	r3, r2
 8007b30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b34:	461a      	mov	r2, r3
 8007b36:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007b3a:	6013      	str	r3, [r2, #0]
 8007b3c:	e008      	b.n	8007b50 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	015a      	lsls	r2, r3, #5
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	4413      	add	r3, r2
 8007b46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	2300      	movs	r3, #0
 8007b60:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	015a      	lsls	r2, r3, #5
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b6e:	461a      	mov	r2, r3
 8007b70:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007b74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	613b      	str	r3, [r7, #16]
 8007b7c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007b80:	461a      	mov	r2, r3
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d3b5      	bcc.n	8007af4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b88:	2300      	movs	r3, #0
 8007b8a:	613b      	str	r3, [r7, #16]
 8007b8c:	e043      	b.n	8007c16 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	015a      	lsls	r2, r3, #5
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	4413      	add	r3, r2
 8007b96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ba4:	d118      	bne.n	8007bd8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10a      	bne.n	8007bc2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	015a      	lsls	r2, r3, #5
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bb8:	461a      	mov	r2, r3
 8007bba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007bbe:	6013      	str	r3, [r2, #0]
 8007bc0:	e013      	b.n	8007bea <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	015a      	lsls	r2, r3, #5
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	4413      	add	r3, r2
 8007bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bce:	461a      	mov	r2, r3
 8007bd0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007bd4:	6013      	str	r3, [r2, #0]
 8007bd6:	e008      	b.n	8007bea <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	015a      	lsls	r2, r3, #5
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	4413      	add	r3, r2
 8007be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007be4:	461a      	mov	r2, r3
 8007be6:	2300      	movs	r3, #0
 8007be8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	015a      	lsls	r2, r3, #5
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	015a      	lsls	r2, r3, #5
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	4413      	add	r3, r2
 8007c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c08:	461a      	mov	r2, r3
 8007c0a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007c0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	3301      	adds	r3, #1
 8007c14:	613b      	str	r3, [r7, #16]
 8007c16:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d3b5      	bcc.n	8007b8e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c34:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007c42:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007c44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d105      	bne.n	8007c58 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	f043 0210 	orr.w	r2, r3, #16
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	699a      	ldr	r2, [r3, #24]
 8007c5c:	4b10      	ldr	r3, [pc, #64]	@ (8007ca0 <USB_DevInit+0x2b8>)
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007c64:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d005      	beq.n	8007c78 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	699b      	ldr	r3, [r3, #24]
 8007c70:	f043 0208 	orr.w	r2, r3, #8
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007c78:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d107      	bne.n	8007c90 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c88:	f043 0304 	orr.w	r3, r3, #4
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3718      	adds	r7, #24
 8007c96:	46bd      	mov	sp, r7
 8007c98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c9c:	b004      	add	sp, #16
 8007c9e:	4770      	bx	lr
 8007ca0:	803c3800 	.word	0x803c3800

08007ca4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007cbe:	d901      	bls.n	8007cc4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e01b      	b.n	8007cfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	daf2      	bge.n	8007cb2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	019b      	lsls	r3, r3, #6
 8007cd4:	f043 0220 	orr.w	r2, r3, #32
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ce8:	d901      	bls.n	8007cee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e006      	b.n	8007cfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	f003 0320 	and.w	r3, r3, #32
 8007cf6:	2b20      	cmp	r3, #32
 8007cf8:	d0f0      	beq.n	8007cdc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3714      	adds	r7, #20
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d10:	2300      	movs	r3, #0
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	3301      	adds	r3, #1
 8007d18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d20:	d901      	bls.n	8007d26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e018      	b.n	8007d58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	daf2      	bge.n	8007d14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2210      	movs	r2, #16
 8007d36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d44:	d901      	bls.n	8007d4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e006      	b.n	8007d58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	f003 0310 	and.w	r3, r3, #16
 8007d52:	2b10      	cmp	r3, #16
 8007d54:	d0f0      	beq.n	8007d38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	78fb      	ldrb	r3, [r7, #3]
 8007d7e:	68f9      	ldr	r1, [r7, #12]
 8007d80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d84:	4313      	orrs	r3, r2
 8007d86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3714      	adds	r7, #20
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d96:	b480      	push	{r7}
 8007d98:	b085      	sub	sp, #20
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007db0:	f023 0303 	bic.w	r3, r3, #3
 8007db4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007dc4:	f043 0302 	orr.w	r3, r3, #2
 8007dc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3714      	adds	r7, #20
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	695b      	ldr	r3, [r3, #20]
 8007de4:	f003 0301 	and.w	r3, r3, #1
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	3301      	adds	r3, #1
 8007e04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e0c:	d901      	bls.n	8007e12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e01b      	b.n	8007e4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	daf2      	bge.n	8007e00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	f043 0201 	orr.w	r2, r3, #1
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e36:	d901      	bls.n	8007e3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e38:	2303      	movs	r3, #3
 8007e3a:	e006      	b.n	8007e4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	f003 0301 	and.w	r3, r3, #1
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d0f0      	beq.n	8007e2a <USB_CoreReset+0x36>

  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <atoi>:
 8007e56:	220a      	movs	r2, #10
 8007e58:	2100      	movs	r1, #0
 8007e5a:	f000 be8b 	b.w	8008b74 <strtol>

08007e5e <sulp>:
 8007e5e:	b570      	push	{r4, r5, r6, lr}
 8007e60:	4604      	mov	r4, r0
 8007e62:	460d      	mov	r5, r1
 8007e64:	ec45 4b10 	vmov	d0, r4, r5
 8007e68:	4616      	mov	r6, r2
 8007e6a:	f003 fb1d 	bl	800b4a8 <__ulp>
 8007e6e:	ec51 0b10 	vmov	r0, r1, d0
 8007e72:	b17e      	cbz	r6, 8007e94 <sulp+0x36>
 8007e74:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007e78:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	dd09      	ble.n	8007e94 <sulp+0x36>
 8007e80:	051b      	lsls	r3, r3, #20
 8007e82:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007e86:	2400      	movs	r4, #0
 8007e88:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007e8c:	4622      	mov	r2, r4
 8007e8e:	462b      	mov	r3, r5
 8007e90:	f7f8 fbd2 	bl	8000638 <__aeabi_dmul>
 8007e94:	ec41 0b10 	vmov	d0, r0, r1
 8007e98:	bd70      	pop	{r4, r5, r6, pc}
 8007e9a:	0000      	movs	r0, r0
 8007e9c:	0000      	movs	r0, r0
	...

08007ea0 <_strtod_l>:
 8007ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea4:	b09f      	sub	sp, #124	@ 0x7c
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007eaa:	2200      	movs	r2, #0
 8007eac:	921a      	str	r2, [sp, #104]	@ 0x68
 8007eae:	9005      	str	r0, [sp, #20]
 8007eb0:	f04f 0a00 	mov.w	sl, #0
 8007eb4:	f04f 0b00 	mov.w	fp, #0
 8007eb8:	460a      	mov	r2, r1
 8007eba:	9219      	str	r2, [sp, #100]	@ 0x64
 8007ebc:	7811      	ldrb	r1, [r2, #0]
 8007ebe:	292b      	cmp	r1, #43	@ 0x2b
 8007ec0:	d04a      	beq.n	8007f58 <_strtod_l+0xb8>
 8007ec2:	d838      	bhi.n	8007f36 <_strtod_l+0x96>
 8007ec4:	290d      	cmp	r1, #13
 8007ec6:	d832      	bhi.n	8007f2e <_strtod_l+0x8e>
 8007ec8:	2908      	cmp	r1, #8
 8007eca:	d832      	bhi.n	8007f32 <_strtod_l+0x92>
 8007ecc:	2900      	cmp	r1, #0
 8007ece:	d03b      	beq.n	8007f48 <_strtod_l+0xa8>
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007ed4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007ed6:	782a      	ldrb	r2, [r5, #0]
 8007ed8:	2a30      	cmp	r2, #48	@ 0x30
 8007eda:	f040 80b3 	bne.w	8008044 <_strtod_l+0x1a4>
 8007ede:	786a      	ldrb	r2, [r5, #1]
 8007ee0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007ee4:	2a58      	cmp	r2, #88	@ 0x58
 8007ee6:	d16e      	bne.n	8007fc6 <_strtod_l+0x126>
 8007ee8:	9302      	str	r3, [sp, #8]
 8007eea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007eec:	9301      	str	r3, [sp, #4]
 8007eee:	ab1a      	add	r3, sp, #104	@ 0x68
 8007ef0:	9300      	str	r3, [sp, #0]
 8007ef2:	4a8e      	ldr	r2, [pc, #568]	@ (800812c <_strtod_l+0x28c>)
 8007ef4:	9805      	ldr	r0, [sp, #20]
 8007ef6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007ef8:	a919      	add	r1, sp, #100	@ 0x64
 8007efa:	f002 fbc7 	bl	800a68c <__gethex>
 8007efe:	f010 060f 	ands.w	r6, r0, #15
 8007f02:	4604      	mov	r4, r0
 8007f04:	d005      	beq.n	8007f12 <_strtod_l+0x72>
 8007f06:	2e06      	cmp	r6, #6
 8007f08:	d128      	bne.n	8007f5c <_strtod_l+0xbc>
 8007f0a:	3501      	adds	r5, #1
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007f10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f040 858e 	bne.w	8008a36 <_strtod_l+0xb96>
 8007f1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f1c:	b1cb      	cbz	r3, 8007f52 <_strtod_l+0xb2>
 8007f1e:	4652      	mov	r2, sl
 8007f20:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007f24:	ec43 2b10 	vmov	d0, r2, r3
 8007f28:	b01f      	add	sp, #124	@ 0x7c
 8007f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f2e:	2920      	cmp	r1, #32
 8007f30:	d1ce      	bne.n	8007ed0 <_strtod_l+0x30>
 8007f32:	3201      	adds	r2, #1
 8007f34:	e7c1      	b.n	8007eba <_strtod_l+0x1a>
 8007f36:	292d      	cmp	r1, #45	@ 0x2d
 8007f38:	d1ca      	bne.n	8007ed0 <_strtod_l+0x30>
 8007f3a:	2101      	movs	r1, #1
 8007f3c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007f3e:	1c51      	adds	r1, r2, #1
 8007f40:	9119      	str	r1, [sp, #100]	@ 0x64
 8007f42:	7852      	ldrb	r2, [r2, #1]
 8007f44:	2a00      	cmp	r2, #0
 8007f46:	d1c5      	bne.n	8007ed4 <_strtod_l+0x34>
 8007f48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007f4a:	9419      	str	r4, [sp, #100]	@ 0x64
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f040 8570 	bne.w	8008a32 <_strtod_l+0xb92>
 8007f52:	4652      	mov	r2, sl
 8007f54:	465b      	mov	r3, fp
 8007f56:	e7e5      	b.n	8007f24 <_strtod_l+0x84>
 8007f58:	2100      	movs	r1, #0
 8007f5a:	e7ef      	b.n	8007f3c <_strtod_l+0x9c>
 8007f5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007f5e:	b13a      	cbz	r2, 8007f70 <_strtod_l+0xd0>
 8007f60:	2135      	movs	r1, #53	@ 0x35
 8007f62:	a81c      	add	r0, sp, #112	@ 0x70
 8007f64:	f003 fb9a 	bl	800b69c <__copybits>
 8007f68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f6a:	9805      	ldr	r0, [sp, #20]
 8007f6c:	f002 ff68 	bl	800ae40 <_Bfree>
 8007f70:	3e01      	subs	r6, #1
 8007f72:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007f74:	2e04      	cmp	r6, #4
 8007f76:	d806      	bhi.n	8007f86 <_strtod_l+0xe6>
 8007f78:	e8df f006 	tbb	[pc, r6]
 8007f7c:	201d0314 	.word	0x201d0314
 8007f80:	14          	.byte	0x14
 8007f81:	00          	.byte	0x00
 8007f82:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007f86:	05e1      	lsls	r1, r4, #23
 8007f88:	bf48      	it	mi
 8007f8a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007f8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007f92:	0d1b      	lsrs	r3, r3, #20
 8007f94:	051b      	lsls	r3, r3, #20
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1bb      	bne.n	8007f12 <_strtod_l+0x72>
 8007f9a:	f001 fc13 	bl	80097c4 <__errno>
 8007f9e:	2322      	movs	r3, #34	@ 0x22
 8007fa0:	6003      	str	r3, [r0, #0]
 8007fa2:	e7b6      	b.n	8007f12 <_strtod_l+0x72>
 8007fa4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007fa8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007fac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007fb0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007fb4:	e7e7      	b.n	8007f86 <_strtod_l+0xe6>
 8007fb6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008134 <_strtod_l+0x294>
 8007fba:	e7e4      	b.n	8007f86 <_strtod_l+0xe6>
 8007fbc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007fc0:	f04f 3aff 	mov.w	sl, #4294967295
 8007fc4:	e7df      	b.n	8007f86 <_strtod_l+0xe6>
 8007fc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007fc8:	1c5a      	adds	r2, r3, #1
 8007fca:	9219      	str	r2, [sp, #100]	@ 0x64
 8007fcc:	785b      	ldrb	r3, [r3, #1]
 8007fce:	2b30      	cmp	r3, #48	@ 0x30
 8007fd0:	d0f9      	beq.n	8007fc6 <_strtod_l+0x126>
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d09d      	beq.n	8007f12 <_strtod_l+0x72>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007fdc:	930c      	str	r3, [sp, #48]	@ 0x30
 8007fde:	2300      	movs	r3, #0
 8007fe0:	9308      	str	r3, [sp, #32]
 8007fe2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fe4:	461f      	mov	r7, r3
 8007fe6:	220a      	movs	r2, #10
 8007fe8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007fea:	7805      	ldrb	r5, [r0, #0]
 8007fec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007ff0:	b2d9      	uxtb	r1, r3
 8007ff2:	2909      	cmp	r1, #9
 8007ff4:	d928      	bls.n	8008048 <_strtod_l+0x1a8>
 8007ff6:	494e      	ldr	r1, [pc, #312]	@ (8008130 <_strtod_l+0x290>)
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f001 fb2a 	bl	8009652 <strncmp>
 8007ffe:	2800      	cmp	r0, #0
 8008000:	d032      	beq.n	8008068 <_strtod_l+0x1c8>
 8008002:	2000      	movs	r0, #0
 8008004:	462a      	mov	r2, r5
 8008006:	4681      	mov	r9, r0
 8008008:	463d      	mov	r5, r7
 800800a:	4603      	mov	r3, r0
 800800c:	2a65      	cmp	r2, #101	@ 0x65
 800800e:	d001      	beq.n	8008014 <_strtod_l+0x174>
 8008010:	2a45      	cmp	r2, #69	@ 0x45
 8008012:	d114      	bne.n	800803e <_strtod_l+0x19e>
 8008014:	b91d      	cbnz	r5, 800801e <_strtod_l+0x17e>
 8008016:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008018:	4302      	orrs	r2, r0
 800801a:	d095      	beq.n	8007f48 <_strtod_l+0xa8>
 800801c:	2500      	movs	r5, #0
 800801e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008020:	1c62      	adds	r2, r4, #1
 8008022:	9219      	str	r2, [sp, #100]	@ 0x64
 8008024:	7862      	ldrb	r2, [r4, #1]
 8008026:	2a2b      	cmp	r2, #43	@ 0x2b
 8008028:	d077      	beq.n	800811a <_strtod_l+0x27a>
 800802a:	2a2d      	cmp	r2, #45	@ 0x2d
 800802c:	d07b      	beq.n	8008126 <_strtod_l+0x286>
 800802e:	f04f 0c00 	mov.w	ip, #0
 8008032:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008036:	2909      	cmp	r1, #9
 8008038:	f240 8082 	bls.w	8008140 <_strtod_l+0x2a0>
 800803c:	9419      	str	r4, [sp, #100]	@ 0x64
 800803e:	f04f 0800 	mov.w	r8, #0
 8008042:	e0a2      	b.n	800818a <_strtod_l+0x2ea>
 8008044:	2300      	movs	r3, #0
 8008046:	e7c7      	b.n	8007fd8 <_strtod_l+0x138>
 8008048:	2f08      	cmp	r7, #8
 800804a:	bfd5      	itete	le
 800804c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800804e:	9908      	ldrgt	r1, [sp, #32]
 8008050:	fb02 3301 	mlale	r3, r2, r1, r3
 8008054:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008058:	f100 0001 	add.w	r0, r0, #1
 800805c:	bfd4      	ite	le
 800805e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008060:	9308      	strgt	r3, [sp, #32]
 8008062:	3701      	adds	r7, #1
 8008064:	9019      	str	r0, [sp, #100]	@ 0x64
 8008066:	e7bf      	b.n	8007fe8 <_strtod_l+0x148>
 8008068:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800806a:	1c5a      	adds	r2, r3, #1
 800806c:	9219      	str	r2, [sp, #100]	@ 0x64
 800806e:	785a      	ldrb	r2, [r3, #1]
 8008070:	b37f      	cbz	r7, 80080d2 <_strtod_l+0x232>
 8008072:	4681      	mov	r9, r0
 8008074:	463d      	mov	r5, r7
 8008076:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800807a:	2b09      	cmp	r3, #9
 800807c:	d912      	bls.n	80080a4 <_strtod_l+0x204>
 800807e:	2301      	movs	r3, #1
 8008080:	e7c4      	b.n	800800c <_strtod_l+0x16c>
 8008082:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	9219      	str	r2, [sp, #100]	@ 0x64
 8008088:	785a      	ldrb	r2, [r3, #1]
 800808a:	3001      	adds	r0, #1
 800808c:	2a30      	cmp	r2, #48	@ 0x30
 800808e:	d0f8      	beq.n	8008082 <_strtod_l+0x1e2>
 8008090:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008094:	2b08      	cmp	r3, #8
 8008096:	f200 84d3 	bhi.w	8008a40 <_strtod_l+0xba0>
 800809a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800809c:	930c      	str	r3, [sp, #48]	@ 0x30
 800809e:	4681      	mov	r9, r0
 80080a0:	2000      	movs	r0, #0
 80080a2:	4605      	mov	r5, r0
 80080a4:	3a30      	subs	r2, #48	@ 0x30
 80080a6:	f100 0301 	add.w	r3, r0, #1
 80080aa:	d02a      	beq.n	8008102 <_strtod_l+0x262>
 80080ac:	4499      	add	r9, r3
 80080ae:	eb00 0c05 	add.w	ip, r0, r5
 80080b2:	462b      	mov	r3, r5
 80080b4:	210a      	movs	r1, #10
 80080b6:	4563      	cmp	r3, ip
 80080b8:	d10d      	bne.n	80080d6 <_strtod_l+0x236>
 80080ba:	1c69      	adds	r1, r5, #1
 80080bc:	4401      	add	r1, r0
 80080be:	4428      	add	r0, r5
 80080c0:	2808      	cmp	r0, #8
 80080c2:	dc16      	bgt.n	80080f2 <_strtod_l+0x252>
 80080c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80080c6:	230a      	movs	r3, #10
 80080c8:	fb03 2300 	mla	r3, r3, r0, r2
 80080cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80080ce:	2300      	movs	r3, #0
 80080d0:	e018      	b.n	8008104 <_strtod_l+0x264>
 80080d2:	4638      	mov	r0, r7
 80080d4:	e7da      	b.n	800808c <_strtod_l+0x1ec>
 80080d6:	2b08      	cmp	r3, #8
 80080d8:	f103 0301 	add.w	r3, r3, #1
 80080dc:	dc03      	bgt.n	80080e6 <_strtod_l+0x246>
 80080de:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80080e0:	434e      	muls	r6, r1
 80080e2:	960a      	str	r6, [sp, #40]	@ 0x28
 80080e4:	e7e7      	b.n	80080b6 <_strtod_l+0x216>
 80080e6:	2b10      	cmp	r3, #16
 80080e8:	bfde      	ittt	le
 80080ea:	9e08      	ldrle	r6, [sp, #32]
 80080ec:	434e      	mulle	r6, r1
 80080ee:	9608      	strle	r6, [sp, #32]
 80080f0:	e7e1      	b.n	80080b6 <_strtod_l+0x216>
 80080f2:	280f      	cmp	r0, #15
 80080f4:	dceb      	bgt.n	80080ce <_strtod_l+0x22e>
 80080f6:	9808      	ldr	r0, [sp, #32]
 80080f8:	230a      	movs	r3, #10
 80080fa:	fb03 2300 	mla	r3, r3, r0, r2
 80080fe:	9308      	str	r3, [sp, #32]
 8008100:	e7e5      	b.n	80080ce <_strtod_l+0x22e>
 8008102:	4629      	mov	r1, r5
 8008104:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008106:	1c50      	adds	r0, r2, #1
 8008108:	9019      	str	r0, [sp, #100]	@ 0x64
 800810a:	7852      	ldrb	r2, [r2, #1]
 800810c:	4618      	mov	r0, r3
 800810e:	460d      	mov	r5, r1
 8008110:	e7b1      	b.n	8008076 <_strtod_l+0x1d6>
 8008112:	f04f 0900 	mov.w	r9, #0
 8008116:	2301      	movs	r3, #1
 8008118:	e77d      	b.n	8008016 <_strtod_l+0x176>
 800811a:	f04f 0c00 	mov.w	ip, #0
 800811e:	1ca2      	adds	r2, r4, #2
 8008120:	9219      	str	r2, [sp, #100]	@ 0x64
 8008122:	78a2      	ldrb	r2, [r4, #2]
 8008124:	e785      	b.n	8008032 <_strtod_l+0x192>
 8008126:	f04f 0c01 	mov.w	ip, #1
 800812a:	e7f8      	b.n	800811e <_strtod_l+0x27e>
 800812c:	0800beb8 	.word	0x0800beb8
 8008130:	0800bea0 	.word	0x0800bea0
 8008134:	7ff00000 	.word	0x7ff00000
 8008138:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800813a:	1c51      	adds	r1, r2, #1
 800813c:	9119      	str	r1, [sp, #100]	@ 0x64
 800813e:	7852      	ldrb	r2, [r2, #1]
 8008140:	2a30      	cmp	r2, #48	@ 0x30
 8008142:	d0f9      	beq.n	8008138 <_strtod_l+0x298>
 8008144:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008148:	2908      	cmp	r1, #8
 800814a:	f63f af78 	bhi.w	800803e <_strtod_l+0x19e>
 800814e:	3a30      	subs	r2, #48	@ 0x30
 8008150:	920e      	str	r2, [sp, #56]	@ 0x38
 8008152:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008154:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008156:	f04f 080a 	mov.w	r8, #10
 800815a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800815c:	1c56      	adds	r6, r2, #1
 800815e:	9619      	str	r6, [sp, #100]	@ 0x64
 8008160:	7852      	ldrb	r2, [r2, #1]
 8008162:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008166:	f1be 0f09 	cmp.w	lr, #9
 800816a:	d939      	bls.n	80081e0 <_strtod_l+0x340>
 800816c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800816e:	1a76      	subs	r6, r6, r1
 8008170:	2e08      	cmp	r6, #8
 8008172:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008176:	dc03      	bgt.n	8008180 <_strtod_l+0x2e0>
 8008178:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800817a:	4588      	cmp	r8, r1
 800817c:	bfa8      	it	ge
 800817e:	4688      	movge	r8, r1
 8008180:	f1bc 0f00 	cmp.w	ip, #0
 8008184:	d001      	beq.n	800818a <_strtod_l+0x2ea>
 8008186:	f1c8 0800 	rsb	r8, r8, #0
 800818a:	2d00      	cmp	r5, #0
 800818c:	d14e      	bne.n	800822c <_strtod_l+0x38c>
 800818e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008190:	4308      	orrs	r0, r1
 8008192:	f47f aebe 	bne.w	8007f12 <_strtod_l+0x72>
 8008196:	2b00      	cmp	r3, #0
 8008198:	f47f aed6 	bne.w	8007f48 <_strtod_l+0xa8>
 800819c:	2a69      	cmp	r2, #105	@ 0x69
 800819e:	d028      	beq.n	80081f2 <_strtod_l+0x352>
 80081a0:	dc25      	bgt.n	80081ee <_strtod_l+0x34e>
 80081a2:	2a49      	cmp	r2, #73	@ 0x49
 80081a4:	d025      	beq.n	80081f2 <_strtod_l+0x352>
 80081a6:	2a4e      	cmp	r2, #78	@ 0x4e
 80081a8:	f47f aece 	bne.w	8007f48 <_strtod_l+0xa8>
 80081ac:	499b      	ldr	r1, [pc, #620]	@ (800841c <_strtod_l+0x57c>)
 80081ae:	a819      	add	r0, sp, #100	@ 0x64
 80081b0:	f002 fc8e 	bl	800aad0 <__match>
 80081b4:	2800      	cmp	r0, #0
 80081b6:	f43f aec7 	beq.w	8007f48 <_strtod_l+0xa8>
 80081ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	2b28      	cmp	r3, #40	@ 0x28
 80081c0:	d12e      	bne.n	8008220 <_strtod_l+0x380>
 80081c2:	4997      	ldr	r1, [pc, #604]	@ (8008420 <_strtod_l+0x580>)
 80081c4:	aa1c      	add	r2, sp, #112	@ 0x70
 80081c6:	a819      	add	r0, sp, #100	@ 0x64
 80081c8:	f002 fc96 	bl	800aaf8 <__hexnan>
 80081cc:	2805      	cmp	r0, #5
 80081ce:	d127      	bne.n	8008220 <_strtod_l+0x380>
 80081d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80081d2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80081d6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80081da:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80081de:	e698      	b.n	8007f12 <_strtod_l+0x72>
 80081e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80081e2:	fb08 2101 	mla	r1, r8, r1, r2
 80081e6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80081ea:	920e      	str	r2, [sp, #56]	@ 0x38
 80081ec:	e7b5      	b.n	800815a <_strtod_l+0x2ba>
 80081ee:	2a6e      	cmp	r2, #110	@ 0x6e
 80081f0:	e7da      	b.n	80081a8 <_strtod_l+0x308>
 80081f2:	498c      	ldr	r1, [pc, #560]	@ (8008424 <_strtod_l+0x584>)
 80081f4:	a819      	add	r0, sp, #100	@ 0x64
 80081f6:	f002 fc6b 	bl	800aad0 <__match>
 80081fa:	2800      	cmp	r0, #0
 80081fc:	f43f aea4 	beq.w	8007f48 <_strtod_l+0xa8>
 8008200:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008202:	4989      	ldr	r1, [pc, #548]	@ (8008428 <_strtod_l+0x588>)
 8008204:	3b01      	subs	r3, #1
 8008206:	a819      	add	r0, sp, #100	@ 0x64
 8008208:	9319      	str	r3, [sp, #100]	@ 0x64
 800820a:	f002 fc61 	bl	800aad0 <__match>
 800820e:	b910      	cbnz	r0, 8008216 <_strtod_l+0x376>
 8008210:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008212:	3301      	adds	r3, #1
 8008214:	9319      	str	r3, [sp, #100]	@ 0x64
 8008216:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008438 <_strtod_l+0x598>
 800821a:	f04f 0a00 	mov.w	sl, #0
 800821e:	e678      	b.n	8007f12 <_strtod_l+0x72>
 8008220:	4882      	ldr	r0, [pc, #520]	@ (800842c <_strtod_l+0x58c>)
 8008222:	f001 fb0d 	bl	8009840 <nan>
 8008226:	ec5b ab10 	vmov	sl, fp, d0
 800822a:	e672      	b.n	8007f12 <_strtod_l+0x72>
 800822c:	eba8 0309 	sub.w	r3, r8, r9
 8008230:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008232:	9309      	str	r3, [sp, #36]	@ 0x24
 8008234:	2f00      	cmp	r7, #0
 8008236:	bf08      	it	eq
 8008238:	462f      	moveq	r7, r5
 800823a:	2d10      	cmp	r5, #16
 800823c:	462c      	mov	r4, r5
 800823e:	bfa8      	it	ge
 8008240:	2410      	movge	r4, #16
 8008242:	f7f8 f97f 	bl	8000544 <__aeabi_ui2d>
 8008246:	2d09      	cmp	r5, #9
 8008248:	4682      	mov	sl, r0
 800824a:	468b      	mov	fp, r1
 800824c:	dc13      	bgt.n	8008276 <_strtod_l+0x3d6>
 800824e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008250:	2b00      	cmp	r3, #0
 8008252:	f43f ae5e 	beq.w	8007f12 <_strtod_l+0x72>
 8008256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008258:	dd78      	ble.n	800834c <_strtod_l+0x4ac>
 800825a:	2b16      	cmp	r3, #22
 800825c:	dc5f      	bgt.n	800831e <_strtod_l+0x47e>
 800825e:	4974      	ldr	r1, [pc, #464]	@ (8008430 <_strtod_l+0x590>)
 8008260:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008264:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008268:	4652      	mov	r2, sl
 800826a:	465b      	mov	r3, fp
 800826c:	f7f8 f9e4 	bl	8000638 <__aeabi_dmul>
 8008270:	4682      	mov	sl, r0
 8008272:	468b      	mov	fp, r1
 8008274:	e64d      	b.n	8007f12 <_strtod_l+0x72>
 8008276:	4b6e      	ldr	r3, [pc, #440]	@ (8008430 <_strtod_l+0x590>)
 8008278:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800827c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008280:	f7f8 f9da 	bl	8000638 <__aeabi_dmul>
 8008284:	4682      	mov	sl, r0
 8008286:	9808      	ldr	r0, [sp, #32]
 8008288:	468b      	mov	fp, r1
 800828a:	f7f8 f95b 	bl	8000544 <__aeabi_ui2d>
 800828e:	4602      	mov	r2, r0
 8008290:	460b      	mov	r3, r1
 8008292:	4650      	mov	r0, sl
 8008294:	4659      	mov	r1, fp
 8008296:	f7f8 f819 	bl	80002cc <__adddf3>
 800829a:	2d0f      	cmp	r5, #15
 800829c:	4682      	mov	sl, r0
 800829e:	468b      	mov	fp, r1
 80082a0:	ddd5      	ble.n	800824e <_strtod_l+0x3ae>
 80082a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082a4:	1b2c      	subs	r4, r5, r4
 80082a6:	441c      	add	r4, r3
 80082a8:	2c00      	cmp	r4, #0
 80082aa:	f340 8096 	ble.w	80083da <_strtod_l+0x53a>
 80082ae:	f014 030f 	ands.w	r3, r4, #15
 80082b2:	d00a      	beq.n	80082ca <_strtod_l+0x42a>
 80082b4:	495e      	ldr	r1, [pc, #376]	@ (8008430 <_strtod_l+0x590>)
 80082b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80082ba:	4652      	mov	r2, sl
 80082bc:	465b      	mov	r3, fp
 80082be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082c2:	f7f8 f9b9 	bl	8000638 <__aeabi_dmul>
 80082c6:	4682      	mov	sl, r0
 80082c8:	468b      	mov	fp, r1
 80082ca:	f034 040f 	bics.w	r4, r4, #15
 80082ce:	d073      	beq.n	80083b8 <_strtod_l+0x518>
 80082d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80082d4:	dd48      	ble.n	8008368 <_strtod_l+0x4c8>
 80082d6:	2400      	movs	r4, #0
 80082d8:	46a0      	mov	r8, r4
 80082da:	940a      	str	r4, [sp, #40]	@ 0x28
 80082dc:	46a1      	mov	r9, r4
 80082de:	9a05      	ldr	r2, [sp, #20]
 80082e0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008438 <_strtod_l+0x598>
 80082e4:	2322      	movs	r3, #34	@ 0x22
 80082e6:	6013      	str	r3, [r2, #0]
 80082e8:	f04f 0a00 	mov.w	sl, #0
 80082ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f43f ae0f 	beq.w	8007f12 <_strtod_l+0x72>
 80082f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082f6:	9805      	ldr	r0, [sp, #20]
 80082f8:	f002 fda2 	bl	800ae40 <_Bfree>
 80082fc:	9805      	ldr	r0, [sp, #20]
 80082fe:	4649      	mov	r1, r9
 8008300:	f002 fd9e 	bl	800ae40 <_Bfree>
 8008304:	9805      	ldr	r0, [sp, #20]
 8008306:	4641      	mov	r1, r8
 8008308:	f002 fd9a 	bl	800ae40 <_Bfree>
 800830c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800830e:	9805      	ldr	r0, [sp, #20]
 8008310:	f002 fd96 	bl	800ae40 <_Bfree>
 8008314:	9805      	ldr	r0, [sp, #20]
 8008316:	4621      	mov	r1, r4
 8008318:	f002 fd92 	bl	800ae40 <_Bfree>
 800831c:	e5f9      	b.n	8007f12 <_strtod_l+0x72>
 800831e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008320:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008324:	4293      	cmp	r3, r2
 8008326:	dbbc      	blt.n	80082a2 <_strtod_l+0x402>
 8008328:	4c41      	ldr	r4, [pc, #260]	@ (8008430 <_strtod_l+0x590>)
 800832a:	f1c5 050f 	rsb	r5, r5, #15
 800832e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008332:	4652      	mov	r2, sl
 8008334:	465b      	mov	r3, fp
 8008336:	e9d1 0100 	ldrd	r0, r1, [r1]
 800833a:	f7f8 f97d 	bl	8000638 <__aeabi_dmul>
 800833e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008340:	1b5d      	subs	r5, r3, r5
 8008342:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008346:	e9d4 2300 	ldrd	r2, r3, [r4]
 800834a:	e78f      	b.n	800826c <_strtod_l+0x3cc>
 800834c:	3316      	adds	r3, #22
 800834e:	dba8      	blt.n	80082a2 <_strtod_l+0x402>
 8008350:	4b37      	ldr	r3, [pc, #220]	@ (8008430 <_strtod_l+0x590>)
 8008352:	eba9 0808 	sub.w	r8, r9, r8
 8008356:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800835a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800835e:	4650      	mov	r0, sl
 8008360:	4659      	mov	r1, fp
 8008362:	f7f8 fa93 	bl	800088c <__aeabi_ddiv>
 8008366:	e783      	b.n	8008270 <_strtod_l+0x3d0>
 8008368:	4b32      	ldr	r3, [pc, #200]	@ (8008434 <_strtod_l+0x594>)
 800836a:	9308      	str	r3, [sp, #32]
 800836c:	2300      	movs	r3, #0
 800836e:	1124      	asrs	r4, r4, #4
 8008370:	4650      	mov	r0, sl
 8008372:	4659      	mov	r1, fp
 8008374:	461e      	mov	r6, r3
 8008376:	2c01      	cmp	r4, #1
 8008378:	dc21      	bgt.n	80083be <_strtod_l+0x51e>
 800837a:	b10b      	cbz	r3, 8008380 <_strtod_l+0x4e0>
 800837c:	4682      	mov	sl, r0
 800837e:	468b      	mov	fp, r1
 8008380:	492c      	ldr	r1, [pc, #176]	@ (8008434 <_strtod_l+0x594>)
 8008382:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008386:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800838a:	4652      	mov	r2, sl
 800838c:	465b      	mov	r3, fp
 800838e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008392:	f7f8 f951 	bl	8000638 <__aeabi_dmul>
 8008396:	4b28      	ldr	r3, [pc, #160]	@ (8008438 <_strtod_l+0x598>)
 8008398:	460a      	mov	r2, r1
 800839a:	400b      	ands	r3, r1
 800839c:	4927      	ldr	r1, [pc, #156]	@ (800843c <_strtod_l+0x59c>)
 800839e:	428b      	cmp	r3, r1
 80083a0:	4682      	mov	sl, r0
 80083a2:	d898      	bhi.n	80082d6 <_strtod_l+0x436>
 80083a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80083a8:	428b      	cmp	r3, r1
 80083aa:	bf86      	itte	hi
 80083ac:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008440 <_strtod_l+0x5a0>
 80083b0:	f04f 3aff 	movhi.w	sl, #4294967295
 80083b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80083b8:	2300      	movs	r3, #0
 80083ba:	9308      	str	r3, [sp, #32]
 80083bc:	e07a      	b.n	80084b4 <_strtod_l+0x614>
 80083be:	07e2      	lsls	r2, r4, #31
 80083c0:	d505      	bpl.n	80083ce <_strtod_l+0x52e>
 80083c2:	9b08      	ldr	r3, [sp, #32]
 80083c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c8:	f7f8 f936 	bl	8000638 <__aeabi_dmul>
 80083cc:	2301      	movs	r3, #1
 80083ce:	9a08      	ldr	r2, [sp, #32]
 80083d0:	3208      	adds	r2, #8
 80083d2:	3601      	adds	r6, #1
 80083d4:	1064      	asrs	r4, r4, #1
 80083d6:	9208      	str	r2, [sp, #32]
 80083d8:	e7cd      	b.n	8008376 <_strtod_l+0x4d6>
 80083da:	d0ed      	beq.n	80083b8 <_strtod_l+0x518>
 80083dc:	4264      	negs	r4, r4
 80083de:	f014 020f 	ands.w	r2, r4, #15
 80083e2:	d00a      	beq.n	80083fa <_strtod_l+0x55a>
 80083e4:	4b12      	ldr	r3, [pc, #72]	@ (8008430 <_strtod_l+0x590>)
 80083e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083ea:	4650      	mov	r0, sl
 80083ec:	4659      	mov	r1, fp
 80083ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f2:	f7f8 fa4b 	bl	800088c <__aeabi_ddiv>
 80083f6:	4682      	mov	sl, r0
 80083f8:	468b      	mov	fp, r1
 80083fa:	1124      	asrs	r4, r4, #4
 80083fc:	d0dc      	beq.n	80083b8 <_strtod_l+0x518>
 80083fe:	2c1f      	cmp	r4, #31
 8008400:	dd20      	ble.n	8008444 <_strtod_l+0x5a4>
 8008402:	2400      	movs	r4, #0
 8008404:	46a0      	mov	r8, r4
 8008406:	940a      	str	r4, [sp, #40]	@ 0x28
 8008408:	46a1      	mov	r9, r4
 800840a:	9a05      	ldr	r2, [sp, #20]
 800840c:	2322      	movs	r3, #34	@ 0x22
 800840e:	f04f 0a00 	mov.w	sl, #0
 8008412:	f04f 0b00 	mov.w	fp, #0
 8008416:	6013      	str	r3, [r2, #0]
 8008418:	e768      	b.n	80082ec <_strtod_l+0x44c>
 800841a:	bf00      	nop
 800841c:	0800c006 	.word	0x0800c006
 8008420:	0800bea4 	.word	0x0800bea4
 8008424:	0800bffe 	.word	0x0800bffe
 8008428:	0800c0e5 	.word	0x0800c0e5
 800842c:	0800c0e1 	.word	0x0800c0e1
 8008430:	0800c248 	.word	0x0800c248
 8008434:	0800c220 	.word	0x0800c220
 8008438:	7ff00000 	.word	0x7ff00000
 800843c:	7ca00000 	.word	0x7ca00000
 8008440:	7fefffff 	.word	0x7fefffff
 8008444:	f014 0310 	ands.w	r3, r4, #16
 8008448:	bf18      	it	ne
 800844a:	236a      	movne	r3, #106	@ 0x6a
 800844c:	4ea9      	ldr	r6, [pc, #676]	@ (80086f4 <_strtod_l+0x854>)
 800844e:	9308      	str	r3, [sp, #32]
 8008450:	4650      	mov	r0, sl
 8008452:	4659      	mov	r1, fp
 8008454:	2300      	movs	r3, #0
 8008456:	07e2      	lsls	r2, r4, #31
 8008458:	d504      	bpl.n	8008464 <_strtod_l+0x5c4>
 800845a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800845e:	f7f8 f8eb 	bl	8000638 <__aeabi_dmul>
 8008462:	2301      	movs	r3, #1
 8008464:	1064      	asrs	r4, r4, #1
 8008466:	f106 0608 	add.w	r6, r6, #8
 800846a:	d1f4      	bne.n	8008456 <_strtod_l+0x5b6>
 800846c:	b10b      	cbz	r3, 8008472 <_strtod_l+0x5d2>
 800846e:	4682      	mov	sl, r0
 8008470:	468b      	mov	fp, r1
 8008472:	9b08      	ldr	r3, [sp, #32]
 8008474:	b1b3      	cbz	r3, 80084a4 <_strtod_l+0x604>
 8008476:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800847a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800847e:	2b00      	cmp	r3, #0
 8008480:	4659      	mov	r1, fp
 8008482:	dd0f      	ble.n	80084a4 <_strtod_l+0x604>
 8008484:	2b1f      	cmp	r3, #31
 8008486:	dd55      	ble.n	8008534 <_strtod_l+0x694>
 8008488:	2b34      	cmp	r3, #52	@ 0x34
 800848a:	bfde      	ittt	le
 800848c:	f04f 33ff 	movle.w	r3, #4294967295
 8008490:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008494:	4093      	lslle	r3, r2
 8008496:	f04f 0a00 	mov.w	sl, #0
 800849a:	bfcc      	ite	gt
 800849c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80084a0:	ea03 0b01 	andle.w	fp, r3, r1
 80084a4:	2200      	movs	r2, #0
 80084a6:	2300      	movs	r3, #0
 80084a8:	4650      	mov	r0, sl
 80084aa:	4659      	mov	r1, fp
 80084ac:	f7f8 fb2c 	bl	8000b08 <__aeabi_dcmpeq>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	d1a6      	bne.n	8008402 <_strtod_l+0x562>
 80084b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80084ba:	9805      	ldr	r0, [sp, #20]
 80084bc:	462b      	mov	r3, r5
 80084be:	463a      	mov	r2, r7
 80084c0:	f002 fd26 	bl	800af10 <__s2b>
 80084c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80084c6:	2800      	cmp	r0, #0
 80084c8:	f43f af05 	beq.w	80082d6 <_strtod_l+0x436>
 80084cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084ce:	2a00      	cmp	r2, #0
 80084d0:	eba9 0308 	sub.w	r3, r9, r8
 80084d4:	bfa8      	it	ge
 80084d6:	2300      	movge	r3, #0
 80084d8:	9312      	str	r3, [sp, #72]	@ 0x48
 80084da:	2400      	movs	r4, #0
 80084dc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80084e0:	9316      	str	r3, [sp, #88]	@ 0x58
 80084e2:	46a0      	mov	r8, r4
 80084e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084e6:	9805      	ldr	r0, [sp, #20]
 80084e8:	6859      	ldr	r1, [r3, #4]
 80084ea:	f002 fc69 	bl	800adc0 <_Balloc>
 80084ee:	4681      	mov	r9, r0
 80084f0:	2800      	cmp	r0, #0
 80084f2:	f43f aef4 	beq.w	80082de <_strtod_l+0x43e>
 80084f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084f8:	691a      	ldr	r2, [r3, #16]
 80084fa:	3202      	adds	r2, #2
 80084fc:	f103 010c 	add.w	r1, r3, #12
 8008500:	0092      	lsls	r2, r2, #2
 8008502:	300c      	adds	r0, #12
 8008504:	f001 f98b 	bl	800981e <memcpy>
 8008508:	ec4b ab10 	vmov	d0, sl, fp
 800850c:	9805      	ldr	r0, [sp, #20]
 800850e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008510:	a91b      	add	r1, sp, #108	@ 0x6c
 8008512:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008516:	f003 f837 	bl	800b588 <__d2b>
 800851a:	901a      	str	r0, [sp, #104]	@ 0x68
 800851c:	2800      	cmp	r0, #0
 800851e:	f43f aede 	beq.w	80082de <_strtod_l+0x43e>
 8008522:	9805      	ldr	r0, [sp, #20]
 8008524:	2101      	movs	r1, #1
 8008526:	f002 fd89 	bl	800b03c <__i2b>
 800852a:	4680      	mov	r8, r0
 800852c:	b948      	cbnz	r0, 8008542 <_strtod_l+0x6a2>
 800852e:	f04f 0800 	mov.w	r8, #0
 8008532:	e6d4      	b.n	80082de <_strtod_l+0x43e>
 8008534:	f04f 32ff 	mov.w	r2, #4294967295
 8008538:	fa02 f303 	lsl.w	r3, r2, r3
 800853c:	ea03 0a0a 	and.w	sl, r3, sl
 8008540:	e7b0      	b.n	80084a4 <_strtod_l+0x604>
 8008542:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008544:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008546:	2d00      	cmp	r5, #0
 8008548:	bfab      	itete	ge
 800854a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800854c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800854e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008550:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008552:	bfac      	ite	ge
 8008554:	18ef      	addge	r7, r5, r3
 8008556:	1b5e      	sublt	r6, r3, r5
 8008558:	9b08      	ldr	r3, [sp, #32]
 800855a:	1aed      	subs	r5, r5, r3
 800855c:	4415      	add	r5, r2
 800855e:	4b66      	ldr	r3, [pc, #408]	@ (80086f8 <_strtod_l+0x858>)
 8008560:	3d01      	subs	r5, #1
 8008562:	429d      	cmp	r5, r3
 8008564:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008568:	da50      	bge.n	800860c <_strtod_l+0x76c>
 800856a:	1b5b      	subs	r3, r3, r5
 800856c:	2b1f      	cmp	r3, #31
 800856e:	eba2 0203 	sub.w	r2, r2, r3
 8008572:	f04f 0101 	mov.w	r1, #1
 8008576:	dc3d      	bgt.n	80085f4 <_strtod_l+0x754>
 8008578:	fa01 f303 	lsl.w	r3, r1, r3
 800857c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800857e:	2300      	movs	r3, #0
 8008580:	9310      	str	r3, [sp, #64]	@ 0x40
 8008582:	18bd      	adds	r5, r7, r2
 8008584:	9b08      	ldr	r3, [sp, #32]
 8008586:	42af      	cmp	r7, r5
 8008588:	4416      	add	r6, r2
 800858a:	441e      	add	r6, r3
 800858c:	463b      	mov	r3, r7
 800858e:	bfa8      	it	ge
 8008590:	462b      	movge	r3, r5
 8008592:	42b3      	cmp	r3, r6
 8008594:	bfa8      	it	ge
 8008596:	4633      	movge	r3, r6
 8008598:	2b00      	cmp	r3, #0
 800859a:	bfc2      	ittt	gt
 800859c:	1aed      	subgt	r5, r5, r3
 800859e:	1af6      	subgt	r6, r6, r3
 80085a0:	1aff      	subgt	r7, r7, r3
 80085a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	dd16      	ble.n	80085d6 <_strtod_l+0x736>
 80085a8:	4641      	mov	r1, r8
 80085aa:	9805      	ldr	r0, [sp, #20]
 80085ac:	461a      	mov	r2, r3
 80085ae:	f002 fe05 	bl	800b1bc <__pow5mult>
 80085b2:	4680      	mov	r8, r0
 80085b4:	2800      	cmp	r0, #0
 80085b6:	d0ba      	beq.n	800852e <_strtod_l+0x68e>
 80085b8:	4601      	mov	r1, r0
 80085ba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80085bc:	9805      	ldr	r0, [sp, #20]
 80085be:	f002 fd53 	bl	800b068 <__multiply>
 80085c2:	900e      	str	r0, [sp, #56]	@ 0x38
 80085c4:	2800      	cmp	r0, #0
 80085c6:	f43f ae8a 	beq.w	80082de <_strtod_l+0x43e>
 80085ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80085cc:	9805      	ldr	r0, [sp, #20]
 80085ce:	f002 fc37 	bl	800ae40 <_Bfree>
 80085d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80085d6:	2d00      	cmp	r5, #0
 80085d8:	dc1d      	bgt.n	8008616 <_strtod_l+0x776>
 80085da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085dc:	2b00      	cmp	r3, #0
 80085de:	dd23      	ble.n	8008628 <_strtod_l+0x788>
 80085e0:	4649      	mov	r1, r9
 80085e2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80085e4:	9805      	ldr	r0, [sp, #20]
 80085e6:	f002 fde9 	bl	800b1bc <__pow5mult>
 80085ea:	4681      	mov	r9, r0
 80085ec:	b9e0      	cbnz	r0, 8008628 <_strtod_l+0x788>
 80085ee:	f04f 0900 	mov.w	r9, #0
 80085f2:	e674      	b.n	80082de <_strtod_l+0x43e>
 80085f4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80085f8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80085fc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008600:	35e2      	adds	r5, #226	@ 0xe2
 8008602:	fa01 f305 	lsl.w	r3, r1, r5
 8008606:	9310      	str	r3, [sp, #64]	@ 0x40
 8008608:	9113      	str	r1, [sp, #76]	@ 0x4c
 800860a:	e7ba      	b.n	8008582 <_strtod_l+0x6e2>
 800860c:	2300      	movs	r3, #0
 800860e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008610:	2301      	movs	r3, #1
 8008612:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008614:	e7b5      	b.n	8008582 <_strtod_l+0x6e2>
 8008616:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008618:	9805      	ldr	r0, [sp, #20]
 800861a:	462a      	mov	r2, r5
 800861c:	f002 fe28 	bl	800b270 <__lshift>
 8008620:	901a      	str	r0, [sp, #104]	@ 0x68
 8008622:	2800      	cmp	r0, #0
 8008624:	d1d9      	bne.n	80085da <_strtod_l+0x73a>
 8008626:	e65a      	b.n	80082de <_strtod_l+0x43e>
 8008628:	2e00      	cmp	r6, #0
 800862a:	dd07      	ble.n	800863c <_strtod_l+0x79c>
 800862c:	4649      	mov	r1, r9
 800862e:	9805      	ldr	r0, [sp, #20]
 8008630:	4632      	mov	r2, r6
 8008632:	f002 fe1d 	bl	800b270 <__lshift>
 8008636:	4681      	mov	r9, r0
 8008638:	2800      	cmp	r0, #0
 800863a:	d0d8      	beq.n	80085ee <_strtod_l+0x74e>
 800863c:	2f00      	cmp	r7, #0
 800863e:	dd08      	ble.n	8008652 <_strtod_l+0x7b2>
 8008640:	4641      	mov	r1, r8
 8008642:	9805      	ldr	r0, [sp, #20]
 8008644:	463a      	mov	r2, r7
 8008646:	f002 fe13 	bl	800b270 <__lshift>
 800864a:	4680      	mov	r8, r0
 800864c:	2800      	cmp	r0, #0
 800864e:	f43f ae46 	beq.w	80082de <_strtod_l+0x43e>
 8008652:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008654:	9805      	ldr	r0, [sp, #20]
 8008656:	464a      	mov	r2, r9
 8008658:	f002 fe92 	bl	800b380 <__mdiff>
 800865c:	4604      	mov	r4, r0
 800865e:	2800      	cmp	r0, #0
 8008660:	f43f ae3d 	beq.w	80082de <_strtod_l+0x43e>
 8008664:	68c3      	ldr	r3, [r0, #12]
 8008666:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008668:	2300      	movs	r3, #0
 800866a:	60c3      	str	r3, [r0, #12]
 800866c:	4641      	mov	r1, r8
 800866e:	f002 fe6b 	bl	800b348 <__mcmp>
 8008672:	2800      	cmp	r0, #0
 8008674:	da46      	bge.n	8008704 <_strtod_l+0x864>
 8008676:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008678:	ea53 030a 	orrs.w	r3, r3, sl
 800867c:	d16c      	bne.n	8008758 <_strtod_l+0x8b8>
 800867e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008682:	2b00      	cmp	r3, #0
 8008684:	d168      	bne.n	8008758 <_strtod_l+0x8b8>
 8008686:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800868a:	0d1b      	lsrs	r3, r3, #20
 800868c:	051b      	lsls	r3, r3, #20
 800868e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008692:	d961      	bls.n	8008758 <_strtod_l+0x8b8>
 8008694:	6963      	ldr	r3, [r4, #20]
 8008696:	b913      	cbnz	r3, 800869e <_strtod_l+0x7fe>
 8008698:	6923      	ldr	r3, [r4, #16]
 800869a:	2b01      	cmp	r3, #1
 800869c:	dd5c      	ble.n	8008758 <_strtod_l+0x8b8>
 800869e:	4621      	mov	r1, r4
 80086a0:	2201      	movs	r2, #1
 80086a2:	9805      	ldr	r0, [sp, #20]
 80086a4:	f002 fde4 	bl	800b270 <__lshift>
 80086a8:	4641      	mov	r1, r8
 80086aa:	4604      	mov	r4, r0
 80086ac:	f002 fe4c 	bl	800b348 <__mcmp>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	dd51      	ble.n	8008758 <_strtod_l+0x8b8>
 80086b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80086b8:	9a08      	ldr	r2, [sp, #32]
 80086ba:	0d1b      	lsrs	r3, r3, #20
 80086bc:	051b      	lsls	r3, r3, #20
 80086be:	2a00      	cmp	r2, #0
 80086c0:	d06b      	beq.n	800879a <_strtod_l+0x8fa>
 80086c2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80086c6:	d868      	bhi.n	800879a <_strtod_l+0x8fa>
 80086c8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80086cc:	f67f ae9d 	bls.w	800840a <_strtod_l+0x56a>
 80086d0:	4b0a      	ldr	r3, [pc, #40]	@ (80086fc <_strtod_l+0x85c>)
 80086d2:	4650      	mov	r0, sl
 80086d4:	4659      	mov	r1, fp
 80086d6:	2200      	movs	r2, #0
 80086d8:	f7f7 ffae 	bl	8000638 <__aeabi_dmul>
 80086dc:	4b08      	ldr	r3, [pc, #32]	@ (8008700 <_strtod_l+0x860>)
 80086de:	400b      	ands	r3, r1
 80086e0:	4682      	mov	sl, r0
 80086e2:	468b      	mov	fp, r1
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f47f ae05 	bne.w	80082f4 <_strtod_l+0x454>
 80086ea:	9a05      	ldr	r2, [sp, #20]
 80086ec:	2322      	movs	r3, #34	@ 0x22
 80086ee:	6013      	str	r3, [r2, #0]
 80086f0:	e600      	b.n	80082f4 <_strtod_l+0x454>
 80086f2:	bf00      	nop
 80086f4:	0800bed0 	.word	0x0800bed0
 80086f8:	fffffc02 	.word	0xfffffc02
 80086fc:	39500000 	.word	0x39500000
 8008700:	7ff00000 	.word	0x7ff00000
 8008704:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008708:	d165      	bne.n	80087d6 <_strtod_l+0x936>
 800870a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800870c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008710:	b35a      	cbz	r2, 800876a <_strtod_l+0x8ca>
 8008712:	4a9f      	ldr	r2, [pc, #636]	@ (8008990 <_strtod_l+0xaf0>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d12b      	bne.n	8008770 <_strtod_l+0x8d0>
 8008718:	9b08      	ldr	r3, [sp, #32]
 800871a:	4651      	mov	r1, sl
 800871c:	b303      	cbz	r3, 8008760 <_strtod_l+0x8c0>
 800871e:	4b9d      	ldr	r3, [pc, #628]	@ (8008994 <_strtod_l+0xaf4>)
 8008720:	465a      	mov	r2, fp
 8008722:	4013      	ands	r3, r2
 8008724:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008728:	f04f 32ff 	mov.w	r2, #4294967295
 800872c:	d81b      	bhi.n	8008766 <_strtod_l+0x8c6>
 800872e:	0d1b      	lsrs	r3, r3, #20
 8008730:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008734:	fa02 f303 	lsl.w	r3, r2, r3
 8008738:	4299      	cmp	r1, r3
 800873a:	d119      	bne.n	8008770 <_strtod_l+0x8d0>
 800873c:	4b96      	ldr	r3, [pc, #600]	@ (8008998 <_strtod_l+0xaf8>)
 800873e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008740:	429a      	cmp	r2, r3
 8008742:	d102      	bne.n	800874a <_strtod_l+0x8aa>
 8008744:	3101      	adds	r1, #1
 8008746:	f43f adca 	beq.w	80082de <_strtod_l+0x43e>
 800874a:	4b92      	ldr	r3, [pc, #584]	@ (8008994 <_strtod_l+0xaf4>)
 800874c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800874e:	401a      	ands	r2, r3
 8008750:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008754:	f04f 0a00 	mov.w	sl, #0
 8008758:	9b08      	ldr	r3, [sp, #32]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1b8      	bne.n	80086d0 <_strtod_l+0x830>
 800875e:	e5c9      	b.n	80082f4 <_strtod_l+0x454>
 8008760:	f04f 33ff 	mov.w	r3, #4294967295
 8008764:	e7e8      	b.n	8008738 <_strtod_l+0x898>
 8008766:	4613      	mov	r3, r2
 8008768:	e7e6      	b.n	8008738 <_strtod_l+0x898>
 800876a:	ea53 030a 	orrs.w	r3, r3, sl
 800876e:	d0a1      	beq.n	80086b4 <_strtod_l+0x814>
 8008770:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008772:	b1db      	cbz	r3, 80087ac <_strtod_l+0x90c>
 8008774:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008776:	4213      	tst	r3, r2
 8008778:	d0ee      	beq.n	8008758 <_strtod_l+0x8b8>
 800877a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800877c:	9a08      	ldr	r2, [sp, #32]
 800877e:	4650      	mov	r0, sl
 8008780:	4659      	mov	r1, fp
 8008782:	b1bb      	cbz	r3, 80087b4 <_strtod_l+0x914>
 8008784:	f7ff fb6b 	bl	8007e5e <sulp>
 8008788:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800878c:	ec53 2b10 	vmov	r2, r3, d0
 8008790:	f7f7 fd9c 	bl	80002cc <__adddf3>
 8008794:	4682      	mov	sl, r0
 8008796:	468b      	mov	fp, r1
 8008798:	e7de      	b.n	8008758 <_strtod_l+0x8b8>
 800879a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800879e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80087a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80087a6:	f04f 3aff 	mov.w	sl, #4294967295
 80087aa:	e7d5      	b.n	8008758 <_strtod_l+0x8b8>
 80087ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80087ae:	ea13 0f0a 	tst.w	r3, sl
 80087b2:	e7e1      	b.n	8008778 <_strtod_l+0x8d8>
 80087b4:	f7ff fb53 	bl	8007e5e <sulp>
 80087b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087bc:	ec53 2b10 	vmov	r2, r3, d0
 80087c0:	f7f7 fd82 	bl	80002c8 <__aeabi_dsub>
 80087c4:	2200      	movs	r2, #0
 80087c6:	2300      	movs	r3, #0
 80087c8:	4682      	mov	sl, r0
 80087ca:	468b      	mov	fp, r1
 80087cc:	f7f8 f99c 	bl	8000b08 <__aeabi_dcmpeq>
 80087d0:	2800      	cmp	r0, #0
 80087d2:	d0c1      	beq.n	8008758 <_strtod_l+0x8b8>
 80087d4:	e619      	b.n	800840a <_strtod_l+0x56a>
 80087d6:	4641      	mov	r1, r8
 80087d8:	4620      	mov	r0, r4
 80087da:	f002 ff2d 	bl	800b638 <__ratio>
 80087de:	ec57 6b10 	vmov	r6, r7, d0
 80087e2:	2200      	movs	r2, #0
 80087e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80087e8:	4630      	mov	r0, r6
 80087ea:	4639      	mov	r1, r7
 80087ec:	f7f8 f9a0 	bl	8000b30 <__aeabi_dcmple>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	d06f      	beq.n	80088d4 <_strtod_l+0xa34>
 80087f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d17a      	bne.n	80088f0 <_strtod_l+0xa50>
 80087fa:	f1ba 0f00 	cmp.w	sl, #0
 80087fe:	d158      	bne.n	80088b2 <_strtod_l+0xa12>
 8008800:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008802:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008806:	2b00      	cmp	r3, #0
 8008808:	d15a      	bne.n	80088c0 <_strtod_l+0xa20>
 800880a:	4b64      	ldr	r3, [pc, #400]	@ (800899c <_strtod_l+0xafc>)
 800880c:	2200      	movs	r2, #0
 800880e:	4630      	mov	r0, r6
 8008810:	4639      	mov	r1, r7
 8008812:	f7f8 f983 	bl	8000b1c <__aeabi_dcmplt>
 8008816:	2800      	cmp	r0, #0
 8008818:	d159      	bne.n	80088ce <_strtod_l+0xa2e>
 800881a:	4630      	mov	r0, r6
 800881c:	4639      	mov	r1, r7
 800881e:	4b60      	ldr	r3, [pc, #384]	@ (80089a0 <_strtod_l+0xb00>)
 8008820:	2200      	movs	r2, #0
 8008822:	f7f7 ff09 	bl	8000638 <__aeabi_dmul>
 8008826:	4606      	mov	r6, r0
 8008828:	460f      	mov	r7, r1
 800882a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800882e:	9606      	str	r6, [sp, #24]
 8008830:	9307      	str	r3, [sp, #28]
 8008832:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008836:	4d57      	ldr	r5, [pc, #348]	@ (8008994 <_strtod_l+0xaf4>)
 8008838:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800883c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800883e:	401d      	ands	r5, r3
 8008840:	4b58      	ldr	r3, [pc, #352]	@ (80089a4 <_strtod_l+0xb04>)
 8008842:	429d      	cmp	r5, r3
 8008844:	f040 80b2 	bne.w	80089ac <_strtod_l+0xb0c>
 8008848:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800884a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800884e:	ec4b ab10 	vmov	d0, sl, fp
 8008852:	f002 fe29 	bl	800b4a8 <__ulp>
 8008856:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800885a:	ec51 0b10 	vmov	r0, r1, d0
 800885e:	f7f7 feeb 	bl	8000638 <__aeabi_dmul>
 8008862:	4652      	mov	r2, sl
 8008864:	465b      	mov	r3, fp
 8008866:	f7f7 fd31 	bl	80002cc <__adddf3>
 800886a:	460b      	mov	r3, r1
 800886c:	4949      	ldr	r1, [pc, #292]	@ (8008994 <_strtod_l+0xaf4>)
 800886e:	4a4e      	ldr	r2, [pc, #312]	@ (80089a8 <_strtod_l+0xb08>)
 8008870:	4019      	ands	r1, r3
 8008872:	4291      	cmp	r1, r2
 8008874:	4682      	mov	sl, r0
 8008876:	d942      	bls.n	80088fe <_strtod_l+0xa5e>
 8008878:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800887a:	4b47      	ldr	r3, [pc, #284]	@ (8008998 <_strtod_l+0xaf8>)
 800887c:	429a      	cmp	r2, r3
 800887e:	d103      	bne.n	8008888 <_strtod_l+0x9e8>
 8008880:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008882:	3301      	adds	r3, #1
 8008884:	f43f ad2b 	beq.w	80082de <_strtod_l+0x43e>
 8008888:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008998 <_strtod_l+0xaf8>
 800888c:	f04f 3aff 	mov.w	sl, #4294967295
 8008890:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008892:	9805      	ldr	r0, [sp, #20]
 8008894:	f002 fad4 	bl	800ae40 <_Bfree>
 8008898:	9805      	ldr	r0, [sp, #20]
 800889a:	4649      	mov	r1, r9
 800889c:	f002 fad0 	bl	800ae40 <_Bfree>
 80088a0:	9805      	ldr	r0, [sp, #20]
 80088a2:	4641      	mov	r1, r8
 80088a4:	f002 facc 	bl	800ae40 <_Bfree>
 80088a8:	9805      	ldr	r0, [sp, #20]
 80088aa:	4621      	mov	r1, r4
 80088ac:	f002 fac8 	bl	800ae40 <_Bfree>
 80088b0:	e618      	b.n	80084e4 <_strtod_l+0x644>
 80088b2:	f1ba 0f01 	cmp.w	sl, #1
 80088b6:	d103      	bne.n	80088c0 <_strtod_l+0xa20>
 80088b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f43f ada5 	beq.w	800840a <_strtod_l+0x56a>
 80088c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008970 <_strtod_l+0xad0>
 80088c4:	4f35      	ldr	r7, [pc, #212]	@ (800899c <_strtod_l+0xafc>)
 80088c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80088ca:	2600      	movs	r6, #0
 80088cc:	e7b1      	b.n	8008832 <_strtod_l+0x992>
 80088ce:	4f34      	ldr	r7, [pc, #208]	@ (80089a0 <_strtod_l+0xb00>)
 80088d0:	2600      	movs	r6, #0
 80088d2:	e7aa      	b.n	800882a <_strtod_l+0x98a>
 80088d4:	4b32      	ldr	r3, [pc, #200]	@ (80089a0 <_strtod_l+0xb00>)
 80088d6:	4630      	mov	r0, r6
 80088d8:	4639      	mov	r1, r7
 80088da:	2200      	movs	r2, #0
 80088dc:	f7f7 feac 	bl	8000638 <__aeabi_dmul>
 80088e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088e2:	4606      	mov	r6, r0
 80088e4:	460f      	mov	r7, r1
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d09f      	beq.n	800882a <_strtod_l+0x98a>
 80088ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80088ee:	e7a0      	b.n	8008832 <_strtod_l+0x992>
 80088f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008978 <_strtod_l+0xad8>
 80088f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80088f8:	ec57 6b17 	vmov	r6, r7, d7
 80088fc:	e799      	b.n	8008832 <_strtod_l+0x992>
 80088fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008902:	9b08      	ldr	r3, [sp, #32]
 8008904:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1c1      	bne.n	8008890 <_strtod_l+0x9f0>
 800890c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008910:	0d1b      	lsrs	r3, r3, #20
 8008912:	051b      	lsls	r3, r3, #20
 8008914:	429d      	cmp	r5, r3
 8008916:	d1bb      	bne.n	8008890 <_strtod_l+0x9f0>
 8008918:	4630      	mov	r0, r6
 800891a:	4639      	mov	r1, r7
 800891c:	f7f8 f9ec 	bl	8000cf8 <__aeabi_d2lz>
 8008920:	f7f7 fe5c 	bl	80005dc <__aeabi_l2d>
 8008924:	4602      	mov	r2, r0
 8008926:	460b      	mov	r3, r1
 8008928:	4630      	mov	r0, r6
 800892a:	4639      	mov	r1, r7
 800892c:	f7f7 fccc 	bl	80002c8 <__aeabi_dsub>
 8008930:	460b      	mov	r3, r1
 8008932:	4602      	mov	r2, r0
 8008934:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008938:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800893c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800893e:	ea46 060a 	orr.w	r6, r6, sl
 8008942:	431e      	orrs	r6, r3
 8008944:	d06f      	beq.n	8008a26 <_strtod_l+0xb86>
 8008946:	a30e      	add	r3, pc, #56	@ (adr r3, 8008980 <_strtod_l+0xae0>)
 8008948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894c:	f7f8 f8e6 	bl	8000b1c <__aeabi_dcmplt>
 8008950:	2800      	cmp	r0, #0
 8008952:	f47f accf 	bne.w	80082f4 <_strtod_l+0x454>
 8008956:	a30c      	add	r3, pc, #48	@ (adr r3, 8008988 <_strtod_l+0xae8>)
 8008958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008960:	f7f8 f8fa 	bl	8000b58 <__aeabi_dcmpgt>
 8008964:	2800      	cmp	r0, #0
 8008966:	d093      	beq.n	8008890 <_strtod_l+0x9f0>
 8008968:	e4c4      	b.n	80082f4 <_strtod_l+0x454>
 800896a:	bf00      	nop
 800896c:	f3af 8000 	nop.w
 8008970:	00000000 	.word	0x00000000
 8008974:	bff00000 	.word	0xbff00000
 8008978:	00000000 	.word	0x00000000
 800897c:	3ff00000 	.word	0x3ff00000
 8008980:	94a03595 	.word	0x94a03595
 8008984:	3fdfffff 	.word	0x3fdfffff
 8008988:	35afe535 	.word	0x35afe535
 800898c:	3fe00000 	.word	0x3fe00000
 8008990:	000fffff 	.word	0x000fffff
 8008994:	7ff00000 	.word	0x7ff00000
 8008998:	7fefffff 	.word	0x7fefffff
 800899c:	3ff00000 	.word	0x3ff00000
 80089a0:	3fe00000 	.word	0x3fe00000
 80089a4:	7fe00000 	.word	0x7fe00000
 80089a8:	7c9fffff 	.word	0x7c9fffff
 80089ac:	9b08      	ldr	r3, [sp, #32]
 80089ae:	b323      	cbz	r3, 80089fa <_strtod_l+0xb5a>
 80089b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80089b4:	d821      	bhi.n	80089fa <_strtod_l+0xb5a>
 80089b6:	a328      	add	r3, pc, #160	@ (adr r3, 8008a58 <_strtod_l+0xbb8>)
 80089b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089bc:	4630      	mov	r0, r6
 80089be:	4639      	mov	r1, r7
 80089c0:	f7f8 f8b6 	bl	8000b30 <__aeabi_dcmple>
 80089c4:	b1a0      	cbz	r0, 80089f0 <_strtod_l+0xb50>
 80089c6:	4639      	mov	r1, r7
 80089c8:	4630      	mov	r0, r6
 80089ca:	f7f8 f90d 	bl	8000be8 <__aeabi_d2uiz>
 80089ce:	2801      	cmp	r0, #1
 80089d0:	bf38      	it	cc
 80089d2:	2001      	movcc	r0, #1
 80089d4:	f7f7 fdb6 	bl	8000544 <__aeabi_ui2d>
 80089d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089da:	4606      	mov	r6, r0
 80089dc:	460f      	mov	r7, r1
 80089de:	b9fb      	cbnz	r3, 8008a20 <_strtod_l+0xb80>
 80089e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80089e4:	9014      	str	r0, [sp, #80]	@ 0x50
 80089e6:	9315      	str	r3, [sp, #84]	@ 0x54
 80089e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80089ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80089f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80089f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80089f6:	1b5b      	subs	r3, r3, r5
 80089f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80089fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80089fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008a02:	f002 fd51 	bl	800b4a8 <__ulp>
 8008a06:	4650      	mov	r0, sl
 8008a08:	ec53 2b10 	vmov	r2, r3, d0
 8008a0c:	4659      	mov	r1, fp
 8008a0e:	f7f7 fe13 	bl	8000638 <__aeabi_dmul>
 8008a12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008a16:	f7f7 fc59 	bl	80002cc <__adddf3>
 8008a1a:	4682      	mov	sl, r0
 8008a1c:	468b      	mov	fp, r1
 8008a1e:	e770      	b.n	8008902 <_strtod_l+0xa62>
 8008a20:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008a24:	e7e0      	b.n	80089e8 <_strtod_l+0xb48>
 8008a26:	a30e      	add	r3, pc, #56	@ (adr r3, 8008a60 <_strtod_l+0xbc0>)
 8008a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2c:	f7f8 f876 	bl	8000b1c <__aeabi_dcmplt>
 8008a30:	e798      	b.n	8008964 <_strtod_l+0xac4>
 8008a32:	2300      	movs	r3, #0
 8008a34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a36:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008a38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a3a:	6013      	str	r3, [r2, #0]
 8008a3c:	f7ff ba6d 	b.w	8007f1a <_strtod_l+0x7a>
 8008a40:	2a65      	cmp	r2, #101	@ 0x65
 8008a42:	f43f ab66 	beq.w	8008112 <_strtod_l+0x272>
 8008a46:	2a45      	cmp	r2, #69	@ 0x45
 8008a48:	f43f ab63 	beq.w	8008112 <_strtod_l+0x272>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	f7ff bb9e 	b.w	800818e <_strtod_l+0x2ee>
 8008a52:	bf00      	nop
 8008a54:	f3af 8000 	nop.w
 8008a58:	ffc00000 	.word	0xffc00000
 8008a5c:	41dfffff 	.word	0x41dfffff
 8008a60:	94a03595 	.word	0x94a03595
 8008a64:	3fcfffff 	.word	0x3fcfffff

08008a68 <strtod>:
 8008a68:	460a      	mov	r2, r1
 8008a6a:	4601      	mov	r1, r0
 8008a6c:	4802      	ldr	r0, [pc, #8]	@ (8008a78 <strtod+0x10>)
 8008a6e:	4b03      	ldr	r3, [pc, #12]	@ (8008a7c <strtod+0x14>)
 8008a70:	6800      	ldr	r0, [r0, #0]
 8008a72:	f7ff ba15 	b.w	8007ea0 <_strtod_l>
 8008a76:	bf00      	nop
 8008a78:	20000184 	.word	0x20000184
 8008a7c:	20000018 	.word	0x20000018

08008a80 <_strtol_l.constprop.0>:
 8008a80:	2b24      	cmp	r3, #36	@ 0x24
 8008a82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a86:	4686      	mov	lr, r0
 8008a88:	4690      	mov	r8, r2
 8008a8a:	d801      	bhi.n	8008a90 <_strtol_l.constprop.0+0x10>
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d106      	bne.n	8008a9e <_strtol_l.constprop.0+0x1e>
 8008a90:	f000 fe98 	bl	80097c4 <__errno>
 8008a94:	2316      	movs	r3, #22
 8008a96:	6003      	str	r3, [r0, #0]
 8008a98:	2000      	movs	r0, #0
 8008a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a9e:	4834      	ldr	r0, [pc, #208]	@ (8008b70 <_strtol_l.constprop.0+0xf0>)
 8008aa0:	460d      	mov	r5, r1
 8008aa2:	462a      	mov	r2, r5
 8008aa4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008aa8:	5d06      	ldrb	r6, [r0, r4]
 8008aaa:	f016 0608 	ands.w	r6, r6, #8
 8008aae:	d1f8      	bne.n	8008aa2 <_strtol_l.constprop.0+0x22>
 8008ab0:	2c2d      	cmp	r4, #45	@ 0x2d
 8008ab2:	d12d      	bne.n	8008b10 <_strtol_l.constprop.0+0x90>
 8008ab4:	782c      	ldrb	r4, [r5, #0]
 8008ab6:	2601      	movs	r6, #1
 8008ab8:	1c95      	adds	r5, r2, #2
 8008aba:	f033 0210 	bics.w	r2, r3, #16
 8008abe:	d109      	bne.n	8008ad4 <_strtol_l.constprop.0+0x54>
 8008ac0:	2c30      	cmp	r4, #48	@ 0x30
 8008ac2:	d12a      	bne.n	8008b1a <_strtol_l.constprop.0+0x9a>
 8008ac4:	782a      	ldrb	r2, [r5, #0]
 8008ac6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008aca:	2a58      	cmp	r2, #88	@ 0x58
 8008acc:	d125      	bne.n	8008b1a <_strtol_l.constprop.0+0x9a>
 8008ace:	786c      	ldrb	r4, [r5, #1]
 8008ad0:	2310      	movs	r3, #16
 8008ad2:	3502      	adds	r5, #2
 8008ad4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008ad8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008adc:	2200      	movs	r2, #0
 8008ade:	fbbc f9f3 	udiv	r9, ip, r3
 8008ae2:	4610      	mov	r0, r2
 8008ae4:	fb03 ca19 	mls	sl, r3, r9, ip
 8008ae8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008aec:	2f09      	cmp	r7, #9
 8008aee:	d81b      	bhi.n	8008b28 <_strtol_l.constprop.0+0xa8>
 8008af0:	463c      	mov	r4, r7
 8008af2:	42a3      	cmp	r3, r4
 8008af4:	dd27      	ble.n	8008b46 <_strtol_l.constprop.0+0xc6>
 8008af6:	1c57      	adds	r7, r2, #1
 8008af8:	d007      	beq.n	8008b0a <_strtol_l.constprop.0+0x8a>
 8008afa:	4581      	cmp	r9, r0
 8008afc:	d320      	bcc.n	8008b40 <_strtol_l.constprop.0+0xc0>
 8008afe:	d101      	bne.n	8008b04 <_strtol_l.constprop.0+0x84>
 8008b00:	45a2      	cmp	sl, r4
 8008b02:	db1d      	blt.n	8008b40 <_strtol_l.constprop.0+0xc0>
 8008b04:	fb00 4003 	mla	r0, r0, r3, r4
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b0e:	e7eb      	b.n	8008ae8 <_strtol_l.constprop.0+0x68>
 8008b10:	2c2b      	cmp	r4, #43	@ 0x2b
 8008b12:	bf04      	itt	eq
 8008b14:	782c      	ldrbeq	r4, [r5, #0]
 8008b16:	1c95      	addeq	r5, r2, #2
 8008b18:	e7cf      	b.n	8008aba <_strtol_l.constprop.0+0x3a>
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1da      	bne.n	8008ad4 <_strtol_l.constprop.0+0x54>
 8008b1e:	2c30      	cmp	r4, #48	@ 0x30
 8008b20:	bf0c      	ite	eq
 8008b22:	2308      	moveq	r3, #8
 8008b24:	230a      	movne	r3, #10
 8008b26:	e7d5      	b.n	8008ad4 <_strtol_l.constprop.0+0x54>
 8008b28:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008b2c:	2f19      	cmp	r7, #25
 8008b2e:	d801      	bhi.n	8008b34 <_strtol_l.constprop.0+0xb4>
 8008b30:	3c37      	subs	r4, #55	@ 0x37
 8008b32:	e7de      	b.n	8008af2 <_strtol_l.constprop.0+0x72>
 8008b34:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008b38:	2f19      	cmp	r7, #25
 8008b3a:	d804      	bhi.n	8008b46 <_strtol_l.constprop.0+0xc6>
 8008b3c:	3c57      	subs	r4, #87	@ 0x57
 8008b3e:	e7d8      	b.n	8008af2 <_strtol_l.constprop.0+0x72>
 8008b40:	f04f 32ff 	mov.w	r2, #4294967295
 8008b44:	e7e1      	b.n	8008b0a <_strtol_l.constprop.0+0x8a>
 8008b46:	1c53      	adds	r3, r2, #1
 8008b48:	d108      	bne.n	8008b5c <_strtol_l.constprop.0+0xdc>
 8008b4a:	2322      	movs	r3, #34	@ 0x22
 8008b4c:	f8ce 3000 	str.w	r3, [lr]
 8008b50:	4660      	mov	r0, ip
 8008b52:	f1b8 0f00 	cmp.w	r8, #0
 8008b56:	d0a0      	beq.n	8008a9a <_strtol_l.constprop.0+0x1a>
 8008b58:	1e69      	subs	r1, r5, #1
 8008b5a:	e006      	b.n	8008b6a <_strtol_l.constprop.0+0xea>
 8008b5c:	b106      	cbz	r6, 8008b60 <_strtol_l.constprop.0+0xe0>
 8008b5e:	4240      	negs	r0, r0
 8008b60:	f1b8 0f00 	cmp.w	r8, #0
 8008b64:	d099      	beq.n	8008a9a <_strtol_l.constprop.0+0x1a>
 8008b66:	2a00      	cmp	r2, #0
 8008b68:	d1f6      	bne.n	8008b58 <_strtol_l.constprop.0+0xd8>
 8008b6a:	f8c8 1000 	str.w	r1, [r8]
 8008b6e:	e794      	b.n	8008a9a <_strtol_l.constprop.0+0x1a>
 8008b70:	0800bef9 	.word	0x0800bef9

08008b74 <strtol>:
 8008b74:	4613      	mov	r3, r2
 8008b76:	460a      	mov	r2, r1
 8008b78:	4601      	mov	r1, r0
 8008b7a:	4802      	ldr	r0, [pc, #8]	@ (8008b84 <strtol+0x10>)
 8008b7c:	6800      	ldr	r0, [r0, #0]
 8008b7e:	f7ff bf7f 	b.w	8008a80 <_strtol_l.constprop.0>
 8008b82:	bf00      	nop
 8008b84:	20000184 	.word	0x20000184

08008b88 <__cvt>:
 8008b88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b8c:	ec57 6b10 	vmov	r6, r7, d0
 8008b90:	2f00      	cmp	r7, #0
 8008b92:	460c      	mov	r4, r1
 8008b94:	4619      	mov	r1, r3
 8008b96:	463b      	mov	r3, r7
 8008b98:	bfbb      	ittet	lt
 8008b9a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008b9e:	461f      	movlt	r7, r3
 8008ba0:	2300      	movge	r3, #0
 8008ba2:	232d      	movlt	r3, #45	@ 0x2d
 8008ba4:	700b      	strb	r3, [r1, #0]
 8008ba6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ba8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008bac:	4691      	mov	r9, r2
 8008bae:	f023 0820 	bic.w	r8, r3, #32
 8008bb2:	bfbc      	itt	lt
 8008bb4:	4632      	movlt	r2, r6
 8008bb6:	4616      	movlt	r6, r2
 8008bb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008bbc:	d005      	beq.n	8008bca <__cvt+0x42>
 8008bbe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008bc2:	d100      	bne.n	8008bc6 <__cvt+0x3e>
 8008bc4:	3401      	adds	r4, #1
 8008bc6:	2102      	movs	r1, #2
 8008bc8:	e000      	b.n	8008bcc <__cvt+0x44>
 8008bca:	2103      	movs	r1, #3
 8008bcc:	ab03      	add	r3, sp, #12
 8008bce:	9301      	str	r3, [sp, #4]
 8008bd0:	ab02      	add	r3, sp, #8
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	ec47 6b10 	vmov	d0, r6, r7
 8008bd8:	4653      	mov	r3, sl
 8008bda:	4622      	mov	r2, r4
 8008bdc:	f000 fee0 	bl	80099a0 <_dtoa_r>
 8008be0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008be4:	4605      	mov	r5, r0
 8008be6:	d119      	bne.n	8008c1c <__cvt+0x94>
 8008be8:	f019 0f01 	tst.w	r9, #1
 8008bec:	d00e      	beq.n	8008c0c <__cvt+0x84>
 8008bee:	eb00 0904 	add.w	r9, r0, r4
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	4639      	mov	r1, r7
 8008bfa:	f7f7 ff85 	bl	8000b08 <__aeabi_dcmpeq>
 8008bfe:	b108      	cbz	r0, 8008c04 <__cvt+0x7c>
 8008c00:	f8cd 900c 	str.w	r9, [sp, #12]
 8008c04:	2230      	movs	r2, #48	@ 0x30
 8008c06:	9b03      	ldr	r3, [sp, #12]
 8008c08:	454b      	cmp	r3, r9
 8008c0a:	d31e      	bcc.n	8008c4a <__cvt+0xc2>
 8008c0c:	9b03      	ldr	r3, [sp, #12]
 8008c0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c10:	1b5b      	subs	r3, r3, r5
 8008c12:	4628      	mov	r0, r5
 8008c14:	6013      	str	r3, [r2, #0]
 8008c16:	b004      	add	sp, #16
 8008c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c20:	eb00 0904 	add.w	r9, r0, r4
 8008c24:	d1e5      	bne.n	8008bf2 <__cvt+0x6a>
 8008c26:	7803      	ldrb	r3, [r0, #0]
 8008c28:	2b30      	cmp	r3, #48	@ 0x30
 8008c2a:	d10a      	bne.n	8008c42 <__cvt+0xba>
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	2300      	movs	r3, #0
 8008c30:	4630      	mov	r0, r6
 8008c32:	4639      	mov	r1, r7
 8008c34:	f7f7 ff68 	bl	8000b08 <__aeabi_dcmpeq>
 8008c38:	b918      	cbnz	r0, 8008c42 <__cvt+0xba>
 8008c3a:	f1c4 0401 	rsb	r4, r4, #1
 8008c3e:	f8ca 4000 	str.w	r4, [sl]
 8008c42:	f8da 3000 	ldr.w	r3, [sl]
 8008c46:	4499      	add	r9, r3
 8008c48:	e7d3      	b.n	8008bf2 <__cvt+0x6a>
 8008c4a:	1c59      	adds	r1, r3, #1
 8008c4c:	9103      	str	r1, [sp, #12]
 8008c4e:	701a      	strb	r2, [r3, #0]
 8008c50:	e7d9      	b.n	8008c06 <__cvt+0x7e>

08008c52 <__exponent>:
 8008c52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c54:	2900      	cmp	r1, #0
 8008c56:	bfba      	itte	lt
 8008c58:	4249      	neglt	r1, r1
 8008c5a:	232d      	movlt	r3, #45	@ 0x2d
 8008c5c:	232b      	movge	r3, #43	@ 0x2b
 8008c5e:	2909      	cmp	r1, #9
 8008c60:	7002      	strb	r2, [r0, #0]
 8008c62:	7043      	strb	r3, [r0, #1]
 8008c64:	dd29      	ble.n	8008cba <__exponent+0x68>
 8008c66:	f10d 0307 	add.w	r3, sp, #7
 8008c6a:	461d      	mov	r5, r3
 8008c6c:	270a      	movs	r7, #10
 8008c6e:	461a      	mov	r2, r3
 8008c70:	fbb1 f6f7 	udiv	r6, r1, r7
 8008c74:	fb07 1416 	mls	r4, r7, r6, r1
 8008c78:	3430      	adds	r4, #48	@ 0x30
 8008c7a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008c7e:	460c      	mov	r4, r1
 8008c80:	2c63      	cmp	r4, #99	@ 0x63
 8008c82:	f103 33ff 	add.w	r3, r3, #4294967295
 8008c86:	4631      	mov	r1, r6
 8008c88:	dcf1      	bgt.n	8008c6e <__exponent+0x1c>
 8008c8a:	3130      	adds	r1, #48	@ 0x30
 8008c8c:	1e94      	subs	r4, r2, #2
 8008c8e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008c92:	1c41      	adds	r1, r0, #1
 8008c94:	4623      	mov	r3, r4
 8008c96:	42ab      	cmp	r3, r5
 8008c98:	d30a      	bcc.n	8008cb0 <__exponent+0x5e>
 8008c9a:	f10d 0309 	add.w	r3, sp, #9
 8008c9e:	1a9b      	subs	r3, r3, r2
 8008ca0:	42ac      	cmp	r4, r5
 8008ca2:	bf88      	it	hi
 8008ca4:	2300      	movhi	r3, #0
 8008ca6:	3302      	adds	r3, #2
 8008ca8:	4403      	add	r3, r0
 8008caa:	1a18      	subs	r0, r3, r0
 8008cac:	b003      	add	sp, #12
 8008cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cb0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008cb4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008cb8:	e7ed      	b.n	8008c96 <__exponent+0x44>
 8008cba:	2330      	movs	r3, #48	@ 0x30
 8008cbc:	3130      	adds	r1, #48	@ 0x30
 8008cbe:	7083      	strb	r3, [r0, #2]
 8008cc0:	70c1      	strb	r1, [r0, #3]
 8008cc2:	1d03      	adds	r3, r0, #4
 8008cc4:	e7f1      	b.n	8008caa <__exponent+0x58>
	...

08008cc8 <_printf_float>:
 8008cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ccc:	b08d      	sub	sp, #52	@ 0x34
 8008cce:	460c      	mov	r4, r1
 8008cd0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008cd4:	4616      	mov	r6, r2
 8008cd6:	461f      	mov	r7, r3
 8008cd8:	4605      	mov	r5, r0
 8008cda:	f000 fd29 	bl	8009730 <_localeconv_r>
 8008cde:	6803      	ldr	r3, [r0, #0]
 8008ce0:	9304      	str	r3, [sp, #16]
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7f7 fae4 	bl	80002b0 <strlen>
 8008ce8:	2300      	movs	r3, #0
 8008cea:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cec:	f8d8 3000 	ldr.w	r3, [r8]
 8008cf0:	9005      	str	r0, [sp, #20]
 8008cf2:	3307      	adds	r3, #7
 8008cf4:	f023 0307 	bic.w	r3, r3, #7
 8008cf8:	f103 0208 	add.w	r2, r3, #8
 8008cfc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008d00:	f8d4 b000 	ldr.w	fp, [r4]
 8008d04:	f8c8 2000 	str.w	r2, [r8]
 8008d08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008d10:	9307      	str	r3, [sp, #28]
 8008d12:	f8cd 8018 	str.w	r8, [sp, #24]
 8008d16:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008d1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d1e:	4b9c      	ldr	r3, [pc, #624]	@ (8008f90 <_printf_float+0x2c8>)
 8008d20:	f04f 32ff 	mov.w	r2, #4294967295
 8008d24:	f7f7 ff22 	bl	8000b6c <__aeabi_dcmpun>
 8008d28:	bb70      	cbnz	r0, 8008d88 <_printf_float+0xc0>
 8008d2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d2e:	4b98      	ldr	r3, [pc, #608]	@ (8008f90 <_printf_float+0x2c8>)
 8008d30:	f04f 32ff 	mov.w	r2, #4294967295
 8008d34:	f7f7 fefc 	bl	8000b30 <__aeabi_dcmple>
 8008d38:	bb30      	cbnz	r0, 8008d88 <_printf_float+0xc0>
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	4640      	mov	r0, r8
 8008d40:	4649      	mov	r1, r9
 8008d42:	f7f7 feeb 	bl	8000b1c <__aeabi_dcmplt>
 8008d46:	b110      	cbz	r0, 8008d4e <_printf_float+0x86>
 8008d48:	232d      	movs	r3, #45	@ 0x2d
 8008d4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d4e:	4a91      	ldr	r2, [pc, #580]	@ (8008f94 <_printf_float+0x2cc>)
 8008d50:	4b91      	ldr	r3, [pc, #580]	@ (8008f98 <_printf_float+0x2d0>)
 8008d52:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008d56:	bf94      	ite	ls
 8008d58:	4690      	movls	r8, r2
 8008d5a:	4698      	movhi	r8, r3
 8008d5c:	2303      	movs	r3, #3
 8008d5e:	6123      	str	r3, [r4, #16]
 8008d60:	f02b 0304 	bic.w	r3, fp, #4
 8008d64:	6023      	str	r3, [r4, #0]
 8008d66:	f04f 0900 	mov.w	r9, #0
 8008d6a:	9700      	str	r7, [sp, #0]
 8008d6c:	4633      	mov	r3, r6
 8008d6e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008d70:	4621      	mov	r1, r4
 8008d72:	4628      	mov	r0, r5
 8008d74:	f000 f9d2 	bl	800911c <_printf_common>
 8008d78:	3001      	adds	r0, #1
 8008d7a:	f040 808d 	bne.w	8008e98 <_printf_float+0x1d0>
 8008d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d82:	b00d      	add	sp, #52	@ 0x34
 8008d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d88:	4642      	mov	r2, r8
 8008d8a:	464b      	mov	r3, r9
 8008d8c:	4640      	mov	r0, r8
 8008d8e:	4649      	mov	r1, r9
 8008d90:	f7f7 feec 	bl	8000b6c <__aeabi_dcmpun>
 8008d94:	b140      	cbz	r0, 8008da8 <_printf_float+0xe0>
 8008d96:	464b      	mov	r3, r9
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	bfbc      	itt	lt
 8008d9c:	232d      	movlt	r3, #45	@ 0x2d
 8008d9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008da2:	4a7e      	ldr	r2, [pc, #504]	@ (8008f9c <_printf_float+0x2d4>)
 8008da4:	4b7e      	ldr	r3, [pc, #504]	@ (8008fa0 <_printf_float+0x2d8>)
 8008da6:	e7d4      	b.n	8008d52 <_printf_float+0x8a>
 8008da8:	6863      	ldr	r3, [r4, #4]
 8008daa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008dae:	9206      	str	r2, [sp, #24]
 8008db0:	1c5a      	adds	r2, r3, #1
 8008db2:	d13b      	bne.n	8008e2c <_printf_float+0x164>
 8008db4:	2306      	movs	r3, #6
 8008db6:	6063      	str	r3, [r4, #4]
 8008db8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	6022      	str	r2, [r4, #0]
 8008dc0:	9303      	str	r3, [sp, #12]
 8008dc2:	ab0a      	add	r3, sp, #40	@ 0x28
 8008dc4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008dc8:	ab09      	add	r3, sp, #36	@ 0x24
 8008dca:	9300      	str	r3, [sp, #0]
 8008dcc:	6861      	ldr	r1, [r4, #4]
 8008dce:	ec49 8b10 	vmov	d0, r8, r9
 8008dd2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	f7ff fed6 	bl	8008b88 <__cvt>
 8008ddc:	9b06      	ldr	r3, [sp, #24]
 8008dde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008de0:	2b47      	cmp	r3, #71	@ 0x47
 8008de2:	4680      	mov	r8, r0
 8008de4:	d129      	bne.n	8008e3a <_printf_float+0x172>
 8008de6:	1cc8      	adds	r0, r1, #3
 8008de8:	db02      	blt.n	8008df0 <_printf_float+0x128>
 8008dea:	6863      	ldr	r3, [r4, #4]
 8008dec:	4299      	cmp	r1, r3
 8008dee:	dd41      	ble.n	8008e74 <_printf_float+0x1ac>
 8008df0:	f1aa 0a02 	sub.w	sl, sl, #2
 8008df4:	fa5f fa8a 	uxtb.w	sl, sl
 8008df8:	3901      	subs	r1, #1
 8008dfa:	4652      	mov	r2, sl
 8008dfc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008e00:	9109      	str	r1, [sp, #36]	@ 0x24
 8008e02:	f7ff ff26 	bl	8008c52 <__exponent>
 8008e06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e08:	1813      	adds	r3, r2, r0
 8008e0a:	2a01      	cmp	r2, #1
 8008e0c:	4681      	mov	r9, r0
 8008e0e:	6123      	str	r3, [r4, #16]
 8008e10:	dc02      	bgt.n	8008e18 <_printf_float+0x150>
 8008e12:	6822      	ldr	r2, [r4, #0]
 8008e14:	07d2      	lsls	r2, r2, #31
 8008e16:	d501      	bpl.n	8008e1c <_printf_float+0x154>
 8008e18:	3301      	adds	r3, #1
 8008e1a:	6123      	str	r3, [r4, #16]
 8008e1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d0a2      	beq.n	8008d6a <_printf_float+0xa2>
 8008e24:	232d      	movs	r3, #45	@ 0x2d
 8008e26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e2a:	e79e      	b.n	8008d6a <_printf_float+0xa2>
 8008e2c:	9a06      	ldr	r2, [sp, #24]
 8008e2e:	2a47      	cmp	r2, #71	@ 0x47
 8008e30:	d1c2      	bne.n	8008db8 <_printf_float+0xf0>
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d1c0      	bne.n	8008db8 <_printf_float+0xf0>
 8008e36:	2301      	movs	r3, #1
 8008e38:	e7bd      	b.n	8008db6 <_printf_float+0xee>
 8008e3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008e3e:	d9db      	bls.n	8008df8 <_printf_float+0x130>
 8008e40:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008e44:	d118      	bne.n	8008e78 <_printf_float+0x1b0>
 8008e46:	2900      	cmp	r1, #0
 8008e48:	6863      	ldr	r3, [r4, #4]
 8008e4a:	dd0b      	ble.n	8008e64 <_printf_float+0x19c>
 8008e4c:	6121      	str	r1, [r4, #16]
 8008e4e:	b913      	cbnz	r3, 8008e56 <_printf_float+0x18e>
 8008e50:	6822      	ldr	r2, [r4, #0]
 8008e52:	07d0      	lsls	r0, r2, #31
 8008e54:	d502      	bpl.n	8008e5c <_printf_float+0x194>
 8008e56:	3301      	adds	r3, #1
 8008e58:	440b      	add	r3, r1
 8008e5a:	6123      	str	r3, [r4, #16]
 8008e5c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008e5e:	f04f 0900 	mov.w	r9, #0
 8008e62:	e7db      	b.n	8008e1c <_printf_float+0x154>
 8008e64:	b913      	cbnz	r3, 8008e6c <_printf_float+0x1a4>
 8008e66:	6822      	ldr	r2, [r4, #0]
 8008e68:	07d2      	lsls	r2, r2, #31
 8008e6a:	d501      	bpl.n	8008e70 <_printf_float+0x1a8>
 8008e6c:	3302      	adds	r3, #2
 8008e6e:	e7f4      	b.n	8008e5a <_printf_float+0x192>
 8008e70:	2301      	movs	r3, #1
 8008e72:	e7f2      	b.n	8008e5a <_printf_float+0x192>
 8008e74:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008e78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e7a:	4299      	cmp	r1, r3
 8008e7c:	db05      	blt.n	8008e8a <_printf_float+0x1c2>
 8008e7e:	6823      	ldr	r3, [r4, #0]
 8008e80:	6121      	str	r1, [r4, #16]
 8008e82:	07d8      	lsls	r0, r3, #31
 8008e84:	d5ea      	bpl.n	8008e5c <_printf_float+0x194>
 8008e86:	1c4b      	adds	r3, r1, #1
 8008e88:	e7e7      	b.n	8008e5a <_printf_float+0x192>
 8008e8a:	2900      	cmp	r1, #0
 8008e8c:	bfd4      	ite	le
 8008e8e:	f1c1 0202 	rsble	r2, r1, #2
 8008e92:	2201      	movgt	r2, #1
 8008e94:	4413      	add	r3, r2
 8008e96:	e7e0      	b.n	8008e5a <_printf_float+0x192>
 8008e98:	6823      	ldr	r3, [r4, #0]
 8008e9a:	055a      	lsls	r2, r3, #21
 8008e9c:	d407      	bmi.n	8008eae <_printf_float+0x1e6>
 8008e9e:	6923      	ldr	r3, [r4, #16]
 8008ea0:	4642      	mov	r2, r8
 8008ea2:	4631      	mov	r1, r6
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	47b8      	blx	r7
 8008ea8:	3001      	adds	r0, #1
 8008eaa:	d12b      	bne.n	8008f04 <_printf_float+0x23c>
 8008eac:	e767      	b.n	8008d7e <_printf_float+0xb6>
 8008eae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008eb2:	f240 80dd 	bls.w	8009070 <_printf_float+0x3a8>
 8008eb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008eba:	2200      	movs	r2, #0
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	f7f7 fe23 	bl	8000b08 <__aeabi_dcmpeq>
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	d033      	beq.n	8008f2e <_printf_float+0x266>
 8008ec6:	4a37      	ldr	r2, [pc, #220]	@ (8008fa4 <_printf_float+0x2dc>)
 8008ec8:	2301      	movs	r3, #1
 8008eca:	4631      	mov	r1, r6
 8008ecc:	4628      	mov	r0, r5
 8008ece:	47b8      	blx	r7
 8008ed0:	3001      	adds	r0, #1
 8008ed2:	f43f af54 	beq.w	8008d7e <_printf_float+0xb6>
 8008ed6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008eda:	4543      	cmp	r3, r8
 8008edc:	db02      	blt.n	8008ee4 <_printf_float+0x21c>
 8008ede:	6823      	ldr	r3, [r4, #0]
 8008ee0:	07d8      	lsls	r0, r3, #31
 8008ee2:	d50f      	bpl.n	8008f04 <_printf_float+0x23c>
 8008ee4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ee8:	4631      	mov	r1, r6
 8008eea:	4628      	mov	r0, r5
 8008eec:	47b8      	blx	r7
 8008eee:	3001      	adds	r0, #1
 8008ef0:	f43f af45 	beq.w	8008d7e <_printf_float+0xb6>
 8008ef4:	f04f 0900 	mov.w	r9, #0
 8008ef8:	f108 38ff 	add.w	r8, r8, #4294967295
 8008efc:	f104 0a1a 	add.w	sl, r4, #26
 8008f00:	45c8      	cmp	r8, r9
 8008f02:	dc09      	bgt.n	8008f18 <_printf_float+0x250>
 8008f04:	6823      	ldr	r3, [r4, #0]
 8008f06:	079b      	lsls	r3, r3, #30
 8008f08:	f100 8103 	bmi.w	8009112 <_printf_float+0x44a>
 8008f0c:	68e0      	ldr	r0, [r4, #12]
 8008f0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f10:	4298      	cmp	r0, r3
 8008f12:	bfb8      	it	lt
 8008f14:	4618      	movlt	r0, r3
 8008f16:	e734      	b.n	8008d82 <_printf_float+0xba>
 8008f18:	2301      	movs	r3, #1
 8008f1a:	4652      	mov	r2, sl
 8008f1c:	4631      	mov	r1, r6
 8008f1e:	4628      	mov	r0, r5
 8008f20:	47b8      	blx	r7
 8008f22:	3001      	adds	r0, #1
 8008f24:	f43f af2b 	beq.w	8008d7e <_printf_float+0xb6>
 8008f28:	f109 0901 	add.w	r9, r9, #1
 8008f2c:	e7e8      	b.n	8008f00 <_printf_float+0x238>
 8008f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	dc39      	bgt.n	8008fa8 <_printf_float+0x2e0>
 8008f34:	4a1b      	ldr	r2, [pc, #108]	@ (8008fa4 <_printf_float+0x2dc>)
 8008f36:	2301      	movs	r3, #1
 8008f38:	4631      	mov	r1, r6
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	47b8      	blx	r7
 8008f3e:	3001      	adds	r0, #1
 8008f40:	f43f af1d 	beq.w	8008d7e <_printf_float+0xb6>
 8008f44:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008f48:	ea59 0303 	orrs.w	r3, r9, r3
 8008f4c:	d102      	bne.n	8008f54 <_printf_float+0x28c>
 8008f4e:	6823      	ldr	r3, [r4, #0]
 8008f50:	07d9      	lsls	r1, r3, #31
 8008f52:	d5d7      	bpl.n	8008f04 <_printf_float+0x23c>
 8008f54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f58:	4631      	mov	r1, r6
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	47b8      	blx	r7
 8008f5e:	3001      	adds	r0, #1
 8008f60:	f43f af0d 	beq.w	8008d7e <_printf_float+0xb6>
 8008f64:	f04f 0a00 	mov.w	sl, #0
 8008f68:	f104 0b1a 	add.w	fp, r4, #26
 8008f6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f6e:	425b      	negs	r3, r3
 8008f70:	4553      	cmp	r3, sl
 8008f72:	dc01      	bgt.n	8008f78 <_printf_float+0x2b0>
 8008f74:	464b      	mov	r3, r9
 8008f76:	e793      	b.n	8008ea0 <_printf_float+0x1d8>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	465a      	mov	r2, fp
 8008f7c:	4631      	mov	r1, r6
 8008f7e:	4628      	mov	r0, r5
 8008f80:	47b8      	blx	r7
 8008f82:	3001      	adds	r0, #1
 8008f84:	f43f aefb 	beq.w	8008d7e <_printf_float+0xb6>
 8008f88:	f10a 0a01 	add.w	sl, sl, #1
 8008f8c:	e7ee      	b.n	8008f6c <_printf_float+0x2a4>
 8008f8e:	bf00      	nop
 8008f90:	7fefffff 	.word	0x7fefffff
 8008f94:	0800bff9 	.word	0x0800bff9
 8008f98:	0800bffd 	.word	0x0800bffd
 8008f9c:	0800c001 	.word	0x0800c001
 8008fa0:	0800c005 	.word	0x0800c005
 8008fa4:	0800c009 	.word	0x0800c009
 8008fa8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008faa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008fae:	4553      	cmp	r3, sl
 8008fb0:	bfa8      	it	ge
 8008fb2:	4653      	movge	r3, sl
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	4699      	mov	r9, r3
 8008fb8:	dc36      	bgt.n	8009028 <_printf_float+0x360>
 8008fba:	f04f 0b00 	mov.w	fp, #0
 8008fbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fc2:	f104 021a 	add.w	r2, r4, #26
 8008fc6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008fc8:	9306      	str	r3, [sp, #24]
 8008fca:	eba3 0309 	sub.w	r3, r3, r9
 8008fce:	455b      	cmp	r3, fp
 8008fd0:	dc31      	bgt.n	8009036 <_printf_float+0x36e>
 8008fd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fd4:	459a      	cmp	sl, r3
 8008fd6:	dc3a      	bgt.n	800904e <_printf_float+0x386>
 8008fd8:	6823      	ldr	r3, [r4, #0]
 8008fda:	07da      	lsls	r2, r3, #31
 8008fdc:	d437      	bmi.n	800904e <_printf_float+0x386>
 8008fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fe0:	ebaa 0903 	sub.w	r9, sl, r3
 8008fe4:	9b06      	ldr	r3, [sp, #24]
 8008fe6:	ebaa 0303 	sub.w	r3, sl, r3
 8008fea:	4599      	cmp	r9, r3
 8008fec:	bfa8      	it	ge
 8008fee:	4699      	movge	r9, r3
 8008ff0:	f1b9 0f00 	cmp.w	r9, #0
 8008ff4:	dc33      	bgt.n	800905e <_printf_float+0x396>
 8008ff6:	f04f 0800 	mov.w	r8, #0
 8008ffa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ffe:	f104 0b1a 	add.w	fp, r4, #26
 8009002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009004:	ebaa 0303 	sub.w	r3, sl, r3
 8009008:	eba3 0309 	sub.w	r3, r3, r9
 800900c:	4543      	cmp	r3, r8
 800900e:	f77f af79 	ble.w	8008f04 <_printf_float+0x23c>
 8009012:	2301      	movs	r3, #1
 8009014:	465a      	mov	r2, fp
 8009016:	4631      	mov	r1, r6
 8009018:	4628      	mov	r0, r5
 800901a:	47b8      	blx	r7
 800901c:	3001      	adds	r0, #1
 800901e:	f43f aeae 	beq.w	8008d7e <_printf_float+0xb6>
 8009022:	f108 0801 	add.w	r8, r8, #1
 8009026:	e7ec      	b.n	8009002 <_printf_float+0x33a>
 8009028:	4642      	mov	r2, r8
 800902a:	4631      	mov	r1, r6
 800902c:	4628      	mov	r0, r5
 800902e:	47b8      	blx	r7
 8009030:	3001      	adds	r0, #1
 8009032:	d1c2      	bne.n	8008fba <_printf_float+0x2f2>
 8009034:	e6a3      	b.n	8008d7e <_printf_float+0xb6>
 8009036:	2301      	movs	r3, #1
 8009038:	4631      	mov	r1, r6
 800903a:	4628      	mov	r0, r5
 800903c:	9206      	str	r2, [sp, #24]
 800903e:	47b8      	blx	r7
 8009040:	3001      	adds	r0, #1
 8009042:	f43f ae9c 	beq.w	8008d7e <_printf_float+0xb6>
 8009046:	9a06      	ldr	r2, [sp, #24]
 8009048:	f10b 0b01 	add.w	fp, fp, #1
 800904c:	e7bb      	b.n	8008fc6 <_printf_float+0x2fe>
 800904e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009052:	4631      	mov	r1, r6
 8009054:	4628      	mov	r0, r5
 8009056:	47b8      	blx	r7
 8009058:	3001      	adds	r0, #1
 800905a:	d1c0      	bne.n	8008fde <_printf_float+0x316>
 800905c:	e68f      	b.n	8008d7e <_printf_float+0xb6>
 800905e:	9a06      	ldr	r2, [sp, #24]
 8009060:	464b      	mov	r3, r9
 8009062:	4442      	add	r2, r8
 8009064:	4631      	mov	r1, r6
 8009066:	4628      	mov	r0, r5
 8009068:	47b8      	blx	r7
 800906a:	3001      	adds	r0, #1
 800906c:	d1c3      	bne.n	8008ff6 <_printf_float+0x32e>
 800906e:	e686      	b.n	8008d7e <_printf_float+0xb6>
 8009070:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009074:	f1ba 0f01 	cmp.w	sl, #1
 8009078:	dc01      	bgt.n	800907e <_printf_float+0x3b6>
 800907a:	07db      	lsls	r3, r3, #31
 800907c:	d536      	bpl.n	80090ec <_printf_float+0x424>
 800907e:	2301      	movs	r3, #1
 8009080:	4642      	mov	r2, r8
 8009082:	4631      	mov	r1, r6
 8009084:	4628      	mov	r0, r5
 8009086:	47b8      	blx	r7
 8009088:	3001      	adds	r0, #1
 800908a:	f43f ae78 	beq.w	8008d7e <_printf_float+0xb6>
 800908e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009092:	4631      	mov	r1, r6
 8009094:	4628      	mov	r0, r5
 8009096:	47b8      	blx	r7
 8009098:	3001      	adds	r0, #1
 800909a:	f43f ae70 	beq.w	8008d7e <_printf_float+0xb6>
 800909e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80090a2:	2200      	movs	r2, #0
 80090a4:	2300      	movs	r3, #0
 80090a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090aa:	f7f7 fd2d 	bl	8000b08 <__aeabi_dcmpeq>
 80090ae:	b9c0      	cbnz	r0, 80090e2 <_printf_float+0x41a>
 80090b0:	4653      	mov	r3, sl
 80090b2:	f108 0201 	add.w	r2, r8, #1
 80090b6:	4631      	mov	r1, r6
 80090b8:	4628      	mov	r0, r5
 80090ba:	47b8      	blx	r7
 80090bc:	3001      	adds	r0, #1
 80090be:	d10c      	bne.n	80090da <_printf_float+0x412>
 80090c0:	e65d      	b.n	8008d7e <_printf_float+0xb6>
 80090c2:	2301      	movs	r3, #1
 80090c4:	465a      	mov	r2, fp
 80090c6:	4631      	mov	r1, r6
 80090c8:	4628      	mov	r0, r5
 80090ca:	47b8      	blx	r7
 80090cc:	3001      	adds	r0, #1
 80090ce:	f43f ae56 	beq.w	8008d7e <_printf_float+0xb6>
 80090d2:	f108 0801 	add.w	r8, r8, #1
 80090d6:	45d0      	cmp	r8, sl
 80090d8:	dbf3      	blt.n	80090c2 <_printf_float+0x3fa>
 80090da:	464b      	mov	r3, r9
 80090dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80090e0:	e6df      	b.n	8008ea2 <_printf_float+0x1da>
 80090e2:	f04f 0800 	mov.w	r8, #0
 80090e6:	f104 0b1a 	add.w	fp, r4, #26
 80090ea:	e7f4      	b.n	80090d6 <_printf_float+0x40e>
 80090ec:	2301      	movs	r3, #1
 80090ee:	4642      	mov	r2, r8
 80090f0:	e7e1      	b.n	80090b6 <_printf_float+0x3ee>
 80090f2:	2301      	movs	r3, #1
 80090f4:	464a      	mov	r2, r9
 80090f6:	4631      	mov	r1, r6
 80090f8:	4628      	mov	r0, r5
 80090fa:	47b8      	blx	r7
 80090fc:	3001      	adds	r0, #1
 80090fe:	f43f ae3e 	beq.w	8008d7e <_printf_float+0xb6>
 8009102:	f108 0801 	add.w	r8, r8, #1
 8009106:	68e3      	ldr	r3, [r4, #12]
 8009108:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800910a:	1a5b      	subs	r3, r3, r1
 800910c:	4543      	cmp	r3, r8
 800910e:	dcf0      	bgt.n	80090f2 <_printf_float+0x42a>
 8009110:	e6fc      	b.n	8008f0c <_printf_float+0x244>
 8009112:	f04f 0800 	mov.w	r8, #0
 8009116:	f104 0919 	add.w	r9, r4, #25
 800911a:	e7f4      	b.n	8009106 <_printf_float+0x43e>

0800911c <_printf_common>:
 800911c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009120:	4616      	mov	r6, r2
 8009122:	4698      	mov	r8, r3
 8009124:	688a      	ldr	r2, [r1, #8]
 8009126:	690b      	ldr	r3, [r1, #16]
 8009128:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800912c:	4293      	cmp	r3, r2
 800912e:	bfb8      	it	lt
 8009130:	4613      	movlt	r3, r2
 8009132:	6033      	str	r3, [r6, #0]
 8009134:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009138:	4607      	mov	r7, r0
 800913a:	460c      	mov	r4, r1
 800913c:	b10a      	cbz	r2, 8009142 <_printf_common+0x26>
 800913e:	3301      	adds	r3, #1
 8009140:	6033      	str	r3, [r6, #0]
 8009142:	6823      	ldr	r3, [r4, #0]
 8009144:	0699      	lsls	r1, r3, #26
 8009146:	bf42      	ittt	mi
 8009148:	6833      	ldrmi	r3, [r6, #0]
 800914a:	3302      	addmi	r3, #2
 800914c:	6033      	strmi	r3, [r6, #0]
 800914e:	6825      	ldr	r5, [r4, #0]
 8009150:	f015 0506 	ands.w	r5, r5, #6
 8009154:	d106      	bne.n	8009164 <_printf_common+0x48>
 8009156:	f104 0a19 	add.w	sl, r4, #25
 800915a:	68e3      	ldr	r3, [r4, #12]
 800915c:	6832      	ldr	r2, [r6, #0]
 800915e:	1a9b      	subs	r3, r3, r2
 8009160:	42ab      	cmp	r3, r5
 8009162:	dc26      	bgt.n	80091b2 <_printf_common+0x96>
 8009164:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009168:	6822      	ldr	r2, [r4, #0]
 800916a:	3b00      	subs	r3, #0
 800916c:	bf18      	it	ne
 800916e:	2301      	movne	r3, #1
 8009170:	0692      	lsls	r2, r2, #26
 8009172:	d42b      	bmi.n	80091cc <_printf_common+0xb0>
 8009174:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009178:	4641      	mov	r1, r8
 800917a:	4638      	mov	r0, r7
 800917c:	47c8      	blx	r9
 800917e:	3001      	adds	r0, #1
 8009180:	d01e      	beq.n	80091c0 <_printf_common+0xa4>
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	6922      	ldr	r2, [r4, #16]
 8009186:	f003 0306 	and.w	r3, r3, #6
 800918a:	2b04      	cmp	r3, #4
 800918c:	bf02      	ittt	eq
 800918e:	68e5      	ldreq	r5, [r4, #12]
 8009190:	6833      	ldreq	r3, [r6, #0]
 8009192:	1aed      	subeq	r5, r5, r3
 8009194:	68a3      	ldr	r3, [r4, #8]
 8009196:	bf0c      	ite	eq
 8009198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800919c:	2500      	movne	r5, #0
 800919e:	4293      	cmp	r3, r2
 80091a0:	bfc4      	itt	gt
 80091a2:	1a9b      	subgt	r3, r3, r2
 80091a4:	18ed      	addgt	r5, r5, r3
 80091a6:	2600      	movs	r6, #0
 80091a8:	341a      	adds	r4, #26
 80091aa:	42b5      	cmp	r5, r6
 80091ac:	d11a      	bne.n	80091e4 <_printf_common+0xc8>
 80091ae:	2000      	movs	r0, #0
 80091b0:	e008      	b.n	80091c4 <_printf_common+0xa8>
 80091b2:	2301      	movs	r3, #1
 80091b4:	4652      	mov	r2, sl
 80091b6:	4641      	mov	r1, r8
 80091b8:	4638      	mov	r0, r7
 80091ba:	47c8      	blx	r9
 80091bc:	3001      	adds	r0, #1
 80091be:	d103      	bne.n	80091c8 <_printf_common+0xac>
 80091c0:	f04f 30ff 	mov.w	r0, #4294967295
 80091c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091c8:	3501      	adds	r5, #1
 80091ca:	e7c6      	b.n	800915a <_printf_common+0x3e>
 80091cc:	18e1      	adds	r1, r4, r3
 80091ce:	1c5a      	adds	r2, r3, #1
 80091d0:	2030      	movs	r0, #48	@ 0x30
 80091d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80091d6:	4422      	add	r2, r4
 80091d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80091dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80091e0:	3302      	adds	r3, #2
 80091e2:	e7c7      	b.n	8009174 <_printf_common+0x58>
 80091e4:	2301      	movs	r3, #1
 80091e6:	4622      	mov	r2, r4
 80091e8:	4641      	mov	r1, r8
 80091ea:	4638      	mov	r0, r7
 80091ec:	47c8      	blx	r9
 80091ee:	3001      	adds	r0, #1
 80091f0:	d0e6      	beq.n	80091c0 <_printf_common+0xa4>
 80091f2:	3601      	adds	r6, #1
 80091f4:	e7d9      	b.n	80091aa <_printf_common+0x8e>
	...

080091f8 <_printf_i>:
 80091f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091fc:	7e0f      	ldrb	r7, [r1, #24]
 80091fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009200:	2f78      	cmp	r7, #120	@ 0x78
 8009202:	4691      	mov	r9, r2
 8009204:	4680      	mov	r8, r0
 8009206:	460c      	mov	r4, r1
 8009208:	469a      	mov	sl, r3
 800920a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800920e:	d807      	bhi.n	8009220 <_printf_i+0x28>
 8009210:	2f62      	cmp	r7, #98	@ 0x62
 8009212:	d80a      	bhi.n	800922a <_printf_i+0x32>
 8009214:	2f00      	cmp	r7, #0
 8009216:	f000 80d2 	beq.w	80093be <_printf_i+0x1c6>
 800921a:	2f58      	cmp	r7, #88	@ 0x58
 800921c:	f000 80b9 	beq.w	8009392 <_printf_i+0x19a>
 8009220:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009224:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009228:	e03a      	b.n	80092a0 <_printf_i+0xa8>
 800922a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800922e:	2b15      	cmp	r3, #21
 8009230:	d8f6      	bhi.n	8009220 <_printf_i+0x28>
 8009232:	a101      	add	r1, pc, #4	@ (adr r1, 8009238 <_printf_i+0x40>)
 8009234:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009238:	08009291 	.word	0x08009291
 800923c:	080092a5 	.word	0x080092a5
 8009240:	08009221 	.word	0x08009221
 8009244:	08009221 	.word	0x08009221
 8009248:	08009221 	.word	0x08009221
 800924c:	08009221 	.word	0x08009221
 8009250:	080092a5 	.word	0x080092a5
 8009254:	08009221 	.word	0x08009221
 8009258:	08009221 	.word	0x08009221
 800925c:	08009221 	.word	0x08009221
 8009260:	08009221 	.word	0x08009221
 8009264:	080093a5 	.word	0x080093a5
 8009268:	080092cf 	.word	0x080092cf
 800926c:	0800935f 	.word	0x0800935f
 8009270:	08009221 	.word	0x08009221
 8009274:	08009221 	.word	0x08009221
 8009278:	080093c7 	.word	0x080093c7
 800927c:	08009221 	.word	0x08009221
 8009280:	080092cf 	.word	0x080092cf
 8009284:	08009221 	.word	0x08009221
 8009288:	08009221 	.word	0x08009221
 800928c:	08009367 	.word	0x08009367
 8009290:	6833      	ldr	r3, [r6, #0]
 8009292:	1d1a      	adds	r2, r3, #4
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	6032      	str	r2, [r6, #0]
 8009298:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800929c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80092a0:	2301      	movs	r3, #1
 80092a2:	e09d      	b.n	80093e0 <_printf_i+0x1e8>
 80092a4:	6833      	ldr	r3, [r6, #0]
 80092a6:	6820      	ldr	r0, [r4, #0]
 80092a8:	1d19      	adds	r1, r3, #4
 80092aa:	6031      	str	r1, [r6, #0]
 80092ac:	0606      	lsls	r6, r0, #24
 80092ae:	d501      	bpl.n	80092b4 <_printf_i+0xbc>
 80092b0:	681d      	ldr	r5, [r3, #0]
 80092b2:	e003      	b.n	80092bc <_printf_i+0xc4>
 80092b4:	0645      	lsls	r5, r0, #25
 80092b6:	d5fb      	bpl.n	80092b0 <_printf_i+0xb8>
 80092b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80092bc:	2d00      	cmp	r5, #0
 80092be:	da03      	bge.n	80092c8 <_printf_i+0xd0>
 80092c0:	232d      	movs	r3, #45	@ 0x2d
 80092c2:	426d      	negs	r5, r5
 80092c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092c8:	4859      	ldr	r0, [pc, #356]	@ (8009430 <_printf_i+0x238>)
 80092ca:	230a      	movs	r3, #10
 80092cc:	e011      	b.n	80092f2 <_printf_i+0xfa>
 80092ce:	6821      	ldr	r1, [r4, #0]
 80092d0:	6833      	ldr	r3, [r6, #0]
 80092d2:	0608      	lsls	r0, r1, #24
 80092d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80092d8:	d402      	bmi.n	80092e0 <_printf_i+0xe8>
 80092da:	0649      	lsls	r1, r1, #25
 80092dc:	bf48      	it	mi
 80092de:	b2ad      	uxthmi	r5, r5
 80092e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80092e2:	4853      	ldr	r0, [pc, #332]	@ (8009430 <_printf_i+0x238>)
 80092e4:	6033      	str	r3, [r6, #0]
 80092e6:	bf14      	ite	ne
 80092e8:	230a      	movne	r3, #10
 80092ea:	2308      	moveq	r3, #8
 80092ec:	2100      	movs	r1, #0
 80092ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80092f2:	6866      	ldr	r6, [r4, #4]
 80092f4:	60a6      	str	r6, [r4, #8]
 80092f6:	2e00      	cmp	r6, #0
 80092f8:	bfa2      	ittt	ge
 80092fa:	6821      	ldrge	r1, [r4, #0]
 80092fc:	f021 0104 	bicge.w	r1, r1, #4
 8009300:	6021      	strge	r1, [r4, #0]
 8009302:	b90d      	cbnz	r5, 8009308 <_printf_i+0x110>
 8009304:	2e00      	cmp	r6, #0
 8009306:	d04b      	beq.n	80093a0 <_printf_i+0x1a8>
 8009308:	4616      	mov	r6, r2
 800930a:	fbb5 f1f3 	udiv	r1, r5, r3
 800930e:	fb03 5711 	mls	r7, r3, r1, r5
 8009312:	5dc7      	ldrb	r7, [r0, r7]
 8009314:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009318:	462f      	mov	r7, r5
 800931a:	42bb      	cmp	r3, r7
 800931c:	460d      	mov	r5, r1
 800931e:	d9f4      	bls.n	800930a <_printf_i+0x112>
 8009320:	2b08      	cmp	r3, #8
 8009322:	d10b      	bne.n	800933c <_printf_i+0x144>
 8009324:	6823      	ldr	r3, [r4, #0]
 8009326:	07df      	lsls	r7, r3, #31
 8009328:	d508      	bpl.n	800933c <_printf_i+0x144>
 800932a:	6923      	ldr	r3, [r4, #16]
 800932c:	6861      	ldr	r1, [r4, #4]
 800932e:	4299      	cmp	r1, r3
 8009330:	bfde      	ittt	le
 8009332:	2330      	movle	r3, #48	@ 0x30
 8009334:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009338:	f106 36ff 	addle.w	r6, r6, #4294967295
 800933c:	1b92      	subs	r2, r2, r6
 800933e:	6122      	str	r2, [r4, #16]
 8009340:	f8cd a000 	str.w	sl, [sp]
 8009344:	464b      	mov	r3, r9
 8009346:	aa03      	add	r2, sp, #12
 8009348:	4621      	mov	r1, r4
 800934a:	4640      	mov	r0, r8
 800934c:	f7ff fee6 	bl	800911c <_printf_common>
 8009350:	3001      	adds	r0, #1
 8009352:	d14a      	bne.n	80093ea <_printf_i+0x1f2>
 8009354:	f04f 30ff 	mov.w	r0, #4294967295
 8009358:	b004      	add	sp, #16
 800935a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800935e:	6823      	ldr	r3, [r4, #0]
 8009360:	f043 0320 	orr.w	r3, r3, #32
 8009364:	6023      	str	r3, [r4, #0]
 8009366:	4833      	ldr	r0, [pc, #204]	@ (8009434 <_printf_i+0x23c>)
 8009368:	2778      	movs	r7, #120	@ 0x78
 800936a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	6831      	ldr	r1, [r6, #0]
 8009372:	061f      	lsls	r7, r3, #24
 8009374:	f851 5b04 	ldr.w	r5, [r1], #4
 8009378:	d402      	bmi.n	8009380 <_printf_i+0x188>
 800937a:	065f      	lsls	r7, r3, #25
 800937c:	bf48      	it	mi
 800937e:	b2ad      	uxthmi	r5, r5
 8009380:	6031      	str	r1, [r6, #0]
 8009382:	07d9      	lsls	r1, r3, #31
 8009384:	bf44      	itt	mi
 8009386:	f043 0320 	orrmi.w	r3, r3, #32
 800938a:	6023      	strmi	r3, [r4, #0]
 800938c:	b11d      	cbz	r5, 8009396 <_printf_i+0x19e>
 800938e:	2310      	movs	r3, #16
 8009390:	e7ac      	b.n	80092ec <_printf_i+0xf4>
 8009392:	4827      	ldr	r0, [pc, #156]	@ (8009430 <_printf_i+0x238>)
 8009394:	e7e9      	b.n	800936a <_printf_i+0x172>
 8009396:	6823      	ldr	r3, [r4, #0]
 8009398:	f023 0320 	bic.w	r3, r3, #32
 800939c:	6023      	str	r3, [r4, #0]
 800939e:	e7f6      	b.n	800938e <_printf_i+0x196>
 80093a0:	4616      	mov	r6, r2
 80093a2:	e7bd      	b.n	8009320 <_printf_i+0x128>
 80093a4:	6833      	ldr	r3, [r6, #0]
 80093a6:	6825      	ldr	r5, [r4, #0]
 80093a8:	6961      	ldr	r1, [r4, #20]
 80093aa:	1d18      	adds	r0, r3, #4
 80093ac:	6030      	str	r0, [r6, #0]
 80093ae:	062e      	lsls	r6, r5, #24
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	d501      	bpl.n	80093b8 <_printf_i+0x1c0>
 80093b4:	6019      	str	r1, [r3, #0]
 80093b6:	e002      	b.n	80093be <_printf_i+0x1c6>
 80093b8:	0668      	lsls	r0, r5, #25
 80093ba:	d5fb      	bpl.n	80093b4 <_printf_i+0x1bc>
 80093bc:	8019      	strh	r1, [r3, #0]
 80093be:	2300      	movs	r3, #0
 80093c0:	6123      	str	r3, [r4, #16]
 80093c2:	4616      	mov	r6, r2
 80093c4:	e7bc      	b.n	8009340 <_printf_i+0x148>
 80093c6:	6833      	ldr	r3, [r6, #0]
 80093c8:	1d1a      	adds	r2, r3, #4
 80093ca:	6032      	str	r2, [r6, #0]
 80093cc:	681e      	ldr	r6, [r3, #0]
 80093ce:	6862      	ldr	r2, [r4, #4]
 80093d0:	2100      	movs	r1, #0
 80093d2:	4630      	mov	r0, r6
 80093d4:	f7f6 ff1c 	bl	8000210 <memchr>
 80093d8:	b108      	cbz	r0, 80093de <_printf_i+0x1e6>
 80093da:	1b80      	subs	r0, r0, r6
 80093dc:	6060      	str	r0, [r4, #4]
 80093de:	6863      	ldr	r3, [r4, #4]
 80093e0:	6123      	str	r3, [r4, #16]
 80093e2:	2300      	movs	r3, #0
 80093e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093e8:	e7aa      	b.n	8009340 <_printf_i+0x148>
 80093ea:	6923      	ldr	r3, [r4, #16]
 80093ec:	4632      	mov	r2, r6
 80093ee:	4649      	mov	r1, r9
 80093f0:	4640      	mov	r0, r8
 80093f2:	47d0      	blx	sl
 80093f4:	3001      	adds	r0, #1
 80093f6:	d0ad      	beq.n	8009354 <_printf_i+0x15c>
 80093f8:	6823      	ldr	r3, [r4, #0]
 80093fa:	079b      	lsls	r3, r3, #30
 80093fc:	d413      	bmi.n	8009426 <_printf_i+0x22e>
 80093fe:	68e0      	ldr	r0, [r4, #12]
 8009400:	9b03      	ldr	r3, [sp, #12]
 8009402:	4298      	cmp	r0, r3
 8009404:	bfb8      	it	lt
 8009406:	4618      	movlt	r0, r3
 8009408:	e7a6      	b.n	8009358 <_printf_i+0x160>
 800940a:	2301      	movs	r3, #1
 800940c:	4632      	mov	r2, r6
 800940e:	4649      	mov	r1, r9
 8009410:	4640      	mov	r0, r8
 8009412:	47d0      	blx	sl
 8009414:	3001      	adds	r0, #1
 8009416:	d09d      	beq.n	8009354 <_printf_i+0x15c>
 8009418:	3501      	adds	r5, #1
 800941a:	68e3      	ldr	r3, [r4, #12]
 800941c:	9903      	ldr	r1, [sp, #12]
 800941e:	1a5b      	subs	r3, r3, r1
 8009420:	42ab      	cmp	r3, r5
 8009422:	dcf2      	bgt.n	800940a <_printf_i+0x212>
 8009424:	e7eb      	b.n	80093fe <_printf_i+0x206>
 8009426:	2500      	movs	r5, #0
 8009428:	f104 0619 	add.w	r6, r4, #25
 800942c:	e7f5      	b.n	800941a <_printf_i+0x222>
 800942e:	bf00      	nop
 8009430:	0800c00b 	.word	0x0800c00b
 8009434:	0800c01c 	.word	0x0800c01c

08009438 <std>:
 8009438:	2300      	movs	r3, #0
 800943a:	b510      	push	{r4, lr}
 800943c:	4604      	mov	r4, r0
 800943e:	e9c0 3300 	strd	r3, r3, [r0]
 8009442:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009446:	6083      	str	r3, [r0, #8]
 8009448:	8181      	strh	r1, [r0, #12]
 800944a:	6643      	str	r3, [r0, #100]	@ 0x64
 800944c:	81c2      	strh	r2, [r0, #14]
 800944e:	6183      	str	r3, [r0, #24]
 8009450:	4619      	mov	r1, r3
 8009452:	2208      	movs	r2, #8
 8009454:	305c      	adds	r0, #92	@ 0x5c
 8009456:	f000 f8f4 	bl	8009642 <memset>
 800945a:	4b0d      	ldr	r3, [pc, #52]	@ (8009490 <std+0x58>)
 800945c:	6263      	str	r3, [r4, #36]	@ 0x24
 800945e:	4b0d      	ldr	r3, [pc, #52]	@ (8009494 <std+0x5c>)
 8009460:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009462:	4b0d      	ldr	r3, [pc, #52]	@ (8009498 <std+0x60>)
 8009464:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009466:	4b0d      	ldr	r3, [pc, #52]	@ (800949c <std+0x64>)
 8009468:	6323      	str	r3, [r4, #48]	@ 0x30
 800946a:	4b0d      	ldr	r3, [pc, #52]	@ (80094a0 <std+0x68>)
 800946c:	6224      	str	r4, [r4, #32]
 800946e:	429c      	cmp	r4, r3
 8009470:	d006      	beq.n	8009480 <std+0x48>
 8009472:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009476:	4294      	cmp	r4, r2
 8009478:	d002      	beq.n	8009480 <std+0x48>
 800947a:	33d0      	adds	r3, #208	@ 0xd0
 800947c:	429c      	cmp	r4, r3
 800947e:	d105      	bne.n	800948c <std+0x54>
 8009480:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009488:	f000 b9c6 	b.w	8009818 <__retarget_lock_init_recursive>
 800948c:	bd10      	pop	{r4, pc}
 800948e:	bf00      	nop
 8009490:	080095bd 	.word	0x080095bd
 8009494:	080095df 	.word	0x080095df
 8009498:	08009617 	.word	0x08009617
 800949c:	0800963b 	.word	0x0800963b
 80094a0:	20000c5c 	.word	0x20000c5c

080094a4 <stdio_exit_handler>:
 80094a4:	4a02      	ldr	r2, [pc, #8]	@ (80094b0 <stdio_exit_handler+0xc>)
 80094a6:	4903      	ldr	r1, [pc, #12]	@ (80094b4 <stdio_exit_handler+0x10>)
 80094a8:	4803      	ldr	r0, [pc, #12]	@ (80094b8 <stdio_exit_handler+0x14>)
 80094aa:	f000 b869 	b.w	8009580 <_fwalk_sglue>
 80094ae:	bf00      	nop
 80094b0:	2000000c 	.word	0x2000000c
 80094b4:	0800b849 	.word	0x0800b849
 80094b8:	20000188 	.word	0x20000188

080094bc <cleanup_stdio>:
 80094bc:	6841      	ldr	r1, [r0, #4]
 80094be:	4b0c      	ldr	r3, [pc, #48]	@ (80094f0 <cleanup_stdio+0x34>)
 80094c0:	4299      	cmp	r1, r3
 80094c2:	b510      	push	{r4, lr}
 80094c4:	4604      	mov	r4, r0
 80094c6:	d001      	beq.n	80094cc <cleanup_stdio+0x10>
 80094c8:	f002 f9be 	bl	800b848 <_fflush_r>
 80094cc:	68a1      	ldr	r1, [r4, #8]
 80094ce:	4b09      	ldr	r3, [pc, #36]	@ (80094f4 <cleanup_stdio+0x38>)
 80094d0:	4299      	cmp	r1, r3
 80094d2:	d002      	beq.n	80094da <cleanup_stdio+0x1e>
 80094d4:	4620      	mov	r0, r4
 80094d6:	f002 f9b7 	bl	800b848 <_fflush_r>
 80094da:	68e1      	ldr	r1, [r4, #12]
 80094dc:	4b06      	ldr	r3, [pc, #24]	@ (80094f8 <cleanup_stdio+0x3c>)
 80094de:	4299      	cmp	r1, r3
 80094e0:	d004      	beq.n	80094ec <cleanup_stdio+0x30>
 80094e2:	4620      	mov	r0, r4
 80094e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094e8:	f002 b9ae 	b.w	800b848 <_fflush_r>
 80094ec:	bd10      	pop	{r4, pc}
 80094ee:	bf00      	nop
 80094f0:	20000c5c 	.word	0x20000c5c
 80094f4:	20000cc4 	.word	0x20000cc4
 80094f8:	20000d2c 	.word	0x20000d2c

080094fc <global_stdio_init.part.0>:
 80094fc:	b510      	push	{r4, lr}
 80094fe:	4b0b      	ldr	r3, [pc, #44]	@ (800952c <global_stdio_init.part.0+0x30>)
 8009500:	4c0b      	ldr	r4, [pc, #44]	@ (8009530 <global_stdio_init.part.0+0x34>)
 8009502:	4a0c      	ldr	r2, [pc, #48]	@ (8009534 <global_stdio_init.part.0+0x38>)
 8009504:	601a      	str	r2, [r3, #0]
 8009506:	4620      	mov	r0, r4
 8009508:	2200      	movs	r2, #0
 800950a:	2104      	movs	r1, #4
 800950c:	f7ff ff94 	bl	8009438 <std>
 8009510:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009514:	2201      	movs	r2, #1
 8009516:	2109      	movs	r1, #9
 8009518:	f7ff ff8e 	bl	8009438 <std>
 800951c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009520:	2202      	movs	r2, #2
 8009522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009526:	2112      	movs	r1, #18
 8009528:	f7ff bf86 	b.w	8009438 <std>
 800952c:	20000d94 	.word	0x20000d94
 8009530:	20000c5c 	.word	0x20000c5c
 8009534:	080094a5 	.word	0x080094a5

08009538 <__sfp_lock_acquire>:
 8009538:	4801      	ldr	r0, [pc, #4]	@ (8009540 <__sfp_lock_acquire+0x8>)
 800953a:	f000 b96e 	b.w	800981a <__retarget_lock_acquire_recursive>
 800953e:	bf00      	nop
 8009540:	20000d9d 	.word	0x20000d9d

08009544 <__sfp_lock_release>:
 8009544:	4801      	ldr	r0, [pc, #4]	@ (800954c <__sfp_lock_release+0x8>)
 8009546:	f000 b969 	b.w	800981c <__retarget_lock_release_recursive>
 800954a:	bf00      	nop
 800954c:	20000d9d 	.word	0x20000d9d

08009550 <__sinit>:
 8009550:	b510      	push	{r4, lr}
 8009552:	4604      	mov	r4, r0
 8009554:	f7ff fff0 	bl	8009538 <__sfp_lock_acquire>
 8009558:	6a23      	ldr	r3, [r4, #32]
 800955a:	b11b      	cbz	r3, 8009564 <__sinit+0x14>
 800955c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009560:	f7ff bff0 	b.w	8009544 <__sfp_lock_release>
 8009564:	4b04      	ldr	r3, [pc, #16]	@ (8009578 <__sinit+0x28>)
 8009566:	6223      	str	r3, [r4, #32]
 8009568:	4b04      	ldr	r3, [pc, #16]	@ (800957c <__sinit+0x2c>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d1f5      	bne.n	800955c <__sinit+0xc>
 8009570:	f7ff ffc4 	bl	80094fc <global_stdio_init.part.0>
 8009574:	e7f2      	b.n	800955c <__sinit+0xc>
 8009576:	bf00      	nop
 8009578:	080094bd 	.word	0x080094bd
 800957c:	20000d94 	.word	0x20000d94

08009580 <_fwalk_sglue>:
 8009580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009584:	4607      	mov	r7, r0
 8009586:	4688      	mov	r8, r1
 8009588:	4614      	mov	r4, r2
 800958a:	2600      	movs	r6, #0
 800958c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009590:	f1b9 0901 	subs.w	r9, r9, #1
 8009594:	d505      	bpl.n	80095a2 <_fwalk_sglue+0x22>
 8009596:	6824      	ldr	r4, [r4, #0]
 8009598:	2c00      	cmp	r4, #0
 800959a:	d1f7      	bne.n	800958c <_fwalk_sglue+0xc>
 800959c:	4630      	mov	r0, r6
 800959e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095a2:	89ab      	ldrh	r3, [r5, #12]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d907      	bls.n	80095b8 <_fwalk_sglue+0x38>
 80095a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095ac:	3301      	adds	r3, #1
 80095ae:	d003      	beq.n	80095b8 <_fwalk_sglue+0x38>
 80095b0:	4629      	mov	r1, r5
 80095b2:	4638      	mov	r0, r7
 80095b4:	47c0      	blx	r8
 80095b6:	4306      	orrs	r6, r0
 80095b8:	3568      	adds	r5, #104	@ 0x68
 80095ba:	e7e9      	b.n	8009590 <_fwalk_sglue+0x10>

080095bc <__sread>:
 80095bc:	b510      	push	{r4, lr}
 80095be:	460c      	mov	r4, r1
 80095c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095c4:	f000 f8da 	bl	800977c <_read_r>
 80095c8:	2800      	cmp	r0, #0
 80095ca:	bfab      	itete	ge
 80095cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80095ce:	89a3      	ldrhlt	r3, [r4, #12]
 80095d0:	181b      	addge	r3, r3, r0
 80095d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80095d6:	bfac      	ite	ge
 80095d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80095da:	81a3      	strhlt	r3, [r4, #12]
 80095dc:	bd10      	pop	{r4, pc}

080095de <__swrite>:
 80095de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095e2:	461f      	mov	r7, r3
 80095e4:	898b      	ldrh	r3, [r1, #12]
 80095e6:	05db      	lsls	r3, r3, #23
 80095e8:	4605      	mov	r5, r0
 80095ea:	460c      	mov	r4, r1
 80095ec:	4616      	mov	r6, r2
 80095ee:	d505      	bpl.n	80095fc <__swrite+0x1e>
 80095f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095f4:	2302      	movs	r3, #2
 80095f6:	2200      	movs	r2, #0
 80095f8:	f000 f8ae 	bl	8009758 <_lseek_r>
 80095fc:	89a3      	ldrh	r3, [r4, #12]
 80095fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009602:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009606:	81a3      	strh	r3, [r4, #12]
 8009608:	4632      	mov	r2, r6
 800960a:	463b      	mov	r3, r7
 800960c:	4628      	mov	r0, r5
 800960e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009612:	f000 b8c5 	b.w	80097a0 <_write_r>

08009616 <__sseek>:
 8009616:	b510      	push	{r4, lr}
 8009618:	460c      	mov	r4, r1
 800961a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800961e:	f000 f89b 	bl	8009758 <_lseek_r>
 8009622:	1c43      	adds	r3, r0, #1
 8009624:	89a3      	ldrh	r3, [r4, #12]
 8009626:	bf15      	itete	ne
 8009628:	6560      	strne	r0, [r4, #84]	@ 0x54
 800962a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800962e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009632:	81a3      	strheq	r3, [r4, #12]
 8009634:	bf18      	it	ne
 8009636:	81a3      	strhne	r3, [r4, #12]
 8009638:	bd10      	pop	{r4, pc}

0800963a <__sclose>:
 800963a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800963e:	f000 b87b 	b.w	8009738 <_close_r>

08009642 <memset>:
 8009642:	4402      	add	r2, r0
 8009644:	4603      	mov	r3, r0
 8009646:	4293      	cmp	r3, r2
 8009648:	d100      	bne.n	800964c <memset+0xa>
 800964a:	4770      	bx	lr
 800964c:	f803 1b01 	strb.w	r1, [r3], #1
 8009650:	e7f9      	b.n	8009646 <memset+0x4>

08009652 <strncmp>:
 8009652:	b510      	push	{r4, lr}
 8009654:	b16a      	cbz	r2, 8009672 <strncmp+0x20>
 8009656:	3901      	subs	r1, #1
 8009658:	1884      	adds	r4, r0, r2
 800965a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800965e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009662:	429a      	cmp	r2, r3
 8009664:	d103      	bne.n	800966e <strncmp+0x1c>
 8009666:	42a0      	cmp	r0, r4
 8009668:	d001      	beq.n	800966e <strncmp+0x1c>
 800966a:	2a00      	cmp	r2, #0
 800966c:	d1f5      	bne.n	800965a <strncmp+0x8>
 800966e:	1ad0      	subs	r0, r2, r3
 8009670:	bd10      	pop	{r4, pc}
 8009672:	4610      	mov	r0, r2
 8009674:	e7fc      	b.n	8009670 <strncmp+0x1e>
	...

08009678 <strtok>:
 8009678:	4b16      	ldr	r3, [pc, #88]	@ (80096d4 <strtok+0x5c>)
 800967a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800967e:	681f      	ldr	r7, [r3, #0]
 8009680:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8009682:	4605      	mov	r5, r0
 8009684:	460e      	mov	r6, r1
 8009686:	b9ec      	cbnz	r4, 80096c4 <strtok+0x4c>
 8009688:	2050      	movs	r0, #80	@ 0x50
 800968a:	f001 fad1 	bl	800ac30 <malloc>
 800968e:	4602      	mov	r2, r0
 8009690:	6478      	str	r0, [r7, #68]	@ 0x44
 8009692:	b920      	cbnz	r0, 800969e <strtok+0x26>
 8009694:	4b10      	ldr	r3, [pc, #64]	@ (80096d8 <strtok+0x60>)
 8009696:	4811      	ldr	r0, [pc, #68]	@ (80096dc <strtok+0x64>)
 8009698:	215b      	movs	r1, #91	@ 0x5b
 800969a:	f000 f8d9 	bl	8009850 <__assert_func>
 800969e:	e9c0 4400 	strd	r4, r4, [r0]
 80096a2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80096a6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80096aa:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80096ae:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80096b2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80096b6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80096ba:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80096be:	6184      	str	r4, [r0, #24]
 80096c0:	7704      	strb	r4, [r0, #28]
 80096c2:	6244      	str	r4, [r0, #36]	@ 0x24
 80096c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096c6:	4631      	mov	r1, r6
 80096c8:	4628      	mov	r0, r5
 80096ca:	2301      	movs	r3, #1
 80096cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096d0:	f000 b806 	b.w	80096e0 <__strtok_r>
 80096d4:	20000184 	.word	0x20000184
 80096d8:	0800c02d 	.word	0x0800c02d
 80096dc:	0800c044 	.word	0x0800c044

080096e0 <__strtok_r>:
 80096e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096e2:	4604      	mov	r4, r0
 80096e4:	b908      	cbnz	r0, 80096ea <__strtok_r+0xa>
 80096e6:	6814      	ldr	r4, [r2, #0]
 80096e8:	b144      	cbz	r4, 80096fc <__strtok_r+0x1c>
 80096ea:	4620      	mov	r0, r4
 80096ec:	f814 5b01 	ldrb.w	r5, [r4], #1
 80096f0:	460f      	mov	r7, r1
 80096f2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80096f6:	b91e      	cbnz	r6, 8009700 <__strtok_r+0x20>
 80096f8:	b965      	cbnz	r5, 8009714 <__strtok_r+0x34>
 80096fa:	6015      	str	r5, [r2, #0]
 80096fc:	2000      	movs	r0, #0
 80096fe:	e005      	b.n	800970c <__strtok_r+0x2c>
 8009700:	42b5      	cmp	r5, r6
 8009702:	d1f6      	bne.n	80096f2 <__strtok_r+0x12>
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1f0      	bne.n	80096ea <__strtok_r+0xa>
 8009708:	6014      	str	r4, [r2, #0]
 800970a:	7003      	strb	r3, [r0, #0]
 800970c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800970e:	461c      	mov	r4, r3
 8009710:	e00c      	b.n	800972c <__strtok_r+0x4c>
 8009712:	b915      	cbnz	r5, 800971a <__strtok_r+0x3a>
 8009714:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009718:	460e      	mov	r6, r1
 800971a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800971e:	42ab      	cmp	r3, r5
 8009720:	d1f7      	bne.n	8009712 <__strtok_r+0x32>
 8009722:	2b00      	cmp	r3, #0
 8009724:	d0f3      	beq.n	800970e <__strtok_r+0x2e>
 8009726:	2300      	movs	r3, #0
 8009728:	f804 3c01 	strb.w	r3, [r4, #-1]
 800972c:	6014      	str	r4, [r2, #0]
 800972e:	e7ed      	b.n	800970c <__strtok_r+0x2c>

08009730 <_localeconv_r>:
 8009730:	4800      	ldr	r0, [pc, #0]	@ (8009734 <_localeconv_r+0x4>)
 8009732:	4770      	bx	lr
 8009734:	20000108 	.word	0x20000108

08009738 <_close_r>:
 8009738:	b538      	push	{r3, r4, r5, lr}
 800973a:	4d06      	ldr	r5, [pc, #24]	@ (8009754 <_close_r+0x1c>)
 800973c:	2300      	movs	r3, #0
 800973e:	4604      	mov	r4, r0
 8009740:	4608      	mov	r0, r1
 8009742:	602b      	str	r3, [r5, #0]
 8009744:	f7f9 fd92 	bl	800326c <_close>
 8009748:	1c43      	adds	r3, r0, #1
 800974a:	d102      	bne.n	8009752 <_close_r+0x1a>
 800974c:	682b      	ldr	r3, [r5, #0]
 800974e:	b103      	cbz	r3, 8009752 <_close_r+0x1a>
 8009750:	6023      	str	r3, [r4, #0]
 8009752:	bd38      	pop	{r3, r4, r5, pc}
 8009754:	20000d98 	.word	0x20000d98

08009758 <_lseek_r>:
 8009758:	b538      	push	{r3, r4, r5, lr}
 800975a:	4d07      	ldr	r5, [pc, #28]	@ (8009778 <_lseek_r+0x20>)
 800975c:	4604      	mov	r4, r0
 800975e:	4608      	mov	r0, r1
 8009760:	4611      	mov	r1, r2
 8009762:	2200      	movs	r2, #0
 8009764:	602a      	str	r2, [r5, #0]
 8009766:	461a      	mov	r2, r3
 8009768:	f7f9 fda7 	bl	80032ba <_lseek>
 800976c:	1c43      	adds	r3, r0, #1
 800976e:	d102      	bne.n	8009776 <_lseek_r+0x1e>
 8009770:	682b      	ldr	r3, [r5, #0]
 8009772:	b103      	cbz	r3, 8009776 <_lseek_r+0x1e>
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	bd38      	pop	{r3, r4, r5, pc}
 8009778:	20000d98 	.word	0x20000d98

0800977c <_read_r>:
 800977c:	b538      	push	{r3, r4, r5, lr}
 800977e:	4d07      	ldr	r5, [pc, #28]	@ (800979c <_read_r+0x20>)
 8009780:	4604      	mov	r4, r0
 8009782:	4608      	mov	r0, r1
 8009784:	4611      	mov	r1, r2
 8009786:	2200      	movs	r2, #0
 8009788:	602a      	str	r2, [r5, #0]
 800978a:	461a      	mov	r2, r3
 800978c:	f7f9 fd35 	bl	80031fa <_read>
 8009790:	1c43      	adds	r3, r0, #1
 8009792:	d102      	bne.n	800979a <_read_r+0x1e>
 8009794:	682b      	ldr	r3, [r5, #0]
 8009796:	b103      	cbz	r3, 800979a <_read_r+0x1e>
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	bd38      	pop	{r3, r4, r5, pc}
 800979c:	20000d98 	.word	0x20000d98

080097a0 <_write_r>:
 80097a0:	b538      	push	{r3, r4, r5, lr}
 80097a2:	4d07      	ldr	r5, [pc, #28]	@ (80097c0 <_write_r+0x20>)
 80097a4:	4604      	mov	r4, r0
 80097a6:	4608      	mov	r0, r1
 80097a8:	4611      	mov	r1, r2
 80097aa:	2200      	movs	r2, #0
 80097ac:	602a      	str	r2, [r5, #0]
 80097ae:	461a      	mov	r2, r3
 80097b0:	f7f9 fd40 	bl	8003234 <_write>
 80097b4:	1c43      	adds	r3, r0, #1
 80097b6:	d102      	bne.n	80097be <_write_r+0x1e>
 80097b8:	682b      	ldr	r3, [r5, #0]
 80097ba:	b103      	cbz	r3, 80097be <_write_r+0x1e>
 80097bc:	6023      	str	r3, [r4, #0]
 80097be:	bd38      	pop	{r3, r4, r5, pc}
 80097c0:	20000d98 	.word	0x20000d98

080097c4 <__errno>:
 80097c4:	4b01      	ldr	r3, [pc, #4]	@ (80097cc <__errno+0x8>)
 80097c6:	6818      	ldr	r0, [r3, #0]
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop
 80097cc:	20000184 	.word	0x20000184

080097d0 <__libc_init_array>:
 80097d0:	b570      	push	{r4, r5, r6, lr}
 80097d2:	4d0d      	ldr	r5, [pc, #52]	@ (8009808 <__libc_init_array+0x38>)
 80097d4:	4c0d      	ldr	r4, [pc, #52]	@ (800980c <__libc_init_array+0x3c>)
 80097d6:	1b64      	subs	r4, r4, r5
 80097d8:	10a4      	asrs	r4, r4, #2
 80097da:	2600      	movs	r6, #0
 80097dc:	42a6      	cmp	r6, r4
 80097de:	d109      	bne.n	80097f4 <__libc_init_array+0x24>
 80097e0:	4d0b      	ldr	r5, [pc, #44]	@ (8009810 <__libc_init_array+0x40>)
 80097e2:	4c0c      	ldr	r4, [pc, #48]	@ (8009814 <__libc_init_array+0x44>)
 80097e4:	f002 fb32 	bl	800be4c <_init>
 80097e8:	1b64      	subs	r4, r4, r5
 80097ea:	10a4      	asrs	r4, r4, #2
 80097ec:	2600      	movs	r6, #0
 80097ee:	42a6      	cmp	r6, r4
 80097f0:	d105      	bne.n	80097fe <__libc_init_array+0x2e>
 80097f2:	bd70      	pop	{r4, r5, r6, pc}
 80097f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80097f8:	4798      	blx	r3
 80097fa:	3601      	adds	r6, #1
 80097fc:	e7ee      	b.n	80097dc <__libc_init_array+0xc>
 80097fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009802:	4798      	blx	r3
 8009804:	3601      	adds	r6, #1
 8009806:	e7f2      	b.n	80097ee <__libc_init_array+0x1e>
 8009808:	0800c32c 	.word	0x0800c32c
 800980c:	0800c32c 	.word	0x0800c32c
 8009810:	0800c32c 	.word	0x0800c32c
 8009814:	0800c330 	.word	0x0800c330

08009818 <__retarget_lock_init_recursive>:
 8009818:	4770      	bx	lr

0800981a <__retarget_lock_acquire_recursive>:
 800981a:	4770      	bx	lr

0800981c <__retarget_lock_release_recursive>:
 800981c:	4770      	bx	lr

0800981e <memcpy>:
 800981e:	440a      	add	r2, r1
 8009820:	4291      	cmp	r1, r2
 8009822:	f100 33ff 	add.w	r3, r0, #4294967295
 8009826:	d100      	bne.n	800982a <memcpy+0xc>
 8009828:	4770      	bx	lr
 800982a:	b510      	push	{r4, lr}
 800982c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009830:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009834:	4291      	cmp	r1, r2
 8009836:	d1f9      	bne.n	800982c <memcpy+0xe>
 8009838:	bd10      	pop	{r4, pc}
 800983a:	0000      	movs	r0, r0
 800983c:	0000      	movs	r0, r0
	...

08009840 <nan>:
 8009840:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009848 <nan+0x8>
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	00000000 	.word	0x00000000
 800984c:	7ff80000 	.word	0x7ff80000

08009850 <__assert_func>:
 8009850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009852:	4614      	mov	r4, r2
 8009854:	461a      	mov	r2, r3
 8009856:	4b09      	ldr	r3, [pc, #36]	@ (800987c <__assert_func+0x2c>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4605      	mov	r5, r0
 800985c:	68d8      	ldr	r0, [r3, #12]
 800985e:	b954      	cbnz	r4, 8009876 <__assert_func+0x26>
 8009860:	4b07      	ldr	r3, [pc, #28]	@ (8009880 <__assert_func+0x30>)
 8009862:	461c      	mov	r4, r3
 8009864:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009868:	9100      	str	r1, [sp, #0]
 800986a:	462b      	mov	r3, r5
 800986c:	4905      	ldr	r1, [pc, #20]	@ (8009884 <__assert_func+0x34>)
 800986e:	f002 f813 	bl	800b898 <fiprintf>
 8009872:	f002 f833 	bl	800b8dc <abort>
 8009876:	4b04      	ldr	r3, [pc, #16]	@ (8009888 <__assert_func+0x38>)
 8009878:	e7f4      	b.n	8009864 <__assert_func+0x14>
 800987a:	bf00      	nop
 800987c:	20000184 	.word	0x20000184
 8009880:	0800c0e1 	.word	0x0800c0e1
 8009884:	0800c0b3 	.word	0x0800c0b3
 8009888:	0800c0a6 	.word	0x0800c0a6

0800988c <quorem>:
 800988c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009890:	6903      	ldr	r3, [r0, #16]
 8009892:	690c      	ldr	r4, [r1, #16]
 8009894:	42a3      	cmp	r3, r4
 8009896:	4607      	mov	r7, r0
 8009898:	db7e      	blt.n	8009998 <quorem+0x10c>
 800989a:	3c01      	subs	r4, #1
 800989c:	f101 0814 	add.w	r8, r1, #20
 80098a0:	00a3      	lsls	r3, r4, #2
 80098a2:	f100 0514 	add.w	r5, r0, #20
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098ac:	9301      	str	r3, [sp, #4]
 80098ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098b6:	3301      	adds	r3, #1
 80098b8:	429a      	cmp	r2, r3
 80098ba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80098be:	fbb2 f6f3 	udiv	r6, r2, r3
 80098c2:	d32e      	bcc.n	8009922 <quorem+0x96>
 80098c4:	f04f 0a00 	mov.w	sl, #0
 80098c8:	46c4      	mov	ip, r8
 80098ca:	46ae      	mov	lr, r5
 80098cc:	46d3      	mov	fp, sl
 80098ce:	f85c 3b04 	ldr.w	r3, [ip], #4
 80098d2:	b298      	uxth	r0, r3
 80098d4:	fb06 a000 	mla	r0, r6, r0, sl
 80098d8:	0c02      	lsrs	r2, r0, #16
 80098da:	0c1b      	lsrs	r3, r3, #16
 80098dc:	fb06 2303 	mla	r3, r6, r3, r2
 80098e0:	f8de 2000 	ldr.w	r2, [lr]
 80098e4:	b280      	uxth	r0, r0
 80098e6:	b292      	uxth	r2, r2
 80098e8:	1a12      	subs	r2, r2, r0
 80098ea:	445a      	add	r2, fp
 80098ec:	f8de 0000 	ldr.w	r0, [lr]
 80098f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80098fa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80098fe:	b292      	uxth	r2, r2
 8009900:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009904:	45e1      	cmp	r9, ip
 8009906:	f84e 2b04 	str.w	r2, [lr], #4
 800990a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800990e:	d2de      	bcs.n	80098ce <quorem+0x42>
 8009910:	9b00      	ldr	r3, [sp, #0]
 8009912:	58eb      	ldr	r3, [r5, r3]
 8009914:	b92b      	cbnz	r3, 8009922 <quorem+0x96>
 8009916:	9b01      	ldr	r3, [sp, #4]
 8009918:	3b04      	subs	r3, #4
 800991a:	429d      	cmp	r5, r3
 800991c:	461a      	mov	r2, r3
 800991e:	d32f      	bcc.n	8009980 <quorem+0xf4>
 8009920:	613c      	str	r4, [r7, #16]
 8009922:	4638      	mov	r0, r7
 8009924:	f001 fd10 	bl	800b348 <__mcmp>
 8009928:	2800      	cmp	r0, #0
 800992a:	db25      	blt.n	8009978 <quorem+0xec>
 800992c:	4629      	mov	r1, r5
 800992e:	2000      	movs	r0, #0
 8009930:	f858 2b04 	ldr.w	r2, [r8], #4
 8009934:	f8d1 c000 	ldr.w	ip, [r1]
 8009938:	fa1f fe82 	uxth.w	lr, r2
 800993c:	fa1f f38c 	uxth.w	r3, ip
 8009940:	eba3 030e 	sub.w	r3, r3, lr
 8009944:	4403      	add	r3, r0
 8009946:	0c12      	lsrs	r2, r2, #16
 8009948:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800994c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009950:	b29b      	uxth	r3, r3
 8009952:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009956:	45c1      	cmp	r9, r8
 8009958:	f841 3b04 	str.w	r3, [r1], #4
 800995c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009960:	d2e6      	bcs.n	8009930 <quorem+0xa4>
 8009962:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009966:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800996a:	b922      	cbnz	r2, 8009976 <quorem+0xea>
 800996c:	3b04      	subs	r3, #4
 800996e:	429d      	cmp	r5, r3
 8009970:	461a      	mov	r2, r3
 8009972:	d30b      	bcc.n	800998c <quorem+0x100>
 8009974:	613c      	str	r4, [r7, #16]
 8009976:	3601      	adds	r6, #1
 8009978:	4630      	mov	r0, r6
 800997a:	b003      	add	sp, #12
 800997c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009980:	6812      	ldr	r2, [r2, #0]
 8009982:	3b04      	subs	r3, #4
 8009984:	2a00      	cmp	r2, #0
 8009986:	d1cb      	bne.n	8009920 <quorem+0x94>
 8009988:	3c01      	subs	r4, #1
 800998a:	e7c6      	b.n	800991a <quorem+0x8e>
 800998c:	6812      	ldr	r2, [r2, #0]
 800998e:	3b04      	subs	r3, #4
 8009990:	2a00      	cmp	r2, #0
 8009992:	d1ef      	bne.n	8009974 <quorem+0xe8>
 8009994:	3c01      	subs	r4, #1
 8009996:	e7ea      	b.n	800996e <quorem+0xe2>
 8009998:	2000      	movs	r0, #0
 800999a:	e7ee      	b.n	800997a <quorem+0xee>
 800999c:	0000      	movs	r0, r0
	...

080099a0 <_dtoa_r>:
 80099a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a4:	69c7      	ldr	r7, [r0, #28]
 80099a6:	b099      	sub	sp, #100	@ 0x64
 80099a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80099ac:	ec55 4b10 	vmov	r4, r5, d0
 80099b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80099b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80099b4:	4683      	mov	fp, r0
 80099b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80099b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099ba:	b97f      	cbnz	r7, 80099dc <_dtoa_r+0x3c>
 80099bc:	2010      	movs	r0, #16
 80099be:	f001 f937 	bl	800ac30 <malloc>
 80099c2:	4602      	mov	r2, r0
 80099c4:	f8cb 001c 	str.w	r0, [fp, #28]
 80099c8:	b920      	cbnz	r0, 80099d4 <_dtoa_r+0x34>
 80099ca:	4ba7      	ldr	r3, [pc, #668]	@ (8009c68 <_dtoa_r+0x2c8>)
 80099cc:	21ef      	movs	r1, #239	@ 0xef
 80099ce:	48a7      	ldr	r0, [pc, #668]	@ (8009c6c <_dtoa_r+0x2cc>)
 80099d0:	f7ff ff3e 	bl	8009850 <__assert_func>
 80099d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80099d8:	6007      	str	r7, [r0, #0]
 80099da:	60c7      	str	r7, [r0, #12]
 80099dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80099e0:	6819      	ldr	r1, [r3, #0]
 80099e2:	b159      	cbz	r1, 80099fc <_dtoa_r+0x5c>
 80099e4:	685a      	ldr	r2, [r3, #4]
 80099e6:	604a      	str	r2, [r1, #4]
 80099e8:	2301      	movs	r3, #1
 80099ea:	4093      	lsls	r3, r2
 80099ec:	608b      	str	r3, [r1, #8]
 80099ee:	4658      	mov	r0, fp
 80099f0:	f001 fa26 	bl	800ae40 <_Bfree>
 80099f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80099f8:	2200      	movs	r2, #0
 80099fa:	601a      	str	r2, [r3, #0]
 80099fc:	1e2b      	subs	r3, r5, #0
 80099fe:	bfb9      	ittee	lt
 8009a00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009a04:	9303      	strlt	r3, [sp, #12]
 8009a06:	2300      	movge	r3, #0
 8009a08:	6033      	strge	r3, [r6, #0]
 8009a0a:	9f03      	ldr	r7, [sp, #12]
 8009a0c:	4b98      	ldr	r3, [pc, #608]	@ (8009c70 <_dtoa_r+0x2d0>)
 8009a0e:	bfbc      	itt	lt
 8009a10:	2201      	movlt	r2, #1
 8009a12:	6032      	strlt	r2, [r6, #0]
 8009a14:	43bb      	bics	r3, r7
 8009a16:	d112      	bne.n	8009a3e <_dtoa_r+0x9e>
 8009a18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009a1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009a1e:	6013      	str	r3, [r2, #0]
 8009a20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a24:	4323      	orrs	r3, r4
 8009a26:	f000 854d 	beq.w	800a4c4 <_dtoa_r+0xb24>
 8009a2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009c84 <_dtoa_r+0x2e4>
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f000 854f 	beq.w	800a4d4 <_dtoa_r+0xb34>
 8009a36:	f10a 0303 	add.w	r3, sl, #3
 8009a3a:	f000 bd49 	b.w	800a4d0 <_dtoa_r+0xb30>
 8009a3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a42:	2200      	movs	r2, #0
 8009a44:	ec51 0b17 	vmov	r0, r1, d7
 8009a48:	2300      	movs	r3, #0
 8009a4a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009a4e:	f7f7 f85b 	bl	8000b08 <__aeabi_dcmpeq>
 8009a52:	4680      	mov	r8, r0
 8009a54:	b158      	cbz	r0, 8009a6e <_dtoa_r+0xce>
 8009a56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009a58:	2301      	movs	r3, #1
 8009a5a:	6013      	str	r3, [r2, #0]
 8009a5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a5e:	b113      	cbz	r3, 8009a66 <_dtoa_r+0xc6>
 8009a60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009a62:	4b84      	ldr	r3, [pc, #528]	@ (8009c74 <_dtoa_r+0x2d4>)
 8009a64:	6013      	str	r3, [r2, #0]
 8009a66:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009c88 <_dtoa_r+0x2e8>
 8009a6a:	f000 bd33 	b.w	800a4d4 <_dtoa_r+0xb34>
 8009a6e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009a72:	aa16      	add	r2, sp, #88	@ 0x58
 8009a74:	a917      	add	r1, sp, #92	@ 0x5c
 8009a76:	4658      	mov	r0, fp
 8009a78:	f001 fd86 	bl	800b588 <__d2b>
 8009a7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009a80:	4681      	mov	r9, r0
 8009a82:	2e00      	cmp	r6, #0
 8009a84:	d077      	beq.n	8009b76 <_dtoa_r+0x1d6>
 8009a86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a88:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009a98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009a9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	4b74      	ldr	r3, [pc, #464]	@ (8009c78 <_dtoa_r+0x2d8>)
 8009aa6:	f7f6 fc0f 	bl	80002c8 <__aeabi_dsub>
 8009aaa:	a369      	add	r3, pc, #420	@ (adr r3, 8009c50 <_dtoa_r+0x2b0>)
 8009aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab0:	f7f6 fdc2 	bl	8000638 <__aeabi_dmul>
 8009ab4:	a368      	add	r3, pc, #416	@ (adr r3, 8009c58 <_dtoa_r+0x2b8>)
 8009ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aba:	f7f6 fc07 	bl	80002cc <__adddf3>
 8009abe:	4604      	mov	r4, r0
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	460d      	mov	r5, r1
 8009ac4:	f7f6 fd4e 	bl	8000564 <__aeabi_i2d>
 8009ac8:	a365      	add	r3, pc, #404	@ (adr r3, 8009c60 <_dtoa_r+0x2c0>)
 8009aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ace:	f7f6 fdb3 	bl	8000638 <__aeabi_dmul>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	4629      	mov	r1, r5
 8009ada:	f7f6 fbf7 	bl	80002cc <__adddf3>
 8009ade:	4604      	mov	r4, r0
 8009ae0:	460d      	mov	r5, r1
 8009ae2:	f7f7 f859 	bl	8000b98 <__aeabi_d2iz>
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	4607      	mov	r7, r0
 8009aea:	2300      	movs	r3, #0
 8009aec:	4620      	mov	r0, r4
 8009aee:	4629      	mov	r1, r5
 8009af0:	f7f7 f814 	bl	8000b1c <__aeabi_dcmplt>
 8009af4:	b140      	cbz	r0, 8009b08 <_dtoa_r+0x168>
 8009af6:	4638      	mov	r0, r7
 8009af8:	f7f6 fd34 	bl	8000564 <__aeabi_i2d>
 8009afc:	4622      	mov	r2, r4
 8009afe:	462b      	mov	r3, r5
 8009b00:	f7f7 f802 	bl	8000b08 <__aeabi_dcmpeq>
 8009b04:	b900      	cbnz	r0, 8009b08 <_dtoa_r+0x168>
 8009b06:	3f01      	subs	r7, #1
 8009b08:	2f16      	cmp	r7, #22
 8009b0a:	d851      	bhi.n	8009bb0 <_dtoa_r+0x210>
 8009b0c:	4b5b      	ldr	r3, [pc, #364]	@ (8009c7c <_dtoa_r+0x2dc>)
 8009b0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b1a:	f7f6 ffff 	bl	8000b1c <__aeabi_dcmplt>
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	d048      	beq.n	8009bb4 <_dtoa_r+0x214>
 8009b22:	3f01      	subs	r7, #1
 8009b24:	2300      	movs	r3, #0
 8009b26:	9312      	str	r3, [sp, #72]	@ 0x48
 8009b28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009b2a:	1b9b      	subs	r3, r3, r6
 8009b2c:	1e5a      	subs	r2, r3, #1
 8009b2e:	bf44      	itt	mi
 8009b30:	f1c3 0801 	rsbmi	r8, r3, #1
 8009b34:	2300      	movmi	r3, #0
 8009b36:	9208      	str	r2, [sp, #32]
 8009b38:	bf54      	ite	pl
 8009b3a:	f04f 0800 	movpl.w	r8, #0
 8009b3e:	9308      	strmi	r3, [sp, #32]
 8009b40:	2f00      	cmp	r7, #0
 8009b42:	db39      	blt.n	8009bb8 <_dtoa_r+0x218>
 8009b44:	9b08      	ldr	r3, [sp, #32]
 8009b46:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009b48:	443b      	add	r3, r7
 8009b4a:	9308      	str	r3, [sp, #32]
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b52:	2b09      	cmp	r3, #9
 8009b54:	d864      	bhi.n	8009c20 <_dtoa_r+0x280>
 8009b56:	2b05      	cmp	r3, #5
 8009b58:	bfc4      	itt	gt
 8009b5a:	3b04      	subgt	r3, #4
 8009b5c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b60:	f1a3 0302 	sub.w	r3, r3, #2
 8009b64:	bfcc      	ite	gt
 8009b66:	2400      	movgt	r4, #0
 8009b68:	2401      	movle	r4, #1
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	d863      	bhi.n	8009c36 <_dtoa_r+0x296>
 8009b6e:	e8df f003 	tbb	[pc, r3]
 8009b72:	372a      	.short	0x372a
 8009b74:	5535      	.short	0x5535
 8009b76:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009b7a:	441e      	add	r6, r3
 8009b7c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009b80:	2b20      	cmp	r3, #32
 8009b82:	bfc1      	itttt	gt
 8009b84:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009b88:	409f      	lslgt	r7, r3
 8009b8a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009b8e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009b92:	bfd6      	itet	le
 8009b94:	f1c3 0320 	rsble	r3, r3, #32
 8009b98:	ea47 0003 	orrgt.w	r0, r7, r3
 8009b9c:	fa04 f003 	lslle.w	r0, r4, r3
 8009ba0:	f7f6 fcd0 	bl	8000544 <__aeabi_ui2d>
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009baa:	3e01      	subs	r6, #1
 8009bac:	9214      	str	r2, [sp, #80]	@ 0x50
 8009bae:	e777      	b.n	8009aa0 <_dtoa_r+0x100>
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e7b8      	b.n	8009b26 <_dtoa_r+0x186>
 8009bb4:	9012      	str	r0, [sp, #72]	@ 0x48
 8009bb6:	e7b7      	b.n	8009b28 <_dtoa_r+0x188>
 8009bb8:	427b      	negs	r3, r7
 8009bba:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	eba8 0807 	sub.w	r8, r8, r7
 8009bc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009bc4:	e7c4      	b.n	8009b50 <_dtoa_r+0x1b0>
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	dc35      	bgt.n	8009c3c <_dtoa_r+0x29c>
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	9300      	str	r3, [sp, #0]
 8009bd4:	9307      	str	r3, [sp, #28]
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009bda:	e00b      	b.n	8009bf4 <_dtoa_r+0x254>
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e7f3      	b.n	8009bc8 <_dtoa_r+0x228>
 8009be0:	2300      	movs	r3, #0
 8009be2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009be4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009be6:	18fb      	adds	r3, r7, r3
 8009be8:	9300      	str	r3, [sp, #0]
 8009bea:	3301      	adds	r3, #1
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	9307      	str	r3, [sp, #28]
 8009bf0:	bfb8      	it	lt
 8009bf2:	2301      	movlt	r3, #1
 8009bf4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	2204      	movs	r2, #4
 8009bfc:	f102 0514 	add.w	r5, r2, #20
 8009c00:	429d      	cmp	r5, r3
 8009c02:	d91f      	bls.n	8009c44 <_dtoa_r+0x2a4>
 8009c04:	6041      	str	r1, [r0, #4]
 8009c06:	4658      	mov	r0, fp
 8009c08:	f001 f8da 	bl	800adc0 <_Balloc>
 8009c0c:	4682      	mov	sl, r0
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	d13c      	bne.n	8009c8c <_dtoa_r+0x2ec>
 8009c12:	4b1b      	ldr	r3, [pc, #108]	@ (8009c80 <_dtoa_r+0x2e0>)
 8009c14:	4602      	mov	r2, r0
 8009c16:	f240 11af 	movw	r1, #431	@ 0x1af
 8009c1a:	e6d8      	b.n	80099ce <_dtoa_r+0x2e>
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	e7e0      	b.n	8009be2 <_dtoa_r+0x242>
 8009c20:	2401      	movs	r4, #1
 8009c22:	2300      	movs	r3, #0
 8009c24:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c26:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009c28:	f04f 33ff 	mov.w	r3, #4294967295
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	9307      	str	r3, [sp, #28]
 8009c30:	2200      	movs	r2, #0
 8009c32:	2312      	movs	r3, #18
 8009c34:	e7d0      	b.n	8009bd8 <_dtoa_r+0x238>
 8009c36:	2301      	movs	r3, #1
 8009c38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c3a:	e7f5      	b.n	8009c28 <_dtoa_r+0x288>
 8009c3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	9307      	str	r3, [sp, #28]
 8009c42:	e7d7      	b.n	8009bf4 <_dtoa_r+0x254>
 8009c44:	3101      	adds	r1, #1
 8009c46:	0052      	lsls	r2, r2, #1
 8009c48:	e7d8      	b.n	8009bfc <_dtoa_r+0x25c>
 8009c4a:	bf00      	nop
 8009c4c:	f3af 8000 	nop.w
 8009c50:	636f4361 	.word	0x636f4361
 8009c54:	3fd287a7 	.word	0x3fd287a7
 8009c58:	8b60c8b3 	.word	0x8b60c8b3
 8009c5c:	3fc68a28 	.word	0x3fc68a28
 8009c60:	509f79fb 	.word	0x509f79fb
 8009c64:	3fd34413 	.word	0x3fd34413
 8009c68:	0800c02d 	.word	0x0800c02d
 8009c6c:	0800c0ef 	.word	0x0800c0ef
 8009c70:	7ff00000 	.word	0x7ff00000
 8009c74:	0800c00a 	.word	0x0800c00a
 8009c78:	3ff80000 	.word	0x3ff80000
 8009c7c:	0800c248 	.word	0x0800c248
 8009c80:	0800c147 	.word	0x0800c147
 8009c84:	0800c0eb 	.word	0x0800c0eb
 8009c88:	0800c009 	.word	0x0800c009
 8009c8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009c90:	6018      	str	r0, [r3, #0]
 8009c92:	9b07      	ldr	r3, [sp, #28]
 8009c94:	2b0e      	cmp	r3, #14
 8009c96:	f200 80a4 	bhi.w	8009de2 <_dtoa_r+0x442>
 8009c9a:	2c00      	cmp	r4, #0
 8009c9c:	f000 80a1 	beq.w	8009de2 <_dtoa_r+0x442>
 8009ca0:	2f00      	cmp	r7, #0
 8009ca2:	dd33      	ble.n	8009d0c <_dtoa_r+0x36c>
 8009ca4:	4bad      	ldr	r3, [pc, #692]	@ (8009f5c <_dtoa_r+0x5bc>)
 8009ca6:	f007 020f 	and.w	r2, r7, #15
 8009caa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cae:	ed93 7b00 	vldr	d7, [r3]
 8009cb2:	05f8      	lsls	r0, r7, #23
 8009cb4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009cb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009cbc:	d516      	bpl.n	8009cec <_dtoa_r+0x34c>
 8009cbe:	4ba8      	ldr	r3, [pc, #672]	@ (8009f60 <_dtoa_r+0x5c0>)
 8009cc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009cc8:	f7f6 fde0 	bl	800088c <__aeabi_ddiv>
 8009ccc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cd0:	f004 040f 	and.w	r4, r4, #15
 8009cd4:	2603      	movs	r6, #3
 8009cd6:	4da2      	ldr	r5, [pc, #648]	@ (8009f60 <_dtoa_r+0x5c0>)
 8009cd8:	b954      	cbnz	r4, 8009cf0 <_dtoa_r+0x350>
 8009cda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ce2:	f7f6 fdd3 	bl	800088c <__aeabi_ddiv>
 8009ce6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cea:	e028      	b.n	8009d3e <_dtoa_r+0x39e>
 8009cec:	2602      	movs	r6, #2
 8009cee:	e7f2      	b.n	8009cd6 <_dtoa_r+0x336>
 8009cf0:	07e1      	lsls	r1, r4, #31
 8009cf2:	d508      	bpl.n	8009d06 <_dtoa_r+0x366>
 8009cf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cf8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009cfc:	f7f6 fc9c 	bl	8000638 <__aeabi_dmul>
 8009d00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d04:	3601      	adds	r6, #1
 8009d06:	1064      	asrs	r4, r4, #1
 8009d08:	3508      	adds	r5, #8
 8009d0a:	e7e5      	b.n	8009cd8 <_dtoa_r+0x338>
 8009d0c:	f000 80d2 	beq.w	8009eb4 <_dtoa_r+0x514>
 8009d10:	427c      	negs	r4, r7
 8009d12:	4b92      	ldr	r3, [pc, #584]	@ (8009f5c <_dtoa_r+0x5bc>)
 8009d14:	4d92      	ldr	r5, [pc, #584]	@ (8009f60 <_dtoa_r+0x5c0>)
 8009d16:	f004 020f 	and.w	r2, r4, #15
 8009d1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d26:	f7f6 fc87 	bl	8000638 <__aeabi_dmul>
 8009d2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d2e:	1124      	asrs	r4, r4, #4
 8009d30:	2300      	movs	r3, #0
 8009d32:	2602      	movs	r6, #2
 8009d34:	2c00      	cmp	r4, #0
 8009d36:	f040 80b2 	bne.w	8009e9e <_dtoa_r+0x4fe>
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d1d3      	bne.n	8009ce6 <_dtoa_r+0x346>
 8009d3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009d40:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f000 80b7 	beq.w	8009eb8 <_dtoa_r+0x518>
 8009d4a:	4b86      	ldr	r3, [pc, #536]	@ (8009f64 <_dtoa_r+0x5c4>)
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	4620      	mov	r0, r4
 8009d50:	4629      	mov	r1, r5
 8009d52:	f7f6 fee3 	bl	8000b1c <__aeabi_dcmplt>
 8009d56:	2800      	cmp	r0, #0
 8009d58:	f000 80ae 	beq.w	8009eb8 <_dtoa_r+0x518>
 8009d5c:	9b07      	ldr	r3, [sp, #28]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f000 80aa 	beq.w	8009eb8 <_dtoa_r+0x518>
 8009d64:	9b00      	ldr	r3, [sp, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	dd37      	ble.n	8009dda <_dtoa_r+0x43a>
 8009d6a:	1e7b      	subs	r3, r7, #1
 8009d6c:	9304      	str	r3, [sp, #16]
 8009d6e:	4620      	mov	r0, r4
 8009d70:	4b7d      	ldr	r3, [pc, #500]	@ (8009f68 <_dtoa_r+0x5c8>)
 8009d72:	2200      	movs	r2, #0
 8009d74:	4629      	mov	r1, r5
 8009d76:	f7f6 fc5f 	bl	8000638 <__aeabi_dmul>
 8009d7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d7e:	9c00      	ldr	r4, [sp, #0]
 8009d80:	3601      	adds	r6, #1
 8009d82:	4630      	mov	r0, r6
 8009d84:	f7f6 fbee 	bl	8000564 <__aeabi_i2d>
 8009d88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d8c:	f7f6 fc54 	bl	8000638 <__aeabi_dmul>
 8009d90:	4b76      	ldr	r3, [pc, #472]	@ (8009f6c <_dtoa_r+0x5cc>)
 8009d92:	2200      	movs	r2, #0
 8009d94:	f7f6 fa9a 	bl	80002cc <__adddf3>
 8009d98:	4605      	mov	r5, r0
 8009d9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009d9e:	2c00      	cmp	r4, #0
 8009da0:	f040 808d 	bne.w	8009ebe <_dtoa_r+0x51e>
 8009da4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009da8:	4b71      	ldr	r3, [pc, #452]	@ (8009f70 <_dtoa_r+0x5d0>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	f7f6 fa8c 	bl	80002c8 <__aeabi_dsub>
 8009db0:	4602      	mov	r2, r0
 8009db2:	460b      	mov	r3, r1
 8009db4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009db8:	462a      	mov	r2, r5
 8009dba:	4633      	mov	r3, r6
 8009dbc:	f7f6 fecc 	bl	8000b58 <__aeabi_dcmpgt>
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	f040 828b 	bne.w	800a2dc <_dtoa_r+0x93c>
 8009dc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dca:	462a      	mov	r2, r5
 8009dcc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009dd0:	f7f6 fea4 	bl	8000b1c <__aeabi_dcmplt>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	f040 8128 	bne.w	800a02a <_dtoa_r+0x68a>
 8009dda:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009dde:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009de2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	f2c0 815a 	blt.w	800a09e <_dtoa_r+0x6fe>
 8009dea:	2f0e      	cmp	r7, #14
 8009dec:	f300 8157 	bgt.w	800a09e <_dtoa_r+0x6fe>
 8009df0:	4b5a      	ldr	r3, [pc, #360]	@ (8009f5c <_dtoa_r+0x5bc>)
 8009df2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009df6:	ed93 7b00 	vldr	d7, [r3]
 8009dfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	ed8d 7b00 	vstr	d7, [sp]
 8009e02:	da03      	bge.n	8009e0c <_dtoa_r+0x46c>
 8009e04:	9b07      	ldr	r3, [sp, #28]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f340 8101 	ble.w	800a00e <_dtoa_r+0x66e>
 8009e0c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009e10:	4656      	mov	r6, sl
 8009e12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e16:	4620      	mov	r0, r4
 8009e18:	4629      	mov	r1, r5
 8009e1a:	f7f6 fd37 	bl	800088c <__aeabi_ddiv>
 8009e1e:	f7f6 febb 	bl	8000b98 <__aeabi_d2iz>
 8009e22:	4680      	mov	r8, r0
 8009e24:	f7f6 fb9e 	bl	8000564 <__aeabi_i2d>
 8009e28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e2c:	f7f6 fc04 	bl	8000638 <__aeabi_dmul>
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	4620      	mov	r0, r4
 8009e36:	4629      	mov	r1, r5
 8009e38:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009e3c:	f7f6 fa44 	bl	80002c8 <__aeabi_dsub>
 8009e40:	f806 4b01 	strb.w	r4, [r6], #1
 8009e44:	9d07      	ldr	r5, [sp, #28]
 8009e46:	eba6 040a 	sub.w	r4, r6, sl
 8009e4a:	42a5      	cmp	r5, r4
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	460b      	mov	r3, r1
 8009e50:	f040 8117 	bne.w	800a082 <_dtoa_r+0x6e2>
 8009e54:	f7f6 fa3a 	bl	80002cc <__adddf3>
 8009e58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	460d      	mov	r5, r1
 8009e60:	f7f6 fe7a 	bl	8000b58 <__aeabi_dcmpgt>
 8009e64:	2800      	cmp	r0, #0
 8009e66:	f040 80f9 	bne.w	800a05c <_dtoa_r+0x6bc>
 8009e6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e6e:	4620      	mov	r0, r4
 8009e70:	4629      	mov	r1, r5
 8009e72:	f7f6 fe49 	bl	8000b08 <__aeabi_dcmpeq>
 8009e76:	b118      	cbz	r0, 8009e80 <_dtoa_r+0x4e0>
 8009e78:	f018 0f01 	tst.w	r8, #1
 8009e7c:	f040 80ee 	bne.w	800a05c <_dtoa_r+0x6bc>
 8009e80:	4649      	mov	r1, r9
 8009e82:	4658      	mov	r0, fp
 8009e84:	f000 ffdc 	bl	800ae40 <_Bfree>
 8009e88:	2300      	movs	r3, #0
 8009e8a:	7033      	strb	r3, [r6, #0]
 8009e8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e8e:	3701      	adds	r7, #1
 8009e90:	601f      	str	r7, [r3, #0]
 8009e92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	f000 831d 	beq.w	800a4d4 <_dtoa_r+0xb34>
 8009e9a:	601e      	str	r6, [r3, #0]
 8009e9c:	e31a      	b.n	800a4d4 <_dtoa_r+0xb34>
 8009e9e:	07e2      	lsls	r2, r4, #31
 8009ea0:	d505      	bpl.n	8009eae <_dtoa_r+0x50e>
 8009ea2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009ea6:	f7f6 fbc7 	bl	8000638 <__aeabi_dmul>
 8009eaa:	3601      	adds	r6, #1
 8009eac:	2301      	movs	r3, #1
 8009eae:	1064      	asrs	r4, r4, #1
 8009eb0:	3508      	adds	r5, #8
 8009eb2:	e73f      	b.n	8009d34 <_dtoa_r+0x394>
 8009eb4:	2602      	movs	r6, #2
 8009eb6:	e742      	b.n	8009d3e <_dtoa_r+0x39e>
 8009eb8:	9c07      	ldr	r4, [sp, #28]
 8009eba:	9704      	str	r7, [sp, #16]
 8009ebc:	e761      	b.n	8009d82 <_dtoa_r+0x3e2>
 8009ebe:	4b27      	ldr	r3, [pc, #156]	@ (8009f5c <_dtoa_r+0x5bc>)
 8009ec0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009ec2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ec6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009eca:	4454      	add	r4, sl
 8009ecc:	2900      	cmp	r1, #0
 8009ece:	d053      	beq.n	8009f78 <_dtoa_r+0x5d8>
 8009ed0:	4928      	ldr	r1, [pc, #160]	@ (8009f74 <_dtoa_r+0x5d4>)
 8009ed2:	2000      	movs	r0, #0
 8009ed4:	f7f6 fcda 	bl	800088c <__aeabi_ddiv>
 8009ed8:	4633      	mov	r3, r6
 8009eda:	462a      	mov	r2, r5
 8009edc:	f7f6 f9f4 	bl	80002c8 <__aeabi_dsub>
 8009ee0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ee4:	4656      	mov	r6, sl
 8009ee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eea:	f7f6 fe55 	bl	8000b98 <__aeabi_d2iz>
 8009eee:	4605      	mov	r5, r0
 8009ef0:	f7f6 fb38 	bl	8000564 <__aeabi_i2d>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009efc:	f7f6 f9e4 	bl	80002c8 <__aeabi_dsub>
 8009f00:	3530      	adds	r5, #48	@ 0x30
 8009f02:	4602      	mov	r2, r0
 8009f04:	460b      	mov	r3, r1
 8009f06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f0a:	f806 5b01 	strb.w	r5, [r6], #1
 8009f0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f12:	f7f6 fe03 	bl	8000b1c <__aeabi_dcmplt>
 8009f16:	2800      	cmp	r0, #0
 8009f18:	d171      	bne.n	8009ffe <_dtoa_r+0x65e>
 8009f1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f1e:	4911      	ldr	r1, [pc, #68]	@ (8009f64 <_dtoa_r+0x5c4>)
 8009f20:	2000      	movs	r0, #0
 8009f22:	f7f6 f9d1 	bl	80002c8 <__aeabi_dsub>
 8009f26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f2a:	f7f6 fdf7 	bl	8000b1c <__aeabi_dcmplt>
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	f040 8095 	bne.w	800a05e <_dtoa_r+0x6be>
 8009f34:	42a6      	cmp	r6, r4
 8009f36:	f43f af50 	beq.w	8009dda <_dtoa_r+0x43a>
 8009f3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8009f68 <_dtoa_r+0x5c8>)
 8009f40:	2200      	movs	r2, #0
 8009f42:	f7f6 fb79 	bl	8000638 <__aeabi_dmul>
 8009f46:	4b08      	ldr	r3, [pc, #32]	@ (8009f68 <_dtoa_r+0x5c8>)
 8009f48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f52:	f7f6 fb71 	bl	8000638 <__aeabi_dmul>
 8009f56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f5a:	e7c4      	b.n	8009ee6 <_dtoa_r+0x546>
 8009f5c:	0800c248 	.word	0x0800c248
 8009f60:	0800c220 	.word	0x0800c220
 8009f64:	3ff00000 	.word	0x3ff00000
 8009f68:	40240000 	.word	0x40240000
 8009f6c:	401c0000 	.word	0x401c0000
 8009f70:	40140000 	.word	0x40140000
 8009f74:	3fe00000 	.word	0x3fe00000
 8009f78:	4631      	mov	r1, r6
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	f7f6 fb5c 	bl	8000638 <__aeabi_dmul>
 8009f80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f84:	9415      	str	r4, [sp, #84]	@ 0x54
 8009f86:	4656      	mov	r6, sl
 8009f88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f8c:	f7f6 fe04 	bl	8000b98 <__aeabi_d2iz>
 8009f90:	4605      	mov	r5, r0
 8009f92:	f7f6 fae7 	bl	8000564 <__aeabi_i2d>
 8009f96:	4602      	mov	r2, r0
 8009f98:	460b      	mov	r3, r1
 8009f9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f9e:	f7f6 f993 	bl	80002c8 <__aeabi_dsub>
 8009fa2:	3530      	adds	r5, #48	@ 0x30
 8009fa4:	f806 5b01 	strb.w	r5, [r6], #1
 8009fa8:	4602      	mov	r2, r0
 8009faa:	460b      	mov	r3, r1
 8009fac:	42a6      	cmp	r6, r4
 8009fae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009fb2:	f04f 0200 	mov.w	r2, #0
 8009fb6:	d124      	bne.n	800a002 <_dtoa_r+0x662>
 8009fb8:	4bac      	ldr	r3, [pc, #688]	@ (800a26c <_dtoa_r+0x8cc>)
 8009fba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009fbe:	f7f6 f985 	bl	80002cc <__adddf3>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fca:	f7f6 fdc5 	bl	8000b58 <__aeabi_dcmpgt>
 8009fce:	2800      	cmp	r0, #0
 8009fd0:	d145      	bne.n	800a05e <_dtoa_r+0x6be>
 8009fd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009fd6:	49a5      	ldr	r1, [pc, #660]	@ (800a26c <_dtoa_r+0x8cc>)
 8009fd8:	2000      	movs	r0, #0
 8009fda:	f7f6 f975 	bl	80002c8 <__aeabi_dsub>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fe6:	f7f6 fd99 	bl	8000b1c <__aeabi_dcmplt>
 8009fea:	2800      	cmp	r0, #0
 8009fec:	f43f aef5 	beq.w	8009dda <_dtoa_r+0x43a>
 8009ff0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009ff2:	1e73      	subs	r3, r6, #1
 8009ff4:	9315      	str	r3, [sp, #84]	@ 0x54
 8009ff6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009ffa:	2b30      	cmp	r3, #48	@ 0x30
 8009ffc:	d0f8      	beq.n	8009ff0 <_dtoa_r+0x650>
 8009ffe:	9f04      	ldr	r7, [sp, #16]
 800a000:	e73e      	b.n	8009e80 <_dtoa_r+0x4e0>
 800a002:	4b9b      	ldr	r3, [pc, #620]	@ (800a270 <_dtoa_r+0x8d0>)
 800a004:	f7f6 fb18 	bl	8000638 <__aeabi_dmul>
 800a008:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a00c:	e7bc      	b.n	8009f88 <_dtoa_r+0x5e8>
 800a00e:	d10c      	bne.n	800a02a <_dtoa_r+0x68a>
 800a010:	4b98      	ldr	r3, [pc, #608]	@ (800a274 <_dtoa_r+0x8d4>)
 800a012:	2200      	movs	r2, #0
 800a014:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a018:	f7f6 fb0e 	bl	8000638 <__aeabi_dmul>
 800a01c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a020:	f7f6 fd90 	bl	8000b44 <__aeabi_dcmpge>
 800a024:	2800      	cmp	r0, #0
 800a026:	f000 8157 	beq.w	800a2d8 <_dtoa_r+0x938>
 800a02a:	2400      	movs	r4, #0
 800a02c:	4625      	mov	r5, r4
 800a02e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a030:	43db      	mvns	r3, r3
 800a032:	9304      	str	r3, [sp, #16]
 800a034:	4656      	mov	r6, sl
 800a036:	2700      	movs	r7, #0
 800a038:	4621      	mov	r1, r4
 800a03a:	4658      	mov	r0, fp
 800a03c:	f000 ff00 	bl	800ae40 <_Bfree>
 800a040:	2d00      	cmp	r5, #0
 800a042:	d0dc      	beq.n	8009ffe <_dtoa_r+0x65e>
 800a044:	b12f      	cbz	r7, 800a052 <_dtoa_r+0x6b2>
 800a046:	42af      	cmp	r7, r5
 800a048:	d003      	beq.n	800a052 <_dtoa_r+0x6b2>
 800a04a:	4639      	mov	r1, r7
 800a04c:	4658      	mov	r0, fp
 800a04e:	f000 fef7 	bl	800ae40 <_Bfree>
 800a052:	4629      	mov	r1, r5
 800a054:	4658      	mov	r0, fp
 800a056:	f000 fef3 	bl	800ae40 <_Bfree>
 800a05a:	e7d0      	b.n	8009ffe <_dtoa_r+0x65e>
 800a05c:	9704      	str	r7, [sp, #16]
 800a05e:	4633      	mov	r3, r6
 800a060:	461e      	mov	r6, r3
 800a062:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a066:	2a39      	cmp	r2, #57	@ 0x39
 800a068:	d107      	bne.n	800a07a <_dtoa_r+0x6da>
 800a06a:	459a      	cmp	sl, r3
 800a06c:	d1f8      	bne.n	800a060 <_dtoa_r+0x6c0>
 800a06e:	9a04      	ldr	r2, [sp, #16]
 800a070:	3201      	adds	r2, #1
 800a072:	9204      	str	r2, [sp, #16]
 800a074:	2230      	movs	r2, #48	@ 0x30
 800a076:	f88a 2000 	strb.w	r2, [sl]
 800a07a:	781a      	ldrb	r2, [r3, #0]
 800a07c:	3201      	adds	r2, #1
 800a07e:	701a      	strb	r2, [r3, #0]
 800a080:	e7bd      	b.n	8009ffe <_dtoa_r+0x65e>
 800a082:	4b7b      	ldr	r3, [pc, #492]	@ (800a270 <_dtoa_r+0x8d0>)
 800a084:	2200      	movs	r2, #0
 800a086:	f7f6 fad7 	bl	8000638 <__aeabi_dmul>
 800a08a:	2200      	movs	r2, #0
 800a08c:	2300      	movs	r3, #0
 800a08e:	4604      	mov	r4, r0
 800a090:	460d      	mov	r5, r1
 800a092:	f7f6 fd39 	bl	8000b08 <__aeabi_dcmpeq>
 800a096:	2800      	cmp	r0, #0
 800a098:	f43f aebb 	beq.w	8009e12 <_dtoa_r+0x472>
 800a09c:	e6f0      	b.n	8009e80 <_dtoa_r+0x4e0>
 800a09e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a0a0:	2a00      	cmp	r2, #0
 800a0a2:	f000 80db 	beq.w	800a25c <_dtoa_r+0x8bc>
 800a0a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0a8:	2a01      	cmp	r2, #1
 800a0aa:	f300 80bf 	bgt.w	800a22c <_dtoa_r+0x88c>
 800a0ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a0b0:	2a00      	cmp	r2, #0
 800a0b2:	f000 80b7 	beq.w	800a224 <_dtoa_r+0x884>
 800a0b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a0ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a0bc:	4646      	mov	r6, r8
 800a0be:	9a08      	ldr	r2, [sp, #32]
 800a0c0:	2101      	movs	r1, #1
 800a0c2:	441a      	add	r2, r3
 800a0c4:	4658      	mov	r0, fp
 800a0c6:	4498      	add	r8, r3
 800a0c8:	9208      	str	r2, [sp, #32]
 800a0ca:	f000 ffb7 	bl	800b03c <__i2b>
 800a0ce:	4605      	mov	r5, r0
 800a0d0:	b15e      	cbz	r6, 800a0ea <_dtoa_r+0x74a>
 800a0d2:	9b08      	ldr	r3, [sp, #32]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	dd08      	ble.n	800a0ea <_dtoa_r+0x74a>
 800a0d8:	42b3      	cmp	r3, r6
 800a0da:	9a08      	ldr	r2, [sp, #32]
 800a0dc:	bfa8      	it	ge
 800a0de:	4633      	movge	r3, r6
 800a0e0:	eba8 0803 	sub.w	r8, r8, r3
 800a0e4:	1af6      	subs	r6, r6, r3
 800a0e6:	1ad3      	subs	r3, r2, r3
 800a0e8:	9308      	str	r3, [sp, #32]
 800a0ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0ec:	b1f3      	cbz	r3, 800a12c <_dtoa_r+0x78c>
 800a0ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f000 80b7 	beq.w	800a264 <_dtoa_r+0x8c4>
 800a0f6:	b18c      	cbz	r4, 800a11c <_dtoa_r+0x77c>
 800a0f8:	4629      	mov	r1, r5
 800a0fa:	4622      	mov	r2, r4
 800a0fc:	4658      	mov	r0, fp
 800a0fe:	f001 f85d 	bl	800b1bc <__pow5mult>
 800a102:	464a      	mov	r2, r9
 800a104:	4601      	mov	r1, r0
 800a106:	4605      	mov	r5, r0
 800a108:	4658      	mov	r0, fp
 800a10a:	f000 ffad 	bl	800b068 <__multiply>
 800a10e:	4649      	mov	r1, r9
 800a110:	9004      	str	r0, [sp, #16]
 800a112:	4658      	mov	r0, fp
 800a114:	f000 fe94 	bl	800ae40 <_Bfree>
 800a118:	9b04      	ldr	r3, [sp, #16]
 800a11a:	4699      	mov	r9, r3
 800a11c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a11e:	1b1a      	subs	r2, r3, r4
 800a120:	d004      	beq.n	800a12c <_dtoa_r+0x78c>
 800a122:	4649      	mov	r1, r9
 800a124:	4658      	mov	r0, fp
 800a126:	f001 f849 	bl	800b1bc <__pow5mult>
 800a12a:	4681      	mov	r9, r0
 800a12c:	2101      	movs	r1, #1
 800a12e:	4658      	mov	r0, fp
 800a130:	f000 ff84 	bl	800b03c <__i2b>
 800a134:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a136:	4604      	mov	r4, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f000 81cf 	beq.w	800a4dc <_dtoa_r+0xb3c>
 800a13e:	461a      	mov	r2, r3
 800a140:	4601      	mov	r1, r0
 800a142:	4658      	mov	r0, fp
 800a144:	f001 f83a 	bl	800b1bc <__pow5mult>
 800a148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	4604      	mov	r4, r0
 800a14e:	f300 8095 	bgt.w	800a27c <_dtoa_r+0x8dc>
 800a152:	9b02      	ldr	r3, [sp, #8]
 800a154:	2b00      	cmp	r3, #0
 800a156:	f040 8087 	bne.w	800a268 <_dtoa_r+0x8c8>
 800a15a:	9b03      	ldr	r3, [sp, #12]
 800a15c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a160:	2b00      	cmp	r3, #0
 800a162:	f040 8089 	bne.w	800a278 <_dtoa_r+0x8d8>
 800a166:	9b03      	ldr	r3, [sp, #12]
 800a168:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a16c:	0d1b      	lsrs	r3, r3, #20
 800a16e:	051b      	lsls	r3, r3, #20
 800a170:	b12b      	cbz	r3, 800a17e <_dtoa_r+0x7de>
 800a172:	9b08      	ldr	r3, [sp, #32]
 800a174:	3301      	adds	r3, #1
 800a176:	9308      	str	r3, [sp, #32]
 800a178:	f108 0801 	add.w	r8, r8, #1
 800a17c:	2301      	movs	r3, #1
 800a17e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a180:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a182:	2b00      	cmp	r3, #0
 800a184:	f000 81b0 	beq.w	800a4e8 <_dtoa_r+0xb48>
 800a188:	6923      	ldr	r3, [r4, #16]
 800a18a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a18e:	6918      	ldr	r0, [r3, #16]
 800a190:	f000 ff08 	bl	800afa4 <__hi0bits>
 800a194:	f1c0 0020 	rsb	r0, r0, #32
 800a198:	9b08      	ldr	r3, [sp, #32]
 800a19a:	4418      	add	r0, r3
 800a19c:	f010 001f 	ands.w	r0, r0, #31
 800a1a0:	d077      	beq.n	800a292 <_dtoa_r+0x8f2>
 800a1a2:	f1c0 0320 	rsb	r3, r0, #32
 800a1a6:	2b04      	cmp	r3, #4
 800a1a8:	dd6b      	ble.n	800a282 <_dtoa_r+0x8e2>
 800a1aa:	9b08      	ldr	r3, [sp, #32]
 800a1ac:	f1c0 001c 	rsb	r0, r0, #28
 800a1b0:	4403      	add	r3, r0
 800a1b2:	4480      	add	r8, r0
 800a1b4:	4406      	add	r6, r0
 800a1b6:	9308      	str	r3, [sp, #32]
 800a1b8:	f1b8 0f00 	cmp.w	r8, #0
 800a1bc:	dd05      	ble.n	800a1ca <_dtoa_r+0x82a>
 800a1be:	4649      	mov	r1, r9
 800a1c0:	4642      	mov	r2, r8
 800a1c2:	4658      	mov	r0, fp
 800a1c4:	f001 f854 	bl	800b270 <__lshift>
 800a1c8:	4681      	mov	r9, r0
 800a1ca:	9b08      	ldr	r3, [sp, #32]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	dd05      	ble.n	800a1dc <_dtoa_r+0x83c>
 800a1d0:	4621      	mov	r1, r4
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	4658      	mov	r0, fp
 800a1d6:	f001 f84b 	bl	800b270 <__lshift>
 800a1da:	4604      	mov	r4, r0
 800a1dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d059      	beq.n	800a296 <_dtoa_r+0x8f6>
 800a1e2:	4621      	mov	r1, r4
 800a1e4:	4648      	mov	r0, r9
 800a1e6:	f001 f8af 	bl	800b348 <__mcmp>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	da53      	bge.n	800a296 <_dtoa_r+0x8f6>
 800a1ee:	1e7b      	subs	r3, r7, #1
 800a1f0:	9304      	str	r3, [sp, #16]
 800a1f2:	4649      	mov	r1, r9
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	220a      	movs	r2, #10
 800a1f8:	4658      	mov	r0, fp
 800a1fa:	f000 fe43 	bl	800ae84 <__multadd>
 800a1fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a200:	4681      	mov	r9, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	f000 8172 	beq.w	800a4ec <_dtoa_r+0xb4c>
 800a208:	2300      	movs	r3, #0
 800a20a:	4629      	mov	r1, r5
 800a20c:	220a      	movs	r2, #10
 800a20e:	4658      	mov	r0, fp
 800a210:	f000 fe38 	bl	800ae84 <__multadd>
 800a214:	9b00      	ldr	r3, [sp, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	4605      	mov	r5, r0
 800a21a:	dc67      	bgt.n	800a2ec <_dtoa_r+0x94c>
 800a21c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a21e:	2b02      	cmp	r3, #2
 800a220:	dc41      	bgt.n	800a2a6 <_dtoa_r+0x906>
 800a222:	e063      	b.n	800a2ec <_dtoa_r+0x94c>
 800a224:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a226:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a22a:	e746      	b.n	800a0ba <_dtoa_r+0x71a>
 800a22c:	9b07      	ldr	r3, [sp, #28]
 800a22e:	1e5c      	subs	r4, r3, #1
 800a230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a232:	42a3      	cmp	r3, r4
 800a234:	bfbf      	itttt	lt
 800a236:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a238:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a23a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a23c:	1ae3      	sublt	r3, r4, r3
 800a23e:	bfb4      	ite	lt
 800a240:	18d2      	addlt	r2, r2, r3
 800a242:	1b1c      	subge	r4, r3, r4
 800a244:	9b07      	ldr	r3, [sp, #28]
 800a246:	bfbc      	itt	lt
 800a248:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a24a:	2400      	movlt	r4, #0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	bfb5      	itete	lt
 800a250:	eba8 0603 	sublt.w	r6, r8, r3
 800a254:	9b07      	ldrge	r3, [sp, #28]
 800a256:	2300      	movlt	r3, #0
 800a258:	4646      	movge	r6, r8
 800a25a:	e730      	b.n	800a0be <_dtoa_r+0x71e>
 800a25c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a25e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a260:	4646      	mov	r6, r8
 800a262:	e735      	b.n	800a0d0 <_dtoa_r+0x730>
 800a264:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a266:	e75c      	b.n	800a122 <_dtoa_r+0x782>
 800a268:	2300      	movs	r3, #0
 800a26a:	e788      	b.n	800a17e <_dtoa_r+0x7de>
 800a26c:	3fe00000 	.word	0x3fe00000
 800a270:	40240000 	.word	0x40240000
 800a274:	40140000 	.word	0x40140000
 800a278:	9b02      	ldr	r3, [sp, #8]
 800a27a:	e780      	b.n	800a17e <_dtoa_r+0x7de>
 800a27c:	2300      	movs	r3, #0
 800a27e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a280:	e782      	b.n	800a188 <_dtoa_r+0x7e8>
 800a282:	d099      	beq.n	800a1b8 <_dtoa_r+0x818>
 800a284:	9a08      	ldr	r2, [sp, #32]
 800a286:	331c      	adds	r3, #28
 800a288:	441a      	add	r2, r3
 800a28a:	4498      	add	r8, r3
 800a28c:	441e      	add	r6, r3
 800a28e:	9208      	str	r2, [sp, #32]
 800a290:	e792      	b.n	800a1b8 <_dtoa_r+0x818>
 800a292:	4603      	mov	r3, r0
 800a294:	e7f6      	b.n	800a284 <_dtoa_r+0x8e4>
 800a296:	9b07      	ldr	r3, [sp, #28]
 800a298:	9704      	str	r7, [sp, #16]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	dc20      	bgt.n	800a2e0 <_dtoa_r+0x940>
 800a29e:	9300      	str	r3, [sp, #0]
 800a2a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	dd1e      	ble.n	800a2e4 <_dtoa_r+0x944>
 800a2a6:	9b00      	ldr	r3, [sp, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	f47f aec0 	bne.w	800a02e <_dtoa_r+0x68e>
 800a2ae:	4621      	mov	r1, r4
 800a2b0:	2205      	movs	r2, #5
 800a2b2:	4658      	mov	r0, fp
 800a2b4:	f000 fde6 	bl	800ae84 <__multadd>
 800a2b8:	4601      	mov	r1, r0
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	4648      	mov	r0, r9
 800a2be:	f001 f843 	bl	800b348 <__mcmp>
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	f77f aeb3 	ble.w	800a02e <_dtoa_r+0x68e>
 800a2c8:	4656      	mov	r6, sl
 800a2ca:	2331      	movs	r3, #49	@ 0x31
 800a2cc:	f806 3b01 	strb.w	r3, [r6], #1
 800a2d0:	9b04      	ldr	r3, [sp, #16]
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	9304      	str	r3, [sp, #16]
 800a2d6:	e6ae      	b.n	800a036 <_dtoa_r+0x696>
 800a2d8:	9c07      	ldr	r4, [sp, #28]
 800a2da:	9704      	str	r7, [sp, #16]
 800a2dc:	4625      	mov	r5, r4
 800a2de:	e7f3      	b.n	800a2c8 <_dtoa_r+0x928>
 800a2e0:	9b07      	ldr	r3, [sp, #28]
 800a2e2:	9300      	str	r3, [sp, #0]
 800a2e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	f000 8104 	beq.w	800a4f4 <_dtoa_r+0xb54>
 800a2ec:	2e00      	cmp	r6, #0
 800a2ee:	dd05      	ble.n	800a2fc <_dtoa_r+0x95c>
 800a2f0:	4629      	mov	r1, r5
 800a2f2:	4632      	mov	r2, r6
 800a2f4:	4658      	mov	r0, fp
 800a2f6:	f000 ffbb 	bl	800b270 <__lshift>
 800a2fa:	4605      	mov	r5, r0
 800a2fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d05a      	beq.n	800a3b8 <_dtoa_r+0xa18>
 800a302:	6869      	ldr	r1, [r5, #4]
 800a304:	4658      	mov	r0, fp
 800a306:	f000 fd5b 	bl	800adc0 <_Balloc>
 800a30a:	4606      	mov	r6, r0
 800a30c:	b928      	cbnz	r0, 800a31a <_dtoa_r+0x97a>
 800a30e:	4b84      	ldr	r3, [pc, #528]	@ (800a520 <_dtoa_r+0xb80>)
 800a310:	4602      	mov	r2, r0
 800a312:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a316:	f7ff bb5a 	b.w	80099ce <_dtoa_r+0x2e>
 800a31a:	692a      	ldr	r2, [r5, #16]
 800a31c:	3202      	adds	r2, #2
 800a31e:	0092      	lsls	r2, r2, #2
 800a320:	f105 010c 	add.w	r1, r5, #12
 800a324:	300c      	adds	r0, #12
 800a326:	f7ff fa7a 	bl	800981e <memcpy>
 800a32a:	2201      	movs	r2, #1
 800a32c:	4631      	mov	r1, r6
 800a32e:	4658      	mov	r0, fp
 800a330:	f000 ff9e 	bl	800b270 <__lshift>
 800a334:	f10a 0301 	add.w	r3, sl, #1
 800a338:	9307      	str	r3, [sp, #28]
 800a33a:	9b00      	ldr	r3, [sp, #0]
 800a33c:	4453      	add	r3, sl
 800a33e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a340:	9b02      	ldr	r3, [sp, #8]
 800a342:	f003 0301 	and.w	r3, r3, #1
 800a346:	462f      	mov	r7, r5
 800a348:	930a      	str	r3, [sp, #40]	@ 0x28
 800a34a:	4605      	mov	r5, r0
 800a34c:	9b07      	ldr	r3, [sp, #28]
 800a34e:	4621      	mov	r1, r4
 800a350:	3b01      	subs	r3, #1
 800a352:	4648      	mov	r0, r9
 800a354:	9300      	str	r3, [sp, #0]
 800a356:	f7ff fa99 	bl	800988c <quorem>
 800a35a:	4639      	mov	r1, r7
 800a35c:	9002      	str	r0, [sp, #8]
 800a35e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a362:	4648      	mov	r0, r9
 800a364:	f000 fff0 	bl	800b348 <__mcmp>
 800a368:	462a      	mov	r2, r5
 800a36a:	9008      	str	r0, [sp, #32]
 800a36c:	4621      	mov	r1, r4
 800a36e:	4658      	mov	r0, fp
 800a370:	f001 f806 	bl	800b380 <__mdiff>
 800a374:	68c2      	ldr	r2, [r0, #12]
 800a376:	4606      	mov	r6, r0
 800a378:	bb02      	cbnz	r2, 800a3bc <_dtoa_r+0xa1c>
 800a37a:	4601      	mov	r1, r0
 800a37c:	4648      	mov	r0, r9
 800a37e:	f000 ffe3 	bl	800b348 <__mcmp>
 800a382:	4602      	mov	r2, r0
 800a384:	4631      	mov	r1, r6
 800a386:	4658      	mov	r0, fp
 800a388:	920e      	str	r2, [sp, #56]	@ 0x38
 800a38a:	f000 fd59 	bl	800ae40 <_Bfree>
 800a38e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a390:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a392:	9e07      	ldr	r6, [sp, #28]
 800a394:	ea43 0102 	orr.w	r1, r3, r2
 800a398:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a39a:	4319      	orrs	r1, r3
 800a39c:	d110      	bne.n	800a3c0 <_dtoa_r+0xa20>
 800a39e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a3a2:	d029      	beq.n	800a3f8 <_dtoa_r+0xa58>
 800a3a4:	9b08      	ldr	r3, [sp, #32]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	dd02      	ble.n	800a3b0 <_dtoa_r+0xa10>
 800a3aa:	9b02      	ldr	r3, [sp, #8]
 800a3ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a3b0:	9b00      	ldr	r3, [sp, #0]
 800a3b2:	f883 8000 	strb.w	r8, [r3]
 800a3b6:	e63f      	b.n	800a038 <_dtoa_r+0x698>
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	e7bb      	b.n	800a334 <_dtoa_r+0x994>
 800a3bc:	2201      	movs	r2, #1
 800a3be:	e7e1      	b.n	800a384 <_dtoa_r+0x9e4>
 800a3c0:	9b08      	ldr	r3, [sp, #32]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	db04      	blt.n	800a3d0 <_dtoa_r+0xa30>
 800a3c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a3c8:	430b      	orrs	r3, r1
 800a3ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a3cc:	430b      	orrs	r3, r1
 800a3ce:	d120      	bne.n	800a412 <_dtoa_r+0xa72>
 800a3d0:	2a00      	cmp	r2, #0
 800a3d2:	dded      	ble.n	800a3b0 <_dtoa_r+0xa10>
 800a3d4:	4649      	mov	r1, r9
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	4658      	mov	r0, fp
 800a3da:	f000 ff49 	bl	800b270 <__lshift>
 800a3de:	4621      	mov	r1, r4
 800a3e0:	4681      	mov	r9, r0
 800a3e2:	f000 ffb1 	bl	800b348 <__mcmp>
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	dc03      	bgt.n	800a3f2 <_dtoa_r+0xa52>
 800a3ea:	d1e1      	bne.n	800a3b0 <_dtoa_r+0xa10>
 800a3ec:	f018 0f01 	tst.w	r8, #1
 800a3f0:	d0de      	beq.n	800a3b0 <_dtoa_r+0xa10>
 800a3f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a3f6:	d1d8      	bne.n	800a3aa <_dtoa_r+0xa0a>
 800a3f8:	9a00      	ldr	r2, [sp, #0]
 800a3fa:	2339      	movs	r3, #57	@ 0x39
 800a3fc:	7013      	strb	r3, [r2, #0]
 800a3fe:	4633      	mov	r3, r6
 800a400:	461e      	mov	r6, r3
 800a402:	3b01      	subs	r3, #1
 800a404:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a408:	2a39      	cmp	r2, #57	@ 0x39
 800a40a:	d052      	beq.n	800a4b2 <_dtoa_r+0xb12>
 800a40c:	3201      	adds	r2, #1
 800a40e:	701a      	strb	r2, [r3, #0]
 800a410:	e612      	b.n	800a038 <_dtoa_r+0x698>
 800a412:	2a00      	cmp	r2, #0
 800a414:	dd07      	ble.n	800a426 <_dtoa_r+0xa86>
 800a416:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a41a:	d0ed      	beq.n	800a3f8 <_dtoa_r+0xa58>
 800a41c:	9a00      	ldr	r2, [sp, #0]
 800a41e:	f108 0301 	add.w	r3, r8, #1
 800a422:	7013      	strb	r3, [r2, #0]
 800a424:	e608      	b.n	800a038 <_dtoa_r+0x698>
 800a426:	9b07      	ldr	r3, [sp, #28]
 800a428:	9a07      	ldr	r2, [sp, #28]
 800a42a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a42e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a430:	4293      	cmp	r3, r2
 800a432:	d028      	beq.n	800a486 <_dtoa_r+0xae6>
 800a434:	4649      	mov	r1, r9
 800a436:	2300      	movs	r3, #0
 800a438:	220a      	movs	r2, #10
 800a43a:	4658      	mov	r0, fp
 800a43c:	f000 fd22 	bl	800ae84 <__multadd>
 800a440:	42af      	cmp	r7, r5
 800a442:	4681      	mov	r9, r0
 800a444:	f04f 0300 	mov.w	r3, #0
 800a448:	f04f 020a 	mov.w	r2, #10
 800a44c:	4639      	mov	r1, r7
 800a44e:	4658      	mov	r0, fp
 800a450:	d107      	bne.n	800a462 <_dtoa_r+0xac2>
 800a452:	f000 fd17 	bl	800ae84 <__multadd>
 800a456:	4607      	mov	r7, r0
 800a458:	4605      	mov	r5, r0
 800a45a:	9b07      	ldr	r3, [sp, #28]
 800a45c:	3301      	adds	r3, #1
 800a45e:	9307      	str	r3, [sp, #28]
 800a460:	e774      	b.n	800a34c <_dtoa_r+0x9ac>
 800a462:	f000 fd0f 	bl	800ae84 <__multadd>
 800a466:	4629      	mov	r1, r5
 800a468:	4607      	mov	r7, r0
 800a46a:	2300      	movs	r3, #0
 800a46c:	220a      	movs	r2, #10
 800a46e:	4658      	mov	r0, fp
 800a470:	f000 fd08 	bl	800ae84 <__multadd>
 800a474:	4605      	mov	r5, r0
 800a476:	e7f0      	b.n	800a45a <_dtoa_r+0xaba>
 800a478:	9b00      	ldr	r3, [sp, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	bfcc      	ite	gt
 800a47e:	461e      	movgt	r6, r3
 800a480:	2601      	movle	r6, #1
 800a482:	4456      	add	r6, sl
 800a484:	2700      	movs	r7, #0
 800a486:	4649      	mov	r1, r9
 800a488:	2201      	movs	r2, #1
 800a48a:	4658      	mov	r0, fp
 800a48c:	f000 fef0 	bl	800b270 <__lshift>
 800a490:	4621      	mov	r1, r4
 800a492:	4681      	mov	r9, r0
 800a494:	f000 ff58 	bl	800b348 <__mcmp>
 800a498:	2800      	cmp	r0, #0
 800a49a:	dcb0      	bgt.n	800a3fe <_dtoa_r+0xa5e>
 800a49c:	d102      	bne.n	800a4a4 <_dtoa_r+0xb04>
 800a49e:	f018 0f01 	tst.w	r8, #1
 800a4a2:	d1ac      	bne.n	800a3fe <_dtoa_r+0xa5e>
 800a4a4:	4633      	mov	r3, r6
 800a4a6:	461e      	mov	r6, r3
 800a4a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4ac:	2a30      	cmp	r2, #48	@ 0x30
 800a4ae:	d0fa      	beq.n	800a4a6 <_dtoa_r+0xb06>
 800a4b0:	e5c2      	b.n	800a038 <_dtoa_r+0x698>
 800a4b2:	459a      	cmp	sl, r3
 800a4b4:	d1a4      	bne.n	800a400 <_dtoa_r+0xa60>
 800a4b6:	9b04      	ldr	r3, [sp, #16]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	9304      	str	r3, [sp, #16]
 800a4bc:	2331      	movs	r3, #49	@ 0x31
 800a4be:	f88a 3000 	strb.w	r3, [sl]
 800a4c2:	e5b9      	b.n	800a038 <_dtoa_r+0x698>
 800a4c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a4c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a524 <_dtoa_r+0xb84>
 800a4ca:	b11b      	cbz	r3, 800a4d4 <_dtoa_r+0xb34>
 800a4cc:	f10a 0308 	add.w	r3, sl, #8
 800a4d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a4d2:	6013      	str	r3, [r2, #0]
 800a4d4:	4650      	mov	r0, sl
 800a4d6:	b019      	add	sp, #100	@ 0x64
 800a4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	f77f ae37 	ble.w	800a152 <_dtoa_r+0x7b2>
 800a4e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4e8:	2001      	movs	r0, #1
 800a4ea:	e655      	b.n	800a198 <_dtoa_r+0x7f8>
 800a4ec:	9b00      	ldr	r3, [sp, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	f77f aed6 	ble.w	800a2a0 <_dtoa_r+0x900>
 800a4f4:	4656      	mov	r6, sl
 800a4f6:	4621      	mov	r1, r4
 800a4f8:	4648      	mov	r0, r9
 800a4fa:	f7ff f9c7 	bl	800988c <quorem>
 800a4fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a502:	f806 8b01 	strb.w	r8, [r6], #1
 800a506:	9b00      	ldr	r3, [sp, #0]
 800a508:	eba6 020a 	sub.w	r2, r6, sl
 800a50c:	4293      	cmp	r3, r2
 800a50e:	ddb3      	ble.n	800a478 <_dtoa_r+0xad8>
 800a510:	4649      	mov	r1, r9
 800a512:	2300      	movs	r3, #0
 800a514:	220a      	movs	r2, #10
 800a516:	4658      	mov	r0, fp
 800a518:	f000 fcb4 	bl	800ae84 <__multadd>
 800a51c:	4681      	mov	r9, r0
 800a51e:	e7ea      	b.n	800a4f6 <_dtoa_r+0xb56>
 800a520:	0800c147 	.word	0x0800c147
 800a524:	0800c0e2 	.word	0x0800c0e2

0800a528 <_free_r>:
 800a528:	b538      	push	{r3, r4, r5, lr}
 800a52a:	4605      	mov	r5, r0
 800a52c:	2900      	cmp	r1, #0
 800a52e:	d041      	beq.n	800a5b4 <_free_r+0x8c>
 800a530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a534:	1f0c      	subs	r4, r1, #4
 800a536:	2b00      	cmp	r3, #0
 800a538:	bfb8      	it	lt
 800a53a:	18e4      	addlt	r4, r4, r3
 800a53c:	f000 fc34 	bl	800ada8 <__malloc_lock>
 800a540:	4a1d      	ldr	r2, [pc, #116]	@ (800a5b8 <_free_r+0x90>)
 800a542:	6813      	ldr	r3, [r2, #0]
 800a544:	b933      	cbnz	r3, 800a554 <_free_r+0x2c>
 800a546:	6063      	str	r3, [r4, #4]
 800a548:	6014      	str	r4, [r2, #0]
 800a54a:	4628      	mov	r0, r5
 800a54c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a550:	f000 bc30 	b.w	800adb4 <__malloc_unlock>
 800a554:	42a3      	cmp	r3, r4
 800a556:	d908      	bls.n	800a56a <_free_r+0x42>
 800a558:	6820      	ldr	r0, [r4, #0]
 800a55a:	1821      	adds	r1, r4, r0
 800a55c:	428b      	cmp	r3, r1
 800a55e:	bf01      	itttt	eq
 800a560:	6819      	ldreq	r1, [r3, #0]
 800a562:	685b      	ldreq	r3, [r3, #4]
 800a564:	1809      	addeq	r1, r1, r0
 800a566:	6021      	streq	r1, [r4, #0]
 800a568:	e7ed      	b.n	800a546 <_free_r+0x1e>
 800a56a:	461a      	mov	r2, r3
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	b10b      	cbz	r3, 800a574 <_free_r+0x4c>
 800a570:	42a3      	cmp	r3, r4
 800a572:	d9fa      	bls.n	800a56a <_free_r+0x42>
 800a574:	6811      	ldr	r1, [r2, #0]
 800a576:	1850      	adds	r0, r2, r1
 800a578:	42a0      	cmp	r0, r4
 800a57a:	d10b      	bne.n	800a594 <_free_r+0x6c>
 800a57c:	6820      	ldr	r0, [r4, #0]
 800a57e:	4401      	add	r1, r0
 800a580:	1850      	adds	r0, r2, r1
 800a582:	4283      	cmp	r3, r0
 800a584:	6011      	str	r1, [r2, #0]
 800a586:	d1e0      	bne.n	800a54a <_free_r+0x22>
 800a588:	6818      	ldr	r0, [r3, #0]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	6053      	str	r3, [r2, #4]
 800a58e:	4408      	add	r0, r1
 800a590:	6010      	str	r0, [r2, #0]
 800a592:	e7da      	b.n	800a54a <_free_r+0x22>
 800a594:	d902      	bls.n	800a59c <_free_r+0x74>
 800a596:	230c      	movs	r3, #12
 800a598:	602b      	str	r3, [r5, #0]
 800a59a:	e7d6      	b.n	800a54a <_free_r+0x22>
 800a59c:	6820      	ldr	r0, [r4, #0]
 800a59e:	1821      	adds	r1, r4, r0
 800a5a0:	428b      	cmp	r3, r1
 800a5a2:	bf04      	itt	eq
 800a5a4:	6819      	ldreq	r1, [r3, #0]
 800a5a6:	685b      	ldreq	r3, [r3, #4]
 800a5a8:	6063      	str	r3, [r4, #4]
 800a5aa:	bf04      	itt	eq
 800a5ac:	1809      	addeq	r1, r1, r0
 800a5ae:	6021      	streq	r1, [r4, #0]
 800a5b0:	6054      	str	r4, [r2, #4]
 800a5b2:	e7ca      	b.n	800a54a <_free_r+0x22>
 800a5b4:	bd38      	pop	{r3, r4, r5, pc}
 800a5b6:	bf00      	nop
 800a5b8:	20000da4 	.word	0x20000da4

0800a5bc <rshift>:
 800a5bc:	6903      	ldr	r3, [r0, #16]
 800a5be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a5c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a5c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a5ca:	f100 0414 	add.w	r4, r0, #20
 800a5ce:	dd45      	ble.n	800a65c <rshift+0xa0>
 800a5d0:	f011 011f 	ands.w	r1, r1, #31
 800a5d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a5d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a5dc:	d10c      	bne.n	800a5f8 <rshift+0x3c>
 800a5de:	f100 0710 	add.w	r7, r0, #16
 800a5e2:	4629      	mov	r1, r5
 800a5e4:	42b1      	cmp	r1, r6
 800a5e6:	d334      	bcc.n	800a652 <rshift+0x96>
 800a5e8:	1a9b      	subs	r3, r3, r2
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	1eea      	subs	r2, r5, #3
 800a5ee:	4296      	cmp	r6, r2
 800a5f0:	bf38      	it	cc
 800a5f2:	2300      	movcc	r3, #0
 800a5f4:	4423      	add	r3, r4
 800a5f6:	e015      	b.n	800a624 <rshift+0x68>
 800a5f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a5fc:	f1c1 0820 	rsb	r8, r1, #32
 800a600:	40cf      	lsrs	r7, r1
 800a602:	f105 0e04 	add.w	lr, r5, #4
 800a606:	46a1      	mov	r9, r4
 800a608:	4576      	cmp	r6, lr
 800a60a:	46f4      	mov	ip, lr
 800a60c:	d815      	bhi.n	800a63a <rshift+0x7e>
 800a60e:	1a9a      	subs	r2, r3, r2
 800a610:	0092      	lsls	r2, r2, #2
 800a612:	3a04      	subs	r2, #4
 800a614:	3501      	adds	r5, #1
 800a616:	42ae      	cmp	r6, r5
 800a618:	bf38      	it	cc
 800a61a:	2200      	movcc	r2, #0
 800a61c:	18a3      	adds	r3, r4, r2
 800a61e:	50a7      	str	r7, [r4, r2]
 800a620:	b107      	cbz	r7, 800a624 <rshift+0x68>
 800a622:	3304      	adds	r3, #4
 800a624:	1b1a      	subs	r2, r3, r4
 800a626:	42a3      	cmp	r3, r4
 800a628:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a62c:	bf08      	it	eq
 800a62e:	2300      	moveq	r3, #0
 800a630:	6102      	str	r2, [r0, #16]
 800a632:	bf08      	it	eq
 800a634:	6143      	streq	r3, [r0, #20]
 800a636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a63a:	f8dc c000 	ldr.w	ip, [ip]
 800a63e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a642:	ea4c 0707 	orr.w	r7, ip, r7
 800a646:	f849 7b04 	str.w	r7, [r9], #4
 800a64a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a64e:	40cf      	lsrs	r7, r1
 800a650:	e7da      	b.n	800a608 <rshift+0x4c>
 800a652:	f851 cb04 	ldr.w	ip, [r1], #4
 800a656:	f847 cf04 	str.w	ip, [r7, #4]!
 800a65a:	e7c3      	b.n	800a5e4 <rshift+0x28>
 800a65c:	4623      	mov	r3, r4
 800a65e:	e7e1      	b.n	800a624 <rshift+0x68>

0800a660 <__hexdig_fun>:
 800a660:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a664:	2b09      	cmp	r3, #9
 800a666:	d802      	bhi.n	800a66e <__hexdig_fun+0xe>
 800a668:	3820      	subs	r0, #32
 800a66a:	b2c0      	uxtb	r0, r0
 800a66c:	4770      	bx	lr
 800a66e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a672:	2b05      	cmp	r3, #5
 800a674:	d801      	bhi.n	800a67a <__hexdig_fun+0x1a>
 800a676:	3847      	subs	r0, #71	@ 0x47
 800a678:	e7f7      	b.n	800a66a <__hexdig_fun+0xa>
 800a67a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a67e:	2b05      	cmp	r3, #5
 800a680:	d801      	bhi.n	800a686 <__hexdig_fun+0x26>
 800a682:	3827      	subs	r0, #39	@ 0x27
 800a684:	e7f1      	b.n	800a66a <__hexdig_fun+0xa>
 800a686:	2000      	movs	r0, #0
 800a688:	4770      	bx	lr
	...

0800a68c <__gethex>:
 800a68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a690:	b085      	sub	sp, #20
 800a692:	468a      	mov	sl, r1
 800a694:	9302      	str	r3, [sp, #8]
 800a696:	680b      	ldr	r3, [r1, #0]
 800a698:	9001      	str	r0, [sp, #4]
 800a69a:	4690      	mov	r8, r2
 800a69c:	1c9c      	adds	r4, r3, #2
 800a69e:	46a1      	mov	r9, r4
 800a6a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a6a4:	2830      	cmp	r0, #48	@ 0x30
 800a6a6:	d0fa      	beq.n	800a69e <__gethex+0x12>
 800a6a8:	eba9 0303 	sub.w	r3, r9, r3
 800a6ac:	f1a3 0b02 	sub.w	fp, r3, #2
 800a6b0:	f7ff ffd6 	bl	800a660 <__hexdig_fun>
 800a6b4:	4605      	mov	r5, r0
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	d168      	bne.n	800a78c <__gethex+0x100>
 800a6ba:	49a0      	ldr	r1, [pc, #640]	@ (800a93c <__gethex+0x2b0>)
 800a6bc:	2201      	movs	r2, #1
 800a6be:	4648      	mov	r0, r9
 800a6c0:	f7fe ffc7 	bl	8009652 <strncmp>
 800a6c4:	4607      	mov	r7, r0
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	d167      	bne.n	800a79a <__gethex+0x10e>
 800a6ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a6ce:	4626      	mov	r6, r4
 800a6d0:	f7ff ffc6 	bl	800a660 <__hexdig_fun>
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d062      	beq.n	800a79e <__gethex+0x112>
 800a6d8:	4623      	mov	r3, r4
 800a6da:	7818      	ldrb	r0, [r3, #0]
 800a6dc:	2830      	cmp	r0, #48	@ 0x30
 800a6de:	4699      	mov	r9, r3
 800a6e0:	f103 0301 	add.w	r3, r3, #1
 800a6e4:	d0f9      	beq.n	800a6da <__gethex+0x4e>
 800a6e6:	f7ff ffbb 	bl	800a660 <__hexdig_fun>
 800a6ea:	fab0 f580 	clz	r5, r0
 800a6ee:	096d      	lsrs	r5, r5, #5
 800a6f0:	f04f 0b01 	mov.w	fp, #1
 800a6f4:	464a      	mov	r2, r9
 800a6f6:	4616      	mov	r6, r2
 800a6f8:	3201      	adds	r2, #1
 800a6fa:	7830      	ldrb	r0, [r6, #0]
 800a6fc:	f7ff ffb0 	bl	800a660 <__hexdig_fun>
 800a700:	2800      	cmp	r0, #0
 800a702:	d1f8      	bne.n	800a6f6 <__gethex+0x6a>
 800a704:	498d      	ldr	r1, [pc, #564]	@ (800a93c <__gethex+0x2b0>)
 800a706:	2201      	movs	r2, #1
 800a708:	4630      	mov	r0, r6
 800a70a:	f7fe ffa2 	bl	8009652 <strncmp>
 800a70e:	2800      	cmp	r0, #0
 800a710:	d13f      	bne.n	800a792 <__gethex+0x106>
 800a712:	b944      	cbnz	r4, 800a726 <__gethex+0x9a>
 800a714:	1c74      	adds	r4, r6, #1
 800a716:	4622      	mov	r2, r4
 800a718:	4616      	mov	r6, r2
 800a71a:	3201      	adds	r2, #1
 800a71c:	7830      	ldrb	r0, [r6, #0]
 800a71e:	f7ff ff9f 	bl	800a660 <__hexdig_fun>
 800a722:	2800      	cmp	r0, #0
 800a724:	d1f8      	bne.n	800a718 <__gethex+0x8c>
 800a726:	1ba4      	subs	r4, r4, r6
 800a728:	00a7      	lsls	r7, r4, #2
 800a72a:	7833      	ldrb	r3, [r6, #0]
 800a72c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a730:	2b50      	cmp	r3, #80	@ 0x50
 800a732:	d13e      	bne.n	800a7b2 <__gethex+0x126>
 800a734:	7873      	ldrb	r3, [r6, #1]
 800a736:	2b2b      	cmp	r3, #43	@ 0x2b
 800a738:	d033      	beq.n	800a7a2 <__gethex+0x116>
 800a73a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a73c:	d034      	beq.n	800a7a8 <__gethex+0x11c>
 800a73e:	1c71      	adds	r1, r6, #1
 800a740:	2400      	movs	r4, #0
 800a742:	7808      	ldrb	r0, [r1, #0]
 800a744:	f7ff ff8c 	bl	800a660 <__hexdig_fun>
 800a748:	1e43      	subs	r3, r0, #1
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	2b18      	cmp	r3, #24
 800a74e:	d830      	bhi.n	800a7b2 <__gethex+0x126>
 800a750:	f1a0 0210 	sub.w	r2, r0, #16
 800a754:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a758:	f7ff ff82 	bl	800a660 <__hexdig_fun>
 800a75c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a760:	fa5f fc8c 	uxtb.w	ip, ip
 800a764:	f1bc 0f18 	cmp.w	ip, #24
 800a768:	f04f 030a 	mov.w	r3, #10
 800a76c:	d91e      	bls.n	800a7ac <__gethex+0x120>
 800a76e:	b104      	cbz	r4, 800a772 <__gethex+0xe6>
 800a770:	4252      	negs	r2, r2
 800a772:	4417      	add	r7, r2
 800a774:	f8ca 1000 	str.w	r1, [sl]
 800a778:	b1ed      	cbz	r5, 800a7b6 <__gethex+0x12a>
 800a77a:	f1bb 0f00 	cmp.w	fp, #0
 800a77e:	bf0c      	ite	eq
 800a780:	2506      	moveq	r5, #6
 800a782:	2500      	movne	r5, #0
 800a784:	4628      	mov	r0, r5
 800a786:	b005      	add	sp, #20
 800a788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a78c:	2500      	movs	r5, #0
 800a78e:	462c      	mov	r4, r5
 800a790:	e7b0      	b.n	800a6f4 <__gethex+0x68>
 800a792:	2c00      	cmp	r4, #0
 800a794:	d1c7      	bne.n	800a726 <__gethex+0x9a>
 800a796:	4627      	mov	r7, r4
 800a798:	e7c7      	b.n	800a72a <__gethex+0x9e>
 800a79a:	464e      	mov	r6, r9
 800a79c:	462f      	mov	r7, r5
 800a79e:	2501      	movs	r5, #1
 800a7a0:	e7c3      	b.n	800a72a <__gethex+0x9e>
 800a7a2:	2400      	movs	r4, #0
 800a7a4:	1cb1      	adds	r1, r6, #2
 800a7a6:	e7cc      	b.n	800a742 <__gethex+0xb6>
 800a7a8:	2401      	movs	r4, #1
 800a7aa:	e7fb      	b.n	800a7a4 <__gethex+0x118>
 800a7ac:	fb03 0002 	mla	r0, r3, r2, r0
 800a7b0:	e7ce      	b.n	800a750 <__gethex+0xc4>
 800a7b2:	4631      	mov	r1, r6
 800a7b4:	e7de      	b.n	800a774 <__gethex+0xe8>
 800a7b6:	eba6 0309 	sub.w	r3, r6, r9
 800a7ba:	3b01      	subs	r3, #1
 800a7bc:	4629      	mov	r1, r5
 800a7be:	2b07      	cmp	r3, #7
 800a7c0:	dc0a      	bgt.n	800a7d8 <__gethex+0x14c>
 800a7c2:	9801      	ldr	r0, [sp, #4]
 800a7c4:	f000 fafc 	bl	800adc0 <_Balloc>
 800a7c8:	4604      	mov	r4, r0
 800a7ca:	b940      	cbnz	r0, 800a7de <__gethex+0x152>
 800a7cc:	4b5c      	ldr	r3, [pc, #368]	@ (800a940 <__gethex+0x2b4>)
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	21e4      	movs	r1, #228	@ 0xe4
 800a7d2:	485c      	ldr	r0, [pc, #368]	@ (800a944 <__gethex+0x2b8>)
 800a7d4:	f7ff f83c 	bl	8009850 <__assert_func>
 800a7d8:	3101      	adds	r1, #1
 800a7da:	105b      	asrs	r3, r3, #1
 800a7dc:	e7ef      	b.n	800a7be <__gethex+0x132>
 800a7de:	f100 0a14 	add.w	sl, r0, #20
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	4655      	mov	r5, sl
 800a7e6:	469b      	mov	fp, r3
 800a7e8:	45b1      	cmp	r9, r6
 800a7ea:	d337      	bcc.n	800a85c <__gethex+0x1d0>
 800a7ec:	f845 bb04 	str.w	fp, [r5], #4
 800a7f0:	eba5 050a 	sub.w	r5, r5, sl
 800a7f4:	10ad      	asrs	r5, r5, #2
 800a7f6:	6125      	str	r5, [r4, #16]
 800a7f8:	4658      	mov	r0, fp
 800a7fa:	f000 fbd3 	bl	800afa4 <__hi0bits>
 800a7fe:	016d      	lsls	r5, r5, #5
 800a800:	f8d8 6000 	ldr.w	r6, [r8]
 800a804:	1a2d      	subs	r5, r5, r0
 800a806:	42b5      	cmp	r5, r6
 800a808:	dd54      	ble.n	800a8b4 <__gethex+0x228>
 800a80a:	1bad      	subs	r5, r5, r6
 800a80c:	4629      	mov	r1, r5
 800a80e:	4620      	mov	r0, r4
 800a810:	f000 ff67 	bl	800b6e2 <__any_on>
 800a814:	4681      	mov	r9, r0
 800a816:	b178      	cbz	r0, 800a838 <__gethex+0x1ac>
 800a818:	1e6b      	subs	r3, r5, #1
 800a81a:	1159      	asrs	r1, r3, #5
 800a81c:	f003 021f 	and.w	r2, r3, #31
 800a820:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a824:	f04f 0901 	mov.w	r9, #1
 800a828:	fa09 f202 	lsl.w	r2, r9, r2
 800a82c:	420a      	tst	r2, r1
 800a82e:	d003      	beq.n	800a838 <__gethex+0x1ac>
 800a830:	454b      	cmp	r3, r9
 800a832:	dc36      	bgt.n	800a8a2 <__gethex+0x216>
 800a834:	f04f 0902 	mov.w	r9, #2
 800a838:	4629      	mov	r1, r5
 800a83a:	4620      	mov	r0, r4
 800a83c:	f7ff febe 	bl	800a5bc <rshift>
 800a840:	442f      	add	r7, r5
 800a842:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a846:	42bb      	cmp	r3, r7
 800a848:	da42      	bge.n	800a8d0 <__gethex+0x244>
 800a84a:	9801      	ldr	r0, [sp, #4]
 800a84c:	4621      	mov	r1, r4
 800a84e:	f000 faf7 	bl	800ae40 <_Bfree>
 800a852:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a854:	2300      	movs	r3, #0
 800a856:	6013      	str	r3, [r2, #0]
 800a858:	25a3      	movs	r5, #163	@ 0xa3
 800a85a:	e793      	b.n	800a784 <__gethex+0xf8>
 800a85c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a860:	2a2e      	cmp	r2, #46	@ 0x2e
 800a862:	d012      	beq.n	800a88a <__gethex+0x1fe>
 800a864:	2b20      	cmp	r3, #32
 800a866:	d104      	bne.n	800a872 <__gethex+0x1e6>
 800a868:	f845 bb04 	str.w	fp, [r5], #4
 800a86c:	f04f 0b00 	mov.w	fp, #0
 800a870:	465b      	mov	r3, fp
 800a872:	7830      	ldrb	r0, [r6, #0]
 800a874:	9303      	str	r3, [sp, #12]
 800a876:	f7ff fef3 	bl	800a660 <__hexdig_fun>
 800a87a:	9b03      	ldr	r3, [sp, #12]
 800a87c:	f000 000f 	and.w	r0, r0, #15
 800a880:	4098      	lsls	r0, r3
 800a882:	ea4b 0b00 	orr.w	fp, fp, r0
 800a886:	3304      	adds	r3, #4
 800a888:	e7ae      	b.n	800a7e8 <__gethex+0x15c>
 800a88a:	45b1      	cmp	r9, r6
 800a88c:	d8ea      	bhi.n	800a864 <__gethex+0x1d8>
 800a88e:	492b      	ldr	r1, [pc, #172]	@ (800a93c <__gethex+0x2b0>)
 800a890:	9303      	str	r3, [sp, #12]
 800a892:	2201      	movs	r2, #1
 800a894:	4630      	mov	r0, r6
 800a896:	f7fe fedc 	bl	8009652 <strncmp>
 800a89a:	9b03      	ldr	r3, [sp, #12]
 800a89c:	2800      	cmp	r0, #0
 800a89e:	d1e1      	bne.n	800a864 <__gethex+0x1d8>
 800a8a0:	e7a2      	b.n	800a7e8 <__gethex+0x15c>
 800a8a2:	1ea9      	subs	r1, r5, #2
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	f000 ff1c 	bl	800b6e2 <__any_on>
 800a8aa:	2800      	cmp	r0, #0
 800a8ac:	d0c2      	beq.n	800a834 <__gethex+0x1a8>
 800a8ae:	f04f 0903 	mov.w	r9, #3
 800a8b2:	e7c1      	b.n	800a838 <__gethex+0x1ac>
 800a8b4:	da09      	bge.n	800a8ca <__gethex+0x23e>
 800a8b6:	1b75      	subs	r5, r6, r5
 800a8b8:	4621      	mov	r1, r4
 800a8ba:	9801      	ldr	r0, [sp, #4]
 800a8bc:	462a      	mov	r2, r5
 800a8be:	f000 fcd7 	bl	800b270 <__lshift>
 800a8c2:	1b7f      	subs	r7, r7, r5
 800a8c4:	4604      	mov	r4, r0
 800a8c6:	f100 0a14 	add.w	sl, r0, #20
 800a8ca:	f04f 0900 	mov.w	r9, #0
 800a8ce:	e7b8      	b.n	800a842 <__gethex+0x1b6>
 800a8d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a8d4:	42bd      	cmp	r5, r7
 800a8d6:	dd6f      	ble.n	800a9b8 <__gethex+0x32c>
 800a8d8:	1bed      	subs	r5, r5, r7
 800a8da:	42ae      	cmp	r6, r5
 800a8dc:	dc34      	bgt.n	800a948 <__gethex+0x2bc>
 800a8de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a8e2:	2b02      	cmp	r3, #2
 800a8e4:	d022      	beq.n	800a92c <__gethex+0x2a0>
 800a8e6:	2b03      	cmp	r3, #3
 800a8e8:	d024      	beq.n	800a934 <__gethex+0x2a8>
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d115      	bne.n	800a91a <__gethex+0x28e>
 800a8ee:	42ae      	cmp	r6, r5
 800a8f0:	d113      	bne.n	800a91a <__gethex+0x28e>
 800a8f2:	2e01      	cmp	r6, #1
 800a8f4:	d10b      	bne.n	800a90e <__gethex+0x282>
 800a8f6:	9a02      	ldr	r2, [sp, #8]
 800a8f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a8fc:	6013      	str	r3, [r2, #0]
 800a8fe:	2301      	movs	r3, #1
 800a900:	6123      	str	r3, [r4, #16]
 800a902:	f8ca 3000 	str.w	r3, [sl]
 800a906:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a908:	2562      	movs	r5, #98	@ 0x62
 800a90a:	601c      	str	r4, [r3, #0]
 800a90c:	e73a      	b.n	800a784 <__gethex+0xf8>
 800a90e:	1e71      	subs	r1, r6, #1
 800a910:	4620      	mov	r0, r4
 800a912:	f000 fee6 	bl	800b6e2 <__any_on>
 800a916:	2800      	cmp	r0, #0
 800a918:	d1ed      	bne.n	800a8f6 <__gethex+0x26a>
 800a91a:	9801      	ldr	r0, [sp, #4]
 800a91c:	4621      	mov	r1, r4
 800a91e:	f000 fa8f 	bl	800ae40 <_Bfree>
 800a922:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a924:	2300      	movs	r3, #0
 800a926:	6013      	str	r3, [r2, #0]
 800a928:	2550      	movs	r5, #80	@ 0x50
 800a92a:	e72b      	b.n	800a784 <__gethex+0xf8>
 800a92c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d1f3      	bne.n	800a91a <__gethex+0x28e>
 800a932:	e7e0      	b.n	800a8f6 <__gethex+0x26a>
 800a934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a936:	2b00      	cmp	r3, #0
 800a938:	d1dd      	bne.n	800a8f6 <__gethex+0x26a>
 800a93a:	e7ee      	b.n	800a91a <__gethex+0x28e>
 800a93c:	0800bea0 	.word	0x0800bea0
 800a940:	0800c147 	.word	0x0800c147
 800a944:	0800c158 	.word	0x0800c158
 800a948:	1e6f      	subs	r7, r5, #1
 800a94a:	f1b9 0f00 	cmp.w	r9, #0
 800a94e:	d130      	bne.n	800a9b2 <__gethex+0x326>
 800a950:	b127      	cbz	r7, 800a95c <__gethex+0x2d0>
 800a952:	4639      	mov	r1, r7
 800a954:	4620      	mov	r0, r4
 800a956:	f000 fec4 	bl	800b6e2 <__any_on>
 800a95a:	4681      	mov	r9, r0
 800a95c:	117a      	asrs	r2, r7, #5
 800a95e:	2301      	movs	r3, #1
 800a960:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a964:	f007 071f 	and.w	r7, r7, #31
 800a968:	40bb      	lsls	r3, r7
 800a96a:	4213      	tst	r3, r2
 800a96c:	4629      	mov	r1, r5
 800a96e:	4620      	mov	r0, r4
 800a970:	bf18      	it	ne
 800a972:	f049 0902 	orrne.w	r9, r9, #2
 800a976:	f7ff fe21 	bl	800a5bc <rshift>
 800a97a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a97e:	1b76      	subs	r6, r6, r5
 800a980:	2502      	movs	r5, #2
 800a982:	f1b9 0f00 	cmp.w	r9, #0
 800a986:	d047      	beq.n	800aa18 <__gethex+0x38c>
 800a988:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a98c:	2b02      	cmp	r3, #2
 800a98e:	d015      	beq.n	800a9bc <__gethex+0x330>
 800a990:	2b03      	cmp	r3, #3
 800a992:	d017      	beq.n	800a9c4 <__gethex+0x338>
 800a994:	2b01      	cmp	r3, #1
 800a996:	d109      	bne.n	800a9ac <__gethex+0x320>
 800a998:	f019 0f02 	tst.w	r9, #2
 800a99c:	d006      	beq.n	800a9ac <__gethex+0x320>
 800a99e:	f8da 3000 	ldr.w	r3, [sl]
 800a9a2:	ea49 0903 	orr.w	r9, r9, r3
 800a9a6:	f019 0f01 	tst.w	r9, #1
 800a9aa:	d10e      	bne.n	800a9ca <__gethex+0x33e>
 800a9ac:	f045 0510 	orr.w	r5, r5, #16
 800a9b0:	e032      	b.n	800aa18 <__gethex+0x38c>
 800a9b2:	f04f 0901 	mov.w	r9, #1
 800a9b6:	e7d1      	b.n	800a95c <__gethex+0x2d0>
 800a9b8:	2501      	movs	r5, #1
 800a9ba:	e7e2      	b.n	800a982 <__gethex+0x2f6>
 800a9bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9be:	f1c3 0301 	rsb	r3, r3, #1
 800a9c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a9c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d0f0      	beq.n	800a9ac <__gethex+0x320>
 800a9ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a9ce:	f104 0314 	add.w	r3, r4, #20
 800a9d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a9d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a9da:	f04f 0c00 	mov.w	ip, #0
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a9e8:	d01b      	beq.n	800aa22 <__gethex+0x396>
 800a9ea:	3201      	adds	r2, #1
 800a9ec:	6002      	str	r2, [r0, #0]
 800a9ee:	2d02      	cmp	r5, #2
 800a9f0:	f104 0314 	add.w	r3, r4, #20
 800a9f4:	d13c      	bne.n	800aa70 <__gethex+0x3e4>
 800a9f6:	f8d8 2000 	ldr.w	r2, [r8]
 800a9fa:	3a01      	subs	r2, #1
 800a9fc:	42b2      	cmp	r2, r6
 800a9fe:	d109      	bne.n	800aa14 <__gethex+0x388>
 800aa00:	1171      	asrs	r1, r6, #5
 800aa02:	2201      	movs	r2, #1
 800aa04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aa08:	f006 061f 	and.w	r6, r6, #31
 800aa0c:	fa02 f606 	lsl.w	r6, r2, r6
 800aa10:	421e      	tst	r6, r3
 800aa12:	d13a      	bne.n	800aa8a <__gethex+0x3fe>
 800aa14:	f045 0520 	orr.w	r5, r5, #32
 800aa18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa1a:	601c      	str	r4, [r3, #0]
 800aa1c:	9b02      	ldr	r3, [sp, #8]
 800aa1e:	601f      	str	r7, [r3, #0]
 800aa20:	e6b0      	b.n	800a784 <__gethex+0xf8>
 800aa22:	4299      	cmp	r1, r3
 800aa24:	f843 cc04 	str.w	ip, [r3, #-4]
 800aa28:	d8d9      	bhi.n	800a9de <__gethex+0x352>
 800aa2a:	68a3      	ldr	r3, [r4, #8]
 800aa2c:	459b      	cmp	fp, r3
 800aa2e:	db17      	blt.n	800aa60 <__gethex+0x3d4>
 800aa30:	6861      	ldr	r1, [r4, #4]
 800aa32:	9801      	ldr	r0, [sp, #4]
 800aa34:	3101      	adds	r1, #1
 800aa36:	f000 f9c3 	bl	800adc0 <_Balloc>
 800aa3a:	4681      	mov	r9, r0
 800aa3c:	b918      	cbnz	r0, 800aa46 <__gethex+0x3ba>
 800aa3e:	4b1a      	ldr	r3, [pc, #104]	@ (800aaa8 <__gethex+0x41c>)
 800aa40:	4602      	mov	r2, r0
 800aa42:	2184      	movs	r1, #132	@ 0x84
 800aa44:	e6c5      	b.n	800a7d2 <__gethex+0x146>
 800aa46:	6922      	ldr	r2, [r4, #16]
 800aa48:	3202      	adds	r2, #2
 800aa4a:	f104 010c 	add.w	r1, r4, #12
 800aa4e:	0092      	lsls	r2, r2, #2
 800aa50:	300c      	adds	r0, #12
 800aa52:	f7fe fee4 	bl	800981e <memcpy>
 800aa56:	4621      	mov	r1, r4
 800aa58:	9801      	ldr	r0, [sp, #4]
 800aa5a:	f000 f9f1 	bl	800ae40 <_Bfree>
 800aa5e:	464c      	mov	r4, r9
 800aa60:	6923      	ldr	r3, [r4, #16]
 800aa62:	1c5a      	adds	r2, r3, #1
 800aa64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa68:	6122      	str	r2, [r4, #16]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	615a      	str	r2, [r3, #20]
 800aa6e:	e7be      	b.n	800a9ee <__gethex+0x362>
 800aa70:	6922      	ldr	r2, [r4, #16]
 800aa72:	455a      	cmp	r2, fp
 800aa74:	dd0b      	ble.n	800aa8e <__gethex+0x402>
 800aa76:	2101      	movs	r1, #1
 800aa78:	4620      	mov	r0, r4
 800aa7a:	f7ff fd9f 	bl	800a5bc <rshift>
 800aa7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa82:	3701      	adds	r7, #1
 800aa84:	42bb      	cmp	r3, r7
 800aa86:	f6ff aee0 	blt.w	800a84a <__gethex+0x1be>
 800aa8a:	2501      	movs	r5, #1
 800aa8c:	e7c2      	b.n	800aa14 <__gethex+0x388>
 800aa8e:	f016 061f 	ands.w	r6, r6, #31
 800aa92:	d0fa      	beq.n	800aa8a <__gethex+0x3fe>
 800aa94:	4453      	add	r3, sl
 800aa96:	f1c6 0620 	rsb	r6, r6, #32
 800aa9a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aa9e:	f000 fa81 	bl	800afa4 <__hi0bits>
 800aaa2:	42b0      	cmp	r0, r6
 800aaa4:	dbe7      	blt.n	800aa76 <__gethex+0x3ea>
 800aaa6:	e7f0      	b.n	800aa8a <__gethex+0x3fe>
 800aaa8:	0800c147 	.word	0x0800c147

0800aaac <L_shift>:
 800aaac:	f1c2 0208 	rsb	r2, r2, #8
 800aab0:	0092      	lsls	r2, r2, #2
 800aab2:	b570      	push	{r4, r5, r6, lr}
 800aab4:	f1c2 0620 	rsb	r6, r2, #32
 800aab8:	6843      	ldr	r3, [r0, #4]
 800aaba:	6804      	ldr	r4, [r0, #0]
 800aabc:	fa03 f506 	lsl.w	r5, r3, r6
 800aac0:	432c      	orrs	r4, r5
 800aac2:	40d3      	lsrs	r3, r2
 800aac4:	6004      	str	r4, [r0, #0]
 800aac6:	f840 3f04 	str.w	r3, [r0, #4]!
 800aaca:	4288      	cmp	r0, r1
 800aacc:	d3f4      	bcc.n	800aab8 <L_shift+0xc>
 800aace:	bd70      	pop	{r4, r5, r6, pc}

0800aad0 <__match>:
 800aad0:	b530      	push	{r4, r5, lr}
 800aad2:	6803      	ldr	r3, [r0, #0]
 800aad4:	3301      	adds	r3, #1
 800aad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aada:	b914      	cbnz	r4, 800aae2 <__match+0x12>
 800aadc:	6003      	str	r3, [r0, #0]
 800aade:	2001      	movs	r0, #1
 800aae0:	bd30      	pop	{r4, r5, pc}
 800aae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aae6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800aaea:	2d19      	cmp	r5, #25
 800aaec:	bf98      	it	ls
 800aaee:	3220      	addls	r2, #32
 800aaf0:	42a2      	cmp	r2, r4
 800aaf2:	d0f0      	beq.n	800aad6 <__match+0x6>
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	e7f3      	b.n	800aae0 <__match+0x10>

0800aaf8 <__hexnan>:
 800aaf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aafc:	680b      	ldr	r3, [r1, #0]
 800aafe:	6801      	ldr	r1, [r0, #0]
 800ab00:	115e      	asrs	r6, r3, #5
 800ab02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ab06:	f013 031f 	ands.w	r3, r3, #31
 800ab0a:	b087      	sub	sp, #28
 800ab0c:	bf18      	it	ne
 800ab0e:	3604      	addne	r6, #4
 800ab10:	2500      	movs	r5, #0
 800ab12:	1f37      	subs	r7, r6, #4
 800ab14:	4682      	mov	sl, r0
 800ab16:	4690      	mov	r8, r2
 800ab18:	9301      	str	r3, [sp, #4]
 800ab1a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ab1e:	46b9      	mov	r9, r7
 800ab20:	463c      	mov	r4, r7
 800ab22:	9502      	str	r5, [sp, #8]
 800ab24:	46ab      	mov	fp, r5
 800ab26:	784a      	ldrb	r2, [r1, #1]
 800ab28:	1c4b      	adds	r3, r1, #1
 800ab2a:	9303      	str	r3, [sp, #12]
 800ab2c:	b342      	cbz	r2, 800ab80 <__hexnan+0x88>
 800ab2e:	4610      	mov	r0, r2
 800ab30:	9105      	str	r1, [sp, #20]
 800ab32:	9204      	str	r2, [sp, #16]
 800ab34:	f7ff fd94 	bl	800a660 <__hexdig_fun>
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	d151      	bne.n	800abe0 <__hexnan+0xe8>
 800ab3c:	9a04      	ldr	r2, [sp, #16]
 800ab3e:	9905      	ldr	r1, [sp, #20]
 800ab40:	2a20      	cmp	r2, #32
 800ab42:	d818      	bhi.n	800ab76 <__hexnan+0x7e>
 800ab44:	9b02      	ldr	r3, [sp, #8]
 800ab46:	459b      	cmp	fp, r3
 800ab48:	dd13      	ble.n	800ab72 <__hexnan+0x7a>
 800ab4a:	454c      	cmp	r4, r9
 800ab4c:	d206      	bcs.n	800ab5c <__hexnan+0x64>
 800ab4e:	2d07      	cmp	r5, #7
 800ab50:	dc04      	bgt.n	800ab5c <__hexnan+0x64>
 800ab52:	462a      	mov	r2, r5
 800ab54:	4649      	mov	r1, r9
 800ab56:	4620      	mov	r0, r4
 800ab58:	f7ff ffa8 	bl	800aaac <L_shift>
 800ab5c:	4544      	cmp	r4, r8
 800ab5e:	d952      	bls.n	800ac06 <__hexnan+0x10e>
 800ab60:	2300      	movs	r3, #0
 800ab62:	f1a4 0904 	sub.w	r9, r4, #4
 800ab66:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab6a:	f8cd b008 	str.w	fp, [sp, #8]
 800ab6e:	464c      	mov	r4, r9
 800ab70:	461d      	mov	r5, r3
 800ab72:	9903      	ldr	r1, [sp, #12]
 800ab74:	e7d7      	b.n	800ab26 <__hexnan+0x2e>
 800ab76:	2a29      	cmp	r2, #41	@ 0x29
 800ab78:	d157      	bne.n	800ac2a <__hexnan+0x132>
 800ab7a:	3102      	adds	r1, #2
 800ab7c:	f8ca 1000 	str.w	r1, [sl]
 800ab80:	f1bb 0f00 	cmp.w	fp, #0
 800ab84:	d051      	beq.n	800ac2a <__hexnan+0x132>
 800ab86:	454c      	cmp	r4, r9
 800ab88:	d206      	bcs.n	800ab98 <__hexnan+0xa0>
 800ab8a:	2d07      	cmp	r5, #7
 800ab8c:	dc04      	bgt.n	800ab98 <__hexnan+0xa0>
 800ab8e:	462a      	mov	r2, r5
 800ab90:	4649      	mov	r1, r9
 800ab92:	4620      	mov	r0, r4
 800ab94:	f7ff ff8a 	bl	800aaac <L_shift>
 800ab98:	4544      	cmp	r4, r8
 800ab9a:	d936      	bls.n	800ac0a <__hexnan+0x112>
 800ab9c:	f1a8 0204 	sub.w	r2, r8, #4
 800aba0:	4623      	mov	r3, r4
 800aba2:	f853 1b04 	ldr.w	r1, [r3], #4
 800aba6:	f842 1f04 	str.w	r1, [r2, #4]!
 800abaa:	429f      	cmp	r7, r3
 800abac:	d2f9      	bcs.n	800aba2 <__hexnan+0xaa>
 800abae:	1b3b      	subs	r3, r7, r4
 800abb0:	f023 0303 	bic.w	r3, r3, #3
 800abb4:	3304      	adds	r3, #4
 800abb6:	3401      	adds	r4, #1
 800abb8:	3e03      	subs	r6, #3
 800abba:	42b4      	cmp	r4, r6
 800abbc:	bf88      	it	hi
 800abbe:	2304      	movhi	r3, #4
 800abc0:	4443      	add	r3, r8
 800abc2:	2200      	movs	r2, #0
 800abc4:	f843 2b04 	str.w	r2, [r3], #4
 800abc8:	429f      	cmp	r7, r3
 800abca:	d2fb      	bcs.n	800abc4 <__hexnan+0xcc>
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	b91b      	cbnz	r3, 800abd8 <__hexnan+0xe0>
 800abd0:	4547      	cmp	r7, r8
 800abd2:	d128      	bne.n	800ac26 <__hexnan+0x12e>
 800abd4:	2301      	movs	r3, #1
 800abd6:	603b      	str	r3, [r7, #0]
 800abd8:	2005      	movs	r0, #5
 800abda:	b007      	add	sp, #28
 800abdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abe0:	3501      	adds	r5, #1
 800abe2:	2d08      	cmp	r5, #8
 800abe4:	f10b 0b01 	add.w	fp, fp, #1
 800abe8:	dd06      	ble.n	800abf8 <__hexnan+0x100>
 800abea:	4544      	cmp	r4, r8
 800abec:	d9c1      	bls.n	800ab72 <__hexnan+0x7a>
 800abee:	2300      	movs	r3, #0
 800abf0:	f844 3c04 	str.w	r3, [r4, #-4]
 800abf4:	2501      	movs	r5, #1
 800abf6:	3c04      	subs	r4, #4
 800abf8:	6822      	ldr	r2, [r4, #0]
 800abfa:	f000 000f 	and.w	r0, r0, #15
 800abfe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ac02:	6020      	str	r0, [r4, #0]
 800ac04:	e7b5      	b.n	800ab72 <__hexnan+0x7a>
 800ac06:	2508      	movs	r5, #8
 800ac08:	e7b3      	b.n	800ab72 <__hexnan+0x7a>
 800ac0a:	9b01      	ldr	r3, [sp, #4]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d0dd      	beq.n	800abcc <__hexnan+0xd4>
 800ac10:	f1c3 0320 	rsb	r3, r3, #32
 800ac14:	f04f 32ff 	mov.w	r2, #4294967295
 800ac18:	40da      	lsrs	r2, r3
 800ac1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ac1e:	4013      	ands	r3, r2
 800ac20:	f846 3c04 	str.w	r3, [r6, #-4]
 800ac24:	e7d2      	b.n	800abcc <__hexnan+0xd4>
 800ac26:	3f04      	subs	r7, #4
 800ac28:	e7d0      	b.n	800abcc <__hexnan+0xd4>
 800ac2a:	2004      	movs	r0, #4
 800ac2c:	e7d5      	b.n	800abda <__hexnan+0xe2>
	...

0800ac30 <malloc>:
 800ac30:	4b02      	ldr	r3, [pc, #8]	@ (800ac3c <malloc+0xc>)
 800ac32:	4601      	mov	r1, r0
 800ac34:	6818      	ldr	r0, [r3, #0]
 800ac36:	f000 b825 	b.w	800ac84 <_malloc_r>
 800ac3a:	bf00      	nop
 800ac3c:	20000184 	.word	0x20000184

0800ac40 <sbrk_aligned>:
 800ac40:	b570      	push	{r4, r5, r6, lr}
 800ac42:	4e0f      	ldr	r6, [pc, #60]	@ (800ac80 <sbrk_aligned+0x40>)
 800ac44:	460c      	mov	r4, r1
 800ac46:	6831      	ldr	r1, [r6, #0]
 800ac48:	4605      	mov	r5, r0
 800ac4a:	b911      	cbnz	r1, 800ac52 <sbrk_aligned+0x12>
 800ac4c:	f000 fe36 	bl	800b8bc <_sbrk_r>
 800ac50:	6030      	str	r0, [r6, #0]
 800ac52:	4621      	mov	r1, r4
 800ac54:	4628      	mov	r0, r5
 800ac56:	f000 fe31 	bl	800b8bc <_sbrk_r>
 800ac5a:	1c43      	adds	r3, r0, #1
 800ac5c:	d103      	bne.n	800ac66 <sbrk_aligned+0x26>
 800ac5e:	f04f 34ff 	mov.w	r4, #4294967295
 800ac62:	4620      	mov	r0, r4
 800ac64:	bd70      	pop	{r4, r5, r6, pc}
 800ac66:	1cc4      	adds	r4, r0, #3
 800ac68:	f024 0403 	bic.w	r4, r4, #3
 800ac6c:	42a0      	cmp	r0, r4
 800ac6e:	d0f8      	beq.n	800ac62 <sbrk_aligned+0x22>
 800ac70:	1a21      	subs	r1, r4, r0
 800ac72:	4628      	mov	r0, r5
 800ac74:	f000 fe22 	bl	800b8bc <_sbrk_r>
 800ac78:	3001      	adds	r0, #1
 800ac7a:	d1f2      	bne.n	800ac62 <sbrk_aligned+0x22>
 800ac7c:	e7ef      	b.n	800ac5e <sbrk_aligned+0x1e>
 800ac7e:	bf00      	nop
 800ac80:	20000da0 	.word	0x20000da0

0800ac84 <_malloc_r>:
 800ac84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac88:	1ccd      	adds	r5, r1, #3
 800ac8a:	f025 0503 	bic.w	r5, r5, #3
 800ac8e:	3508      	adds	r5, #8
 800ac90:	2d0c      	cmp	r5, #12
 800ac92:	bf38      	it	cc
 800ac94:	250c      	movcc	r5, #12
 800ac96:	2d00      	cmp	r5, #0
 800ac98:	4606      	mov	r6, r0
 800ac9a:	db01      	blt.n	800aca0 <_malloc_r+0x1c>
 800ac9c:	42a9      	cmp	r1, r5
 800ac9e:	d904      	bls.n	800acaa <_malloc_r+0x26>
 800aca0:	230c      	movs	r3, #12
 800aca2:	6033      	str	r3, [r6, #0]
 800aca4:	2000      	movs	r0, #0
 800aca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ad80 <_malloc_r+0xfc>
 800acae:	f000 f87b 	bl	800ada8 <__malloc_lock>
 800acb2:	f8d8 3000 	ldr.w	r3, [r8]
 800acb6:	461c      	mov	r4, r3
 800acb8:	bb44      	cbnz	r4, 800ad0c <_malloc_r+0x88>
 800acba:	4629      	mov	r1, r5
 800acbc:	4630      	mov	r0, r6
 800acbe:	f7ff ffbf 	bl	800ac40 <sbrk_aligned>
 800acc2:	1c43      	adds	r3, r0, #1
 800acc4:	4604      	mov	r4, r0
 800acc6:	d158      	bne.n	800ad7a <_malloc_r+0xf6>
 800acc8:	f8d8 4000 	ldr.w	r4, [r8]
 800accc:	4627      	mov	r7, r4
 800acce:	2f00      	cmp	r7, #0
 800acd0:	d143      	bne.n	800ad5a <_malloc_r+0xd6>
 800acd2:	2c00      	cmp	r4, #0
 800acd4:	d04b      	beq.n	800ad6e <_malloc_r+0xea>
 800acd6:	6823      	ldr	r3, [r4, #0]
 800acd8:	4639      	mov	r1, r7
 800acda:	4630      	mov	r0, r6
 800acdc:	eb04 0903 	add.w	r9, r4, r3
 800ace0:	f000 fdec 	bl	800b8bc <_sbrk_r>
 800ace4:	4581      	cmp	r9, r0
 800ace6:	d142      	bne.n	800ad6e <_malloc_r+0xea>
 800ace8:	6821      	ldr	r1, [r4, #0]
 800acea:	1a6d      	subs	r5, r5, r1
 800acec:	4629      	mov	r1, r5
 800acee:	4630      	mov	r0, r6
 800acf0:	f7ff ffa6 	bl	800ac40 <sbrk_aligned>
 800acf4:	3001      	adds	r0, #1
 800acf6:	d03a      	beq.n	800ad6e <_malloc_r+0xea>
 800acf8:	6823      	ldr	r3, [r4, #0]
 800acfa:	442b      	add	r3, r5
 800acfc:	6023      	str	r3, [r4, #0]
 800acfe:	f8d8 3000 	ldr.w	r3, [r8]
 800ad02:	685a      	ldr	r2, [r3, #4]
 800ad04:	bb62      	cbnz	r2, 800ad60 <_malloc_r+0xdc>
 800ad06:	f8c8 7000 	str.w	r7, [r8]
 800ad0a:	e00f      	b.n	800ad2c <_malloc_r+0xa8>
 800ad0c:	6822      	ldr	r2, [r4, #0]
 800ad0e:	1b52      	subs	r2, r2, r5
 800ad10:	d420      	bmi.n	800ad54 <_malloc_r+0xd0>
 800ad12:	2a0b      	cmp	r2, #11
 800ad14:	d917      	bls.n	800ad46 <_malloc_r+0xc2>
 800ad16:	1961      	adds	r1, r4, r5
 800ad18:	42a3      	cmp	r3, r4
 800ad1a:	6025      	str	r5, [r4, #0]
 800ad1c:	bf18      	it	ne
 800ad1e:	6059      	strne	r1, [r3, #4]
 800ad20:	6863      	ldr	r3, [r4, #4]
 800ad22:	bf08      	it	eq
 800ad24:	f8c8 1000 	streq.w	r1, [r8]
 800ad28:	5162      	str	r2, [r4, r5]
 800ad2a:	604b      	str	r3, [r1, #4]
 800ad2c:	4630      	mov	r0, r6
 800ad2e:	f000 f841 	bl	800adb4 <__malloc_unlock>
 800ad32:	f104 000b 	add.w	r0, r4, #11
 800ad36:	1d23      	adds	r3, r4, #4
 800ad38:	f020 0007 	bic.w	r0, r0, #7
 800ad3c:	1ac2      	subs	r2, r0, r3
 800ad3e:	bf1c      	itt	ne
 800ad40:	1a1b      	subne	r3, r3, r0
 800ad42:	50a3      	strne	r3, [r4, r2]
 800ad44:	e7af      	b.n	800aca6 <_malloc_r+0x22>
 800ad46:	6862      	ldr	r2, [r4, #4]
 800ad48:	42a3      	cmp	r3, r4
 800ad4a:	bf0c      	ite	eq
 800ad4c:	f8c8 2000 	streq.w	r2, [r8]
 800ad50:	605a      	strne	r2, [r3, #4]
 800ad52:	e7eb      	b.n	800ad2c <_malloc_r+0xa8>
 800ad54:	4623      	mov	r3, r4
 800ad56:	6864      	ldr	r4, [r4, #4]
 800ad58:	e7ae      	b.n	800acb8 <_malloc_r+0x34>
 800ad5a:	463c      	mov	r4, r7
 800ad5c:	687f      	ldr	r7, [r7, #4]
 800ad5e:	e7b6      	b.n	800acce <_malloc_r+0x4a>
 800ad60:	461a      	mov	r2, r3
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	42a3      	cmp	r3, r4
 800ad66:	d1fb      	bne.n	800ad60 <_malloc_r+0xdc>
 800ad68:	2300      	movs	r3, #0
 800ad6a:	6053      	str	r3, [r2, #4]
 800ad6c:	e7de      	b.n	800ad2c <_malloc_r+0xa8>
 800ad6e:	230c      	movs	r3, #12
 800ad70:	6033      	str	r3, [r6, #0]
 800ad72:	4630      	mov	r0, r6
 800ad74:	f000 f81e 	bl	800adb4 <__malloc_unlock>
 800ad78:	e794      	b.n	800aca4 <_malloc_r+0x20>
 800ad7a:	6005      	str	r5, [r0, #0]
 800ad7c:	e7d6      	b.n	800ad2c <_malloc_r+0xa8>
 800ad7e:	bf00      	nop
 800ad80:	20000da4 	.word	0x20000da4

0800ad84 <__ascii_mbtowc>:
 800ad84:	b082      	sub	sp, #8
 800ad86:	b901      	cbnz	r1, 800ad8a <__ascii_mbtowc+0x6>
 800ad88:	a901      	add	r1, sp, #4
 800ad8a:	b142      	cbz	r2, 800ad9e <__ascii_mbtowc+0x1a>
 800ad8c:	b14b      	cbz	r3, 800ada2 <__ascii_mbtowc+0x1e>
 800ad8e:	7813      	ldrb	r3, [r2, #0]
 800ad90:	600b      	str	r3, [r1, #0]
 800ad92:	7812      	ldrb	r2, [r2, #0]
 800ad94:	1e10      	subs	r0, r2, #0
 800ad96:	bf18      	it	ne
 800ad98:	2001      	movne	r0, #1
 800ad9a:	b002      	add	sp, #8
 800ad9c:	4770      	bx	lr
 800ad9e:	4610      	mov	r0, r2
 800ada0:	e7fb      	b.n	800ad9a <__ascii_mbtowc+0x16>
 800ada2:	f06f 0001 	mvn.w	r0, #1
 800ada6:	e7f8      	b.n	800ad9a <__ascii_mbtowc+0x16>

0800ada8 <__malloc_lock>:
 800ada8:	4801      	ldr	r0, [pc, #4]	@ (800adb0 <__malloc_lock+0x8>)
 800adaa:	f7fe bd36 	b.w	800981a <__retarget_lock_acquire_recursive>
 800adae:	bf00      	nop
 800adb0:	20000d9c 	.word	0x20000d9c

0800adb4 <__malloc_unlock>:
 800adb4:	4801      	ldr	r0, [pc, #4]	@ (800adbc <__malloc_unlock+0x8>)
 800adb6:	f7fe bd31 	b.w	800981c <__retarget_lock_release_recursive>
 800adba:	bf00      	nop
 800adbc:	20000d9c 	.word	0x20000d9c

0800adc0 <_Balloc>:
 800adc0:	b570      	push	{r4, r5, r6, lr}
 800adc2:	69c6      	ldr	r6, [r0, #28]
 800adc4:	4604      	mov	r4, r0
 800adc6:	460d      	mov	r5, r1
 800adc8:	b976      	cbnz	r6, 800ade8 <_Balloc+0x28>
 800adca:	2010      	movs	r0, #16
 800adcc:	f7ff ff30 	bl	800ac30 <malloc>
 800add0:	4602      	mov	r2, r0
 800add2:	61e0      	str	r0, [r4, #28]
 800add4:	b920      	cbnz	r0, 800ade0 <_Balloc+0x20>
 800add6:	4b18      	ldr	r3, [pc, #96]	@ (800ae38 <_Balloc+0x78>)
 800add8:	4818      	ldr	r0, [pc, #96]	@ (800ae3c <_Balloc+0x7c>)
 800adda:	216b      	movs	r1, #107	@ 0x6b
 800addc:	f7fe fd38 	bl	8009850 <__assert_func>
 800ade0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ade4:	6006      	str	r6, [r0, #0]
 800ade6:	60c6      	str	r6, [r0, #12]
 800ade8:	69e6      	ldr	r6, [r4, #28]
 800adea:	68f3      	ldr	r3, [r6, #12]
 800adec:	b183      	cbz	r3, 800ae10 <_Balloc+0x50>
 800adee:	69e3      	ldr	r3, [r4, #28]
 800adf0:	68db      	ldr	r3, [r3, #12]
 800adf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800adf6:	b9b8      	cbnz	r0, 800ae28 <_Balloc+0x68>
 800adf8:	2101      	movs	r1, #1
 800adfa:	fa01 f605 	lsl.w	r6, r1, r5
 800adfe:	1d72      	adds	r2, r6, #5
 800ae00:	0092      	lsls	r2, r2, #2
 800ae02:	4620      	mov	r0, r4
 800ae04:	f000 fd71 	bl	800b8ea <_calloc_r>
 800ae08:	b160      	cbz	r0, 800ae24 <_Balloc+0x64>
 800ae0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae0e:	e00e      	b.n	800ae2e <_Balloc+0x6e>
 800ae10:	2221      	movs	r2, #33	@ 0x21
 800ae12:	2104      	movs	r1, #4
 800ae14:	4620      	mov	r0, r4
 800ae16:	f000 fd68 	bl	800b8ea <_calloc_r>
 800ae1a:	69e3      	ldr	r3, [r4, #28]
 800ae1c:	60f0      	str	r0, [r6, #12]
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d1e4      	bne.n	800adee <_Balloc+0x2e>
 800ae24:	2000      	movs	r0, #0
 800ae26:	bd70      	pop	{r4, r5, r6, pc}
 800ae28:	6802      	ldr	r2, [r0, #0]
 800ae2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae2e:	2300      	movs	r3, #0
 800ae30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae34:	e7f7      	b.n	800ae26 <_Balloc+0x66>
 800ae36:	bf00      	nop
 800ae38:	0800c02d 	.word	0x0800c02d
 800ae3c:	0800c1b8 	.word	0x0800c1b8

0800ae40 <_Bfree>:
 800ae40:	b570      	push	{r4, r5, r6, lr}
 800ae42:	69c6      	ldr	r6, [r0, #28]
 800ae44:	4605      	mov	r5, r0
 800ae46:	460c      	mov	r4, r1
 800ae48:	b976      	cbnz	r6, 800ae68 <_Bfree+0x28>
 800ae4a:	2010      	movs	r0, #16
 800ae4c:	f7ff fef0 	bl	800ac30 <malloc>
 800ae50:	4602      	mov	r2, r0
 800ae52:	61e8      	str	r0, [r5, #28]
 800ae54:	b920      	cbnz	r0, 800ae60 <_Bfree+0x20>
 800ae56:	4b09      	ldr	r3, [pc, #36]	@ (800ae7c <_Bfree+0x3c>)
 800ae58:	4809      	ldr	r0, [pc, #36]	@ (800ae80 <_Bfree+0x40>)
 800ae5a:	218f      	movs	r1, #143	@ 0x8f
 800ae5c:	f7fe fcf8 	bl	8009850 <__assert_func>
 800ae60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae64:	6006      	str	r6, [r0, #0]
 800ae66:	60c6      	str	r6, [r0, #12]
 800ae68:	b13c      	cbz	r4, 800ae7a <_Bfree+0x3a>
 800ae6a:	69eb      	ldr	r3, [r5, #28]
 800ae6c:	6862      	ldr	r2, [r4, #4]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae74:	6021      	str	r1, [r4, #0]
 800ae76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae7a:	bd70      	pop	{r4, r5, r6, pc}
 800ae7c:	0800c02d 	.word	0x0800c02d
 800ae80:	0800c1b8 	.word	0x0800c1b8

0800ae84 <__multadd>:
 800ae84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae88:	690d      	ldr	r5, [r1, #16]
 800ae8a:	4607      	mov	r7, r0
 800ae8c:	460c      	mov	r4, r1
 800ae8e:	461e      	mov	r6, r3
 800ae90:	f101 0c14 	add.w	ip, r1, #20
 800ae94:	2000      	movs	r0, #0
 800ae96:	f8dc 3000 	ldr.w	r3, [ip]
 800ae9a:	b299      	uxth	r1, r3
 800ae9c:	fb02 6101 	mla	r1, r2, r1, r6
 800aea0:	0c1e      	lsrs	r6, r3, #16
 800aea2:	0c0b      	lsrs	r3, r1, #16
 800aea4:	fb02 3306 	mla	r3, r2, r6, r3
 800aea8:	b289      	uxth	r1, r1
 800aeaa:	3001      	adds	r0, #1
 800aeac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aeb0:	4285      	cmp	r5, r0
 800aeb2:	f84c 1b04 	str.w	r1, [ip], #4
 800aeb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aeba:	dcec      	bgt.n	800ae96 <__multadd+0x12>
 800aebc:	b30e      	cbz	r6, 800af02 <__multadd+0x7e>
 800aebe:	68a3      	ldr	r3, [r4, #8]
 800aec0:	42ab      	cmp	r3, r5
 800aec2:	dc19      	bgt.n	800aef8 <__multadd+0x74>
 800aec4:	6861      	ldr	r1, [r4, #4]
 800aec6:	4638      	mov	r0, r7
 800aec8:	3101      	adds	r1, #1
 800aeca:	f7ff ff79 	bl	800adc0 <_Balloc>
 800aece:	4680      	mov	r8, r0
 800aed0:	b928      	cbnz	r0, 800aede <__multadd+0x5a>
 800aed2:	4602      	mov	r2, r0
 800aed4:	4b0c      	ldr	r3, [pc, #48]	@ (800af08 <__multadd+0x84>)
 800aed6:	480d      	ldr	r0, [pc, #52]	@ (800af0c <__multadd+0x88>)
 800aed8:	21ba      	movs	r1, #186	@ 0xba
 800aeda:	f7fe fcb9 	bl	8009850 <__assert_func>
 800aede:	6922      	ldr	r2, [r4, #16]
 800aee0:	3202      	adds	r2, #2
 800aee2:	f104 010c 	add.w	r1, r4, #12
 800aee6:	0092      	lsls	r2, r2, #2
 800aee8:	300c      	adds	r0, #12
 800aeea:	f7fe fc98 	bl	800981e <memcpy>
 800aeee:	4621      	mov	r1, r4
 800aef0:	4638      	mov	r0, r7
 800aef2:	f7ff ffa5 	bl	800ae40 <_Bfree>
 800aef6:	4644      	mov	r4, r8
 800aef8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aefc:	3501      	adds	r5, #1
 800aefe:	615e      	str	r6, [r3, #20]
 800af00:	6125      	str	r5, [r4, #16]
 800af02:	4620      	mov	r0, r4
 800af04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af08:	0800c147 	.word	0x0800c147
 800af0c:	0800c1b8 	.word	0x0800c1b8

0800af10 <__s2b>:
 800af10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af14:	460c      	mov	r4, r1
 800af16:	4615      	mov	r5, r2
 800af18:	461f      	mov	r7, r3
 800af1a:	2209      	movs	r2, #9
 800af1c:	3308      	adds	r3, #8
 800af1e:	4606      	mov	r6, r0
 800af20:	fb93 f3f2 	sdiv	r3, r3, r2
 800af24:	2100      	movs	r1, #0
 800af26:	2201      	movs	r2, #1
 800af28:	429a      	cmp	r2, r3
 800af2a:	db09      	blt.n	800af40 <__s2b+0x30>
 800af2c:	4630      	mov	r0, r6
 800af2e:	f7ff ff47 	bl	800adc0 <_Balloc>
 800af32:	b940      	cbnz	r0, 800af46 <__s2b+0x36>
 800af34:	4602      	mov	r2, r0
 800af36:	4b19      	ldr	r3, [pc, #100]	@ (800af9c <__s2b+0x8c>)
 800af38:	4819      	ldr	r0, [pc, #100]	@ (800afa0 <__s2b+0x90>)
 800af3a:	21d3      	movs	r1, #211	@ 0xd3
 800af3c:	f7fe fc88 	bl	8009850 <__assert_func>
 800af40:	0052      	lsls	r2, r2, #1
 800af42:	3101      	adds	r1, #1
 800af44:	e7f0      	b.n	800af28 <__s2b+0x18>
 800af46:	9b08      	ldr	r3, [sp, #32]
 800af48:	6143      	str	r3, [r0, #20]
 800af4a:	2d09      	cmp	r5, #9
 800af4c:	f04f 0301 	mov.w	r3, #1
 800af50:	6103      	str	r3, [r0, #16]
 800af52:	dd16      	ble.n	800af82 <__s2b+0x72>
 800af54:	f104 0909 	add.w	r9, r4, #9
 800af58:	46c8      	mov	r8, r9
 800af5a:	442c      	add	r4, r5
 800af5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800af60:	4601      	mov	r1, r0
 800af62:	3b30      	subs	r3, #48	@ 0x30
 800af64:	220a      	movs	r2, #10
 800af66:	4630      	mov	r0, r6
 800af68:	f7ff ff8c 	bl	800ae84 <__multadd>
 800af6c:	45a0      	cmp	r8, r4
 800af6e:	d1f5      	bne.n	800af5c <__s2b+0x4c>
 800af70:	f1a5 0408 	sub.w	r4, r5, #8
 800af74:	444c      	add	r4, r9
 800af76:	1b2d      	subs	r5, r5, r4
 800af78:	1963      	adds	r3, r4, r5
 800af7a:	42bb      	cmp	r3, r7
 800af7c:	db04      	blt.n	800af88 <__s2b+0x78>
 800af7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af82:	340a      	adds	r4, #10
 800af84:	2509      	movs	r5, #9
 800af86:	e7f6      	b.n	800af76 <__s2b+0x66>
 800af88:	f814 3b01 	ldrb.w	r3, [r4], #1
 800af8c:	4601      	mov	r1, r0
 800af8e:	3b30      	subs	r3, #48	@ 0x30
 800af90:	220a      	movs	r2, #10
 800af92:	4630      	mov	r0, r6
 800af94:	f7ff ff76 	bl	800ae84 <__multadd>
 800af98:	e7ee      	b.n	800af78 <__s2b+0x68>
 800af9a:	bf00      	nop
 800af9c:	0800c147 	.word	0x0800c147
 800afa0:	0800c1b8 	.word	0x0800c1b8

0800afa4 <__hi0bits>:
 800afa4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800afa8:	4603      	mov	r3, r0
 800afaa:	bf36      	itet	cc
 800afac:	0403      	lslcc	r3, r0, #16
 800afae:	2000      	movcs	r0, #0
 800afb0:	2010      	movcc	r0, #16
 800afb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800afb6:	bf3c      	itt	cc
 800afb8:	021b      	lslcc	r3, r3, #8
 800afba:	3008      	addcc	r0, #8
 800afbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800afc0:	bf3c      	itt	cc
 800afc2:	011b      	lslcc	r3, r3, #4
 800afc4:	3004      	addcc	r0, #4
 800afc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afca:	bf3c      	itt	cc
 800afcc:	009b      	lslcc	r3, r3, #2
 800afce:	3002      	addcc	r0, #2
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	db05      	blt.n	800afe0 <__hi0bits+0x3c>
 800afd4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800afd8:	f100 0001 	add.w	r0, r0, #1
 800afdc:	bf08      	it	eq
 800afde:	2020      	moveq	r0, #32
 800afe0:	4770      	bx	lr

0800afe2 <__lo0bits>:
 800afe2:	6803      	ldr	r3, [r0, #0]
 800afe4:	4602      	mov	r2, r0
 800afe6:	f013 0007 	ands.w	r0, r3, #7
 800afea:	d00b      	beq.n	800b004 <__lo0bits+0x22>
 800afec:	07d9      	lsls	r1, r3, #31
 800afee:	d421      	bmi.n	800b034 <__lo0bits+0x52>
 800aff0:	0798      	lsls	r0, r3, #30
 800aff2:	bf49      	itett	mi
 800aff4:	085b      	lsrmi	r3, r3, #1
 800aff6:	089b      	lsrpl	r3, r3, #2
 800aff8:	2001      	movmi	r0, #1
 800affa:	6013      	strmi	r3, [r2, #0]
 800affc:	bf5c      	itt	pl
 800affe:	6013      	strpl	r3, [r2, #0]
 800b000:	2002      	movpl	r0, #2
 800b002:	4770      	bx	lr
 800b004:	b299      	uxth	r1, r3
 800b006:	b909      	cbnz	r1, 800b00c <__lo0bits+0x2a>
 800b008:	0c1b      	lsrs	r3, r3, #16
 800b00a:	2010      	movs	r0, #16
 800b00c:	b2d9      	uxtb	r1, r3
 800b00e:	b909      	cbnz	r1, 800b014 <__lo0bits+0x32>
 800b010:	3008      	adds	r0, #8
 800b012:	0a1b      	lsrs	r3, r3, #8
 800b014:	0719      	lsls	r1, r3, #28
 800b016:	bf04      	itt	eq
 800b018:	091b      	lsreq	r3, r3, #4
 800b01a:	3004      	addeq	r0, #4
 800b01c:	0799      	lsls	r1, r3, #30
 800b01e:	bf04      	itt	eq
 800b020:	089b      	lsreq	r3, r3, #2
 800b022:	3002      	addeq	r0, #2
 800b024:	07d9      	lsls	r1, r3, #31
 800b026:	d403      	bmi.n	800b030 <__lo0bits+0x4e>
 800b028:	085b      	lsrs	r3, r3, #1
 800b02a:	f100 0001 	add.w	r0, r0, #1
 800b02e:	d003      	beq.n	800b038 <__lo0bits+0x56>
 800b030:	6013      	str	r3, [r2, #0]
 800b032:	4770      	bx	lr
 800b034:	2000      	movs	r0, #0
 800b036:	4770      	bx	lr
 800b038:	2020      	movs	r0, #32
 800b03a:	4770      	bx	lr

0800b03c <__i2b>:
 800b03c:	b510      	push	{r4, lr}
 800b03e:	460c      	mov	r4, r1
 800b040:	2101      	movs	r1, #1
 800b042:	f7ff febd 	bl	800adc0 <_Balloc>
 800b046:	4602      	mov	r2, r0
 800b048:	b928      	cbnz	r0, 800b056 <__i2b+0x1a>
 800b04a:	4b05      	ldr	r3, [pc, #20]	@ (800b060 <__i2b+0x24>)
 800b04c:	4805      	ldr	r0, [pc, #20]	@ (800b064 <__i2b+0x28>)
 800b04e:	f240 1145 	movw	r1, #325	@ 0x145
 800b052:	f7fe fbfd 	bl	8009850 <__assert_func>
 800b056:	2301      	movs	r3, #1
 800b058:	6144      	str	r4, [r0, #20]
 800b05a:	6103      	str	r3, [r0, #16]
 800b05c:	bd10      	pop	{r4, pc}
 800b05e:	bf00      	nop
 800b060:	0800c147 	.word	0x0800c147
 800b064:	0800c1b8 	.word	0x0800c1b8

0800b068 <__multiply>:
 800b068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b06c:	4614      	mov	r4, r2
 800b06e:	690a      	ldr	r2, [r1, #16]
 800b070:	6923      	ldr	r3, [r4, #16]
 800b072:	429a      	cmp	r2, r3
 800b074:	bfa8      	it	ge
 800b076:	4623      	movge	r3, r4
 800b078:	460f      	mov	r7, r1
 800b07a:	bfa4      	itt	ge
 800b07c:	460c      	movge	r4, r1
 800b07e:	461f      	movge	r7, r3
 800b080:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b084:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b088:	68a3      	ldr	r3, [r4, #8]
 800b08a:	6861      	ldr	r1, [r4, #4]
 800b08c:	eb0a 0609 	add.w	r6, sl, r9
 800b090:	42b3      	cmp	r3, r6
 800b092:	b085      	sub	sp, #20
 800b094:	bfb8      	it	lt
 800b096:	3101      	addlt	r1, #1
 800b098:	f7ff fe92 	bl	800adc0 <_Balloc>
 800b09c:	b930      	cbnz	r0, 800b0ac <__multiply+0x44>
 800b09e:	4602      	mov	r2, r0
 800b0a0:	4b44      	ldr	r3, [pc, #272]	@ (800b1b4 <__multiply+0x14c>)
 800b0a2:	4845      	ldr	r0, [pc, #276]	@ (800b1b8 <__multiply+0x150>)
 800b0a4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b0a8:	f7fe fbd2 	bl	8009850 <__assert_func>
 800b0ac:	f100 0514 	add.w	r5, r0, #20
 800b0b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b0b4:	462b      	mov	r3, r5
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	4543      	cmp	r3, r8
 800b0ba:	d321      	bcc.n	800b100 <__multiply+0x98>
 800b0bc:	f107 0114 	add.w	r1, r7, #20
 800b0c0:	f104 0214 	add.w	r2, r4, #20
 800b0c4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b0c8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b0cc:	9302      	str	r3, [sp, #8]
 800b0ce:	1b13      	subs	r3, r2, r4
 800b0d0:	3b15      	subs	r3, #21
 800b0d2:	f023 0303 	bic.w	r3, r3, #3
 800b0d6:	3304      	adds	r3, #4
 800b0d8:	f104 0715 	add.w	r7, r4, #21
 800b0dc:	42ba      	cmp	r2, r7
 800b0de:	bf38      	it	cc
 800b0e0:	2304      	movcc	r3, #4
 800b0e2:	9301      	str	r3, [sp, #4]
 800b0e4:	9b02      	ldr	r3, [sp, #8]
 800b0e6:	9103      	str	r1, [sp, #12]
 800b0e8:	428b      	cmp	r3, r1
 800b0ea:	d80c      	bhi.n	800b106 <__multiply+0x9e>
 800b0ec:	2e00      	cmp	r6, #0
 800b0ee:	dd03      	ble.n	800b0f8 <__multiply+0x90>
 800b0f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d05b      	beq.n	800b1b0 <__multiply+0x148>
 800b0f8:	6106      	str	r6, [r0, #16]
 800b0fa:	b005      	add	sp, #20
 800b0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b100:	f843 2b04 	str.w	r2, [r3], #4
 800b104:	e7d8      	b.n	800b0b8 <__multiply+0x50>
 800b106:	f8b1 a000 	ldrh.w	sl, [r1]
 800b10a:	f1ba 0f00 	cmp.w	sl, #0
 800b10e:	d024      	beq.n	800b15a <__multiply+0xf2>
 800b110:	f104 0e14 	add.w	lr, r4, #20
 800b114:	46a9      	mov	r9, r5
 800b116:	f04f 0c00 	mov.w	ip, #0
 800b11a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b11e:	f8d9 3000 	ldr.w	r3, [r9]
 800b122:	fa1f fb87 	uxth.w	fp, r7
 800b126:	b29b      	uxth	r3, r3
 800b128:	fb0a 330b 	mla	r3, sl, fp, r3
 800b12c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b130:	f8d9 7000 	ldr.w	r7, [r9]
 800b134:	4463      	add	r3, ip
 800b136:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b13a:	fb0a c70b 	mla	r7, sl, fp, ip
 800b13e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b142:	b29b      	uxth	r3, r3
 800b144:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b148:	4572      	cmp	r2, lr
 800b14a:	f849 3b04 	str.w	r3, [r9], #4
 800b14e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b152:	d8e2      	bhi.n	800b11a <__multiply+0xb2>
 800b154:	9b01      	ldr	r3, [sp, #4]
 800b156:	f845 c003 	str.w	ip, [r5, r3]
 800b15a:	9b03      	ldr	r3, [sp, #12]
 800b15c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b160:	3104      	adds	r1, #4
 800b162:	f1b9 0f00 	cmp.w	r9, #0
 800b166:	d021      	beq.n	800b1ac <__multiply+0x144>
 800b168:	682b      	ldr	r3, [r5, #0]
 800b16a:	f104 0c14 	add.w	ip, r4, #20
 800b16e:	46ae      	mov	lr, r5
 800b170:	f04f 0a00 	mov.w	sl, #0
 800b174:	f8bc b000 	ldrh.w	fp, [ip]
 800b178:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b17c:	fb09 770b 	mla	r7, r9, fp, r7
 800b180:	4457      	add	r7, sl
 800b182:	b29b      	uxth	r3, r3
 800b184:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b188:	f84e 3b04 	str.w	r3, [lr], #4
 800b18c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b190:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b194:	f8be 3000 	ldrh.w	r3, [lr]
 800b198:	fb09 330a 	mla	r3, r9, sl, r3
 800b19c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b1a0:	4562      	cmp	r2, ip
 800b1a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b1a6:	d8e5      	bhi.n	800b174 <__multiply+0x10c>
 800b1a8:	9f01      	ldr	r7, [sp, #4]
 800b1aa:	51eb      	str	r3, [r5, r7]
 800b1ac:	3504      	adds	r5, #4
 800b1ae:	e799      	b.n	800b0e4 <__multiply+0x7c>
 800b1b0:	3e01      	subs	r6, #1
 800b1b2:	e79b      	b.n	800b0ec <__multiply+0x84>
 800b1b4:	0800c147 	.word	0x0800c147
 800b1b8:	0800c1b8 	.word	0x0800c1b8

0800b1bc <__pow5mult>:
 800b1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1c0:	4615      	mov	r5, r2
 800b1c2:	f012 0203 	ands.w	r2, r2, #3
 800b1c6:	4607      	mov	r7, r0
 800b1c8:	460e      	mov	r6, r1
 800b1ca:	d007      	beq.n	800b1dc <__pow5mult+0x20>
 800b1cc:	4c25      	ldr	r4, [pc, #148]	@ (800b264 <__pow5mult+0xa8>)
 800b1ce:	3a01      	subs	r2, #1
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1d6:	f7ff fe55 	bl	800ae84 <__multadd>
 800b1da:	4606      	mov	r6, r0
 800b1dc:	10ad      	asrs	r5, r5, #2
 800b1de:	d03d      	beq.n	800b25c <__pow5mult+0xa0>
 800b1e0:	69fc      	ldr	r4, [r7, #28]
 800b1e2:	b97c      	cbnz	r4, 800b204 <__pow5mult+0x48>
 800b1e4:	2010      	movs	r0, #16
 800b1e6:	f7ff fd23 	bl	800ac30 <malloc>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	61f8      	str	r0, [r7, #28]
 800b1ee:	b928      	cbnz	r0, 800b1fc <__pow5mult+0x40>
 800b1f0:	4b1d      	ldr	r3, [pc, #116]	@ (800b268 <__pow5mult+0xac>)
 800b1f2:	481e      	ldr	r0, [pc, #120]	@ (800b26c <__pow5mult+0xb0>)
 800b1f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b1f8:	f7fe fb2a 	bl	8009850 <__assert_func>
 800b1fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b200:	6004      	str	r4, [r0, #0]
 800b202:	60c4      	str	r4, [r0, #12]
 800b204:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b208:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b20c:	b94c      	cbnz	r4, 800b222 <__pow5mult+0x66>
 800b20e:	f240 2171 	movw	r1, #625	@ 0x271
 800b212:	4638      	mov	r0, r7
 800b214:	f7ff ff12 	bl	800b03c <__i2b>
 800b218:	2300      	movs	r3, #0
 800b21a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b21e:	4604      	mov	r4, r0
 800b220:	6003      	str	r3, [r0, #0]
 800b222:	f04f 0900 	mov.w	r9, #0
 800b226:	07eb      	lsls	r3, r5, #31
 800b228:	d50a      	bpl.n	800b240 <__pow5mult+0x84>
 800b22a:	4631      	mov	r1, r6
 800b22c:	4622      	mov	r2, r4
 800b22e:	4638      	mov	r0, r7
 800b230:	f7ff ff1a 	bl	800b068 <__multiply>
 800b234:	4631      	mov	r1, r6
 800b236:	4680      	mov	r8, r0
 800b238:	4638      	mov	r0, r7
 800b23a:	f7ff fe01 	bl	800ae40 <_Bfree>
 800b23e:	4646      	mov	r6, r8
 800b240:	106d      	asrs	r5, r5, #1
 800b242:	d00b      	beq.n	800b25c <__pow5mult+0xa0>
 800b244:	6820      	ldr	r0, [r4, #0]
 800b246:	b938      	cbnz	r0, 800b258 <__pow5mult+0x9c>
 800b248:	4622      	mov	r2, r4
 800b24a:	4621      	mov	r1, r4
 800b24c:	4638      	mov	r0, r7
 800b24e:	f7ff ff0b 	bl	800b068 <__multiply>
 800b252:	6020      	str	r0, [r4, #0]
 800b254:	f8c0 9000 	str.w	r9, [r0]
 800b258:	4604      	mov	r4, r0
 800b25a:	e7e4      	b.n	800b226 <__pow5mult+0x6a>
 800b25c:	4630      	mov	r0, r6
 800b25e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b262:	bf00      	nop
 800b264:	0800c214 	.word	0x0800c214
 800b268:	0800c02d 	.word	0x0800c02d
 800b26c:	0800c1b8 	.word	0x0800c1b8

0800b270 <__lshift>:
 800b270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b274:	460c      	mov	r4, r1
 800b276:	6849      	ldr	r1, [r1, #4]
 800b278:	6923      	ldr	r3, [r4, #16]
 800b27a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b27e:	68a3      	ldr	r3, [r4, #8]
 800b280:	4607      	mov	r7, r0
 800b282:	4691      	mov	r9, r2
 800b284:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b288:	f108 0601 	add.w	r6, r8, #1
 800b28c:	42b3      	cmp	r3, r6
 800b28e:	db0b      	blt.n	800b2a8 <__lshift+0x38>
 800b290:	4638      	mov	r0, r7
 800b292:	f7ff fd95 	bl	800adc0 <_Balloc>
 800b296:	4605      	mov	r5, r0
 800b298:	b948      	cbnz	r0, 800b2ae <__lshift+0x3e>
 800b29a:	4602      	mov	r2, r0
 800b29c:	4b28      	ldr	r3, [pc, #160]	@ (800b340 <__lshift+0xd0>)
 800b29e:	4829      	ldr	r0, [pc, #164]	@ (800b344 <__lshift+0xd4>)
 800b2a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b2a4:	f7fe fad4 	bl	8009850 <__assert_func>
 800b2a8:	3101      	adds	r1, #1
 800b2aa:	005b      	lsls	r3, r3, #1
 800b2ac:	e7ee      	b.n	800b28c <__lshift+0x1c>
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	f100 0114 	add.w	r1, r0, #20
 800b2b4:	f100 0210 	add.w	r2, r0, #16
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	4553      	cmp	r3, sl
 800b2bc:	db33      	blt.n	800b326 <__lshift+0xb6>
 800b2be:	6920      	ldr	r0, [r4, #16]
 800b2c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b2c4:	f104 0314 	add.w	r3, r4, #20
 800b2c8:	f019 091f 	ands.w	r9, r9, #31
 800b2cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b2d4:	d02b      	beq.n	800b32e <__lshift+0xbe>
 800b2d6:	f1c9 0e20 	rsb	lr, r9, #32
 800b2da:	468a      	mov	sl, r1
 800b2dc:	2200      	movs	r2, #0
 800b2de:	6818      	ldr	r0, [r3, #0]
 800b2e0:	fa00 f009 	lsl.w	r0, r0, r9
 800b2e4:	4310      	orrs	r0, r2
 800b2e6:	f84a 0b04 	str.w	r0, [sl], #4
 800b2ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ee:	459c      	cmp	ip, r3
 800b2f0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b2f4:	d8f3      	bhi.n	800b2de <__lshift+0x6e>
 800b2f6:	ebac 0304 	sub.w	r3, ip, r4
 800b2fa:	3b15      	subs	r3, #21
 800b2fc:	f023 0303 	bic.w	r3, r3, #3
 800b300:	3304      	adds	r3, #4
 800b302:	f104 0015 	add.w	r0, r4, #21
 800b306:	4584      	cmp	ip, r0
 800b308:	bf38      	it	cc
 800b30a:	2304      	movcc	r3, #4
 800b30c:	50ca      	str	r2, [r1, r3]
 800b30e:	b10a      	cbz	r2, 800b314 <__lshift+0xa4>
 800b310:	f108 0602 	add.w	r6, r8, #2
 800b314:	3e01      	subs	r6, #1
 800b316:	4638      	mov	r0, r7
 800b318:	612e      	str	r6, [r5, #16]
 800b31a:	4621      	mov	r1, r4
 800b31c:	f7ff fd90 	bl	800ae40 <_Bfree>
 800b320:	4628      	mov	r0, r5
 800b322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b326:	f842 0f04 	str.w	r0, [r2, #4]!
 800b32a:	3301      	adds	r3, #1
 800b32c:	e7c5      	b.n	800b2ba <__lshift+0x4a>
 800b32e:	3904      	subs	r1, #4
 800b330:	f853 2b04 	ldr.w	r2, [r3], #4
 800b334:	f841 2f04 	str.w	r2, [r1, #4]!
 800b338:	459c      	cmp	ip, r3
 800b33a:	d8f9      	bhi.n	800b330 <__lshift+0xc0>
 800b33c:	e7ea      	b.n	800b314 <__lshift+0xa4>
 800b33e:	bf00      	nop
 800b340:	0800c147 	.word	0x0800c147
 800b344:	0800c1b8 	.word	0x0800c1b8

0800b348 <__mcmp>:
 800b348:	690a      	ldr	r2, [r1, #16]
 800b34a:	4603      	mov	r3, r0
 800b34c:	6900      	ldr	r0, [r0, #16]
 800b34e:	1a80      	subs	r0, r0, r2
 800b350:	b530      	push	{r4, r5, lr}
 800b352:	d10e      	bne.n	800b372 <__mcmp+0x2a>
 800b354:	3314      	adds	r3, #20
 800b356:	3114      	adds	r1, #20
 800b358:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b35c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b360:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b364:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b368:	4295      	cmp	r5, r2
 800b36a:	d003      	beq.n	800b374 <__mcmp+0x2c>
 800b36c:	d205      	bcs.n	800b37a <__mcmp+0x32>
 800b36e:	f04f 30ff 	mov.w	r0, #4294967295
 800b372:	bd30      	pop	{r4, r5, pc}
 800b374:	42a3      	cmp	r3, r4
 800b376:	d3f3      	bcc.n	800b360 <__mcmp+0x18>
 800b378:	e7fb      	b.n	800b372 <__mcmp+0x2a>
 800b37a:	2001      	movs	r0, #1
 800b37c:	e7f9      	b.n	800b372 <__mcmp+0x2a>
	...

0800b380 <__mdiff>:
 800b380:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b384:	4689      	mov	r9, r1
 800b386:	4606      	mov	r6, r0
 800b388:	4611      	mov	r1, r2
 800b38a:	4648      	mov	r0, r9
 800b38c:	4614      	mov	r4, r2
 800b38e:	f7ff ffdb 	bl	800b348 <__mcmp>
 800b392:	1e05      	subs	r5, r0, #0
 800b394:	d112      	bne.n	800b3bc <__mdiff+0x3c>
 800b396:	4629      	mov	r1, r5
 800b398:	4630      	mov	r0, r6
 800b39a:	f7ff fd11 	bl	800adc0 <_Balloc>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	b928      	cbnz	r0, 800b3ae <__mdiff+0x2e>
 800b3a2:	4b3f      	ldr	r3, [pc, #252]	@ (800b4a0 <__mdiff+0x120>)
 800b3a4:	f240 2137 	movw	r1, #567	@ 0x237
 800b3a8:	483e      	ldr	r0, [pc, #248]	@ (800b4a4 <__mdiff+0x124>)
 800b3aa:	f7fe fa51 	bl	8009850 <__assert_func>
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b3b4:	4610      	mov	r0, r2
 800b3b6:	b003      	add	sp, #12
 800b3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3bc:	bfbc      	itt	lt
 800b3be:	464b      	movlt	r3, r9
 800b3c0:	46a1      	movlt	r9, r4
 800b3c2:	4630      	mov	r0, r6
 800b3c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b3c8:	bfba      	itte	lt
 800b3ca:	461c      	movlt	r4, r3
 800b3cc:	2501      	movlt	r5, #1
 800b3ce:	2500      	movge	r5, #0
 800b3d0:	f7ff fcf6 	bl	800adc0 <_Balloc>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	b918      	cbnz	r0, 800b3e0 <__mdiff+0x60>
 800b3d8:	4b31      	ldr	r3, [pc, #196]	@ (800b4a0 <__mdiff+0x120>)
 800b3da:	f240 2145 	movw	r1, #581	@ 0x245
 800b3de:	e7e3      	b.n	800b3a8 <__mdiff+0x28>
 800b3e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b3e4:	6926      	ldr	r6, [r4, #16]
 800b3e6:	60c5      	str	r5, [r0, #12]
 800b3e8:	f109 0310 	add.w	r3, r9, #16
 800b3ec:	f109 0514 	add.w	r5, r9, #20
 800b3f0:	f104 0e14 	add.w	lr, r4, #20
 800b3f4:	f100 0b14 	add.w	fp, r0, #20
 800b3f8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b3fc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b400:	9301      	str	r3, [sp, #4]
 800b402:	46d9      	mov	r9, fp
 800b404:	f04f 0c00 	mov.w	ip, #0
 800b408:	9b01      	ldr	r3, [sp, #4]
 800b40a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b40e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b412:	9301      	str	r3, [sp, #4]
 800b414:	fa1f f38a 	uxth.w	r3, sl
 800b418:	4619      	mov	r1, r3
 800b41a:	b283      	uxth	r3, r0
 800b41c:	1acb      	subs	r3, r1, r3
 800b41e:	0c00      	lsrs	r0, r0, #16
 800b420:	4463      	add	r3, ip
 800b422:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b426:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b42a:	b29b      	uxth	r3, r3
 800b42c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b430:	4576      	cmp	r6, lr
 800b432:	f849 3b04 	str.w	r3, [r9], #4
 800b436:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b43a:	d8e5      	bhi.n	800b408 <__mdiff+0x88>
 800b43c:	1b33      	subs	r3, r6, r4
 800b43e:	3b15      	subs	r3, #21
 800b440:	f023 0303 	bic.w	r3, r3, #3
 800b444:	3415      	adds	r4, #21
 800b446:	3304      	adds	r3, #4
 800b448:	42a6      	cmp	r6, r4
 800b44a:	bf38      	it	cc
 800b44c:	2304      	movcc	r3, #4
 800b44e:	441d      	add	r5, r3
 800b450:	445b      	add	r3, fp
 800b452:	461e      	mov	r6, r3
 800b454:	462c      	mov	r4, r5
 800b456:	4544      	cmp	r4, r8
 800b458:	d30e      	bcc.n	800b478 <__mdiff+0xf8>
 800b45a:	f108 0103 	add.w	r1, r8, #3
 800b45e:	1b49      	subs	r1, r1, r5
 800b460:	f021 0103 	bic.w	r1, r1, #3
 800b464:	3d03      	subs	r5, #3
 800b466:	45a8      	cmp	r8, r5
 800b468:	bf38      	it	cc
 800b46a:	2100      	movcc	r1, #0
 800b46c:	440b      	add	r3, r1
 800b46e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b472:	b191      	cbz	r1, 800b49a <__mdiff+0x11a>
 800b474:	6117      	str	r7, [r2, #16]
 800b476:	e79d      	b.n	800b3b4 <__mdiff+0x34>
 800b478:	f854 1b04 	ldr.w	r1, [r4], #4
 800b47c:	46e6      	mov	lr, ip
 800b47e:	0c08      	lsrs	r0, r1, #16
 800b480:	fa1c fc81 	uxtah	ip, ip, r1
 800b484:	4471      	add	r1, lr
 800b486:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b48a:	b289      	uxth	r1, r1
 800b48c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b490:	f846 1b04 	str.w	r1, [r6], #4
 800b494:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b498:	e7dd      	b.n	800b456 <__mdiff+0xd6>
 800b49a:	3f01      	subs	r7, #1
 800b49c:	e7e7      	b.n	800b46e <__mdiff+0xee>
 800b49e:	bf00      	nop
 800b4a0:	0800c147 	.word	0x0800c147
 800b4a4:	0800c1b8 	.word	0x0800c1b8

0800b4a8 <__ulp>:
 800b4a8:	b082      	sub	sp, #8
 800b4aa:	ed8d 0b00 	vstr	d0, [sp]
 800b4ae:	9a01      	ldr	r2, [sp, #4]
 800b4b0:	4b0f      	ldr	r3, [pc, #60]	@ (800b4f0 <__ulp+0x48>)
 800b4b2:	4013      	ands	r3, r2
 800b4b4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	dc08      	bgt.n	800b4ce <__ulp+0x26>
 800b4bc:	425b      	negs	r3, r3
 800b4be:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b4c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b4c6:	da04      	bge.n	800b4d2 <__ulp+0x2a>
 800b4c8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b4cc:	4113      	asrs	r3, r2
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	e008      	b.n	800b4e4 <__ulp+0x3c>
 800b4d2:	f1a2 0314 	sub.w	r3, r2, #20
 800b4d6:	2b1e      	cmp	r3, #30
 800b4d8:	bfda      	itte	le
 800b4da:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b4de:	40da      	lsrle	r2, r3
 800b4e0:	2201      	movgt	r2, #1
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	4610      	mov	r0, r2
 800b4e8:	ec41 0b10 	vmov	d0, r0, r1
 800b4ec:	b002      	add	sp, #8
 800b4ee:	4770      	bx	lr
 800b4f0:	7ff00000 	.word	0x7ff00000

0800b4f4 <__b2d>:
 800b4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4f8:	6906      	ldr	r6, [r0, #16]
 800b4fa:	f100 0814 	add.w	r8, r0, #20
 800b4fe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b502:	1f37      	subs	r7, r6, #4
 800b504:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b508:	4610      	mov	r0, r2
 800b50a:	f7ff fd4b 	bl	800afa4 <__hi0bits>
 800b50e:	f1c0 0320 	rsb	r3, r0, #32
 800b512:	280a      	cmp	r0, #10
 800b514:	600b      	str	r3, [r1, #0]
 800b516:	491b      	ldr	r1, [pc, #108]	@ (800b584 <__b2d+0x90>)
 800b518:	dc15      	bgt.n	800b546 <__b2d+0x52>
 800b51a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b51e:	fa22 f30c 	lsr.w	r3, r2, ip
 800b522:	45b8      	cmp	r8, r7
 800b524:	ea43 0501 	orr.w	r5, r3, r1
 800b528:	bf34      	ite	cc
 800b52a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b52e:	2300      	movcs	r3, #0
 800b530:	3015      	adds	r0, #21
 800b532:	fa02 f000 	lsl.w	r0, r2, r0
 800b536:	fa23 f30c 	lsr.w	r3, r3, ip
 800b53a:	4303      	orrs	r3, r0
 800b53c:	461c      	mov	r4, r3
 800b53e:	ec45 4b10 	vmov	d0, r4, r5
 800b542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b546:	45b8      	cmp	r8, r7
 800b548:	bf3a      	itte	cc
 800b54a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b54e:	f1a6 0708 	subcc.w	r7, r6, #8
 800b552:	2300      	movcs	r3, #0
 800b554:	380b      	subs	r0, #11
 800b556:	d012      	beq.n	800b57e <__b2d+0x8a>
 800b558:	f1c0 0120 	rsb	r1, r0, #32
 800b55c:	fa23 f401 	lsr.w	r4, r3, r1
 800b560:	4082      	lsls	r2, r0
 800b562:	4322      	orrs	r2, r4
 800b564:	4547      	cmp	r7, r8
 800b566:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b56a:	bf8c      	ite	hi
 800b56c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b570:	2200      	movls	r2, #0
 800b572:	4083      	lsls	r3, r0
 800b574:	40ca      	lsrs	r2, r1
 800b576:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b57a:	4313      	orrs	r3, r2
 800b57c:	e7de      	b.n	800b53c <__b2d+0x48>
 800b57e:	ea42 0501 	orr.w	r5, r2, r1
 800b582:	e7db      	b.n	800b53c <__b2d+0x48>
 800b584:	3ff00000 	.word	0x3ff00000

0800b588 <__d2b>:
 800b588:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b58c:	460f      	mov	r7, r1
 800b58e:	2101      	movs	r1, #1
 800b590:	ec59 8b10 	vmov	r8, r9, d0
 800b594:	4616      	mov	r6, r2
 800b596:	f7ff fc13 	bl	800adc0 <_Balloc>
 800b59a:	4604      	mov	r4, r0
 800b59c:	b930      	cbnz	r0, 800b5ac <__d2b+0x24>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	4b23      	ldr	r3, [pc, #140]	@ (800b630 <__d2b+0xa8>)
 800b5a2:	4824      	ldr	r0, [pc, #144]	@ (800b634 <__d2b+0xac>)
 800b5a4:	f240 310f 	movw	r1, #783	@ 0x30f
 800b5a8:	f7fe f952 	bl	8009850 <__assert_func>
 800b5ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b5b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5b4:	b10d      	cbz	r5, 800b5ba <__d2b+0x32>
 800b5b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b5ba:	9301      	str	r3, [sp, #4]
 800b5bc:	f1b8 0300 	subs.w	r3, r8, #0
 800b5c0:	d023      	beq.n	800b60a <__d2b+0x82>
 800b5c2:	4668      	mov	r0, sp
 800b5c4:	9300      	str	r3, [sp, #0]
 800b5c6:	f7ff fd0c 	bl	800afe2 <__lo0bits>
 800b5ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b5ce:	b1d0      	cbz	r0, 800b606 <__d2b+0x7e>
 800b5d0:	f1c0 0320 	rsb	r3, r0, #32
 800b5d4:	fa02 f303 	lsl.w	r3, r2, r3
 800b5d8:	430b      	orrs	r3, r1
 800b5da:	40c2      	lsrs	r2, r0
 800b5dc:	6163      	str	r3, [r4, #20]
 800b5de:	9201      	str	r2, [sp, #4]
 800b5e0:	9b01      	ldr	r3, [sp, #4]
 800b5e2:	61a3      	str	r3, [r4, #24]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	bf0c      	ite	eq
 800b5e8:	2201      	moveq	r2, #1
 800b5ea:	2202      	movne	r2, #2
 800b5ec:	6122      	str	r2, [r4, #16]
 800b5ee:	b1a5      	cbz	r5, 800b61a <__d2b+0x92>
 800b5f0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b5f4:	4405      	add	r5, r0
 800b5f6:	603d      	str	r5, [r7, #0]
 800b5f8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b5fc:	6030      	str	r0, [r6, #0]
 800b5fe:	4620      	mov	r0, r4
 800b600:	b003      	add	sp, #12
 800b602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b606:	6161      	str	r1, [r4, #20]
 800b608:	e7ea      	b.n	800b5e0 <__d2b+0x58>
 800b60a:	a801      	add	r0, sp, #4
 800b60c:	f7ff fce9 	bl	800afe2 <__lo0bits>
 800b610:	9b01      	ldr	r3, [sp, #4]
 800b612:	6163      	str	r3, [r4, #20]
 800b614:	3020      	adds	r0, #32
 800b616:	2201      	movs	r2, #1
 800b618:	e7e8      	b.n	800b5ec <__d2b+0x64>
 800b61a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b61e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b622:	6038      	str	r0, [r7, #0]
 800b624:	6918      	ldr	r0, [r3, #16]
 800b626:	f7ff fcbd 	bl	800afa4 <__hi0bits>
 800b62a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b62e:	e7e5      	b.n	800b5fc <__d2b+0x74>
 800b630:	0800c147 	.word	0x0800c147
 800b634:	0800c1b8 	.word	0x0800c1b8

0800b638 <__ratio>:
 800b638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b63c:	b085      	sub	sp, #20
 800b63e:	e9cd 1000 	strd	r1, r0, [sp]
 800b642:	a902      	add	r1, sp, #8
 800b644:	f7ff ff56 	bl	800b4f4 <__b2d>
 800b648:	9800      	ldr	r0, [sp, #0]
 800b64a:	a903      	add	r1, sp, #12
 800b64c:	ec55 4b10 	vmov	r4, r5, d0
 800b650:	f7ff ff50 	bl	800b4f4 <__b2d>
 800b654:	9b01      	ldr	r3, [sp, #4]
 800b656:	6919      	ldr	r1, [r3, #16]
 800b658:	9b00      	ldr	r3, [sp, #0]
 800b65a:	691b      	ldr	r3, [r3, #16]
 800b65c:	1ac9      	subs	r1, r1, r3
 800b65e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b662:	1a9b      	subs	r3, r3, r2
 800b664:	ec5b ab10 	vmov	sl, fp, d0
 800b668:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	bfce      	itee	gt
 800b670:	462a      	movgt	r2, r5
 800b672:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b676:	465a      	movle	r2, fp
 800b678:	462f      	mov	r7, r5
 800b67a:	46d9      	mov	r9, fp
 800b67c:	bfcc      	ite	gt
 800b67e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b682:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b686:	464b      	mov	r3, r9
 800b688:	4652      	mov	r2, sl
 800b68a:	4620      	mov	r0, r4
 800b68c:	4639      	mov	r1, r7
 800b68e:	f7f5 f8fd 	bl	800088c <__aeabi_ddiv>
 800b692:	ec41 0b10 	vmov	d0, r0, r1
 800b696:	b005      	add	sp, #20
 800b698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b69c <__copybits>:
 800b69c:	3901      	subs	r1, #1
 800b69e:	b570      	push	{r4, r5, r6, lr}
 800b6a0:	1149      	asrs	r1, r1, #5
 800b6a2:	6914      	ldr	r4, [r2, #16]
 800b6a4:	3101      	adds	r1, #1
 800b6a6:	f102 0314 	add.w	r3, r2, #20
 800b6aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b6ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b6b2:	1f05      	subs	r5, r0, #4
 800b6b4:	42a3      	cmp	r3, r4
 800b6b6:	d30c      	bcc.n	800b6d2 <__copybits+0x36>
 800b6b8:	1aa3      	subs	r3, r4, r2
 800b6ba:	3b11      	subs	r3, #17
 800b6bc:	f023 0303 	bic.w	r3, r3, #3
 800b6c0:	3211      	adds	r2, #17
 800b6c2:	42a2      	cmp	r2, r4
 800b6c4:	bf88      	it	hi
 800b6c6:	2300      	movhi	r3, #0
 800b6c8:	4418      	add	r0, r3
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	4288      	cmp	r0, r1
 800b6ce:	d305      	bcc.n	800b6dc <__copybits+0x40>
 800b6d0:	bd70      	pop	{r4, r5, r6, pc}
 800b6d2:	f853 6b04 	ldr.w	r6, [r3], #4
 800b6d6:	f845 6f04 	str.w	r6, [r5, #4]!
 800b6da:	e7eb      	b.n	800b6b4 <__copybits+0x18>
 800b6dc:	f840 3b04 	str.w	r3, [r0], #4
 800b6e0:	e7f4      	b.n	800b6cc <__copybits+0x30>

0800b6e2 <__any_on>:
 800b6e2:	f100 0214 	add.w	r2, r0, #20
 800b6e6:	6900      	ldr	r0, [r0, #16]
 800b6e8:	114b      	asrs	r3, r1, #5
 800b6ea:	4298      	cmp	r0, r3
 800b6ec:	b510      	push	{r4, lr}
 800b6ee:	db11      	blt.n	800b714 <__any_on+0x32>
 800b6f0:	dd0a      	ble.n	800b708 <__any_on+0x26>
 800b6f2:	f011 011f 	ands.w	r1, r1, #31
 800b6f6:	d007      	beq.n	800b708 <__any_on+0x26>
 800b6f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b6fc:	fa24 f001 	lsr.w	r0, r4, r1
 800b700:	fa00 f101 	lsl.w	r1, r0, r1
 800b704:	428c      	cmp	r4, r1
 800b706:	d10b      	bne.n	800b720 <__any_on+0x3e>
 800b708:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d803      	bhi.n	800b718 <__any_on+0x36>
 800b710:	2000      	movs	r0, #0
 800b712:	bd10      	pop	{r4, pc}
 800b714:	4603      	mov	r3, r0
 800b716:	e7f7      	b.n	800b708 <__any_on+0x26>
 800b718:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b71c:	2900      	cmp	r1, #0
 800b71e:	d0f5      	beq.n	800b70c <__any_on+0x2a>
 800b720:	2001      	movs	r0, #1
 800b722:	e7f6      	b.n	800b712 <__any_on+0x30>

0800b724 <__ascii_wctomb>:
 800b724:	4603      	mov	r3, r0
 800b726:	4608      	mov	r0, r1
 800b728:	b141      	cbz	r1, 800b73c <__ascii_wctomb+0x18>
 800b72a:	2aff      	cmp	r2, #255	@ 0xff
 800b72c:	d904      	bls.n	800b738 <__ascii_wctomb+0x14>
 800b72e:	228a      	movs	r2, #138	@ 0x8a
 800b730:	601a      	str	r2, [r3, #0]
 800b732:	f04f 30ff 	mov.w	r0, #4294967295
 800b736:	4770      	bx	lr
 800b738:	700a      	strb	r2, [r1, #0]
 800b73a:	2001      	movs	r0, #1
 800b73c:	4770      	bx	lr
	...

0800b740 <__sflush_r>:
 800b740:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b748:	0716      	lsls	r6, r2, #28
 800b74a:	4605      	mov	r5, r0
 800b74c:	460c      	mov	r4, r1
 800b74e:	d454      	bmi.n	800b7fa <__sflush_r+0xba>
 800b750:	684b      	ldr	r3, [r1, #4]
 800b752:	2b00      	cmp	r3, #0
 800b754:	dc02      	bgt.n	800b75c <__sflush_r+0x1c>
 800b756:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b758:	2b00      	cmp	r3, #0
 800b75a:	dd48      	ble.n	800b7ee <__sflush_r+0xae>
 800b75c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b75e:	2e00      	cmp	r6, #0
 800b760:	d045      	beq.n	800b7ee <__sflush_r+0xae>
 800b762:	2300      	movs	r3, #0
 800b764:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b768:	682f      	ldr	r7, [r5, #0]
 800b76a:	6a21      	ldr	r1, [r4, #32]
 800b76c:	602b      	str	r3, [r5, #0]
 800b76e:	d030      	beq.n	800b7d2 <__sflush_r+0x92>
 800b770:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b772:	89a3      	ldrh	r3, [r4, #12]
 800b774:	0759      	lsls	r1, r3, #29
 800b776:	d505      	bpl.n	800b784 <__sflush_r+0x44>
 800b778:	6863      	ldr	r3, [r4, #4]
 800b77a:	1ad2      	subs	r2, r2, r3
 800b77c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b77e:	b10b      	cbz	r3, 800b784 <__sflush_r+0x44>
 800b780:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b782:	1ad2      	subs	r2, r2, r3
 800b784:	2300      	movs	r3, #0
 800b786:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b788:	6a21      	ldr	r1, [r4, #32]
 800b78a:	4628      	mov	r0, r5
 800b78c:	47b0      	blx	r6
 800b78e:	1c43      	adds	r3, r0, #1
 800b790:	89a3      	ldrh	r3, [r4, #12]
 800b792:	d106      	bne.n	800b7a2 <__sflush_r+0x62>
 800b794:	6829      	ldr	r1, [r5, #0]
 800b796:	291d      	cmp	r1, #29
 800b798:	d82b      	bhi.n	800b7f2 <__sflush_r+0xb2>
 800b79a:	4a2a      	ldr	r2, [pc, #168]	@ (800b844 <__sflush_r+0x104>)
 800b79c:	410a      	asrs	r2, r1
 800b79e:	07d6      	lsls	r6, r2, #31
 800b7a0:	d427      	bmi.n	800b7f2 <__sflush_r+0xb2>
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	6062      	str	r2, [r4, #4]
 800b7a6:	04d9      	lsls	r1, r3, #19
 800b7a8:	6922      	ldr	r2, [r4, #16]
 800b7aa:	6022      	str	r2, [r4, #0]
 800b7ac:	d504      	bpl.n	800b7b8 <__sflush_r+0x78>
 800b7ae:	1c42      	adds	r2, r0, #1
 800b7b0:	d101      	bne.n	800b7b6 <__sflush_r+0x76>
 800b7b2:	682b      	ldr	r3, [r5, #0]
 800b7b4:	b903      	cbnz	r3, 800b7b8 <__sflush_r+0x78>
 800b7b6:	6560      	str	r0, [r4, #84]	@ 0x54
 800b7b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7ba:	602f      	str	r7, [r5, #0]
 800b7bc:	b1b9      	cbz	r1, 800b7ee <__sflush_r+0xae>
 800b7be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b7c2:	4299      	cmp	r1, r3
 800b7c4:	d002      	beq.n	800b7cc <__sflush_r+0x8c>
 800b7c6:	4628      	mov	r0, r5
 800b7c8:	f7fe feae 	bl	800a528 <_free_r>
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800b7d0:	e00d      	b.n	800b7ee <__sflush_r+0xae>
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	4628      	mov	r0, r5
 800b7d6:	47b0      	blx	r6
 800b7d8:	4602      	mov	r2, r0
 800b7da:	1c50      	adds	r0, r2, #1
 800b7dc:	d1c9      	bne.n	800b772 <__sflush_r+0x32>
 800b7de:	682b      	ldr	r3, [r5, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d0c6      	beq.n	800b772 <__sflush_r+0x32>
 800b7e4:	2b1d      	cmp	r3, #29
 800b7e6:	d001      	beq.n	800b7ec <__sflush_r+0xac>
 800b7e8:	2b16      	cmp	r3, #22
 800b7ea:	d11e      	bne.n	800b82a <__sflush_r+0xea>
 800b7ec:	602f      	str	r7, [r5, #0]
 800b7ee:	2000      	movs	r0, #0
 800b7f0:	e022      	b.n	800b838 <__sflush_r+0xf8>
 800b7f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7f6:	b21b      	sxth	r3, r3
 800b7f8:	e01b      	b.n	800b832 <__sflush_r+0xf2>
 800b7fa:	690f      	ldr	r7, [r1, #16]
 800b7fc:	2f00      	cmp	r7, #0
 800b7fe:	d0f6      	beq.n	800b7ee <__sflush_r+0xae>
 800b800:	0793      	lsls	r3, r2, #30
 800b802:	680e      	ldr	r6, [r1, #0]
 800b804:	bf08      	it	eq
 800b806:	694b      	ldreq	r3, [r1, #20]
 800b808:	600f      	str	r7, [r1, #0]
 800b80a:	bf18      	it	ne
 800b80c:	2300      	movne	r3, #0
 800b80e:	eba6 0807 	sub.w	r8, r6, r7
 800b812:	608b      	str	r3, [r1, #8]
 800b814:	f1b8 0f00 	cmp.w	r8, #0
 800b818:	dde9      	ble.n	800b7ee <__sflush_r+0xae>
 800b81a:	6a21      	ldr	r1, [r4, #32]
 800b81c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b81e:	4643      	mov	r3, r8
 800b820:	463a      	mov	r2, r7
 800b822:	4628      	mov	r0, r5
 800b824:	47b0      	blx	r6
 800b826:	2800      	cmp	r0, #0
 800b828:	dc08      	bgt.n	800b83c <__sflush_r+0xfc>
 800b82a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b82e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b832:	81a3      	strh	r3, [r4, #12]
 800b834:	f04f 30ff 	mov.w	r0, #4294967295
 800b838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b83c:	4407      	add	r7, r0
 800b83e:	eba8 0800 	sub.w	r8, r8, r0
 800b842:	e7e7      	b.n	800b814 <__sflush_r+0xd4>
 800b844:	dfbffffe 	.word	0xdfbffffe

0800b848 <_fflush_r>:
 800b848:	b538      	push	{r3, r4, r5, lr}
 800b84a:	690b      	ldr	r3, [r1, #16]
 800b84c:	4605      	mov	r5, r0
 800b84e:	460c      	mov	r4, r1
 800b850:	b913      	cbnz	r3, 800b858 <_fflush_r+0x10>
 800b852:	2500      	movs	r5, #0
 800b854:	4628      	mov	r0, r5
 800b856:	bd38      	pop	{r3, r4, r5, pc}
 800b858:	b118      	cbz	r0, 800b862 <_fflush_r+0x1a>
 800b85a:	6a03      	ldr	r3, [r0, #32]
 800b85c:	b90b      	cbnz	r3, 800b862 <_fflush_r+0x1a>
 800b85e:	f7fd fe77 	bl	8009550 <__sinit>
 800b862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d0f3      	beq.n	800b852 <_fflush_r+0xa>
 800b86a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b86c:	07d0      	lsls	r0, r2, #31
 800b86e:	d404      	bmi.n	800b87a <_fflush_r+0x32>
 800b870:	0599      	lsls	r1, r3, #22
 800b872:	d402      	bmi.n	800b87a <_fflush_r+0x32>
 800b874:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b876:	f7fd ffd0 	bl	800981a <__retarget_lock_acquire_recursive>
 800b87a:	4628      	mov	r0, r5
 800b87c:	4621      	mov	r1, r4
 800b87e:	f7ff ff5f 	bl	800b740 <__sflush_r>
 800b882:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b884:	07da      	lsls	r2, r3, #31
 800b886:	4605      	mov	r5, r0
 800b888:	d4e4      	bmi.n	800b854 <_fflush_r+0xc>
 800b88a:	89a3      	ldrh	r3, [r4, #12]
 800b88c:	059b      	lsls	r3, r3, #22
 800b88e:	d4e1      	bmi.n	800b854 <_fflush_r+0xc>
 800b890:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b892:	f7fd ffc3 	bl	800981c <__retarget_lock_release_recursive>
 800b896:	e7dd      	b.n	800b854 <_fflush_r+0xc>

0800b898 <fiprintf>:
 800b898:	b40e      	push	{r1, r2, r3}
 800b89a:	b503      	push	{r0, r1, lr}
 800b89c:	4601      	mov	r1, r0
 800b89e:	ab03      	add	r3, sp, #12
 800b8a0:	4805      	ldr	r0, [pc, #20]	@ (800b8b8 <fiprintf+0x20>)
 800b8a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8a6:	6800      	ldr	r0, [r0, #0]
 800b8a8:	9301      	str	r3, [sp, #4]
 800b8aa:	f000 f85b 	bl	800b964 <_vfiprintf_r>
 800b8ae:	b002      	add	sp, #8
 800b8b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8b4:	b003      	add	sp, #12
 800b8b6:	4770      	bx	lr
 800b8b8:	20000184 	.word	0x20000184

0800b8bc <_sbrk_r>:
 800b8bc:	b538      	push	{r3, r4, r5, lr}
 800b8be:	4d06      	ldr	r5, [pc, #24]	@ (800b8d8 <_sbrk_r+0x1c>)
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	4608      	mov	r0, r1
 800b8c6:	602b      	str	r3, [r5, #0]
 800b8c8:	f7f7 fd04 	bl	80032d4 <_sbrk>
 800b8cc:	1c43      	adds	r3, r0, #1
 800b8ce:	d102      	bne.n	800b8d6 <_sbrk_r+0x1a>
 800b8d0:	682b      	ldr	r3, [r5, #0]
 800b8d2:	b103      	cbz	r3, 800b8d6 <_sbrk_r+0x1a>
 800b8d4:	6023      	str	r3, [r4, #0]
 800b8d6:	bd38      	pop	{r3, r4, r5, pc}
 800b8d8:	20000d98 	.word	0x20000d98

0800b8dc <abort>:
 800b8dc:	b508      	push	{r3, lr}
 800b8de:	2006      	movs	r0, #6
 800b8e0:	f000 fa14 	bl	800bd0c <raise>
 800b8e4:	2001      	movs	r0, #1
 800b8e6:	f7f7 fc7d 	bl	80031e4 <_exit>

0800b8ea <_calloc_r>:
 800b8ea:	b570      	push	{r4, r5, r6, lr}
 800b8ec:	fba1 5402 	umull	r5, r4, r1, r2
 800b8f0:	b93c      	cbnz	r4, 800b902 <_calloc_r+0x18>
 800b8f2:	4629      	mov	r1, r5
 800b8f4:	f7ff f9c6 	bl	800ac84 <_malloc_r>
 800b8f8:	4606      	mov	r6, r0
 800b8fa:	b928      	cbnz	r0, 800b908 <_calloc_r+0x1e>
 800b8fc:	2600      	movs	r6, #0
 800b8fe:	4630      	mov	r0, r6
 800b900:	bd70      	pop	{r4, r5, r6, pc}
 800b902:	220c      	movs	r2, #12
 800b904:	6002      	str	r2, [r0, #0]
 800b906:	e7f9      	b.n	800b8fc <_calloc_r+0x12>
 800b908:	462a      	mov	r2, r5
 800b90a:	4621      	mov	r1, r4
 800b90c:	f7fd fe99 	bl	8009642 <memset>
 800b910:	e7f5      	b.n	800b8fe <_calloc_r+0x14>

0800b912 <__sfputc_r>:
 800b912:	6893      	ldr	r3, [r2, #8]
 800b914:	3b01      	subs	r3, #1
 800b916:	2b00      	cmp	r3, #0
 800b918:	b410      	push	{r4}
 800b91a:	6093      	str	r3, [r2, #8]
 800b91c:	da08      	bge.n	800b930 <__sfputc_r+0x1e>
 800b91e:	6994      	ldr	r4, [r2, #24]
 800b920:	42a3      	cmp	r3, r4
 800b922:	db01      	blt.n	800b928 <__sfputc_r+0x16>
 800b924:	290a      	cmp	r1, #10
 800b926:	d103      	bne.n	800b930 <__sfputc_r+0x1e>
 800b928:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b92c:	f000 b932 	b.w	800bb94 <__swbuf_r>
 800b930:	6813      	ldr	r3, [r2, #0]
 800b932:	1c58      	adds	r0, r3, #1
 800b934:	6010      	str	r0, [r2, #0]
 800b936:	7019      	strb	r1, [r3, #0]
 800b938:	4608      	mov	r0, r1
 800b93a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <__sfputs_r>:
 800b940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b942:	4606      	mov	r6, r0
 800b944:	460f      	mov	r7, r1
 800b946:	4614      	mov	r4, r2
 800b948:	18d5      	adds	r5, r2, r3
 800b94a:	42ac      	cmp	r4, r5
 800b94c:	d101      	bne.n	800b952 <__sfputs_r+0x12>
 800b94e:	2000      	movs	r0, #0
 800b950:	e007      	b.n	800b962 <__sfputs_r+0x22>
 800b952:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b956:	463a      	mov	r2, r7
 800b958:	4630      	mov	r0, r6
 800b95a:	f7ff ffda 	bl	800b912 <__sfputc_r>
 800b95e:	1c43      	adds	r3, r0, #1
 800b960:	d1f3      	bne.n	800b94a <__sfputs_r+0xa>
 800b962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b964 <_vfiprintf_r>:
 800b964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b968:	460d      	mov	r5, r1
 800b96a:	b09d      	sub	sp, #116	@ 0x74
 800b96c:	4614      	mov	r4, r2
 800b96e:	4698      	mov	r8, r3
 800b970:	4606      	mov	r6, r0
 800b972:	b118      	cbz	r0, 800b97c <_vfiprintf_r+0x18>
 800b974:	6a03      	ldr	r3, [r0, #32]
 800b976:	b90b      	cbnz	r3, 800b97c <_vfiprintf_r+0x18>
 800b978:	f7fd fdea 	bl	8009550 <__sinit>
 800b97c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b97e:	07d9      	lsls	r1, r3, #31
 800b980:	d405      	bmi.n	800b98e <_vfiprintf_r+0x2a>
 800b982:	89ab      	ldrh	r3, [r5, #12]
 800b984:	059a      	lsls	r2, r3, #22
 800b986:	d402      	bmi.n	800b98e <_vfiprintf_r+0x2a>
 800b988:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b98a:	f7fd ff46 	bl	800981a <__retarget_lock_acquire_recursive>
 800b98e:	89ab      	ldrh	r3, [r5, #12]
 800b990:	071b      	lsls	r3, r3, #28
 800b992:	d501      	bpl.n	800b998 <_vfiprintf_r+0x34>
 800b994:	692b      	ldr	r3, [r5, #16]
 800b996:	b99b      	cbnz	r3, 800b9c0 <_vfiprintf_r+0x5c>
 800b998:	4629      	mov	r1, r5
 800b99a:	4630      	mov	r0, r6
 800b99c:	f000 f938 	bl	800bc10 <__swsetup_r>
 800b9a0:	b170      	cbz	r0, 800b9c0 <_vfiprintf_r+0x5c>
 800b9a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b9a4:	07dc      	lsls	r4, r3, #31
 800b9a6:	d504      	bpl.n	800b9b2 <_vfiprintf_r+0x4e>
 800b9a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ac:	b01d      	add	sp, #116	@ 0x74
 800b9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b2:	89ab      	ldrh	r3, [r5, #12]
 800b9b4:	0598      	lsls	r0, r3, #22
 800b9b6:	d4f7      	bmi.n	800b9a8 <_vfiprintf_r+0x44>
 800b9b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b9ba:	f7fd ff2f 	bl	800981c <__retarget_lock_release_recursive>
 800b9be:	e7f3      	b.n	800b9a8 <_vfiprintf_r+0x44>
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9c4:	2320      	movs	r3, #32
 800b9c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b9ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9ce:	2330      	movs	r3, #48	@ 0x30
 800b9d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bb80 <_vfiprintf_r+0x21c>
 800b9d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b9d8:	f04f 0901 	mov.w	r9, #1
 800b9dc:	4623      	mov	r3, r4
 800b9de:	469a      	mov	sl, r3
 800b9e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9e4:	b10a      	cbz	r2, 800b9ea <_vfiprintf_r+0x86>
 800b9e6:	2a25      	cmp	r2, #37	@ 0x25
 800b9e8:	d1f9      	bne.n	800b9de <_vfiprintf_r+0x7a>
 800b9ea:	ebba 0b04 	subs.w	fp, sl, r4
 800b9ee:	d00b      	beq.n	800ba08 <_vfiprintf_r+0xa4>
 800b9f0:	465b      	mov	r3, fp
 800b9f2:	4622      	mov	r2, r4
 800b9f4:	4629      	mov	r1, r5
 800b9f6:	4630      	mov	r0, r6
 800b9f8:	f7ff ffa2 	bl	800b940 <__sfputs_r>
 800b9fc:	3001      	adds	r0, #1
 800b9fe:	f000 80a7 	beq.w	800bb50 <_vfiprintf_r+0x1ec>
 800ba02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba04:	445a      	add	r2, fp
 800ba06:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba08:	f89a 3000 	ldrb.w	r3, [sl]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	f000 809f 	beq.w	800bb50 <_vfiprintf_r+0x1ec>
 800ba12:	2300      	movs	r3, #0
 800ba14:	f04f 32ff 	mov.w	r2, #4294967295
 800ba18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba1c:	f10a 0a01 	add.w	sl, sl, #1
 800ba20:	9304      	str	r3, [sp, #16]
 800ba22:	9307      	str	r3, [sp, #28]
 800ba24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ba28:	931a      	str	r3, [sp, #104]	@ 0x68
 800ba2a:	4654      	mov	r4, sl
 800ba2c:	2205      	movs	r2, #5
 800ba2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba32:	4853      	ldr	r0, [pc, #332]	@ (800bb80 <_vfiprintf_r+0x21c>)
 800ba34:	f7f4 fbec 	bl	8000210 <memchr>
 800ba38:	9a04      	ldr	r2, [sp, #16]
 800ba3a:	b9d8      	cbnz	r0, 800ba74 <_vfiprintf_r+0x110>
 800ba3c:	06d1      	lsls	r1, r2, #27
 800ba3e:	bf44      	itt	mi
 800ba40:	2320      	movmi	r3, #32
 800ba42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba46:	0713      	lsls	r3, r2, #28
 800ba48:	bf44      	itt	mi
 800ba4a:	232b      	movmi	r3, #43	@ 0x2b
 800ba4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba50:	f89a 3000 	ldrb.w	r3, [sl]
 800ba54:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba56:	d015      	beq.n	800ba84 <_vfiprintf_r+0x120>
 800ba58:	9a07      	ldr	r2, [sp, #28]
 800ba5a:	4654      	mov	r4, sl
 800ba5c:	2000      	movs	r0, #0
 800ba5e:	f04f 0c0a 	mov.w	ip, #10
 800ba62:	4621      	mov	r1, r4
 800ba64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba68:	3b30      	subs	r3, #48	@ 0x30
 800ba6a:	2b09      	cmp	r3, #9
 800ba6c:	d94b      	bls.n	800bb06 <_vfiprintf_r+0x1a2>
 800ba6e:	b1b0      	cbz	r0, 800ba9e <_vfiprintf_r+0x13a>
 800ba70:	9207      	str	r2, [sp, #28]
 800ba72:	e014      	b.n	800ba9e <_vfiprintf_r+0x13a>
 800ba74:	eba0 0308 	sub.w	r3, r0, r8
 800ba78:	fa09 f303 	lsl.w	r3, r9, r3
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	9304      	str	r3, [sp, #16]
 800ba80:	46a2      	mov	sl, r4
 800ba82:	e7d2      	b.n	800ba2a <_vfiprintf_r+0xc6>
 800ba84:	9b03      	ldr	r3, [sp, #12]
 800ba86:	1d19      	adds	r1, r3, #4
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	9103      	str	r1, [sp, #12]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	bfbb      	ittet	lt
 800ba90:	425b      	neglt	r3, r3
 800ba92:	f042 0202 	orrlt.w	r2, r2, #2
 800ba96:	9307      	strge	r3, [sp, #28]
 800ba98:	9307      	strlt	r3, [sp, #28]
 800ba9a:	bfb8      	it	lt
 800ba9c:	9204      	strlt	r2, [sp, #16]
 800ba9e:	7823      	ldrb	r3, [r4, #0]
 800baa0:	2b2e      	cmp	r3, #46	@ 0x2e
 800baa2:	d10a      	bne.n	800baba <_vfiprintf_r+0x156>
 800baa4:	7863      	ldrb	r3, [r4, #1]
 800baa6:	2b2a      	cmp	r3, #42	@ 0x2a
 800baa8:	d132      	bne.n	800bb10 <_vfiprintf_r+0x1ac>
 800baaa:	9b03      	ldr	r3, [sp, #12]
 800baac:	1d1a      	adds	r2, r3, #4
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	9203      	str	r2, [sp, #12]
 800bab2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bab6:	3402      	adds	r4, #2
 800bab8:	9305      	str	r3, [sp, #20]
 800baba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bb90 <_vfiprintf_r+0x22c>
 800babe:	7821      	ldrb	r1, [r4, #0]
 800bac0:	2203      	movs	r2, #3
 800bac2:	4650      	mov	r0, sl
 800bac4:	f7f4 fba4 	bl	8000210 <memchr>
 800bac8:	b138      	cbz	r0, 800bada <_vfiprintf_r+0x176>
 800baca:	9b04      	ldr	r3, [sp, #16]
 800bacc:	eba0 000a 	sub.w	r0, r0, sl
 800bad0:	2240      	movs	r2, #64	@ 0x40
 800bad2:	4082      	lsls	r2, r0
 800bad4:	4313      	orrs	r3, r2
 800bad6:	3401      	adds	r4, #1
 800bad8:	9304      	str	r3, [sp, #16]
 800bada:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bade:	4829      	ldr	r0, [pc, #164]	@ (800bb84 <_vfiprintf_r+0x220>)
 800bae0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bae4:	2206      	movs	r2, #6
 800bae6:	f7f4 fb93 	bl	8000210 <memchr>
 800baea:	2800      	cmp	r0, #0
 800baec:	d03f      	beq.n	800bb6e <_vfiprintf_r+0x20a>
 800baee:	4b26      	ldr	r3, [pc, #152]	@ (800bb88 <_vfiprintf_r+0x224>)
 800baf0:	bb1b      	cbnz	r3, 800bb3a <_vfiprintf_r+0x1d6>
 800baf2:	9b03      	ldr	r3, [sp, #12]
 800baf4:	3307      	adds	r3, #7
 800baf6:	f023 0307 	bic.w	r3, r3, #7
 800bafa:	3308      	adds	r3, #8
 800bafc:	9303      	str	r3, [sp, #12]
 800bafe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb00:	443b      	add	r3, r7
 800bb02:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb04:	e76a      	b.n	800b9dc <_vfiprintf_r+0x78>
 800bb06:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb0a:	460c      	mov	r4, r1
 800bb0c:	2001      	movs	r0, #1
 800bb0e:	e7a8      	b.n	800ba62 <_vfiprintf_r+0xfe>
 800bb10:	2300      	movs	r3, #0
 800bb12:	3401      	adds	r4, #1
 800bb14:	9305      	str	r3, [sp, #20]
 800bb16:	4619      	mov	r1, r3
 800bb18:	f04f 0c0a 	mov.w	ip, #10
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb22:	3a30      	subs	r2, #48	@ 0x30
 800bb24:	2a09      	cmp	r2, #9
 800bb26:	d903      	bls.n	800bb30 <_vfiprintf_r+0x1cc>
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d0c6      	beq.n	800baba <_vfiprintf_r+0x156>
 800bb2c:	9105      	str	r1, [sp, #20]
 800bb2e:	e7c4      	b.n	800baba <_vfiprintf_r+0x156>
 800bb30:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb34:	4604      	mov	r4, r0
 800bb36:	2301      	movs	r3, #1
 800bb38:	e7f0      	b.n	800bb1c <_vfiprintf_r+0x1b8>
 800bb3a:	ab03      	add	r3, sp, #12
 800bb3c:	9300      	str	r3, [sp, #0]
 800bb3e:	462a      	mov	r2, r5
 800bb40:	4b12      	ldr	r3, [pc, #72]	@ (800bb8c <_vfiprintf_r+0x228>)
 800bb42:	a904      	add	r1, sp, #16
 800bb44:	4630      	mov	r0, r6
 800bb46:	f7fd f8bf 	bl	8008cc8 <_printf_float>
 800bb4a:	4607      	mov	r7, r0
 800bb4c:	1c78      	adds	r0, r7, #1
 800bb4e:	d1d6      	bne.n	800bafe <_vfiprintf_r+0x19a>
 800bb50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb52:	07d9      	lsls	r1, r3, #31
 800bb54:	d405      	bmi.n	800bb62 <_vfiprintf_r+0x1fe>
 800bb56:	89ab      	ldrh	r3, [r5, #12]
 800bb58:	059a      	lsls	r2, r3, #22
 800bb5a:	d402      	bmi.n	800bb62 <_vfiprintf_r+0x1fe>
 800bb5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb5e:	f7fd fe5d 	bl	800981c <__retarget_lock_release_recursive>
 800bb62:	89ab      	ldrh	r3, [r5, #12]
 800bb64:	065b      	lsls	r3, r3, #25
 800bb66:	f53f af1f 	bmi.w	800b9a8 <_vfiprintf_r+0x44>
 800bb6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb6c:	e71e      	b.n	800b9ac <_vfiprintf_r+0x48>
 800bb6e:	ab03      	add	r3, sp, #12
 800bb70:	9300      	str	r3, [sp, #0]
 800bb72:	462a      	mov	r2, r5
 800bb74:	4b05      	ldr	r3, [pc, #20]	@ (800bb8c <_vfiprintf_r+0x228>)
 800bb76:	a904      	add	r1, sp, #16
 800bb78:	4630      	mov	r0, r6
 800bb7a:	f7fd fb3d 	bl	80091f8 <_printf_i>
 800bb7e:	e7e4      	b.n	800bb4a <_vfiprintf_r+0x1e6>
 800bb80:	0800c310 	.word	0x0800c310
 800bb84:	0800c31a 	.word	0x0800c31a
 800bb88:	08008cc9 	.word	0x08008cc9
 800bb8c:	0800b941 	.word	0x0800b941
 800bb90:	0800c316 	.word	0x0800c316

0800bb94 <__swbuf_r>:
 800bb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb96:	460e      	mov	r6, r1
 800bb98:	4614      	mov	r4, r2
 800bb9a:	4605      	mov	r5, r0
 800bb9c:	b118      	cbz	r0, 800bba6 <__swbuf_r+0x12>
 800bb9e:	6a03      	ldr	r3, [r0, #32]
 800bba0:	b90b      	cbnz	r3, 800bba6 <__swbuf_r+0x12>
 800bba2:	f7fd fcd5 	bl	8009550 <__sinit>
 800bba6:	69a3      	ldr	r3, [r4, #24]
 800bba8:	60a3      	str	r3, [r4, #8]
 800bbaa:	89a3      	ldrh	r3, [r4, #12]
 800bbac:	071a      	lsls	r2, r3, #28
 800bbae:	d501      	bpl.n	800bbb4 <__swbuf_r+0x20>
 800bbb0:	6923      	ldr	r3, [r4, #16]
 800bbb2:	b943      	cbnz	r3, 800bbc6 <__swbuf_r+0x32>
 800bbb4:	4621      	mov	r1, r4
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	f000 f82a 	bl	800bc10 <__swsetup_r>
 800bbbc:	b118      	cbz	r0, 800bbc6 <__swbuf_r+0x32>
 800bbbe:	f04f 37ff 	mov.w	r7, #4294967295
 800bbc2:	4638      	mov	r0, r7
 800bbc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbc6:	6823      	ldr	r3, [r4, #0]
 800bbc8:	6922      	ldr	r2, [r4, #16]
 800bbca:	1a98      	subs	r0, r3, r2
 800bbcc:	6963      	ldr	r3, [r4, #20]
 800bbce:	b2f6      	uxtb	r6, r6
 800bbd0:	4283      	cmp	r3, r0
 800bbd2:	4637      	mov	r7, r6
 800bbd4:	dc05      	bgt.n	800bbe2 <__swbuf_r+0x4e>
 800bbd6:	4621      	mov	r1, r4
 800bbd8:	4628      	mov	r0, r5
 800bbda:	f7ff fe35 	bl	800b848 <_fflush_r>
 800bbde:	2800      	cmp	r0, #0
 800bbe0:	d1ed      	bne.n	800bbbe <__swbuf_r+0x2a>
 800bbe2:	68a3      	ldr	r3, [r4, #8]
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	60a3      	str	r3, [r4, #8]
 800bbe8:	6823      	ldr	r3, [r4, #0]
 800bbea:	1c5a      	adds	r2, r3, #1
 800bbec:	6022      	str	r2, [r4, #0]
 800bbee:	701e      	strb	r6, [r3, #0]
 800bbf0:	6962      	ldr	r2, [r4, #20]
 800bbf2:	1c43      	adds	r3, r0, #1
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d004      	beq.n	800bc02 <__swbuf_r+0x6e>
 800bbf8:	89a3      	ldrh	r3, [r4, #12]
 800bbfa:	07db      	lsls	r3, r3, #31
 800bbfc:	d5e1      	bpl.n	800bbc2 <__swbuf_r+0x2e>
 800bbfe:	2e0a      	cmp	r6, #10
 800bc00:	d1df      	bne.n	800bbc2 <__swbuf_r+0x2e>
 800bc02:	4621      	mov	r1, r4
 800bc04:	4628      	mov	r0, r5
 800bc06:	f7ff fe1f 	bl	800b848 <_fflush_r>
 800bc0a:	2800      	cmp	r0, #0
 800bc0c:	d0d9      	beq.n	800bbc2 <__swbuf_r+0x2e>
 800bc0e:	e7d6      	b.n	800bbbe <__swbuf_r+0x2a>

0800bc10 <__swsetup_r>:
 800bc10:	b538      	push	{r3, r4, r5, lr}
 800bc12:	4b29      	ldr	r3, [pc, #164]	@ (800bcb8 <__swsetup_r+0xa8>)
 800bc14:	4605      	mov	r5, r0
 800bc16:	6818      	ldr	r0, [r3, #0]
 800bc18:	460c      	mov	r4, r1
 800bc1a:	b118      	cbz	r0, 800bc24 <__swsetup_r+0x14>
 800bc1c:	6a03      	ldr	r3, [r0, #32]
 800bc1e:	b90b      	cbnz	r3, 800bc24 <__swsetup_r+0x14>
 800bc20:	f7fd fc96 	bl	8009550 <__sinit>
 800bc24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc28:	0719      	lsls	r1, r3, #28
 800bc2a:	d422      	bmi.n	800bc72 <__swsetup_r+0x62>
 800bc2c:	06da      	lsls	r2, r3, #27
 800bc2e:	d407      	bmi.n	800bc40 <__swsetup_r+0x30>
 800bc30:	2209      	movs	r2, #9
 800bc32:	602a      	str	r2, [r5, #0]
 800bc34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc38:	81a3      	strh	r3, [r4, #12]
 800bc3a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc3e:	e033      	b.n	800bca8 <__swsetup_r+0x98>
 800bc40:	0758      	lsls	r0, r3, #29
 800bc42:	d512      	bpl.n	800bc6a <__swsetup_r+0x5a>
 800bc44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bc46:	b141      	cbz	r1, 800bc5a <__swsetup_r+0x4a>
 800bc48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc4c:	4299      	cmp	r1, r3
 800bc4e:	d002      	beq.n	800bc56 <__swsetup_r+0x46>
 800bc50:	4628      	mov	r0, r5
 800bc52:	f7fe fc69 	bl	800a528 <_free_r>
 800bc56:	2300      	movs	r3, #0
 800bc58:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc5a:	89a3      	ldrh	r3, [r4, #12]
 800bc5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bc60:	81a3      	strh	r3, [r4, #12]
 800bc62:	2300      	movs	r3, #0
 800bc64:	6063      	str	r3, [r4, #4]
 800bc66:	6923      	ldr	r3, [r4, #16]
 800bc68:	6023      	str	r3, [r4, #0]
 800bc6a:	89a3      	ldrh	r3, [r4, #12]
 800bc6c:	f043 0308 	orr.w	r3, r3, #8
 800bc70:	81a3      	strh	r3, [r4, #12]
 800bc72:	6923      	ldr	r3, [r4, #16]
 800bc74:	b94b      	cbnz	r3, 800bc8a <__swsetup_r+0x7a>
 800bc76:	89a3      	ldrh	r3, [r4, #12]
 800bc78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bc7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc80:	d003      	beq.n	800bc8a <__swsetup_r+0x7a>
 800bc82:	4621      	mov	r1, r4
 800bc84:	4628      	mov	r0, r5
 800bc86:	f000 f883 	bl	800bd90 <__smakebuf_r>
 800bc8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc8e:	f013 0201 	ands.w	r2, r3, #1
 800bc92:	d00a      	beq.n	800bcaa <__swsetup_r+0x9a>
 800bc94:	2200      	movs	r2, #0
 800bc96:	60a2      	str	r2, [r4, #8]
 800bc98:	6962      	ldr	r2, [r4, #20]
 800bc9a:	4252      	negs	r2, r2
 800bc9c:	61a2      	str	r2, [r4, #24]
 800bc9e:	6922      	ldr	r2, [r4, #16]
 800bca0:	b942      	cbnz	r2, 800bcb4 <__swsetup_r+0xa4>
 800bca2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bca6:	d1c5      	bne.n	800bc34 <__swsetup_r+0x24>
 800bca8:	bd38      	pop	{r3, r4, r5, pc}
 800bcaa:	0799      	lsls	r1, r3, #30
 800bcac:	bf58      	it	pl
 800bcae:	6962      	ldrpl	r2, [r4, #20]
 800bcb0:	60a2      	str	r2, [r4, #8]
 800bcb2:	e7f4      	b.n	800bc9e <__swsetup_r+0x8e>
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	e7f7      	b.n	800bca8 <__swsetup_r+0x98>
 800bcb8:	20000184 	.word	0x20000184

0800bcbc <_raise_r>:
 800bcbc:	291f      	cmp	r1, #31
 800bcbe:	b538      	push	{r3, r4, r5, lr}
 800bcc0:	4605      	mov	r5, r0
 800bcc2:	460c      	mov	r4, r1
 800bcc4:	d904      	bls.n	800bcd0 <_raise_r+0x14>
 800bcc6:	2316      	movs	r3, #22
 800bcc8:	6003      	str	r3, [r0, #0]
 800bcca:	f04f 30ff 	mov.w	r0, #4294967295
 800bcce:	bd38      	pop	{r3, r4, r5, pc}
 800bcd0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bcd2:	b112      	cbz	r2, 800bcda <_raise_r+0x1e>
 800bcd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bcd8:	b94b      	cbnz	r3, 800bcee <_raise_r+0x32>
 800bcda:	4628      	mov	r0, r5
 800bcdc:	f000 f830 	bl	800bd40 <_getpid_r>
 800bce0:	4622      	mov	r2, r4
 800bce2:	4601      	mov	r1, r0
 800bce4:	4628      	mov	r0, r5
 800bce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcea:	f000 b817 	b.w	800bd1c <_kill_r>
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	d00a      	beq.n	800bd08 <_raise_r+0x4c>
 800bcf2:	1c59      	adds	r1, r3, #1
 800bcf4:	d103      	bne.n	800bcfe <_raise_r+0x42>
 800bcf6:	2316      	movs	r3, #22
 800bcf8:	6003      	str	r3, [r0, #0]
 800bcfa:	2001      	movs	r0, #1
 800bcfc:	e7e7      	b.n	800bcce <_raise_r+0x12>
 800bcfe:	2100      	movs	r1, #0
 800bd00:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bd04:	4620      	mov	r0, r4
 800bd06:	4798      	blx	r3
 800bd08:	2000      	movs	r0, #0
 800bd0a:	e7e0      	b.n	800bcce <_raise_r+0x12>

0800bd0c <raise>:
 800bd0c:	4b02      	ldr	r3, [pc, #8]	@ (800bd18 <raise+0xc>)
 800bd0e:	4601      	mov	r1, r0
 800bd10:	6818      	ldr	r0, [r3, #0]
 800bd12:	f7ff bfd3 	b.w	800bcbc <_raise_r>
 800bd16:	bf00      	nop
 800bd18:	20000184 	.word	0x20000184

0800bd1c <_kill_r>:
 800bd1c:	b538      	push	{r3, r4, r5, lr}
 800bd1e:	4d07      	ldr	r5, [pc, #28]	@ (800bd3c <_kill_r+0x20>)
 800bd20:	2300      	movs	r3, #0
 800bd22:	4604      	mov	r4, r0
 800bd24:	4608      	mov	r0, r1
 800bd26:	4611      	mov	r1, r2
 800bd28:	602b      	str	r3, [r5, #0]
 800bd2a:	f7f7 fa4b 	bl	80031c4 <_kill>
 800bd2e:	1c43      	adds	r3, r0, #1
 800bd30:	d102      	bne.n	800bd38 <_kill_r+0x1c>
 800bd32:	682b      	ldr	r3, [r5, #0]
 800bd34:	b103      	cbz	r3, 800bd38 <_kill_r+0x1c>
 800bd36:	6023      	str	r3, [r4, #0]
 800bd38:	bd38      	pop	{r3, r4, r5, pc}
 800bd3a:	bf00      	nop
 800bd3c:	20000d98 	.word	0x20000d98

0800bd40 <_getpid_r>:
 800bd40:	f7f7 ba38 	b.w	80031b4 <_getpid>

0800bd44 <__swhatbuf_r>:
 800bd44:	b570      	push	{r4, r5, r6, lr}
 800bd46:	460c      	mov	r4, r1
 800bd48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd4c:	2900      	cmp	r1, #0
 800bd4e:	b096      	sub	sp, #88	@ 0x58
 800bd50:	4615      	mov	r5, r2
 800bd52:	461e      	mov	r6, r3
 800bd54:	da0d      	bge.n	800bd72 <__swhatbuf_r+0x2e>
 800bd56:	89a3      	ldrh	r3, [r4, #12]
 800bd58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bd5c:	f04f 0100 	mov.w	r1, #0
 800bd60:	bf14      	ite	ne
 800bd62:	2340      	movne	r3, #64	@ 0x40
 800bd64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bd68:	2000      	movs	r0, #0
 800bd6a:	6031      	str	r1, [r6, #0]
 800bd6c:	602b      	str	r3, [r5, #0]
 800bd6e:	b016      	add	sp, #88	@ 0x58
 800bd70:	bd70      	pop	{r4, r5, r6, pc}
 800bd72:	466a      	mov	r2, sp
 800bd74:	f000 f848 	bl	800be08 <_fstat_r>
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	dbec      	blt.n	800bd56 <__swhatbuf_r+0x12>
 800bd7c:	9901      	ldr	r1, [sp, #4]
 800bd7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bd82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bd86:	4259      	negs	r1, r3
 800bd88:	4159      	adcs	r1, r3
 800bd8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bd8e:	e7eb      	b.n	800bd68 <__swhatbuf_r+0x24>

0800bd90 <__smakebuf_r>:
 800bd90:	898b      	ldrh	r3, [r1, #12]
 800bd92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd94:	079d      	lsls	r5, r3, #30
 800bd96:	4606      	mov	r6, r0
 800bd98:	460c      	mov	r4, r1
 800bd9a:	d507      	bpl.n	800bdac <__smakebuf_r+0x1c>
 800bd9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bda0:	6023      	str	r3, [r4, #0]
 800bda2:	6123      	str	r3, [r4, #16]
 800bda4:	2301      	movs	r3, #1
 800bda6:	6163      	str	r3, [r4, #20]
 800bda8:	b003      	add	sp, #12
 800bdaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdac:	ab01      	add	r3, sp, #4
 800bdae:	466a      	mov	r2, sp
 800bdb0:	f7ff ffc8 	bl	800bd44 <__swhatbuf_r>
 800bdb4:	9f00      	ldr	r7, [sp, #0]
 800bdb6:	4605      	mov	r5, r0
 800bdb8:	4639      	mov	r1, r7
 800bdba:	4630      	mov	r0, r6
 800bdbc:	f7fe ff62 	bl	800ac84 <_malloc_r>
 800bdc0:	b948      	cbnz	r0, 800bdd6 <__smakebuf_r+0x46>
 800bdc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdc6:	059a      	lsls	r2, r3, #22
 800bdc8:	d4ee      	bmi.n	800bda8 <__smakebuf_r+0x18>
 800bdca:	f023 0303 	bic.w	r3, r3, #3
 800bdce:	f043 0302 	orr.w	r3, r3, #2
 800bdd2:	81a3      	strh	r3, [r4, #12]
 800bdd4:	e7e2      	b.n	800bd9c <__smakebuf_r+0xc>
 800bdd6:	89a3      	ldrh	r3, [r4, #12]
 800bdd8:	6020      	str	r0, [r4, #0]
 800bdda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdde:	81a3      	strh	r3, [r4, #12]
 800bde0:	9b01      	ldr	r3, [sp, #4]
 800bde2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bde6:	b15b      	cbz	r3, 800be00 <__smakebuf_r+0x70>
 800bde8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdec:	4630      	mov	r0, r6
 800bdee:	f000 f81d 	bl	800be2c <_isatty_r>
 800bdf2:	b128      	cbz	r0, 800be00 <__smakebuf_r+0x70>
 800bdf4:	89a3      	ldrh	r3, [r4, #12]
 800bdf6:	f023 0303 	bic.w	r3, r3, #3
 800bdfa:	f043 0301 	orr.w	r3, r3, #1
 800bdfe:	81a3      	strh	r3, [r4, #12]
 800be00:	89a3      	ldrh	r3, [r4, #12]
 800be02:	431d      	orrs	r5, r3
 800be04:	81a5      	strh	r5, [r4, #12]
 800be06:	e7cf      	b.n	800bda8 <__smakebuf_r+0x18>

0800be08 <_fstat_r>:
 800be08:	b538      	push	{r3, r4, r5, lr}
 800be0a:	4d07      	ldr	r5, [pc, #28]	@ (800be28 <_fstat_r+0x20>)
 800be0c:	2300      	movs	r3, #0
 800be0e:	4604      	mov	r4, r0
 800be10:	4608      	mov	r0, r1
 800be12:	4611      	mov	r1, r2
 800be14:	602b      	str	r3, [r5, #0]
 800be16:	f7f7 fa35 	bl	8003284 <_fstat>
 800be1a:	1c43      	adds	r3, r0, #1
 800be1c:	d102      	bne.n	800be24 <_fstat_r+0x1c>
 800be1e:	682b      	ldr	r3, [r5, #0]
 800be20:	b103      	cbz	r3, 800be24 <_fstat_r+0x1c>
 800be22:	6023      	str	r3, [r4, #0]
 800be24:	bd38      	pop	{r3, r4, r5, pc}
 800be26:	bf00      	nop
 800be28:	20000d98 	.word	0x20000d98

0800be2c <_isatty_r>:
 800be2c:	b538      	push	{r3, r4, r5, lr}
 800be2e:	4d06      	ldr	r5, [pc, #24]	@ (800be48 <_isatty_r+0x1c>)
 800be30:	2300      	movs	r3, #0
 800be32:	4604      	mov	r4, r0
 800be34:	4608      	mov	r0, r1
 800be36:	602b      	str	r3, [r5, #0]
 800be38:	f7f7 fa34 	bl	80032a4 <_isatty>
 800be3c:	1c43      	adds	r3, r0, #1
 800be3e:	d102      	bne.n	800be46 <_isatty_r+0x1a>
 800be40:	682b      	ldr	r3, [r5, #0]
 800be42:	b103      	cbz	r3, 800be46 <_isatty_r+0x1a>
 800be44:	6023      	str	r3, [r4, #0]
 800be46:	bd38      	pop	{r3, r4, r5, pc}
 800be48:	20000d98 	.word	0x20000d98

0800be4c <_init>:
 800be4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be4e:	bf00      	nop
 800be50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be52:	bc08      	pop	{r3}
 800be54:	469e      	mov	lr, r3
 800be56:	4770      	bx	lr

0800be58 <_fini>:
 800be58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be5a:	bf00      	nop
 800be5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be5e:	bc08      	pop	{r3}
 800be60:	469e      	mov	lr, r3
 800be62:	4770      	bx	lr
