
comanda_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2f8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0800c4c8  0800c4c8  0000d4c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c984  0800c984  0000e228  2**0
                  CONTENTS
  4 .ARM          00000008  0800c984  0800c984  0000d984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c98c  0800c98c  0000e228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c98c  0800c98c  0000d98c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c990  0800c990  0000d990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800c994  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c44  20000228  0800cbbc  0000e228  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000e6c  0800cbbc  0000ee6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e228  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151f1  00000000  00000000  0000e258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d47  00000000  00000000  00023449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  00026190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fc2  00000000  00000000  000275a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021acd  00000000  00000000  0002856a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a38  00000000  00000000  0004a037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9e12  00000000  00000000  00061a6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b881  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b1c  00000000  00000000  0012b8c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001323e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000228 	.word	0x20000228
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c4b0 	.word	0x0800c4b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000022c 	.word	0x2000022c
 800020c:	0800c4b0 	.word	0x0800c4b0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <rpm2pwm>:
			+ out_min;
}
int32_t percent2pwm(int x) {
	return (x - 0) * (65535 - 0) / (100 - 0) + 0;
}
int32_t rpm2pwm(int x) {
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	return (x - 0) * (65535 - 0) / (160 - 0) + 0;
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	4613      	mov	r3, r2
 8001030:	041b      	lsls	r3, r3, #16
 8001032:	1a9b      	subs	r3, r3, r2
 8001034:	4a05      	ldr	r2, [pc, #20]	@ (800104c <rpm2pwm+0x28>)
 8001036:	fb82 1203 	smull	r1, r2, r2, r3
 800103a:	1192      	asrs	r2, r2, #6
 800103c:	17db      	asrs	r3, r3, #31
 800103e:	1ad3      	subs	r3, r2, r3
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	66666667 	.word	0x66666667

08001050 <rad2rpm>:
double rad2deg(double rad) {
	return (rad * (180.0 / M_PI)) - ((int) (rad * (180.0 / M_PI) / 360) * 360);
}
float rad2rpm(float rad) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	ed87 0a01 	vstr	s0, [r7, #4]
    return roundf((rad * 60) / (2 * M_PI));
 800105a:	edd7 7a01 	vldr	s15, [r7, #4]
 800105e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80010a8 <rad2rpm+0x58>
 8001062:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001066:	ee17 0a90 	vmov	r0, s15
 800106a:	f7ff fa8d 	bl	8000588 <__aeabi_f2d>
 800106e:	a30c      	add	r3, pc, #48	@ (adr r3, 80010a0 <rad2rpm+0x50>)
 8001070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001074:	f7ff fc0a 	bl	800088c <__aeabi_ddiv>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fdd2 	bl	8000c28 <__aeabi_d2f>
 8001084:	4603      	mov	r3, r0
 8001086:	ee00 3a10 	vmov	s0, r3
 800108a:	f00b f9ed 	bl	800c468 <roundf>
 800108e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001092:	eeb0 0a67 	vmov.f32	s0, s15
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	f3af 8000 	nop.w
 80010a0:	54442d18 	.word	0x54442d18
 80010a4:	401921fb 	.word	0x401921fb
 80010a8:	42700000 	.word	0x42700000

080010ac <MOTOR_Init>:
	int32_t position, old_position;
	int speed;
	float speed_rpm, speed_rad;
}MOTOR;

void MOTOR_Init(MOTOR *motor){
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	motor->position = 0;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
	motor->old_position = 0;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	605a      	str	r2, [r3, #4]
	motor->speed = 0;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
	motor->speed_rpm = 0;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
	motor->speed_rad = 0;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <Controller_Init>:
//CONTROLLER STRUCT
typedef struct{
	int w, y, x;
}Controller;

void Controller_Init(Controller *ps4){
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
	ps4->w = 0;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
	ps4->y = 0;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	605a      	str	r2, [r3, #4]
	ps4->x = 0;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <Wheels__Init>:

typedef struct{
	double fdr, fst, sdr, sst, max_speed, scale_factor;
}WHEELS;

void Wheels__Init(WHEELS *wheels) {
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	wheels->fdr = 0;
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	f04f 0300 	mov.w	r3, #0
 800111a:	e9c1 2300 	strd	r2, r3, [r1]
	wheels->fst = 0;
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	e9c1 2302 	strd	r2, r3, [r1, #8]
	wheels->sdr = 0;
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	f04f 0300 	mov.w	r3, #0
 8001136:	e9c1 2304 	strd	r2, r3, [r1, #16]
	wheels->sst = 0;
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	f04f 0300 	mov.w	r3, #0
 8001144:	e9c1 2306 	strd	r2, r3, [r1, #24]
	wheels->max_speed = 0;
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	e9c1 2308 	strd	r2, r3, [r1, #32]
	wheels->scale_factor = 0;
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
};
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <HAL_TIM_PeriodElapsedCallback>:
	tx_buffer[MAX_BUFFER_SIZE - 1] = '\0';
}

int small_counter = 0, big_counter = 0;
MOTOR fdr, fst, sdr, sst;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	if (htim == &htim9) {
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a89      	ldr	r2, [pc, #548]	@ (80013a0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800117c:	4293      	cmp	r3, r2
 800117e:	f040 8105 	bne.w	800138c <HAL_TIM_PeriodElapsedCallback+0x21c>
		//fdr
		fdr.position = __HAL_TIM_GET_COUNTER(&htim1);
 8001182:	4b88      	ldr	r3, [pc, #544]	@ (80013a4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001188:	461a      	mov	r2, r3
 800118a:	4b87      	ldr	r3, [pc, #540]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800118c:	601a      	str	r2, [r3, #0]
		fdr.speed = fdr.position - fdr.old_position;
 800118e:	4b86      	ldr	r3, [pc, #536]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	4b85      	ldr	r3, [pc, #532]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	4a83      	ldr	r2, [pc, #524]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800119a:	6093      	str	r3, [r2, #8]
		fdr.speed_rpm = (fdr.speed * 60) / TICKS_PER_REVOLUTION;
 800119c:	4b82      	ldr	r3, [pc, #520]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	4613      	mov	r3, r2
 80011a2:	011b      	lsls	r3, r3, #4
 80011a4:	1a9b      	subs	r3, r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4a80      	ldr	r2, [pc, #512]	@ (80013ac <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80011aa:	fb82 1203 	smull	r1, r2, r2, r3
 80011ae:	441a      	add	r2, r3
 80011b0:	1292      	asrs	r2, r2, #10
 80011b2:	17db      	asrs	r3, r3, #31
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	ee07 3a90 	vmov	s15, r3
 80011ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011be:	4b7a      	ldr	r3, [pc, #488]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80011c0:	edc3 7a03 	vstr	s15, [r3, #12]
		fdr.speed_rad = (fdr.speed_rpm / 60) * 2 * M_PI;
 80011c4:	4b78      	ldr	r3, [pc, #480]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80011c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80011ca:	eddf 6a79 	vldr	s13, [pc, #484]	@ 80013b0 <HAL_TIM_PeriodElapsedCallback+0x240>
 80011ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011d6:	ee17 0a90 	vmov	r0, s15
 80011da:	f7ff f9d5 	bl	8000588 <__aeabi_f2d>
 80011de:	a36e      	add	r3, pc, #440	@ (adr r3, 8001398 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	f7ff fa28 	bl	8000638 <__aeabi_dmul>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fd1a 	bl	8000c28 <__aeabi_d2f>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a6c      	ldr	r2, [pc, #432]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80011f8:	6113      	str	r3, [r2, #16]
		fdr.old_position = fdr.position;
 80011fa:	4b6b      	ldr	r3, [pc, #428]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a6a      	ldr	r2, [pc, #424]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001200:	6053      	str	r3, [r2, #4]

		//fst
		fst.position = __HAL_TIM_GET_COUNTER(&htim1);
 8001202:	4b68      	ldr	r3, [pc, #416]	@ (80013a4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001208:	461a      	mov	r2, r3
 800120a:	4b6a      	ldr	r3, [pc, #424]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800120c:	601a      	str	r2, [r3, #0]
		fst.speed = fst.position - fst.old_position;
 800120e:	4b69      	ldr	r3, [pc, #420]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4b68      	ldr	r3, [pc, #416]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	4a66      	ldr	r2, [pc, #408]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800121a:	6093      	str	r3, [r2, #8]
		fst.speed_rpm = (fst.speed * 60) / TICKS_PER_REVOLUTION;
 800121c:	4b65      	ldr	r3, [pc, #404]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	4613      	mov	r3, r2
 8001222:	011b      	lsls	r3, r3, #4
 8001224:	1a9b      	subs	r3, r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4a60      	ldr	r2, [pc, #384]	@ (80013ac <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800122a:	fb82 1203 	smull	r1, r2, r2, r3
 800122e:	441a      	add	r2, r3
 8001230:	1292      	asrs	r2, r2, #10
 8001232:	17db      	asrs	r3, r3, #31
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	ee07 3a90 	vmov	s15, r3
 800123a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123e:	4b5d      	ldr	r3, [pc, #372]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001240:	edc3 7a03 	vstr	s15, [r3, #12]
		fst.speed_rad = (fst.speed_rpm / 60) * 2 * M_PI;
 8001244:	4b5b      	ldr	r3, [pc, #364]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001246:	ed93 7a03 	vldr	s14, [r3, #12]
 800124a:	eddf 6a59 	vldr	s13, [pc, #356]	@ 80013b0 <HAL_TIM_PeriodElapsedCallback+0x240>
 800124e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001252:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001256:	ee17 0a90 	vmov	r0, s15
 800125a:	f7ff f995 	bl	8000588 <__aeabi_f2d>
 800125e:	a34e      	add	r3, pc, #312	@ (adr r3, 8001398 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001264:	f7ff f9e8 	bl	8000638 <__aeabi_dmul>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	f7ff fcda 	bl	8000c28 <__aeabi_d2f>
 8001274:	4603      	mov	r3, r0
 8001276:	4a4f      	ldr	r2, [pc, #316]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001278:	6113      	str	r3, [r2, #16]
		fst.old_position = fst.position;
 800127a:	4b4e      	ldr	r3, [pc, #312]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a4d      	ldr	r2, [pc, #308]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001280:	6053      	str	r3, [r2, #4]

		//sdr
		sdr.position = __HAL_TIM_GET_COUNTER(&htim1);
 8001282:	4b48      	ldr	r3, [pc, #288]	@ (80013a4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001288:	461a      	mov	r2, r3
 800128a:	4b4b      	ldr	r3, [pc, #300]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800128c:	601a      	str	r2, [r3, #0]
		sdr.speed = sdr.position - sdr.old_position;
 800128e:	4b4a      	ldr	r3, [pc, #296]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	4b49      	ldr	r3, [pc, #292]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	4a47      	ldr	r2, [pc, #284]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800129a:	6093      	str	r3, [r2, #8]
		sdr.speed_rpm = (sdr.speed * 60) / TICKS_PER_REVOLUTION;
 800129c:	4b46      	ldr	r3, [pc, #280]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	4613      	mov	r3, r2
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	1a9b      	subs	r3, r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4a40      	ldr	r2, [pc, #256]	@ (80013ac <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80012aa:	fb82 1203 	smull	r1, r2, r2, r3
 80012ae:	441a      	add	r2, r3
 80012b0:	1292      	asrs	r2, r2, #10
 80012b2:	17db      	asrs	r3, r3, #31
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	ee07 3a90 	vmov	s15, r3
 80012ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012be:	4b3e      	ldr	r3, [pc, #248]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80012c0:	edc3 7a03 	vstr	s15, [r3, #12]
		sdr.speed_rad = (sdr.speed_rpm / 60) * 2 * M_PI;
 80012c4:	4b3c      	ldr	r3, [pc, #240]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80012c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80012ca:	eddf 6a39 	vldr	s13, [pc, #228]	@ 80013b0 <HAL_TIM_PeriodElapsedCallback+0x240>
 80012ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012d6:	ee17 0a90 	vmov	r0, s15
 80012da:	f7ff f955 	bl	8000588 <__aeabi_f2d>
 80012de:	a32e      	add	r3, pc, #184	@ (adr r3, 8001398 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	f7ff f9a8 	bl	8000638 <__aeabi_dmul>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	f7ff fc9a 	bl	8000c28 <__aeabi_d2f>
 80012f4:	4603      	mov	r3, r0
 80012f6:	4a30      	ldr	r2, [pc, #192]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80012f8:	6113      	str	r3, [r2, #16]
		sdr.old_position = sdr.position;
 80012fa:	4b2f      	ldr	r3, [pc, #188]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a2e      	ldr	r2, [pc, #184]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001300:	6053      	str	r3, [r2, #4]

		//sst
		sst.position = __HAL_TIM_GET_COUNTER(&htim1);
 8001302:	4b28      	ldr	r3, [pc, #160]	@ (80013a4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001308:	461a      	mov	r2, r3
 800130a:	4b2c      	ldr	r3, [pc, #176]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800130c:	601a      	str	r2, [r3, #0]
		sst.speed = sst.position - sst.old_position;
 800130e:	4b2b      	ldr	r3, [pc, #172]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4b2a      	ldr	r3, [pc, #168]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	4a28      	ldr	r2, [pc, #160]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800131a:	6093      	str	r3, [r2, #8]
		sst.speed_rpm = (sst.speed * 60) / TICKS_PER_REVOLUTION;
 800131c:	4b27      	ldr	r3, [pc, #156]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	4613      	mov	r3, r2
 8001322:	011b      	lsls	r3, r3, #4
 8001324:	1a9b      	subs	r3, r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4a20      	ldr	r2, [pc, #128]	@ (80013ac <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800132a:	fb82 1203 	smull	r1, r2, r2, r3
 800132e:	441a      	add	r2, r3
 8001330:	1292      	asrs	r2, r2, #10
 8001332:	17db      	asrs	r3, r3, #31
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	ee07 3a90 	vmov	s15, r3
 800133a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800133e:	4b1f      	ldr	r3, [pc, #124]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001340:	edc3 7a03 	vstr	s15, [r3, #12]
		sst.speed_rad = (sst.speed_rpm / 60) * 2 * M_PI;
 8001344:	4b1d      	ldr	r3, [pc, #116]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001346:	ed93 7a03 	vldr	s14, [r3, #12]
 800134a:	eddf 6a19 	vldr	s13, [pc, #100]	@ 80013b0 <HAL_TIM_PeriodElapsedCallback+0x240>
 800134e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001352:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001356:	ee17 0a90 	vmov	r0, s15
 800135a:	f7ff f915 	bl	8000588 <__aeabi_f2d>
 800135e:	a30e      	add	r3, pc, #56	@ (adr r3, 8001398 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001364:	f7ff f968 	bl	8000638 <__aeabi_dmul>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fc5a 	bl	8000c28 <__aeabi_d2f>
 8001374:	4603      	mov	r3, r0
 8001376:	4a11      	ldr	r2, [pc, #68]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001378:	6113      	str	r3, [r2, #16]
		sst.old_position = sst.position;
 800137a:	4b10      	ldr	r3, [pc, #64]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a0f      	ldr	r2, [pc, #60]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001380:	6053      	str	r3, [r2, #4]
		small_counter++;
 8001382:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	4a0d      	ldr	r2, [pc, #52]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800138a:	6013      	str	r3, [r2, #0]
	if(htim == &htim12){
//		process_data();
//		HAL_UART_Transmit(&huart2, (uint8_t *) tx_buffer, 25, HAL_MAX_DELAY);
//		big_counter++;
	}
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	f3af 8000 	nop.w
 8001398:	54442d18 	.word	0x54442d18
 800139c:	400921fb 	.word	0x400921fb
 80013a0:	2000044c 	.word	0x2000044c
 80013a4:	2000029c 	.word	0x2000029c
 80013a8:	20000c74 	.word	0x20000c74
 80013ac:	ea0ea0eb 	.word	0xea0ea0eb
 80013b0:	42700000 	.word	0x42700000
 80013b4:	20000c88 	.word	0x20000c88
 80013b8:	20000c9c 	.word	0x20000c9c
 80013bc:	20000cb0 	.word	0x20000cb0
 80013c0:	20000c70 	.word	0x20000c70

080013c4 <HAL_UART_TxCpltCallback>:


int delay = 1000;
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
//		process_data();
//		HAL_UART_Transmit_DMA(&huart2, (uint8_t*) tx_buffer,25);
//		big_counter++;
//		HAL_Delay(delay);
//	}
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b091      	sub	sp, #68	@ 0x44
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) { //ESP32
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a5d      	ldr	r2, [pc, #372]	@ (8001558 <HAL_UART_RxCpltCallback+0x180>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d12c      	bne.n	8001442 <HAL_UART_RxCpltCallback+0x6a>
		HAL_UART_Receive_DMA(&huart2, controller_buffer, 15);
 80013e8:	220f      	movs	r2, #15
 80013ea:	495c      	ldr	r1, [pc, #368]	@ (800155c <HAL_UART_RxCpltCallback+0x184>)
 80013ec:	485a      	ldr	r0, [pc, #360]	@ (8001558 <HAL_UART_RxCpltCallback+0x180>)
 80013ee:	f005 fb43 	bl	8006a78 <HAL_UART_Receive_DMA>
		int joystick_values[3];
		int index = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		char *token;

		token = strtok((char*) controller_buffer, ",");
 80013f6:	495a      	ldr	r1, [pc, #360]	@ (8001560 <HAL_UART_RxCpltCallback+0x188>)
 80013f8:	4858      	ldr	r0, [pc, #352]	@ (800155c <HAL_UART_RxCpltCallback+0x184>)
 80013fa:	f008 faf1 	bl	80099e0 <strtok>
 80013fe:	63b8      	str	r0, [r7, #56]	@ 0x38
		while (token != NULL && index < 3) {
 8001400:	e010      	b.n	8001424 <HAL_UART_RxCpltCallback+0x4c>
			joystick_values[index++] = atoi(token);
 8001402:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 8001404:	1c63      	adds	r3, r4, #1
 8001406:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001408:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800140a:	f006 fed8 	bl	80081be <atoi>
 800140e:	4602      	mov	r2, r0
 8001410:	00a3      	lsls	r3, r4, #2
 8001412:	3340      	adds	r3, #64	@ 0x40
 8001414:	443b      	add	r3, r7
 8001416:	f843 2c1c 	str.w	r2, [r3, #-28]
			token = strtok(NULL, ",");
 800141a:	4951      	ldr	r1, [pc, #324]	@ (8001560 <HAL_UART_RxCpltCallback+0x188>)
 800141c:	2000      	movs	r0, #0
 800141e:	f008 fadf 	bl	80099e0 <strtok>
 8001422:	63b8      	str	r0, [r7, #56]	@ 0x38
		while (token != NULL && index < 3) {
 8001424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001426:	2b00      	cmp	r3, #0
 8001428:	d002      	beq.n	8001430 <HAL_UART_RxCpltCallback+0x58>
 800142a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800142c:	2b02      	cmp	r3, #2
 800142e:	dde8      	ble.n	8001402 <HAL_UART_RxCpltCallback+0x2a>
		}
		ps4.w = joystick_values[0]; //lx - w
 8001430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001432:	4a4c      	ldr	r2, [pc, #304]	@ (8001564 <HAL_UART_RxCpltCallback+0x18c>)
 8001434:	6013      	str	r3, [r2, #0]
		ps4.y = joystick_values[1]; //rx - y
 8001436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001438:	4a4a      	ldr	r2, [pc, #296]	@ (8001564 <HAL_UART_RxCpltCallback+0x18c>)
 800143a:	6053      	str	r3, [r2, #4]
		ps4.x = joystick_values[2]; //ry - x
 800143c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800143e:	4a49      	ldr	r2, [pc, #292]	@ (8001564 <HAL_UART_RxCpltCallback+0x18c>)
 8001440:	6093      	str	r3, [r2, #8]
	}
	if (huart == &huart6) { //BLUEPILL
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a48      	ldr	r2, [pc, #288]	@ (8001568 <HAL_UART_RxCpltCallback+0x190>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d179      	bne.n	800153e <HAL_UART_RxCpltCallback+0x166>
		HAL_UART_Receive_DMA(&huart6, odometry_buffer, 25);
 800144a:	2219      	movs	r2, #25
 800144c:	4947      	ldr	r1, [pc, #284]	@ (800156c <HAL_UART_RxCpltCallback+0x194>)
 800144e:	4846      	ldr	r0, [pc, #280]	@ (8001568 <HAL_UART_RxCpltCallback+0x190>)
 8001450:	f005 fb12 	bl	8006a78 <HAL_UART_Receive_DMA>
		double coordinates[3];
		int index = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	637b      	str	r3, [r7, #52]	@ 0x34
		char *token;

		token = strtok((char*) odometry_buffer, ",");
 8001458:	4941      	ldr	r1, [pc, #260]	@ (8001560 <HAL_UART_RxCpltCallback+0x188>)
 800145a:	4844      	ldr	r0, [pc, #272]	@ (800156c <HAL_UART_RxCpltCallback+0x194>)
 800145c:	f008 fac0 	bl	80099e0 <strtok>
 8001460:	6338      	str	r0, [r7, #48]	@ 0x30
		while (token != NULL && index < 3) {
 8001462:	e015      	b.n	8001490 <HAL_UART_RxCpltCallback+0xb8>
			coordinates[index++] = strtod(token, NULL);
 8001464:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8001466:	1c63      	adds	r3, r4, #1
 8001468:	637b      	str	r3, [r7, #52]	@ 0x34
 800146a:	2100      	movs	r1, #0
 800146c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800146e:	f007 fcaf 	bl	8008dd0 <strtod>
 8001472:	eeb0 7a40 	vmov.f32	s14, s0
 8001476:	eef0 7a60 	vmov.f32	s15, s1
 800147a:	00e3      	lsls	r3, r4, #3
 800147c:	3340      	adds	r3, #64	@ 0x40
 800147e:	443b      	add	r3, r7
 8001480:	3b38      	subs	r3, #56	@ 0x38
 8001482:	ed83 7b00 	vstr	d7, [r3]
			token = strtok(NULL, ",");
 8001486:	4936      	ldr	r1, [pc, #216]	@ (8001560 <HAL_UART_RxCpltCallback+0x188>)
 8001488:	2000      	movs	r0, #0
 800148a:	f008 faa9 	bl	80099e0 <strtok>
 800148e:	6338      	str	r0, [r7, #48]	@ 0x30
		while (token != NULL && index < 3) {
 8001490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001492:	2b00      	cmp	r3, #0
 8001494:	d002      	beq.n	800149c <HAL_UART_RxCpltCallback+0xc4>
 8001496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001498:	2b02      	cmp	r3, #2
 800149a:	dde3      	ble.n	8001464 <HAL_UART_RxCpltCallback+0x8c>
		}
		current_x = (double) ((int) (coordinates[0] * 100)) / 100;
 800149c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	4b32      	ldr	r3, [pc, #200]	@ (8001570 <HAL_UART_RxCpltCallback+0x198>)
 80014a6:	f7ff f8c7 	bl	8000638 <__aeabi_dmul>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	f7ff fb71 	bl	8000b98 <__aeabi_d2iz>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f853 	bl	8000564 <__aeabi_i2d>
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001570 <HAL_UART_RxCpltCallback+0x198>)
 80014c4:	f7ff f9e2 	bl	800088c <__aeabi_ddiv>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4929      	ldr	r1, [pc, #164]	@ (8001574 <HAL_UART_RxCpltCallback+0x19c>)
 80014ce:	e9c1 2300 	strd	r2, r3, [r1]
		current_y = (double) ((int) (coordinates[1] * 100)) / 100;
 80014d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	4b25      	ldr	r3, [pc, #148]	@ (8001570 <HAL_UART_RxCpltCallback+0x198>)
 80014dc:	f7ff f8ac 	bl	8000638 <__aeabi_dmul>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff fb56 	bl	8000b98 <__aeabi_d2iz>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f838 	bl	8000564 <__aeabi_i2d>
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001570 <HAL_UART_RxCpltCallback+0x198>)
 80014fa:	f7ff f9c7 	bl	800088c <__aeabi_ddiv>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	491d      	ldr	r1, [pc, #116]	@ (8001578 <HAL_UART_RxCpltCallback+0x1a0>)
 8001504:	e9c1 2300 	strd	r2, r3, [r1]
		current_h = (double) ((int) (coordinates[2] * 100)) / 100;
 8001508:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	4b17      	ldr	r3, [pc, #92]	@ (8001570 <HAL_UART_RxCpltCallback+0x198>)
 8001512:	f7ff f891 	bl	8000638 <__aeabi_dmul>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f7ff fb3b 	bl	8000b98 <__aeabi_d2iz>
 8001522:	4603      	mov	r3, r0
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f81d 	bl	8000564 <__aeabi_i2d>
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <HAL_UART_RxCpltCallback+0x198>)
 8001530:	f7ff f9ac 	bl	800088c <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4910      	ldr	r1, [pc, #64]	@ (800157c <HAL_UART_RxCpltCallback+0x1a4>)
 800153a:	e9c1 2300 	strd	r2, r3, [r1]
//		process_data();
//		HAL_UART_Transmit(&huart2, (uint8_t*) tx_buffer,25, HAL_MAX_DELAY);
	}
	if (huart == &huart3) {
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a0f      	ldr	r2, [pc, #60]	@ (8001580 <HAL_UART_RxCpltCallback+0x1a8>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d104      	bne.n	8001550 <HAL_UART_RxCpltCallback+0x178>
		HAL_UART_Receive_DMA(&huart3, live_follower_buffer, 25);
 8001546:	2219      	movs	r2, #25
 8001548:	490e      	ldr	r1, [pc, #56]	@ (8001584 <HAL_UART_RxCpltCallback+0x1ac>)
 800154a:	480d      	ldr	r0, [pc, #52]	@ (8001580 <HAL_UART_RxCpltCallback+0x1a8>)
 800154c:	f005 fa94 	bl	8006a78 <HAL_UART_Receive_DMA>
	}
}
 8001550:	bf00      	nop
 8001552:	3744      	adds	r7, #68	@ 0x44
 8001554:	46bd      	mov	sp, r7
 8001556:	bd90      	pop	{r4, r7, pc}
 8001558:	20000524 	.word	0x20000524
 800155c:	20000c28 	.word	0x20000c28
 8001560:	0800c4dc 	.word	0x0800c4dc
 8001564:	20000c1c 	.word	0x20000c1c
 8001568:	200005b4 	.word	0x200005b4
 800156c:	20000c38 	.word	0x20000c38
 8001570:	40590000 	.word	0x40590000
 8001574:	20000c58 	.word	0x20000c58
 8001578:	20000c60 	.word	0x20000c60
 800157c:	20000c68 	.word	0x20000c68
 8001580:	2000056c 	.word	0x2000056c
 8001584:	20000c00 	.word	0x20000c00

08001588 <fdr_set_pwm>:

//MOTORS MOVEMENT
void fdr_set_pwm(int32_t pwm_value) {
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	if (pwm_value > 0) {
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	dd06      	ble.n	80015a4 <fdr_set_pwm+0x1c>
		TIM4->CCR3 = 0; // L
 8001596:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <fdr_set_pwm+0x50>)
 8001598:	2200      	movs	r2, #0
 800159a:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM4->CCR4 = pwm_value; // R
 800159c:	4a0e      	ldr	r2, [pc, #56]	@ (80015d8 <fdr_set_pwm+0x50>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM4->CCR3 = pwm_value * -1; // L
	} else if (pwm_value == 0) {
		TIM4->CCR4 = 0; // R
		TIM4->CCR3 = 0; // L
	}
}
 80015a2:	e013      	b.n	80015cc <fdr_set_pwm+0x44>
	} else if (pwm_value < 0) {
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	da07      	bge.n	80015ba <fdr_set_pwm+0x32>
		TIM4->CCR4 = 0; // R
 80015aa:	4b0b      	ldr	r3, [pc, #44]	@ (80015d8 <fdr_set_pwm+0x50>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM4->CCR3 = pwm_value * -1; // L
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	425a      	negs	r2, r3
 80015b4:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <fdr_set_pwm+0x50>)
 80015b6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80015b8:	e008      	b.n	80015cc <fdr_set_pwm+0x44>
	} else if (pwm_value == 0) {
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d105      	bne.n	80015cc <fdr_set_pwm+0x44>
		TIM4->CCR4 = 0; // R
 80015c0:	4b05      	ldr	r3, [pc, #20]	@ (80015d8 <fdr_set_pwm+0x50>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM4->CCR3 = 0; // L
 80015c6:	4b04      	ldr	r3, [pc, #16]	@ (80015d8 <fdr_set_pwm+0x50>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	40000800 	.word	0x40000800

080015dc <fst_set_pwm>:
void fst_set_pwm(int32_t pwm_value) {
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	if (pwm_value > 0) {
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	dd06      	ble.n	80015f8 <fst_set_pwm+0x1c>
		TIM4->CCR2 = 0; // L
 80015ea:	4b10      	ldr	r3, [pc, #64]	@ (800162c <fst_set_pwm+0x50>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM4->CCR1 = pwm_value; // R
 80015f0:	4a0e      	ldr	r2, [pc, #56]	@ (800162c <fst_set_pwm+0x50>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM4->CCR2 = pwm_value * -1; // L
	} else if (pwm_value == 0) {
		TIM4->CCR1 = 0; // R
		TIM4->CCR2 = 0; // L
	}
}
 80015f6:	e013      	b.n	8001620 <fst_set_pwm+0x44>
	} else if (pwm_value < 0) {
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	da07      	bge.n	800160e <fst_set_pwm+0x32>
		TIM4->CCR1 = 0; // R
 80015fe:	4b0b      	ldr	r3, [pc, #44]	@ (800162c <fst_set_pwm+0x50>)
 8001600:	2200      	movs	r2, #0
 8001602:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM4->CCR2 = pwm_value * -1; // L
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	425a      	negs	r2, r3
 8001608:	4b08      	ldr	r3, [pc, #32]	@ (800162c <fst_set_pwm+0x50>)
 800160a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800160c:	e008      	b.n	8001620 <fst_set_pwm+0x44>
	} else if (pwm_value == 0) {
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d105      	bne.n	8001620 <fst_set_pwm+0x44>
		TIM4->CCR1 = 0; // R
 8001614:	4b05      	ldr	r3, [pc, #20]	@ (800162c <fst_set_pwm+0x50>)
 8001616:	2200      	movs	r2, #0
 8001618:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM4->CCR2 = 0; // L
 800161a:	4b04      	ldr	r3, [pc, #16]	@ (800162c <fst_set_pwm+0x50>)
 800161c:	2200      	movs	r2, #0
 800161e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	40000800 	.word	0x40000800

08001630 <sdr_set_pwm>:
void sdr_set_pwm(int32_t pwm_value) {
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	if (pwm_value > 0) {
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	dd06      	ble.n	800164c <sdr_set_pwm+0x1c>
		TIM8->CCR3 = 0; // R
 800163e:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <sdr_set_pwm+0x50>)
 8001640:	2200      	movs	r2, #0
 8001642:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM8->CCR4 = pwm_value; // L
 8001644:	4a0e      	ldr	r2, [pc, #56]	@ (8001680 <sdr_set_pwm+0x50>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM8->CCR3 = pwm_value * -1; // R
	} else if (pwm_value == 0) {
		TIM8->CCR4 = 0; // R
		TIM8->CCR3 = 0; // L
	}
}
 800164a:	e013      	b.n	8001674 <sdr_set_pwm+0x44>
	} else if (pwm_value < 0) {
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	da07      	bge.n	8001662 <sdr_set_pwm+0x32>
		TIM8->CCR4 = 0; // L
 8001652:	4b0b      	ldr	r3, [pc, #44]	@ (8001680 <sdr_set_pwm+0x50>)
 8001654:	2200      	movs	r2, #0
 8001656:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM8->CCR3 = pwm_value * -1; // R
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	425a      	negs	r2, r3
 800165c:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <sdr_set_pwm+0x50>)
 800165e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001660:	e008      	b.n	8001674 <sdr_set_pwm+0x44>
	} else if (pwm_value == 0) {
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d105      	bne.n	8001674 <sdr_set_pwm+0x44>
		TIM8->CCR4 = 0; // R
 8001668:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <sdr_set_pwm+0x50>)
 800166a:	2200      	movs	r2, #0
 800166c:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM8->CCR3 = 0; // L
 800166e:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <sdr_set_pwm+0x50>)
 8001670:	2200      	movs	r2, #0
 8001672:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	40010400 	.word	0x40010400

08001684 <sst_set_pwm>:
void sst_set_pwm(int32_t pwm_value) {
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	if (pwm_value > 0) {
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	dd06      	ble.n	80016a0 <sst_set_pwm+0x1c>
		TIM8->CCR2 = 0; // L
 8001692:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <sst_set_pwm+0x50>)
 8001694:	2200      	movs	r2, #0
 8001696:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM8->CCR1 = pwm_value; // R
 8001698:	4a0e      	ldr	r2, [pc, #56]	@ (80016d4 <sst_set_pwm+0x50>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM8->CCR2 = pwm_value * -1; // L
	} else if (pwm_value == 0) {
		TIM8->CCR1 = 0; // R
		TIM8->CCR2 = 0; // L
	}
}
 800169e:	e013      	b.n	80016c8 <sst_set_pwm+0x44>
	} else if (pwm_value < 0) {
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	da07      	bge.n	80016b6 <sst_set_pwm+0x32>
		TIM8->CCR1 = 0; // R
 80016a6:	4b0b      	ldr	r3, [pc, #44]	@ (80016d4 <sst_set_pwm+0x50>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM8->CCR2 = pwm_value * -1; // L
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	425a      	negs	r2, r3
 80016b0:	4b08      	ldr	r3, [pc, #32]	@ (80016d4 <sst_set_pwm+0x50>)
 80016b2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80016b4:	e008      	b.n	80016c8 <sst_set_pwm+0x44>
	} else if (pwm_value == 0) {
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d105      	bne.n	80016c8 <sst_set_pwm+0x44>
		TIM8->CCR1 = 0; // R
 80016bc:	4b05      	ldr	r3, [pc, #20]	@ (80016d4 <sst_set_pwm+0x50>)
 80016be:	2200      	movs	r2, #0
 80016c0:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM8->CCR2 = 0; // L
 80016c2:	4b04      	ldr	r3, [pc, #16]	@ (80016d4 <sst_set_pwm+0x50>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	40010400 	.word	0x40010400

080016d8 <run_motors>:
void run_motors(double fdr_rpm, double sdr_rpm, double fst_rpm, double sst_rpm) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0
 80016de:	ed87 0b06 	vstr	d0, [r7, #24]
 80016e2:	ed87 1b04 	vstr	d1, [r7, #16]
 80016e6:	ed87 2b02 	vstr	d2, [r7, #8]
 80016ea:	ed87 3b00 	vstr	d3, [r7]
	fdr_set_pwm(rpm2pwm(fdr_rpm));
 80016ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016f2:	f7ff fa51 	bl	8000b98 <__aeabi_d2iz>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fc93 	bl	8001024 <rpm2pwm>
 80016fe:	4603      	mov	r3, r0
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff41 	bl	8001588 <fdr_set_pwm>
	sdr_set_pwm(rpm2pwm(sdr_rpm));
 8001706:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800170a:	f7ff fa45 	bl	8000b98 <__aeabi_d2iz>
 800170e:	4603      	mov	r3, r0
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fc87 	bl	8001024 <rpm2pwm>
 8001716:	4603      	mov	r3, r0
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff89 	bl	8001630 <sdr_set_pwm>
	fst_set_pwm(rpm2pwm(fst_rpm));
 800171e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001722:	f7ff fa39 	bl	8000b98 <__aeabi_d2iz>
 8001726:	4603      	mov	r3, r0
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fc7b 	bl	8001024 <rpm2pwm>
 800172e:	4603      	mov	r3, r0
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff53 	bl	80015dc <fst_set_pwm>
	sst_set_pwm(rpm2pwm(sst_rpm));
 8001736:	e9d7 0100 	ldrd	r0, r1, [r7]
 800173a:	f7ff fa2d 	bl	8000b98 <__aeabi_d2iz>
 800173e:	4603      	mov	r3, r0
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fc6f 	bl	8001024 <rpm2pwm>
 8001746:	4603      	mov	r3, r0
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff9b 	bl	8001684 <sst_set_pwm>
}
 800174e:	bf00      	nop
 8001750:	3720      	adds	r7, #32
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <stop_motors>:
void stop_motors() {
 8001756:	b580      	push	{r7, lr}
 8001758:	af00      	add	r7, sp, #0
	fdr_set_pwm(0);
 800175a:	2000      	movs	r0, #0
 800175c:	f7ff ff14 	bl	8001588 <fdr_set_pwm>
	sdr_set_pwm(0);
 8001760:	2000      	movs	r0, #0
 8001762:	f7ff ff65 	bl	8001630 <sdr_set_pwm>
	fst_set_pwm(0);
 8001766:	2000      	movs	r0, #0
 8001768:	f7ff ff38 	bl	80015dc <fst_set_pwm>
	sst_set_pwm(0);
 800176c:	2000      	movs	r0, #0
 800176e:	f7ff ff89 	bl	8001684 <sst_set_pwm>
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <compute_wheel_speeds>:
                        { 0.0, 0.0 }};

int visited[NUM_OF_POINTS] = {0, 0, 0, 0};

WHEELS wheels;
void compute_wheel_speeds(double Vx, double Vy, double Wz){
 8001778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800177c:	ed2d 8b02 	vpush	{d8}
 8001780:	b08e      	sub	sp, #56	@ 0x38
 8001782:	af00      	add	r7, sp, #0
 8001784:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8001788:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 800178c:	ed87 2b08 	vstr	d2, [r7, #32]
	//pentru directia rotilor ne luam dupa asta https://www.itm-conferences.org/articles/itmconf/pdf/2020/05/itmconf_itee2020_04001.pdf
	wheels.fst = ((1 / R) * (Vx - Vy - ((LX + LY) * Wz))) / 40;
 8001790:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001794:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001798:	f7fe fd96 	bl	80002c8 <__aeabi_dsub>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4614      	mov	r4, r2
 80017a2:	461d      	mov	r5, r3
 80017a4:	a3a4      	add	r3, pc, #656	@ (adr r3, 8001a38 <compute_wheel_speeds+0x2c0>)
 80017a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017aa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017ae:	f7fe ff43 	bl	8000638 <__aeabi_dmul>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4620      	mov	r0, r4
 80017b8:	4629      	mov	r1, r5
 80017ba:	f7fe fd85 	bl	80002c8 <__aeabi_dsub>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	4b9d      	ldr	r3, [pc, #628]	@ (8001a40 <compute_wheel_speeds+0x2c8>)
 80017cc:	f7fe ff34 	bl	8000638 <__aeabi_dmul>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	4b99      	ldr	r3, [pc, #612]	@ (8001a44 <compute_wheel_speeds+0x2cc>)
 80017de:	f7ff f855 	bl	800088c <__aeabi_ddiv>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	4b97      	ldr	r3, [pc, #604]	@ (8001a48 <compute_wheel_speeds+0x2d0>)
 80017ec:	e9c3 0102 	strd	r0, r1, [r3, #8]
	wheels.fdr = ((1 / R) * (Vx + Vy + ((LX + LY) * Wz))) / 40;
 80017f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80017f4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80017f8:	f7fe fd68 	bl	80002cc <__adddf3>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4614      	mov	r4, r2
 8001802:	461d      	mov	r5, r3
 8001804:	a38c      	add	r3, pc, #560	@ (adr r3, 8001a38 <compute_wheel_speeds+0x2c0>)
 8001806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800180e:	f7fe ff13 	bl	8000638 <__aeabi_dmul>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4620      	mov	r0, r4
 8001818:	4629      	mov	r1, r5
 800181a:	f7fe fd57 	bl	80002cc <__adddf3>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4610      	mov	r0, r2
 8001824:	4619      	mov	r1, r3
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	4b85      	ldr	r3, [pc, #532]	@ (8001a40 <compute_wheel_speeds+0x2c8>)
 800182c:	f7fe ff04 	bl	8000638 <__aeabi_dmul>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	4b81      	ldr	r3, [pc, #516]	@ (8001a44 <compute_wheel_speeds+0x2cc>)
 800183e:	f7ff f825 	bl	800088c <__aeabi_ddiv>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a48 <compute_wheel_speeds+0x2d0>)
 800184c:	e9c3 0100 	strd	r0, r1, [r3]
	wheels.sst = ((1 / R) * (Vx + Vy - ((LX + LY) * Wz))) / 40;
 8001850:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001854:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001858:	f7fe fd38 	bl	80002cc <__adddf3>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4614      	mov	r4, r2
 8001862:	461d      	mov	r5, r3
 8001864:	a374      	add	r3, pc, #464	@ (adr r3, 8001a38 <compute_wheel_speeds+0x2c0>)
 8001866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800186e:	f7fe fee3 	bl	8000638 <__aeabi_dmul>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4620      	mov	r0, r4
 8001878:	4629      	mov	r1, r5
 800187a:	f7fe fd25 	bl	80002c8 <__aeabi_dsub>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4610      	mov	r0, r2
 8001884:	4619      	mov	r1, r3
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	4b6d      	ldr	r3, [pc, #436]	@ (8001a40 <compute_wheel_speeds+0x2c8>)
 800188c:	f7fe fed4 	bl	8000638 <__aeabi_dmul>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4610      	mov	r0, r2
 8001896:	4619      	mov	r1, r3
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	4b69      	ldr	r3, [pc, #420]	@ (8001a44 <compute_wheel_speeds+0x2cc>)
 800189e:	f7fe fff5 	bl	800088c <__aeabi_ddiv>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	4b67      	ldr	r3, [pc, #412]	@ (8001a48 <compute_wheel_speeds+0x2d0>)
 80018ac:	e9c3 0106 	strd	r0, r1, [r3, #24]
	wheels.sdr = ((1 / R) * (Vx - Vy + ((LX + LY) * Wz))) / 40;
 80018b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80018b4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80018b8:	f7fe fd06 	bl	80002c8 <__aeabi_dsub>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4614      	mov	r4, r2
 80018c2:	461d      	mov	r5, r3
 80018c4:	a35c      	add	r3, pc, #368	@ (adr r3, 8001a38 <compute_wheel_speeds+0x2c0>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018ce:	f7fe feb3 	bl	8000638 <__aeabi_dmul>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4620      	mov	r0, r4
 80018d8:	4629      	mov	r1, r5
 80018da:	f7fe fcf7 	bl	80002cc <__adddf3>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	4b55      	ldr	r3, [pc, #340]	@ (8001a40 <compute_wheel_speeds+0x2c8>)
 80018ec:	f7fe fea4 	bl	8000638 <__aeabi_dmul>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	4b51      	ldr	r3, [pc, #324]	@ (8001a44 <compute_wheel_speeds+0x2cc>)
 80018fe:	f7fe ffc5 	bl	800088c <__aeabi_ddiv>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	4b4f      	ldr	r3, [pc, #316]	@ (8001a48 <compute_wheel_speeds+0x2d0>)
 800190c:	e9c3 0104 	strd	r0, r1, [r3, #16]

	wheels.max_speed = fmax(fmax(fabs(wheels.fst), fabs(wheels.fdr)), fmax(fabs(wheels.sst), fabs(wheels.sdr)));
 8001910:	4b4d      	ldr	r3, [pc, #308]	@ (8001a48 <compute_wheel_speeds+0x2d0>)
 8001912:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001916:	61ba      	str	r2, [r7, #24]
 8001918:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	4b4a      	ldr	r3, [pc, #296]	@ (8001a48 <compute_wheel_speeds+0x2d0>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	613a      	str	r2, [r7, #16]
 8001926:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	ed97 1b04 	vldr	d1, [r7, #16]
 8001930:	ed97 0b06 	vldr	d0, [r7, #24]
 8001934:	f00a fc6a 	bl	800c20c <fmax>
 8001938:	eeb0 8a40 	vmov.f32	s16, s0
 800193c:	eef0 8a60 	vmov.f32	s17, s1
 8001940:	4b41      	ldr	r3, [pc, #260]	@ (8001a48 <compute_wheel_speeds+0x2d0>)
 8001942:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001946:	60ba      	str	r2, [r7, #8]
 8001948:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a48 <compute_wheel_speeds+0x2d0>)
 8001950:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001954:	603a      	str	r2, [r7, #0]
 8001956:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	ed97 1b00 	vldr	d1, [r7]
 8001960:	ed97 0b02 	vldr	d0, [r7, #8]
 8001964:	f00a fc52 	bl	800c20c <fmax>
 8001968:	eeb0 7a40 	vmov.f32	s14, s0
 800196c:	eef0 7a60 	vmov.f32	s15, s1
 8001970:	eeb0 1a47 	vmov.f32	s2, s14
 8001974:	eef0 1a67 	vmov.f32	s3, s15
 8001978:	eeb0 0a48 	vmov.f32	s0, s16
 800197c:	eef0 0a68 	vmov.f32	s1, s17
 8001980:	f00a fc44 	bl	800c20c <fmax>
 8001984:	eeb0 7a40 	vmov.f32	s14, s0
 8001988:	eef0 7a60 	vmov.f32	s15, s1
 800198c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a48 <compute_wheel_speeds+0x2d0>)
 800198e:	ed83 7b08 	vstr	d7, [r3, #32]
	if( wheels.max_speed > MAX_SPEED){
 8001992:	4b2d      	ldr	r3, [pc, #180]	@ (8001a48 <compute_wheel_speeds+0x2d0>)
 8001994:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	4b2b      	ldr	r3, [pc, #172]	@ (8001a4c <compute_wheel_speeds+0x2d4>)
 800199e:	f7ff f8db 	bl	8000b58 <__aeabi_dcmpgt>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d053      	beq.n	8001a50 <compute_wheel_speeds+0x2d8>
		wheels.scale_factor = fabs(MAX_SPEED / wheels.max_speed);
 80019a8:	4b27      	ldr	r3, [pc, #156]	@ (8001a48 <compute_wheel_speeds+0x2d0>)
 80019aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80019ae:	f04f 0000 	mov.w	r0, #0
 80019b2:	4926      	ldr	r1, [pc, #152]	@ (8001a4c <compute_wheel_speeds+0x2d4>)
 80019b4:	f7fe ff6a 	bl	800088c <__aeabi_ddiv>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4692      	mov	sl, r2
 80019be:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 80019c2:	4b21      	ldr	r3, [pc, #132]	@ (8001a48 <compute_wheel_speeds+0x2d0>)
 80019c4:	e9c3 ab0a 	strd	sl, fp, [r3, #40]	@ 0x28
		wheels.fst *= wheels.scale_factor;
 80019c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a48 <compute_wheel_speeds+0x2d0>)
 80019ca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80019ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001a48 <compute_wheel_speeds+0x2d0>)
 80019d0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80019d4:	f7fe fe30 	bl	8000638 <__aeabi_dmul>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	491a      	ldr	r1, [pc, #104]	@ (8001a48 <compute_wheel_speeds+0x2d0>)
 80019de:	e9c1 2302 	strd	r2, r3, [r1, #8]
		wheels.fdr *= wheels.scale_factor;
 80019e2:	4b19      	ldr	r3, [pc, #100]	@ (8001a48 <compute_wheel_speeds+0x2d0>)
 80019e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019e8:	4b17      	ldr	r3, [pc, #92]	@ (8001a48 <compute_wheel_speeds+0x2d0>)
 80019ea:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80019ee:	f7fe fe23 	bl	8000638 <__aeabi_dmul>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4914      	ldr	r1, [pc, #80]	@ (8001a48 <compute_wheel_speeds+0x2d0>)
 80019f8:	e9c1 2300 	strd	r2, r3, [r1]
		wheels.sst *= wheels.scale_factor;
 80019fc:	4b12      	ldr	r3, [pc, #72]	@ (8001a48 <compute_wheel_speeds+0x2d0>)
 80019fe:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001a02:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <compute_wheel_speeds+0x2d0>)
 8001a04:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001a08:	f7fe fe16 	bl	8000638 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	490d      	ldr	r1, [pc, #52]	@ (8001a48 <compute_wheel_speeds+0x2d0>)
 8001a12:	e9c1 2306 	strd	r2, r3, [r1, #24]
		wheels.sdr *= wheels.scale_factor;
 8001a16:	4b0c      	ldr	r3, [pc, #48]	@ (8001a48 <compute_wheel_speeds+0x2d0>)
 8001a18:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a48 <compute_wheel_speeds+0x2d0>)
 8001a1e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001a22:	f7fe fe09 	bl	8000638 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4907      	ldr	r1, [pc, #28]	@ (8001a48 <compute_wheel_speeds+0x2d0>)
 8001a2c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001a30:	e05d      	b.n	8001aee <compute_wheel_speeds+0x376>
 8001a32:	bf00      	nop
 8001a34:	f3af 8000 	nop.w
 8001a38:	c28f5c29 	.word	0xc28f5c29
 8001a3c:	3fcc28f5 	.word	0x3fcc28f5
 8001a40:	40340000 	.word	0x40340000
 8001a44:	40440000 	.word	0x40440000
 8001a48:	20000cd8 	.word	0x20000cd8
 8001a4c:	40290000 	.word	0x40290000
	}else if(wheels.max_speed < MIN_SPEED){
 8001a50:	4b56      	ldr	r3, [pc, #344]	@ (8001bac <compute_wheel_speeds+0x434>)
 8001a52:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	4b55      	ldr	r3, [pc, #340]	@ (8001bb0 <compute_wheel_speeds+0x438>)
 8001a5c:	f7ff f85e 	bl	8000b1c <__aeabi_dcmplt>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d043      	beq.n	8001aee <compute_wheel_speeds+0x376>
		wheels.scale_factor = fabs(MIN_SPEED / wheels.max_speed);
 8001a66:	4b51      	ldr	r3, [pc, #324]	@ (8001bac <compute_wheel_speeds+0x434>)
 8001a68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001a6c:	f04f 0000 	mov.w	r0, #0
 8001a70:	494f      	ldr	r1, [pc, #316]	@ (8001bb0 <compute_wheel_speeds+0x438>)
 8001a72:	f7fe ff0b 	bl	800088c <__aeabi_ddiv>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4690      	mov	r8, r2
 8001a7c:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001a80:	4b4a      	ldr	r3, [pc, #296]	@ (8001bac <compute_wheel_speeds+0x434>)
 8001a82:	e9c3 890a 	strd	r8, r9, [r3, #40]	@ 0x28
		wheels.fst *= wheels.scale_factor;
 8001a86:	4b49      	ldr	r3, [pc, #292]	@ (8001bac <compute_wheel_speeds+0x434>)
 8001a88:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a8c:	4b47      	ldr	r3, [pc, #284]	@ (8001bac <compute_wheel_speeds+0x434>)
 8001a8e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001a92:	f7fe fdd1 	bl	8000638 <__aeabi_dmul>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4944      	ldr	r1, [pc, #272]	@ (8001bac <compute_wheel_speeds+0x434>)
 8001a9c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		wheels.fdr *= wheels.scale_factor;
 8001aa0:	4b42      	ldr	r3, [pc, #264]	@ (8001bac <compute_wheel_speeds+0x434>)
 8001aa2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aa6:	4b41      	ldr	r3, [pc, #260]	@ (8001bac <compute_wheel_speeds+0x434>)
 8001aa8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001aac:	f7fe fdc4 	bl	8000638 <__aeabi_dmul>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	493d      	ldr	r1, [pc, #244]	@ (8001bac <compute_wheel_speeds+0x434>)
 8001ab6:	e9c1 2300 	strd	r2, r3, [r1]
		wheels.sst *= wheels.scale_factor;
 8001aba:	4b3c      	ldr	r3, [pc, #240]	@ (8001bac <compute_wheel_speeds+0x434>)
 8001abc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001ac0:	4b3a      	ldr	r3, [pc, #232]	@ (8001bac <compute_wheel_speeds+0x434>)
 8001ac2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001ac6:	f7fe fdb7 	bl	8000638 <__aeabi_dmul>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4937      	ldr	r1, [pc, #220]	@ (8001bac <compute_wheel_speeds+0x434>)
 8001ad0:	e9c1 2306 	strd	r2, r3, [r1, #24]
		wheels.sdr *= wheels.scale_factor;
 8001ad4:	4b35      	ldr	r3, [pc, #212]	@ (8001bac <compute_wheel_speeds+0x434>)
 8001ad6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001ada:	4b34      	ldr	r3, [pc, #208]	@ (8001bac <compute_wheel_speeds+0x434>)
 8001adc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001ae0:	f7fe fdaa 	bl	8000638 <__aeabi_dmul>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4930      	ldr	r1, [pc, #192]	@ (8001bac <compute_wheel_speeds+0x434>)
 8001aea:	e9c1 2304 	strd	r2, r3, [r1, #16]

	}

	wheels.fst = rad2rpm(wheels.fst);
 8001aee:	4b2f      	ldr	r3, [pc, #188]	@ (8001bac <compute_wheel_speeds+0x434>)
 8001af0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	f7ff f896 	bl	8000c28 <__aeabi_d2f>
 8001afc:	4603      	mov	r3, r0
 8001afe:	ee00 3a10 	vmov	s0, r3
 8001b02:	f7ff faa5 	bl	8001050 <rad2rpm>
 8001b06:	ee10 3a10 	vmov	r3, s0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd3c 	bl	8000588 <__aeabi_f2d>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4925      	ldr	r1, [pc, #148]	@ (8001bac <compute_wheel_speeds+0x434>)
 8001b16:	e9c1 2302 	strd	r2, r3, [r1, #8]
	wheels.fdr = rad2rpm(wheels.fdr);
 8001b1a:	4b24      	ldr	r3, [pc, #144]	@ (8001bac <compute_wheel_speeds+0x434>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f7ff f880 	bl	8000c28 <__aeabi_d2f>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	ee00 3a10 	vmov	s0, r3
 8001b2e:	f7ff fa8f 	bl	8001050 <rad2rpm>
 8001b32:	ee10 3a10 	vmov	r3, s0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fd26 	bl	8000588 <__aeabi_f2d>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	491a      	ldr	r1, [pc, #104]	@ (8001bac <compute_wheel_speeds+0x434>)
 8001b42:	e9c1 2300 	strd	r2, r3, [r1]
	wheels.sst = rad2rpm(wheels.sst);
 8001b46:	4b19      	ldr	r3, [pc, #100]	@ (8001bac <compute_wheel_speeds+0x434>)
 8001b48:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f7ff f86a 	bl	8000c28 <__aeabi_d2f>
 8001b54:	4603      	mov	r3, r0
 8001b56:	ee00 3a10 	vmov	s0, r3
 8001b5a:	f7ff fa79 	bl	8001050 <rad2rpm>
 8001b5e:	ee10 3a10 	vmov	r3, s0
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fd10 	bl	8000588 <__aeabi_f2d>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	490f      	ldr	r1, [pc, #60]	@ (8001bac <compute_wheel_speeds+0x434>)
 8001b6e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	wheels.sdr = rad2rpm(wheels.sdr);
 8001b72:	4b0e      	ldr	r3, [pc, #56]	@ (8001bac <compute_wheel_speeds+0x434>)
 8001b74:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7ff f854 	bl	8000c28 <__aeabi_d2f>
 8001b80:	4603      	mov	r3, r0
 8001b82:	ee00 3a10 	vmov	s0, r3
 8001b86:	f7ff fa63 	bl	8001050 <rad2rpm>
 8001b8a:	ee10 3a10 	vmov	r3, s0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fcfa 	bl	8000588 <__aeabi_f2d>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4904      	ldr	r1, [pc, #16]	@ (8001bac <compute_wheel_speeds+0x434>)
 8001b9a:	e9c1 2304 	strd	r2, r3, [r1, #16]


}
 8001b9e:	bf00      	nop
 8001ba0:	3738      	adds	r7, #56	@ 0x38
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	ecbd 8b02 	vpop	{d8}
 8001ba8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bac:	20000cd8 	.word	0x20000cd8
 8001bb0:	40200000 	.word	0x40200000
 8001bb4:	00000000 	.word	0x00000000

08001bb8 <follow_line>:
/*TODO: Movement error corection*/
double Vx = 0, Vy = 0;
void follow_line(double final_x, double final_y) {
 8001bb8:	b5b0      	push	{r4, r5, r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	ed87 0b02 	vstr	d0, [r7, #8]
 8001bc2:	ed87 1b00 	vstr	d1, [r7]
	HAL_UART_Receive_DMA(&huart6, odometry_buffer, 25);
 8001bc6:	2219      	movs	r2, #25
 8001bc8:	4943      	ldr	r1, [pc, #268]	@ (8001cd8 <follow_line+0x120>)
 8001bca:	4844      	ldr	r0, [pc, #272]	@ (8001cdc <follow_line+0x124>)
 8001bcc:	f004 ff54 	bl	8006a78 <HAL_UART_Receive_DMA>
	while (true) {
		Vx = final_x - current_x;
 8001bd0:	4b43      	ldr	r3, [pc, #268]	@ (8001ce0 <follow_line+0x128>)
 8001bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bda:	f7fe fb75 	bl	80002c8 <__aeabi_dsub>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4940      	ldr	r1, [pc, #256]	@ (8001ce4 <follow_line+0x12c>)
 8001be4:	e9c1 2300 	strd	r2, r3, [r1]
		Vy = final_y - current_y;
 8001be8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ce8 <follow_line+0x130>)
 8001bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bf2:	f7fe fb69 	bl	80002c8 <__aeabi_dsub>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	493c      	ldr	r1, [pc, #240]	@ (8001cec <follow_line+0x134>)
 8001bfc:	e9c1 2300 	strd	r2, r3, [r1]

		double distance_to_target = sqrt(Vx * Vx + Vy * Vy);
 8001c00:	4b38      	ldr	r3, [pc, #224]	@ (8001ce4 <follow_line+0x12c>)
 8001c02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c06:	4b37      	ldr	r3, [pc, #220]	@ (8001ce4 <follow_line+0x12c>)
 8001c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0c:	f7fe fd14 	bl	8000638 <__aeabi_dmul>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4614      	mov	r4, r2
 8001c16:	461d      	mov	r5, r3
 8001c18:	4b34      	ldr	r3, [pc, #208]	@ (8001cec <follow_line+0x134>)
 8001c1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c1e:	4b33      	ldr	r3, [pc, #204]	@ (8001cec <follow_line+0x134>)
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	f7fe fd08 	bl	8000638 <__aeabi_dmul>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	4629      	mov	r1, r5
 8001c30:	f7fe fb4c 	bl	80002cc <__adddf3>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	ec43 2b17 	vmov	d7, r2, r3
 8001c3c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c40:	eef0 0a67 	vmov.f32	s1, s15
 8001c44:	f00a fab6 	bl	800c1b4 <sqrt>
 8001c48:	ed87 0b04 	vstr	d0, [r7, #16]

		if (distance_to_target < DISTANCE_THRESHOLD) {
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	4b27      	ldr	r3, [pc, #156]	@ (8001cf0 <follow_line+0x138>)
 8001c52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c56:	f7fe ff61 	bl	8000b1c <__aeabi_dcmplt>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d130      	bne.n	8001cc2 <follow_line+0x10a>
			break;
		}

		compute_wheel_speeds(Vx, Vy, 0);
 8001c60:	4b20      	ldr	r3, [pc, #128]	@ (8001ce4 <follow_line+0x12c>)
 8001c62:	ed93 7b00 	vldr	d7, [r3]
 8001c66:	4b21      	ldr	r3, [pc, #132]	@ (8001cec <follow_line+0x134>)
 8001c68:	ed93 6b00 	vldr	d6, [r3]
 8001c6c:	ed9f 2b18 	vldr	d2, [pc, #96]	@ 8001cd0 <follow_line+0x118>
 8001c70:	eeb0 1a46 	vmov.f32	s2, s12
 8001c74:	eef0 1a66 	vmov.f32	s3, s13
 8001c78:	eeb0 0a47 	vmov.f32	s0, s14
 8001c7c:	eef0 0a67 	vmov.f32	s1, s15
 8001c80:	f7ff fd7a 	bl	8001778 <compute_wheel_speeds>
		run_motors(wheels.fdr, wheels.sdr, wheels.fst, wheels.sst);
 8001c84:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf4 <follow_line+0x13c>)
 8001c86:	ed93 7b00 	vldr	d7, [r3]
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf4 <follow_line+0x13c>)
 8001c8c:	ed93 6b04 	vldr	d6, [r3, #16]
 8001c90:	4b18      	ldr	r3, [pc, #96]	@ (8001cf4 <follow_line+0x13c>)
 8001c92:	ed93 5b02 	vldr	d5, [r3, #8]
 8001c96:	4b17      	ldr	r3, [pc, #92]	@ (8001cf4 <follow_line+0x13c>)
 8001c98:	ed93 4b06 	vldr	d4, [r3, #24]
 8001c9c:	eeb0 3a44 	vmov.f32	s6, s8
 8001ca0:	eef0 3a64 	vmov.f32	s7, s9
 8001ca4:	eeb0 2a45 	vmov.f32	s4, s10
 8001ca8:	eef0 2a65 	vmov.f32	s5, s11
 8001cac:	eeb0 1a46 	vmov.f32	s2, s12
 8001cb0:	eef0 1a66 	vmov.f32	s3, s13
 8001cb4:	eeb0 0a47 	vmov.f32	s0, s14
 8001cb8:	eef0 0a67 	vmov.f32	s1, s15
 8001cbc:	f7ff fd0c 	bl	80016d8 <run_motors>
	while (true) {
 8001cc0:	e786      	b.n	8001bd0 <follow_line+0x18>
			break;
 8001cc2:	bf00      	nop
	}
	stop_motors();
 8001cc4:	f7ff fd47 	bl	8001756 <stop_motors>
}
 8001cc8:	bf00      	nop
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bdb0      	pop	{r4, r5, r7, pc}
	...
 8001cd8:	20000c38 	.word	0x20000c38
 8001cdc:	200005b4 	.word	0x200005b4
 8001ce0:	20000c58 	.word	0x20000c58
 8001ce4:	20000d08 	.word	0x20000d08
 8001ce8:	20000c60 	.word	0x20000c60
 8001cec:	20000d10 	.word	0x20000d10
 8001cf0:	3ff00000 	.word	0x3ff00000
 8001cf4:	20000cd8 	.word	0x20000cd8

08001cf8 <follow_trajectory>:

void follow_trajectory() {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart6, odometry_buffer, 25);
 8001cfe:	2219      	movs	r2, #25
 8001d00:	4919      	ldr	r1, [pc, #100]	@ (8001d68 <follow_trajectory+0x70>)
 8001d02:	481a      	ldr	r0, [pc, #104]	@ (8001d6c <follow_trajectory+0x74>)
 8001d04:	f004 feb8 	bl	8006a78 <HAL_UART_Receive_DMA>
	for (int i = 0; i < NUM_OF_POINTS; i++) {
 8001d08:	2300      	movs	r3, #0
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	e024      	b.n	8001d58 <follow_trajectory+0x60>
		if(!visited[i]){
 8001d0e:	4a18      	ldr	r2, [pc, #96]	@ (8001d70 <follow_trajectory+0x78>)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d11b      	bne.n	8001d52 <follow_trajectory+0x5a>
			follow_line(points[i][0], points[i][1]);
 8001d1a:	4a16      	ldr	r2, [pc, #88]	@ (8001d74 <follow_trajectory+0x7c>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	011b      	lsls	r3, r3, #4
 8001d20:	4413      	add	r3, r2
 8001d22:	ed93 7b00 	vldr	d7, [r3]
 8001d26:	4a13      	ldr	r2, [pc, #76]	@ (8001d74 <follow_trajectory+0x7c>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3308      	adds	r3, #8
 8001d30:	ed93 6b00 	vldr	d6, [r3]
 8001d34:	eeb0 1a46 	vmov.f32	s2, s12
 8001d38:	eef0 1a66 	vmov.f32	s3, s13
 8001d3c:	eeb0 0a47 	vmov.f32	s0, s14
 8001d40:	eef0 0a67 	vmov.f32	s1, s15
 8001d44:	f7ff ff38 	bl	8001bb8 <follow_line>
			visited[i] = 1;
 8001d48:	4a09      	ldr	r2, [pc, #36]	@ (8001d70 <follow_trajectory+0x78>)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_POINTS; i++) {
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3301      	adds	r3, #1
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	ddd7      	ble.n	8001d0e <follow_trajectory+0x16>
		}
	}
}
 8001d5e:	bf00      	nop
 8001d60:	bf00      	nop
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000c38 	.word	0x20000c38
 8001d6c:	200005b4 	.word	0x200005b4
 8001d70:	20000cc4 	.word	0x20000cc4
 8001d74:	20000000 	.word	0x20000000

08001d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d7c:	f001 fcd0 	bl	8003720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d80:	f000 f88a 	bl	8001e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d84:	f000 fd50 	bl	8002828 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d88:	f000 fd10 	bl	80027ac <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001d8c:	f000 fc8a 	bl	80026a4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d90:	f000 fcdc 	bl	800274c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 8001d94:	f000 fa2c 	bl	80021f0 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001d98:	f000 f91e 	bl	8001fd8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001d9c:	f000 f978 	bl	8002090 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001da0:	f000 f9ce 	bl	8002140 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001da4:	f000 fabc 	bl	8002320 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001da8:	f000 fb12 	bl	80023d0 <MX_TIM8_Init>
  MX_TIM9_Init();
 8001dac:	f000 fbb8 	bl	8002520 <MX_TIM9_Init>
  MX_USART2_UART_Init();
 8001db0:	f000 fc4e 	bl	8002650 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001db4:	f000 fca0 	bl	80026f8 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8001db8:	f000 f8da 	bl	8001f70 <MX_SPI2_Init>
  MX_TIM10_Init();
 8001dbc:	f000 fbea 	bl	8002594 <MX_TIM10_Init>
  MX_TIM12_Init();
 8001dc0:	f000 fc0c 	bl	80025dc <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4826      	ldr	r0, [pc, #152]	@ (8001e60 <main+0xe8>)
 8001dc8:	f003 fd6a 	bl	80058a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001dcc:	2104      	movs	r1, #4
 8001dce:	4824      	ldr	r0, [pc, #144]	@ (8001e60 <main+0xe8>)
 8001dd0:	f003 fd66 	bl	80058a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001dd4:	2108      	movs	r1, #8
 8001dd6:	4822      	ldr	r0, [pc, #136]	@ (8001e60 <main+0xe8>)
 8001dd8:	f003 fd62 	bl	80058a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001ddc:	210c      	movs	r1, #12
 8001dde:	4820      	ldr	r0, [pc, #128]	@ (8001e60 <main+0xe8>)
 8001de0:	f003 fd5e 	bl	80058a0 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001de4:	2100      	movs	r1, #0
 8001de6:	481f      	ldr	r0, [pc, #124]	@ (8001e64 <main+0xec>)
 8001de8:	f003 fd5a 	bl	80058a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001dec:	2104      	movs	r1, #4
 8001dee:	481d      	ldr	r0, [pc, #116]	@ (8001e64 <main+0xec>)
 8001df0:	f003 fd56 	bl	80058a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001df4:	2108      	movs	r1, #8
 8001df6:	481b      	ldr	r0, [pc, #108]	@ (8001e64 <main+0xec>)
 8001df8:	f003 fd52 	bl	80058a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001dfc:	210c      	movs	r1, #12
 8001dfe:	4819      	ldr	r0, [pc, #100]	@ (8001e64 <main+0xec>)
 8001e00:	f003 fd4e 	bl	80058a0 <HAL_TIM_PWM_Start>

	HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001e04:	2018      	movs	r0, #24
 8001e06:	f001 fe18 	bl	8003a3a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e0a:	2019      	movs	r0, #25
 8001e0c:	f001 fe15 	bl	8003a3a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001e10:	202b      	movs	r0, #43	@ 0x2b
 8001e12:	f001 fe12 	bl	8003a3a <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim9);
 8001e16:	4814      	ldr	r0, [pc, #80]	@ (8001e68 <main+0xf0>)
 8001e18:	f003 fc82 	bl	8005720 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim12);
 8001e1c:	4813      	ldr	r0, [pc, #76]	@ (8001e6c <main+0xf4>)
 8001e1e:	f003 fc7f 	bl	8005720 <HAL_TIM_Base_Start_IT>

	MOTOR_Init(&fdr);
 8001e22:	4813      	ldr	r0, [pc, #76]	@ (8001e70 <main+0xf8>)
 8001e24:	f7ff f942 	bl	80010ac <MOTOR_Init>
	MOTOR_Init(&fst);
 8001e28:	4812      	ldr	r0, [pc, #72]	@ (8001e74 <main+0xfc>)
 8001e2a:	f7ff f93f 	bl	80010ac <MOTOR_Init>
	MOTOR_Init(&sdr);
 8001e2e:	4812      	ldr	r0, [pc, #72]	@ (8001e78 <main+0x100>)
 8001e30:	f7ff f93c 	bl	80010ac <MOTOR_Init>
	MOTOR_Init(&sst);
 8001e34:	4811      	ldr	r0, [pc, #68]	@ (8001e7c <main+0x104>)
 8001e36:	f7ff f939 	bl	80010ac <MOTOR_Init>
	Controller_Init(&ps4);
 8001e3a:	4811      	ldr	r0, [pc, #68]	@ (8001e80 <main+0x108>)
 8001e3c:	f7ff f951 	bl	80010e2 <Controller_Init>
	Wheels__Init(&wheels);
 8001e40:	4810      	ldr	r0, [pc, #64]	@ (8001e84 <main+0x10c>)
 8001e42:	f7ff f961 	bl	8001108 <Wheels__Init>

	HAL_UART_Receive_DMA(&huart6, odometry_buffer, 25);
 8001e46:	2219      	movs	r2, #25
 8001e48:	490f      	ldr	r1, [pc, #60]	@ (8001e88 <main+0x110>)
 8001e4a:	4810      	ldr	r0, [pc, #64]	@ (8001e8c <main+0x114>)
 8001e4c:	f004 fe14 	bl	8006a78 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart3, live_follower_buffer, 15);
 8001e50:	220f      	movs	r2, #15
 8001e52:	490f      	ldr	r1, [pc, #60]	@ (8001e90 <main+0x118>)
 8001e54:	480f      	ldr	r0, [pc, #60]	@ (8001e94 <main+0x11c>)
 8001e56:	f004 fe0f 	bl	8006a78 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	/*TODO: Implement mode switching*/

	while (1) {
		follow_trajectory();
 8001e5a:	f7ff ff4d 	bl	8001cf8 <follow_trajectory>
 8001e5e:	e7fc      	b.n	8001e5a <main+0xe2>
 8001e60:	20000374 	.word	0x20000374
 8001e64:	20000404 	.word	0x20000404
 8001e68:	2000044c 	.word	0x2000044c
 8001e6c:	200004dc 	.word	0x200004dc
 8001e70:	20000c74 	.word	0x20000c74
 8001e74:	20000c88 	.word	0x20000c88
 8001e78:	20000c9c 	.word	0x20000c9c
 8001e7c:	20000cb0 	.word	0x20000cb0
 8001e80:	20000c1c 	.word	0x20000c1c
 8001e84:	20000cd8 	.word	0x20000cd8
 8001e88:	20000c38 	.word	0x20000c38
 8001e8c:	200005b4 	.word	0x200005b4
 8001e90:	20000c00 	.word	0x20000c00
 8001e94:	2000056c 	.word	0x2000056c

08001e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b094      	sub	sp, #80	@ 0x50
 8001e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e9e:	f107 031c 	add.w	r3, r7, #28
 8001ea2:	2234      	movs	r2, #52	@ 0x34
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f007 fd7f 	bl	80099aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eac:	f107 0308 	add.w	r3, r7, #8
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	4b29      	ldr	r3, [pc, #164]	@ (8001f68 <SystemClock_Config+0xd0>)
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec4:	4a28      	ldr	r2, [pc, #160]	@ (8001f68 <SystemClock_Config+0xd0>)
 8001ec6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eca:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ecc:	4b26      	ldr	r3, [pc, #152]	@ (8001f68 <SystemClock_Config+0xd0>)
 8001ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ed8:	2300      	movs	r3, #0
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	4b23      	ldr	r3, [pc, #140]	@ (8001f6c <SystemClock_Config+0xd4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a22      	ldr	r2, [pc, #136]	@ (8001f6c <SystemClock_Config+0xd4>)
 8001ee2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	4b20      	ldr	r3, [pc, #128]	@ (8001f6c <SystemClock_Config+0xd4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ef0:	603b      	str	r3, [r7, #0]
 8001ef2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ef8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001efc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001efe:	2302      	movs	r3, #2
 8001f00:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f06:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f08:	2308      	movs	r3, #8
 8001f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8001f0c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001f10:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001f12:	2304      	movs	r3, #4
 8001f14:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001f16:	2308      	movs	r3, #8
 8001f18:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f1e:	f107 031c 	add.w	r3, r7, #28
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 f8a0 	bl	8005068 <HAL_RCC_OscConfig>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001f2e:	f000 fdb3 	bl	8002a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f32:	230f      	movs	r3, #15
 8001f34:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f36:	2302      	movs	r3, #2
 8001f38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f48:	f107 0308 	add.w	r3, r7, #8
 8001f4c:	2103      	movs	r1, #3
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f002 fc9c 	bl	800488c <HAL_RCC_ClockConfig>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001f5a:	f000 fd9d 	bl	8002a98 <Error_Handler>
  }
}
 8001f5e:	bf00      	nop
 8001f60:	3750      	adds	r7, #80	@ 0x50
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40007000 	.word	0x40007000

08001f70 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f74:	4b16      	ldr	r3, [pc, #88]	@ (8001fd0 <MX_SPI2_Init+0x60>)
 8001f76:	4a17      	ldr	r2, [pc, #92]	@ (8001fd4 <MX_SPI2_Init+0x64>)
 8001f78:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8001f7a:	4b15      	ldr	r3, [pc, #84]	@ (8001fd0 <MX_SPI2_Init+0x60>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001f80:	4b13      	ldr	r3, [pc, #76]	@ (8001fd0 <MX_SPI2_Init+0x60>)
 8001f82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f86:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f88:	4b11      	ldr	r3, [pc, #68]	@ (8001fd0 <MX_SPI2_Init+0x60>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f8e:	4b10      	ldr	r3, [pc, #64]	@ (8001fd0 <MX_SPI2_Init+0x60>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f94:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd0 <MX_SPI2_Init+0x60>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd0 <MX_SPI2_Init+0x60>)
 8001f9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fa0:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd0 <MX_SPI2_Init+0x60>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fa8:	4b09      	ldr	r3, [pc, #36]	@ (8001fd0 <MX_SPI2_Init+0x60>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fae:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <MX_SPI2_Init+0x60>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <MX_SPI2_Init+0x60>)
 8001fb6:	220a      	movs	r2, #10
 8001fb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fba:	4805      	ldr	r0, [pc, #20]	@ (8001fd0 <MX_SPI2_Init+0x60>)
 8001fbc:	f003 fad8 	bl	8005570 <HAL_SPI_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_SPI2_Init+0x5a>
  {
    Error_Handler();
 8001fc6:	f000 fd67 	bl	8002a98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000244 	.word	0x20000244
 8001fd4:	40003800 	.word	0x40003800

08001fd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08c      	sub	sp, #48	@ 0x30
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	2224      	movs	r2, #36	@ 0x24
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f007 fcdf 	bl	80099aa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ff4:	4b24      	ldr	r3, [pc, #144]	@ (8002088 <MX_TIM1_Init+0xb0>)
 8001ff6:	4a25      	ldr	r2, [pc, #148]	@ (800208c <MX_TIM1_Init+0xb4>)
 8001ff8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ffa:	4b23      	ldr	r3, [pc, #140]	@ (8002088 <MX_TIM1_Init+0xb0>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002000:	4b21      	ldr	r3, [pc, #132]	@ (8002088 <MX_TIM1_Init+0xb0>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002006:	4b20      	ldr	r3, [pc, #128]	@ (8002088 <MX_TIM1_Init+0xb0>)
 8002008:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800200c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800200e:	4b1e      	ldr	r3, [pc, #120]	@ (8002088 <MX_TIM1_Init+0xb0>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002014:	4b1c      	ldr	r3, [pc, #112]	@ (8002088 <MX_TIM1_Init+0xb0>)
 8002016:	2200      	movs	r2, #0
 8002018:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800201a:	4b1b      	ldr	r3, [pc, #108]	@ (8002088 <MX_TIM1_Init+0xb0>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002020:	2303      	movs	r3, #3
 8002022:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002028:	2301      	movs	r3, #1
 800202a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800202c:	2300      	movs	r3, #0
 800202e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002034:	2300      	movs	r3, #0
 8002036:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002038:	2301      	movs	r3, #1
 800203a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800203c:	2300      	movs	r3, #0
 800203e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002044:	f107 030c 	add.w	r3, r7, #12
 8002048:	4619      	mov	r1, r3
 800204a:	480f      	ldr	r0, [pc, #60]	@ (8002088 <MX_TIM1_Init+0xb0>)
 800204c:	f003 fcf0 	bl	8005a30 <HAL_TIM_Encoder_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002056:	f000 fd1f 	bl	8002a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800205e:	2300      	movs	r3, #0
 8002060:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	4619      	mov	r1, r3
 8002066:	4808      	ldr	r0, [pc, #32]	@ (8002088 <MX_TIM1_Init+0xb0>)
 8002068:	f004 fbd4 	bl	8006814 <HAL_TIMEx_MasterConfigSynchronization>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002072:	f000 fd11 	bl	8002a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002076:	213c      	movs	r1, #60	@ 0x3c
 8002078:	4803      	ldr	r0, [pc, #12]	@ (8002088 <MX_TIM1_Init+0xb0>)
 800207a:	f003 fd7f 	bl	8005b7c <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM1_Init 2 */

}
 800207e:	bf00      	nop
 8002080:	3730      	adds	r7, #48	@ 0x30
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	2000029c 	.word	0x2000029c
 800208c:	40010000 	.word	0x40010000

08002090 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08c      	sub	sp, #48	@ 0x30
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002096:	f107 030c 	add.w	r3, r7, #12
 800209a:	2224      	movs	r2, #36	@ 0x24
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f007 fc83 	bl	80099aa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a4:	1d3b      	adds	r3, r7, #4
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020ac:	4b23      	ldr	r3, [pc, #140]	@ (800213c <MX_TIM2_Init+0xac>)
 80020ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020b4:	4b21      	ldr	r3, [pc, #132]	@ (800213c <MX_TIM2_Init+0xac>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ba:	4b20      	ldr	r3, [pc, #128]	@ (800213c <MX_TIM2_Init+0xac>)
 80020bc:	2200      	movs	r2, #0
 80020be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80020c0:	4b1e      	ldr	r3, [pc, #120]	@ (800213c <MX_TIM2_Init+0xac>)
 80020c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c8:	4b1c      	ldr	r3, [pc, #112]	@ (800213c <MX_TIM2_Init+0xac>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ce:	4b1b      	ldr	r3, [pc, #108]	@ (800213c <MX_TIM2_Init+0xac>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020d4:	2303      	movs	r3, #3
 80020d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020d8:	2300      	movs	r3, #0
 80020da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020dc:	2301      	movs	r3, #1
 80020de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020e8:	2300      	movs	r3, #0
 80020ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020ec:	2301      	movs	r3, #1
 80020ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80020f8:	f107 030c 	add.w	r3, r7, #12
 80020fc:	4619      	mov	r1, r3
 80020fe:	480f      	ldr	r0, [pc, #60]	@ (800213c <MX_TIM2_Init+0xac>)
 8002100:	f003 fc96 	bl	8005a30 <HAL_TIM_Encoder_Init>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800210a:	f000 fcc5 	bl	8002a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002112:	2300      	movs	r3, #0
 8002114:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	4619      	mov	r1, r3
 800211a:	4808      	ldr	r0, [pc, #32]	@ (800213c <MX_TIM2_Init+0xac>)
 800211c:	f004 fb7a 	bl	8006814 <HAL_TIMEx_MasterConfigSynchronization>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002126:	f000 fcb7 	bl	8002a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800212a:	213c      	movs	r1, #60	@ 0x3c
 800212c:	4803      	ldr	r0, [pc, #12]	@ (800213c <MX_TIM2_Init+0xac>)
 800212e:	f003 fd25 	bl	8005b7c <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM2_Init 2 */

}
 8002132:	bf00      	nop
 8002134:	3730      	adds	r7, #48	@ 0x30
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200002e4 	.word	0x200002e4

08002140 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08c      	sub	sp, #48	@ 0x30
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002146:	f107 030c 	add.w	r3, r7, #12
 800214a:	2224      	movs	r2, #36	@ 0x24
 800214c:	2100      	movs	r1, #0
 800214e:	4618      	mov	r0, r3
 8002150:	f007 fc2b 	bl	80099aa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002154:	1d3b      	adds	r3, r7, #4
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800215c:	4b22      	ldr	r3, [pc, #136]	@ (80021e8 <MX_TIM3_Init+0xa8>)
 800215e:	4a23      	ldr	r2, [pc, #140]	@ (80021ec <MX_TIM3_Init+0xac>)
 8002160:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002162:	4b21      	ldr	r3, [pc, #132]	@ (80021e8 <MX_TIM3_Init+0xa8>)
 8002164:	2200      	movs	r2, #0
 8002166:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002168:	4b1f      	ldr	r3, [pc, #124]	@ (80021e8 <MX_TIM3_Init+0xa8>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800216e:	4b1e      	ldr	r3, [pc, #120]	@ (80021e8 <MX_TIM3_Init+0xa8>)
 8002170:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002174:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002176:	4b1c      	ldr	r3, [pc, #112]	@ (80021e8 <MX_TIM3_Init+0xa8>)
 8002178:	2200      	movs	r2, #0
 800217a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800217c:	4b1a      	ldr	r3, [pc, #104]	@ (80021e8 <MX_TIM3_Init+0xa8>)
 800217e:	2200      	movs	r2, #0
 8002180:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002182:	2303      	movs	r3, #3
 8002184:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800218a:	2301      	movs	r3, #1
 800218c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800218e:	2300      	movs	r3, #0
 8002190:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002196:	2300      	movs	r3, #0
 8002198:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800219a:	2301      	movs	r3, #1
 800219c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800219e:	2300      	movs	r3, #0
 80021a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80021a6:	f107 030c 	add.w	r3, r7, #12
 80021aa:	4619      	mov	r1, r3
 80021ac:	480e      	ldr	r0, [pc, #56]	@ (80021e8 <MX_TIM3_Init+0xa8>)
 80021ae:	f003 fc3f 	bl	8005a30 <HAL_TIM_Encoder_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80021b8:	f000 fc6e 	bl	8002a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021bc:	2300      	movs	r3, #0
 80021be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	4619      	mov	r1, r3
 80021c8:	4807      	ldr	r0, [pc, #28]	@ (80021e8 <MX_TIM3_Init+0xa8>)
 80021ca:	f004 fb23 	bl	8006814 <HAL_TIMEx_MasterConfigSynchronization>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80021d4:	f000 fc60 	bl	8002a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80021d8:	213c      	movs	r1, #60	@ 0x3c
 80021da:	4803      	ldr	r0, [pc, #12]	@ (80021e8 <MX_TIM3_Init+0xa8>)
 80021dc:	f003 fcce 	bl	8005b7c <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM3_Init 2 */

}
 80021e0:	bf00      	nop
 80021e2:	3730      	adds	r7, #48	@ 0x30
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	2000032c 	.word	0x2000032c
 80021ec:	40000400 	.word	0x40000400

080021f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08e      	sub	sp, #56	@ 0x38
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002204:	f107 0320 	add.w	r3, r7, #32
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800220e:	1d3b      	adds	r3, r7, #4
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
 800221c:	615a      	str	r2, [r3, #20]
 800221e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002220:	4b3d      	ldr	r3, [pc, #244]	@ (8002318 <MX_TIM4_Init+0x128>)
 8002222:	4a3e      	ldr	r2, [pc, #248]	@ (800231c <MX_TIM4_Init+0x12c>)
 8002224:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002226:	4b3c      	ldr	r3, [pc, #240]	@ (8002318 <MX_TIM4_Init+0x128>)
 8002228:	2200      	movs	r2, #0
 800222a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800222c:	4b3a      	ldr	r3, [pc, #232]	@ (8002318 <MX_TIM4_Init+0x128>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002232:	4b39      	ldr	r3, [pc, #228]	@ (8002318 <MX_TIM4_Init+0x128>)
 8002234:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002238:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800223a:	4b37      	ldr	r3, [pc, #220]	@ (8002318 <MX_TIM4_Init+0x128>)
 800223c:	2200      	movs	r2, #0
 800223e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002240:	4b35      	ldr	r3, [pc, #212]	@ (8002318 <MX_TIM4_Init+0x128>)
 8002242:	2200      	movs	r2, #0
 8002244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002246:	4834      	ldr	r0, [pc, #208]	@ (8002318 <MX_TIM4_Init+0x128>)
 8002248:	f003 fa1b 	bl	8005682 <HAL_TIM_Base_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002252:	f000 fc21 	bl	8002a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002256:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800225a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800225c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002260:	4619      	mov	r1, r3
 8002262:	482d      	ldr	r0, [pc, #180]	@ (8002318 <MX_TIM4_Init+0x128>)
 8002264:	f003 feca 	bl	8005ffc <HAL_TIM_ConfigClockSource>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800226e:	f000 fc13 	bl	8002a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002272:	4829      	ldr	r0, [pc, #164]	@ (8002318 <MX_TIM4_Init+0x128>)
 8002274:	f003 fac4 	bl	8005800 <HAL_TIM_PWM_Init>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800227e:	f000 fc0b 	bl	8002a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002286:	2300      	movs	r3, #0
 8002288:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800228a:	f107 0320 	add.w	r3, r7, #32
 800228e:	4619      	mov	r1, r3
 8002290:	4821      	ldr	r0, [pc, #132]	@ (8002318 <MX_TIM4_Init+0x128>)
 8002292:	f004 fabf 	bl	8006814 <HAL_TIMEx_MasterConfigSynchronization>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800229c:	f000 fbfc 	bl	8002a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022a0:	2360      	movs	r3, #96	@ 0x60
 80022a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	2200      	movs	r2, #0
 80022b4:	4619      	mov	r1, r3
 80022b6:	4818      	ldr	r0, [pc, #96]	@ (8002318 <MX_TIM4_Init+0x128>)
 80022b8:	f003 fdde 	bl	8005e78 <HAL_TIM_PWM_ConfigChannel>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80022c2:	f000 fbe9 	bl	8002a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022c6:	1d3b      	adds	r3, r7, #4
 80022c8:	2204      	movs	r2, #4
 80022ca:	4619      	mov	r1, r3
 80022cc:	4812      	ldr	r0, [pc, #72]	@ (8002318 <MX_TIM4_Init+0x128>)
 80022ce:	f003 fdd3 	bl	8005e78 <HAL_TIM_PWM_ConfigChannel>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80022d8:	f000 fbde 	bl	8002a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022dc:	1d3b      	adds	r3, r7, #4
 80022de:	2208      	movs	r2, #8
 80022e0:	4619      	mov	r1, r3
 80022e2:	480d      	ldr	r0, [pc, #52]	@ (8002318 <MX_TIM4_Init+0x128>)
 80022e4:	f003 fdc8 	bl	8005e78 <HAL_TIM_PWM_ConfigChannel>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80022ee:	f000 fbd3 	bl	8002a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022f2:	1d3b      	adds	r3, r7, #4
 80022f4:	220c      	movs	r2, #12
 80022f6:	4619      	mov	r1, r3
 80022f8:	4807      	ldr	r0, [pc, #28]	@ (8002318 <MX_TIM4_Init+0x128>)
 80022fa:	f003 fdbd 	bl	8005e78 <HAL_TIM_PWM_ConfigChannel>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8002304:	f000 fbc8 	bl	8002a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002308:	4803      	ldr	r0, [pc, #12]	@ (8002318 <MX_TIM4_Init+0x128>)
 800230a:	f000 fe13 	bl	8002f34 <HAL_TIM_MspPostInit>

}
 800230e:	bf00      	nop
 8002310:	3738      	adds	r7, #56	@ 0x38
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000374 	.word	0x20000374
 800231c:	40000800 	.word	0x40000800

08002320 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08c      	sub	sp, #48	@ 0x30
 8002324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002326:	f107 030c 	add.w	r3, r7, #12
 800232a:	2224      	movs	r2, #36	@ 0x24
 800232c:	2100      	movs	r1, #0
 800232e:	4618      	mov	r0, r3
 8002330:	f007 fb3b 	bl	80099aa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002334:	1d3b      	adds	r3, r7, #4
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800233c:	4b22      	ldr	r3, [pc, #136]	@ (80023c8 <MX_TIM5_Init+0xa8>)
 800233e:	4a23      	ldr	r2, [pc, #140]	@ (80023cc <MX_TIM5_Init+0xac>)
 8002340:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002342:	4b21      	ldr	r3, [pc, #132]	@ (80023c8 <MX_TIM5_Init+0xa8>)
 8002344:	2200      	movs	r2, #0
 8002346:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002348:	4b1f      	ldr	r3, [pc, #124]	@ (80023c8 <MX_TIM5_Init+0xa8>)
 800234a:	2200      	movs	r2, #0
 800234c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800234e:	4b1e      	ldr	r3, [pc, #120]	@ (80023c8 <MX_TIM5_Init+0xa8>)
 8002350:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002354:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002356:	4b1c      	ldr	r3, [pc, #112]	@ (80023c8 <MX_TIM5_Init+0xa8>)
 8002358:	2200      	movs	r2, #0
 800235a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800235c:	4b1a      	ldr	r3, [pc, #104]	@ (80023c8 <MX_TIM5_Init+0xa8>)
 800235e:	2200      	movs	r2, #0
 8002360:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002362:	2303      	movs	r3, #3
 8002364:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800236a:	2301      	movs	r3, #1
 800236c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002376:	2300      	movs	r3, #0
 8002378:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800237a:	2301      	movs	r3, #1
 800237c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800237e:	2300      	movs	r3, #0
 8002380:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002386:	f107 030c 	add.w	r3, r7, #12
 800238a:	4619      	mov	r1, r3
 800238c:	480e      	ldr	r0, [pc, #56]	@ (80023c8 <MX_TIM5_Init+0xa8>)
 800238e:	f003 fb4f 	bl	8005a30 <HAL_TIM_Encoder_Init>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002398:	f000 fb7e 	bl	8002a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800239c:	2300      	movs	r3, #0
 800239e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	4619      	mov	r1, r3
 80023a8:	4807      	ldr	r0, [pc, #28]	@ (80023c8 <MX_TIM5_Init+0xa8>)
 80023aa:	f004 fa33 	bl	8006814 <HAL_TIMEx_MasterConfigSynchronization>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80023b4:	f000 fb70 	bl	8002a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80023b8:	213c      	movs	r1, #60	@ 0x3c
 80023ba:	4803      	ldr	r0, [pc, #12]	@ (80023c8 <MX_TIM5_Init+0xa8>)
 80023bc:	f003 fbde 	bl	8005b7c <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM5_Init 2 */

}
 80023c0:	bf00      	nop
 80023c2:	3730      	adds	r7, #48	@ 0x30
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	200003bc 	.word	0x200003bc
 80023cc:	40000c00 	.word	0x40000c00

080023d0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b092      	sub	sp, #72	@ 0x48
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023d6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
 80023f0:	615a      	str	r2, [r3, #20]
 80023f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	2220      	movs	r2, #32
 80023f8:	2100      	movs	r1, #0
 80023fa:	4618      	mov	r0, r3
 80023fc:	f007 fad5 	bl	80099aa <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002400:	4b45      	ldr	r3, [pc, #276]	@ (8002518 <MX_TIM8_Init+0x148>)
 8002402:	4a46      	ldr	r2, [pc, #280]	@ (800251c <MX_TIM8_Init+0x14c>)
 8002404:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002406:	4b44      	ldr	r3, [pc, #272]	@ (8002518 <MX_TIM8_Init+0x148>)
 8002408:	2200      	movs	r2, #0
 800240a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800240c:	4b42      	ldr	r3, [pc, #264]	@ (8002518 <MX_TIM8_Init+0x148>)
 800240e:	2200      	movs	r2, #0
 8002410:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002412:	4b41      	ldr	r3, [pc, #260]	@ (8002518 <MX_TIM8_Init+0x148>)
 8002414:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002418:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800241a:	4b3f      	ldr	r3, [pc, #252]	@ (8002518 <MX_TIM8_Init+0x148>)
 800241c:	2200      	movs	r2, #0
 800241e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002420:	4b3d      	ldr	r3, [pc, #244]	@ (8002518 <MX_TIM8_Init+0x148>)
 8002422:	2200      	movs	r2, #0
 8002424:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002426:	4b3c      	ldr	r3, [pc, #240]	@ (8002518 <MX_TIM8_Init+0x148>)
 8002428:	2200      	movs	r2, #0
 800242a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800242c:	483a      	ldr	r0, [pc, #232]	@ (8002518 <MX_TIM8_Init+0x148>)
 800242e:	f003 f9e7 	bl	8005800 <HAL_TIM_PWM_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002438:	f000 fb2e 	bl	8002a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800243c:	2300      	movs	r3, #0
 800243e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002440:	2300      	movs	r3, #0
 8002442:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002444:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002448:	4619      	mov	r1, r3
 800244a:	4833      	ldr	r0, [pc, #204]	@ (8002518 <MX_TIM8_Init+0x148>)
 800244c:	f004 f9e2 	bl	8006814 <HAL_TIMEx_MasterConfigSynchronization>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002456:	f000 fb1f 	bl	8002a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800245a:	2360      	movs	r3, #96	@ 0x60
 800245c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002462:	2300      	movs	r3, #0
 8002464:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002466:	2300      	movs	r3, #0
 8002468:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800246a:	2300      	movs	r3, #0
 800246c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800246e:	2300      	movs	r3, #0
 8002470:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002472:	2300      	movs	r3, #0
 8002474:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002476:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800247a:	2200      	movs	r2, #0
 800247c:	4619      	mov	r1, r3
 800247e:	4826      	ldr	r0, [pc, #152]	@ (8002518 <MX_TIM8_Init+0x148>)
 8002480:	f003 fcfa 	bl	8005e78 <HAL_TIM_PWM_ConfigChannel>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800248a:	f000 fb05 	bl	8002a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800248e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002492:	2204      	movs	r2, #4
 8002494:	4619      	mov	r1, r3
 8002496:	4820      	ldr	r0, [pc, #128]	@ (8002518 <MX_TIM8_Init+0x148>)
 8002498:	f003 fcee 	bl	8005e78 <HAL_TIM_PWM_ConfigChannel>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80024a2:	f000 faf9 	bl	8002a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024aa:	2208      	movs	r2, #8
 80024ac:	4619      	mov	r1, r3
 80024ae:	481a      	ldr	r0, [pc, #104]	@ (8002518 <MX_TIM8_Init+0x148>)
 80024b0:	f003 fce2 	bl	8005e78 <HAL_TIM_PWM_ConfigChannel>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 80024ba:	f000 faed 	bl	8002a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024c2:	220c      	movs	r2, #12
 80024c4:	4619      	mov	r1, r3
 80024c6:	4814      	ldr	r0, [pc, #80]	@ (8002518 <MX_TIM8_Init+0x148>)
 80024c8:	f003 fcd6 	bl	8005e78 <HAL_TIM_PWM_ConfigChannel>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 80024d2:	f000 fae1 	bl	8002a98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024da:	2300      	movs	r3, #0
 80024dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024f0:	2300      	movs	r3, #0
 80024f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80024f4:	1d3b      	adds	r3, r7, #4
 80024f6:	4619      	mov	r1, r3
 80024f8:	4807      	ldr	r0, [pc, #28]	@ (8002518 <MX_TIM8_Init+0x148>)
 80024fa:	f004 fa07 	bl	800690c <HAL_TIMEx_ConfigBreakDeadTime>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 8002504:	f000 fac8 	bl	8002a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002508:	4803      	ldr	r0, [pc, #12]	@ (8002518 <MX_TIM8_Init+0x148>)
 800250a:	f000 fd13 	bl	8002f34 <HAL_TIM_MspPostInit>

}
 800250e:	bf00      	nop
 8002510:	3748      	adds	r7, #72	@ 0x48
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000404 	.word	0x20000404
 800251c:	40010400 	.word	0x40010400

08002520 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002526:	463b      	mov	r3, r7
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002532:	4b16      	ldr	r3, [pc, #88]	@ (800258c <MX_TIM9_Init+0x6c>)
 8002534:	4a16      	ldr	r2, [pc, #88]	@ (8002590 <MX_TIM9_Init+0x70>)
 8002536:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 146;
 8002538:	4b14      	ldr	r3, [pc, #80]	@ (800258c <MX_TIM9_Init+0x6c>)
 800253a:	2292      	movs	r2, #146	@ 0x92
 800253c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800253e:	4b13      	ldr	r3, [pc, #76]	@ (800258c <MX_TIM9_Init+0x6c>)
 8002540:	2200      	movs	r2, #0
 8002542:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8002544:	4b11      	ldr	r3, [pc, #68]	@ (800258c <MX_TIM9_Init+0x6c>)
 8002546:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800254a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800254c:	4b0f      	ldr	r3, [pc, #60]	@ (800258c <MX_TIM9_Init+0x6c>)
 800254e:	2200      	movs	r2, #0
 8002550:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002552:	4b0e      	ldr	r3, [pc, #56]	@ (800258c <MX_TIM9_Init+0x6c>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002558:	480c      	ldr	r0, [pc, #48]	@ (800258c <MX_TIM9_Init+0x6c>)
 800255a:	f003 f892 	bl	8005682 <HAL_TIM_Base_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8002564:	f000 fa98 	bl	8002a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002568:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800256c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800256e:	463b      	mov	r3, r7
 8002570:	4619      	mov	r1, r3
 8002572:	4806      	ldr	r0, [pc, #24]	@ (800258c <MX_TIM9_Init+0x6c>)
 8002574:	f003 fd42 	bl	8005ffc <HAL_TIM_ConfigClockSource>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800257e:	f000 fa8b 	bl	8002a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	2000044c 	.word	0x2000044c
 8002590:	40014000 	.word	0x40014000

08002594 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002598:	4b0e      	ldr	r3, [pc, #56]	@ (80025d4 <MX_TIM10_Init+0x40>)
 800259a:	4a0f      	ldr	r2, [pc, #60]	@ (80025d8 <MX_TIM10_Init+0x44>)
 800259c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1500;
 800259e:	4b0d      	ldr	r3, [pc, #52]	@ (80025d4 <MX_TIM10_Init+0x40>)
 80025a0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80025a4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a6:	4b0b      	ldr	r3, [pc, #44]	@ (80025d4 <MX_TIM10_Init+0x40>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80025ac:	4b09      	ldr	r3, [pc, #36]	@ (80025d4 <MX_TIM10_Init+0x40>)
 80025ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025b2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b4:	4b07      	ldr	r3, [pc, #28]	@ (80025d4 <MX_TIM10_Init+0x40>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ba:	4b06      	ldr	r3, [pc, #24]	@ (80025d4 <MX_TIM10_Init+0x40>)
 80025bc:	2200      	movs	r2, #0
 80025be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80025c0:	4804      	ldr	r0, [pc, #16]	@ (80025d4 <MX_TIM10_Init+0x40>)
 80025c2:	f003 f85e 	bl	8005682 <HAL_TIM_Base_Init>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80025cc:	f000 fa64 	bl	8002a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80025d0:	bf00      	nop
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000494 	.word	0x20000494
 80025d8:	40014400 	.word	0x40014400

080025dc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025e2:	463b      	mov	r3, r7
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80025ee:	4b16      	ldr	r3, [pc, #88]	@ (8002648 <MX_TIM12_Init+0x6c>)
 80025f0:	4a16      	ldr	r2, [pc, #88]	@ (800264c <MX_TIM12_Init+0x70>)
 80025f2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1500;
 80025f4:	4b14      	ldr	r3, [pc, #80]	@ (8002648 <MX_TIM12_Init+0x6c>)
 80025f6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80025fa:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025fc:	4b12      	ldr	r3, [pc, #72]	@ (8002648 <MX_TIM12_Init+0x6c>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002602:	4b11      	ldr	r3, [pc, #68]	@ (8002648 <MX_TIM12_Init+0x6c>)
 8002604:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002608:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800260a:	4b0f      	ldr	r3, [pc, #60]	@ (8002648 <MX_TIM12_Init+0x6c>)
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002610:	4b0d      	ldr	r3, [pc, #52]	@ (8002648 <MX_TIM12_Init+0x6c>)
 8002612:	2200      	movs	r2, #0
 8002614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002616:	480c      	ldr	r0, [pc, #48]	@ (8002648 <MX_TIM12_Init+0x6c>)
 8002618:	f003 f833 	bl	8005682 <HAL_TIM_Base_Init>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 8002622:	f000 fa39 	bl	8002a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002626:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800262a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800262c:	463b      	mov	r3, r7
 800262e:	4619      	mov	r1, r3
 8002630:	4805      	ldr	r0, [pc, #20]	@ (8002648 <MX_TIM12_Init+0x6c>)
 8002632:	f003 fce3 	bl	8005ffc <HAL_TIM_ConfigClockSource>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 800263c:	f000 fa2c 	bl	8002a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8002640:	bf00      	nop
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	200004dc 	.word	0x200004dc
 800264c:	40001800 	.word	0x40001800

08002650 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002654:	4b11      	ldr	r3, [pc, #68]	@ (800269c <MX_USART2_UART_Init+0x4c>)
 8002656:	4a12      	ldr	r2, [pc, #72]	@ (80026a0 <MX_USART2_UART_Init+0x50>)
 8002658:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800265a:	4b10      	ldr	r3, [pc, #64]	@ (800269c <MX_USART2_UART_Init+0x4c>)
 800265c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002660:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002662:	4b0e      	ldr	r3, [pc, #56]	@ (800269c <MX_USART2_UART_Init+0x4c>)
 8002664:	2200      	movs	r2, #0
 8002666:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002668:	4b0c      	ldr	r3, [pc, #48]	@ (800269c <MX_USART2_UART_Init+0x4c>)
 800266a:	2200      	movs	r2, #0
 800266c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800266e:	4b0b      	ldr	r3, [pc, #44]	@ (800269c <MX_USART2_UART_Init+0x4c>)
 8002670:	2200      	movs	r2, #0
 8002672:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002674:	4b09      	ldr	r3, [pc, #36]	@ (800269c <MX_USART2_UART_Init+0x4c>)
 8002676:	220c      	movs	r2, #12
 8002678:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800267a:	4b08      	ldr	r3, [pc, #32]	@ (800269c <MX_USART2_UART_Init+0x4c>)
 800267c:	2200      	movs	r2, #0
 800267e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002680:	4b06      	ldr	r3, [pc, #24]	@ (800269c <MX_USART2_UART_Init+0x4c>)
 8002682:	2200      	movs	r2, #0
 8002684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002686:	4805      	ldr	r0, [pc, #20]	@ (800269c <MX_USART2_UART_Init+0x4c>)
 8002688:	f004 f9a6 	bl	80069d8 <HAL_UART_Init>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002692:	f000 fa01 	bl	8002a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000524 	.word	0x20000524
 80026a0:	40004400 	.word	0x40004400

080026a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026a8:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <MX_USART3_UART_Init+0x4c>)
 80026aa:	4a12      	ldr	r2, [pc, #72]	@ (80026f4 <MX_USART3_UART_Init+0x50>)
 80026ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80026ae:	4b10      	ldr	r3, [pc, #64]	@ (80026f0 <MX_USART3_UART_Init+0x4c>)
 80026b0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80026b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026b6:	4b0e      	ldr	r3, [pc, #56]	@ (80026f0 <MX_USART3_UART_Init+0x4c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026bc:	4b0c      	ldr	r3, [pc, #48]	@ (80026f0 <MX_USART3_UART_Init+0x4c>)
 80026be:	2200      	movs	r2, #0
 80026c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026c2:	4b0b      	ldr	r3, [pc, #44]	@ (80026f0 <MX_USART3_UART_Init+0x4c>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026c8:	4b09      	ldr	r3, [pc, #36]	@ (80026f0 <MX_USART3_UART_Init+0x4c>)
 80026ca:	220c      	movs	r2, #12
 80026cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ce:	4b08      	ldr	r3, [pc, #32]	@ (80026f0 <MX_USART3_UART_Init+0x4c>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026d4:	4b06      	ldr	r3, [pc, #24]	@ (80026f0 <MX_USART3_UART_Init+0x4c>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026da:	4805      	ldr	r0, [pc, #20]	@ (80026f0 <MX_USART3_UART_Init+0x4c>)
 80026dc:	f004 f97c 	bl	80069d8 <HAL_UART_Init>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80026e6:	f000 f9d7 	bl	8002a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	2000056c 	.word	0x2000056c
 80026f4:	40004800 	.word	0x40004800

080026f8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80026fc:	4b11      	ldr	r3, [pc, #68]	@ (8002744 <MX_USART6_UART_Init+0x4c>)
 80026fe:	4a12      	ldr	r2, [pc, #72]	@ (8002748 <MX_USART6_UART_Init+0x50>)
 8002700:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002702:	4b10      	ldr	r3, [pc, #64]	@ (8002744 <MX_USART6_UART_Init+0x4c>)
 8002704:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002708:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800270a:	4b0e      	ldr	r3, [pc, #56]	@ (8002744 <MX_USART6_UART_Init+0x4c>)
 800270c:	2200      	movs	r2, #0
 800270e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002710:	4b0c      	ldr	r3, [pc, #48]	@ (8002744 <MX_USART6_UART_Init+0x4c>)
 8002712:	2200      	movs	r2, #0
 8002714:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002716:	4b0b      	ldr	r3, [pc, #44]	@ (8002744 <MX_USART6_UART_Init+0x4c>)
 8002718:	2200      	movs	r2, #0
 800271a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800271c:	4b09      	ldr	r3, [pc, #36]	@ (8002744 <MX_USART6_UART_Init+0x4c>)
 800271e:	220c      	movs	r2, #12
 8002720:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002722:	4b08      	ldr	r3, [pc, #32]	@ (8002744 <MX_USART6_UART_Init+0x4c>)
 8002724:	2200      	movs	r2, #0
 8002726:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002728:	4b06      	ldr	r3, [pc, #24]	@ (8002744 <MX_USART6_UART_Init+0x4c>)
 800272a:	2200      	movs	r2, #0
 800272c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800272e:	4805      	ldr	r0, [pc, #20]	@ (8002744 <MX_USART6_UART_Init+0x4c>)
 8002730:	f004 f952 	bl	80069d8 <HAL_UART_Init>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800273a:	f000 f9ad 	bl	8002a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	200005b4 	.word	0x200005b4
 8002748:	40011400 	.word	0x40011400

0800274c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002750:	4b15      	ldr	r3, [pc, #84]	@ (80027a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002752:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002756:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002758:	4b13      	ldr	r3, [pc, #76]	@ (80027a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800275a:	2206      	movs	r2, #6
 800275c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800275e:	4b12      	ldr	r3, [pc, #72]	@ (80027a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002760:	2202      	movs	r2, #2
 8002762:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002764:	4b10      	ldr	r3, [pc, #64]	@ (80027a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002766:	2200      	movs	r2, #0
 8002768:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800276a:	4b0f      	ldr	r3, [pc, #60]	@ (80027a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800276c:	2202      	movs	r2, #2
 800276e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002770:	4b0d      	ldr	r3, [pc, #52]	@ (80027a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002772:	2201      	movs	r2, #1
 8002774:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002776:	4b0c      	ldr	r3, [pc, #48]	@ (80027a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002778:	2200      	movs	r2, #0
 800277a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800277c:	4b0a      	ldr	r3, [pc, #40]	@ (80027a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800277e:	2200      	movs	r2, #0
 8002780:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002782:	4b09      	ldr	r3, [pc, #36]	@ (80027a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002784:	2201      	movs	r2, #1
 8002786:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002788:	4b07      	ldr	r3, [pc, #28]	@ (80027a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800278a:	2201      	movs	r2, #1
 800278c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800278e:	4b06      	ldr	r3, [pc, #24]	@ (80027a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002790:	2200      	movs	r2, #0
 8002792:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002794:	4804      	ldr	r0, [pc, #16]	@ (80027a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002796:	f001 ff3e 	bl	8004616 <HAL_PCD_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 80027a0:	f000 f97a 	bl	8002a98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	2000071c 	.word	0x2000071c

080027ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	607b      	str	r3, [r7, #4]
 80027b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002824 <MX_DMA_Init+0x78>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002824 <MX_DMA_Init+0x78>)
 80027bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c2:	4b18      	ldr	r3, [pc, #96]	@ (8002824 <MX_DMA_Init+0x78>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027ca:	607b      	str	r3, [r7, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	603b      	str	r3, [r7, #0]
 80027d2:	4b14      	ldr	r3, [pc, #80]	@ (8002824 <MX_DMA_Init+0x78>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d6:	4a13      	ldr	r2, [pc, #76]	@ (8002824 <MX_DMA_Init+0x78>)
 80027d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027de:	4b11      	ldr	r3, [pc, #68]	@ (8002824 <MX_DMA_Init+0x78>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80027ea:	2200      	movs	r2, #0
 80027ec:	2100      	movs	r1, #0
 80027ee:	200c      	movs	r0, #12
 80027f0:	f001 f907 	bl	8003a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80027f4:	200c      	movs	r0, #12
 80027f6:	f001 f920 	bl	8003a3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2100      	movs	r1, #0
 80027fe:	2010      	movs	r0, #16
 8002800:	f001 f8ff 	bl	8003a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002804:	2010      	movs	r0, #16
 8002806:	f001 f918 	bl	8003a3a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800280a:	2200      	movs	r2, #0
 800280c:	2100      	movs	r1, #0
 800280e:	2039      	movs	r0, #57	@ 0x39
 8002810:	f001 f8f7 	bl	8003a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002814:	2039      	movs	r0, #57	@ 0x39
 8002816:	f001 f910 	bl	8003a3a <HAL_NVIC_EnableIRQ>

}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800

08002828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08e      	sub	sp, #56	@ 0x38
 800282c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	605a      	str	r2, [r3, #4]
 8002838:	609a      	str	r2, [r3, #8]
 800283a:	60da      	str	r2, [r3, #12]
 800283c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	623b      	str	r3, [r7, #32]
 8002842:	4b8e      	ldr	r3, [pc, #568]	@ (8002a7c <MX_GPIO_Init+0x254>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002846:	4a8d      	ldr	r2, [pc, #564]	@ (8002a7c <MX_GPIO_Init+0x254>)
 8002848:	f043 0304 	orr.w	r3, r3, #4
 800284c:	6313      	str	r3, [r2, #48]	@ 0x30
 800284e:	4b8b      	ldr	r3, [pc, #556]	@ (8002a7c <MX_GPIO_Init+0x254>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	623b      	str	r3, [r7, #32]
 8002858:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
 800285e:	4b87      	ldr	r3, [pc, #540]	@ (8002a7c <MX_GPIO_Init+0x254>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002862:	4a86      	ldr	r2, [pc, #536]	@ (8002a7c <MX_GPIO_Init+0x254>)
 8002864:	f043 0320 	orr.w	r3, r3, #32
 8002868:	6313      	str	r3, [r2, #48]	@ 0x30
 800286a:	4b84      	ldr	r3, [pc, #528]	@ (8002a7c <MX_GPIO_Init+0x254>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286e:	f003 0320 	and.w	r3, r3, #32
 8002872:	61fb      	str	r3, [r7, #28]
 8002874:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	4b80      	ldr	r3, [pc, #512]	@ (8002a7c <MX_GPIO_Init+0x254>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287e:	4a7f      	ldr	r2, [pc, #508]	@ (8002a7c <MX_GPIO_Init+0x254>)
 8002880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002884:	6313      	str	r3, [r2, #48]	@ 0x30
 8002886:	4b7d      	ldr	r3, [pc, #500]	@ (8002a7c <MX_GPIO_Init+0x254>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800288e:	61bb      	str	r3, [r7, #24]
 8002890:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	4b79      	ldr	r3, [pc, #484]	@ (8002a7c <MX_GPIO_Init+0x254>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289a:	4a78      	ldr	r2, [pc, #480]	@ (8002a7c <MX_GPIO_Init+0x254>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028a2:	4b76      	ldr	r3, [pc, #472]	@ (8002a7c <MX_GPIO_Init+0x254>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	4b72      	ldr	r3, [pc, #456]	@ (8002a7c <MX_GPIO_Init+0x254>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	4a71      	ldr	r2, [pc, #452]	@ (8002a7c <MX_GPIO_Init+0x254>)
 80028b8:	f043 0310 	orr.w	r3, r3, #16
 80028bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028be:	4b6f      	ldr	r3, [pc, #444]	@ (8002a7c <MX_GPIO_Init+0x254>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	4b6b      	ldr	r3, [pc, #428]	@ (8002a7c <MX_GPIO_Init+0x254>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	4a6a      	ldr	r2, [pc, #424]	@ (8002a7c <MX_GPIO_Init+0x254>)
 80028d4:	f043 0302 	orr.w	r3, r3, #2
 80028d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028da:	4b68      	ldr	r3, [pc, #416]	@ (8002a7c <MX_GPIO_Init+0x254>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	4b64      	ldr	r3, [pc, #400]	@ (8002a7c <MX_GPIO_Init+0x254>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	4a63      	ldr	r2, [pc, #396]	@ (8002a7c <MX_GPIO_Init+0x254>)
 80028f0:	f043 0308 	orr.w	r3, r3, #8
 80028f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f6:	4b61      	ldr	r3, [pc, #388]	@ (8002a7c <MX_GPIO_Init+0x254>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	607b      	str	r3, [r7, #4]
 8002906:	4b5d      	ldr	r3, [pc, #372]	@ (8002a7c <MX_GPIO_Init+0x254>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	4a5c      	ldr	r2, [pc, #368]	@ (8002a7c <MX_GPIO_Init+0x254>)
 800290c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002910:	6313      	str	r3, [r2, #48]	@ 0x30
 8002912:	4b5a      	ldr	r3, [pc, #360]	@ (8002a7c <MX_GPIO_Init+0x254>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800291a:	607b      	str	r3, [r7, #4]
 800291c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 800291e:	2200      	movs	r2, #0
 8002920:	2180      	movs	r1, #128	@ 0x80
 8002922:	4857      	ldr	r0, [pc, #348]	@ (8002a80 <MX_GPIO_Init+0x258>)
 8002924:	f001 fe3a 	bl	800459c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002928:	2200      	movs	r2, #0
 800292a:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 800292e:	4855      	ldr	r0, [pc, #340]	@ (8002a84 <MX_GPIO_Init+0x25c>)
 8002930:	f001 fe34 	bl	800459c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8002934:	2200      	movs	r2, #0
 8002936:	2140      	movs	r1, #64	@ 0x40
 8002938:	4853      	ldr	r0, [pc, #332]	@ (8002a88 <MX_GPIO_Init+0x260>)
 800293a:	f001 fe2f 	bl	800459c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800293e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002942:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002944:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002948:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294a:	2300      	movs	r3, #0
 800294c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800294e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002952:	4619      	mov	r1, r3
 8002954:	484d      	ldr	r0, [pc, #308]	@ (8002a8c <MX_GPIO_Init+0x264>)
 8002956:	f001 fc8d 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800295a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800295e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002960:	2300      	movs	r3, #0
 8002962:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002968:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800296c:	4619      	mov	r1, r3
 800296e:	4848      	ldr	r0, [pc, #288]	@ (8002a90 <MX_GPIO_Init+0x268>)
 8002970:	f001 fc80 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002974:	2380      	movs	r3, #128	@ 0x80
 8002976:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002978:	2301      	movs	r3, #1
 800297a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	2300      	movs	r3, #0
 800297e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002980:	2300      	movs	r3, #0
 8002982:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002984:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002988:	4619      	mov	r1, r3
 800298a:	483d      	ldr	r0, [pc, #244]	@ (8002a80 <MX_GPIO_Init+0x258>)
 800298c:	f001 fc72 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002990:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8002994:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002996:	2301      	movs	r3, #1
 8002998:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299e:	2300      	movs	r3, #0
 80029a0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029a6:	4619      	mov	r1, r3
 80029a8:	4836      	ldr	r0, [pc, #216]	@ (8002a84 <MX_GPIO_Init+0x25c>)
 80029aa:	f001 fc63 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029ae:	230c      	movs	r3, #12
 80029b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80029b2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80029b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029c0:	4619      	mov	r1, r3
 80029c2:	4831      	ldr	r0, [pc, #196]	@ (8002a88 <MX_GPIO_Init+0x260>)
 80029c4:	f001 fc56 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029c8:	2340      	movs	r3, #64	@ 0x40
 80029ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029cc:	2301      	movs	r3, #1
 80029ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d4:	2300      	movs	r3, #0
 80029d6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029dc:	4619      	mov	r1, r3
 80029de:	482a      	ldr	r0, [pc, #168]	@ (8002a88 <MX_GPIO_Init+0x260>)
 80029e0:	f001 fc48 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80029e4:	2380      	movs	r3, #128	@ 0x80
 80029e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029e8:	2300      	movs	r3, #0
 80029ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80029f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029f4:	4619      	mov	r1, r3
 80029f6:	4824      	ldr	r0, [pc, #144]	@ (8002a88 <MX_GPIO_Init+0x260>)
 80029f8:	f001 fc3c 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80029fc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002a00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002a02:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002a06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a10:	4619      	mov	r1, r3
 8002a12:	481e      	ldr	r0, [pc, #120]	@ (8002a8c <MX_GPIO_Init+0x264>)
 8002a14:	f001 fc2e 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a18:	23c0      	movs	r3, #192	@ 0xc0
 8002a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002a1c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002a20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4819      	ldr	r0, [pc, #100]	@ (8002a94 <MX_GPIO_Init+0x26c>)
 8002a2e:	f001 fc21 	bl	8004274 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002a32:	2200      	movs	r2, #0
 8002a34:	2100      	movs	r1, #0
 8002a36:	2008      	movs	r0, #8
 8002a38:	f000 ffe3 	bl	8003a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002a3c:	2008      	movs	r0, #8
 8002a3e:	f000 fffc 	bl	8003a3a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002a42:	2200      	movs	r2, #0
 8002a44:	2100      	movs	r1, #0
 8002a46:	2009      	movs	r0, #9
 8002a48:	f000 ffdb 	bl	8003a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002a4c:	2009      	movs	r0, #9
 8002a4e:	f000 fff4 	bl	8003a3a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002a52:	2200      	movs	r2, #0
 8002a54:	2100      	movs	r1, #0
 8002a56:	2017      	movs	r0, #23
 8002a58:	f000 ffd3 	bl	8003a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002a5c:	2017      	movs	r0, #23
 8002a5e:	f000 ffec 	bl	8003a3a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002a62:	2200      	movs	r2, #0
 8002a64:	2100      	movs	r1, #0
 8002a66:	2028      	movs	r0, #40	@ 0x28
 8002a68:	f000 ffcb 	bl	8003a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a6c:	2028      	movs	r0, #40	@ 0x28
 8002a6e:	f000 ffe4 	bl	8003a3a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a72:	bf00      	nop
 8002a74:	3738      	adds	r7, #56	@ 0x38
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40020400 	.word	0x40020400
 8002a88:	40021800 	.word	0x40021800
 8002a8c:	40020800 	.word	0x40020800
 8002a90:	40021400 	.word	0x40021400
 8002a94:	40020c00 	.word	0x40020c00

08002a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a9c:	b672      	cpsid	i
}
 8002a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002aa0:	bf00      	nop
 8002aa2:	e7fd      	b.n	8002aa0 <Error_Handler+0x8>

08002aa4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	607b      	str	r3, [r7, #4]
 8002aae:	4b10      	ldr	r3, [pc, #64]	@ (8002af0 <HAL_MspInit+0x4c>)
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab2:	4a0f      	ldr	r2, [pc, #60]	@ (8002af0 <HAL_MspInit+0x4c>)
 8002ab4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ab8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aba:	4b0d      	ldr	r3, [pc, #52]	@ (8002af0 <HAL_MspInit+0x4c>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002abe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ac2:	607b      	str	r3, [r7, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	603b      	str	r3, [r7, #0]
 8002aca:	4b09      	ldr	r3, [pc, #36]	@ (8002af0 <HAL_MspInit+0x4c>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ace:	4a08      	ldr	r2, [pc, #32]	@ (8002af0 <HAL_MspInit+0x4c>)
 8002ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ad6:	4b06      	ldr	r3, [pc, #24]	@ (8002af0 <HAL_MspInit+0x4c>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40023800 	.word	0x40023800

08002af4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	@ 0x28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a28      	ldr	r2, [pc, #160]	@ (8002bb4 <HAL_SPI_MspInit+0xc0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d14a      	bne.n	8002bac <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	4b27      	ldr	r3, [pc, #156]	@ (8002bb8 <HAL_SPI_MspInit+0xc4>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1e:	4a26      	ldr	r2, [pc, #152]	@ (8002bb8 <HAL_SPI_MspInit+0xc4>)
 8002b20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b26:	4b24      	ldr	r3, [pc, #144]	@ (8002bb8 <HAL_SPI_MspInit+0xc4>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	4b20      	ldr	r3, [pc, #128]	@ (8002bb8 <HAL_SPI_MspInit+0xc4>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8002bb8 <HAL_SPI_MspInit+0xc4>)
 8002b3c:	f043 0304 	orr.w	r3, r3, #4
 8002b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b42:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb8 <HAL_SPI_MspInit+0xc4>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	4b19      	ldr	r3, [pc, #100]	@ (8002bb8 <HAL_SPI_MspInit+0xc4>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b56:	4a18      	ldr	r2, [pc, #96]	@ (8002bb8 <HAL_SPI_MspInit+0xc4>)
 8002b58:	f043 0302 	orr.w	r3, r3, #2
 8002b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b5e:	4b16      	ldr	r3, [pc, #88]	@ (8002bb8 <HAL_SPI_MspInit+0xc4>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b6a:	2308      	movs	r3, #8
 8002b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b76:	2303      	movs	r3, #3
 8002b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b7a:	2305      	movs	r3, #5
 8002b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b7e:	f107 0314 	add.w	r3, r7, #20
 8002b82:	4619      	mov	r1, r3
 8002b84:	480d      	ldr	r0, [pc, #52]	@ (8002bbc <HAL_SPI_MspInit+0xc8>)
 8002b86:	f001 fb75 	bl	8004274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b90:	2302      	movs	r3, #2
 8002b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b9c:	2305      	movs	r3, #5
 8002b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba0:	f107 0314 	add.w	r3, r7, #20
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4806      	ldr	r0, [pc, #24]	@ (8002bc0 <HAL_SPI_MspInit+0xcc>)
 8002ba8:	f001 fb64 	bl	8004274 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002bac:	bf00      	nop
 8002bae:	3728      	adds	r7, #40	@ 0x28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40003800 	.word	0x40003800
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40020800 	.word	0x40020800
 8002bc0:	40020400 	.word	0x40020400

08002bc4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b090      	sub	sp, #64	@ 0x40
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bcc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	60da      	str	r2, [r3, #12]
 8002bda:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a7b      	ldr	r2, [pc, #492]	@ (8002dd0 <HAL_TIM_Encoder_MspInit+0x20c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d13d      	bne.n	8002c62 <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bea:	4b7a      	ldr	r3, [pc, #488]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bee:	4a79      	ldr	r2, [pc, #484]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bf6:	4b77      	ldr	r3, [pc, #476]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c06:	4b73      	ldr	r3, [pc, #460]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0a:	4a72      	ldr	r2, [pc, #456]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002c0c:	f043 0310 	orr.w	r3, r3, #16
 8002c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c12:	4b70      	ldr	r3, [pc, #448]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c16:	f003 0310 	and.w	r3, r3, #16
 8002c1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002c1e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c24:	2302      	movs	r3, #2
 8002c26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c30:	2301      	movs	r3, #1
 8002c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4867      	ldr	r0, [pc, #412]	@ (8002dd8 <HAL_TIM_Encoder_MspInit+0x214>)
 8002c3c:	f001 fb1a 	bl	8004274 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002c40:	2200      	movs	r2, #0
 8002c42:	2100      	movs	r1, #0
 8002c44:	2018      	movs	r0, #24
 8002c46:	f000 fedc 	bl	8003a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002c4a:	2018      	movs	r0, #24
 8002c4c:	f000 fef5 	bl	8003a3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002c50:	2200      	movs	r2, #0
 8002c52:	2100      	movs	r1, #0
 8002c54:	2019      	movs	r0, #25
 8002c56:	f000 fed4 	bl	8003a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002c5a:	2019      	movs	r0, #25
 8002c5c:	f000 feed 	bl	8003a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002c60:	e0b2      	b.n	8002dc8 <HAL_TIM_Encoder_MspInit+0x204>
  else if(htim_encoder->Instance==TIM2)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c6a:	d12c      	bne.n	8002cc6 <HAL_TIM_Encoder_MspInit+0x102>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	623b      	str	r3, [r7, #32]
 8002c70:	4b58      	ldr	r3, [pc, #352]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c74:	4a57      	ldr	r2, [pc, #348]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c7c:	4b55      	ldr	r3, [pc, #340]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	623b      	str	r3, [r7, #32]
 8002c86:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c88:	2300      	movs	r3, #0
 8002c8a:	61fb      	str	r3, [r7, #28]
 8002c8c:	4b51      	ldr	r3, [pc, #324]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c90:	4a50      	ldr	r2, [pc, #320]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c98:	4b4e      	ldr	r3, [pc, #312]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	61fb      	str	r3, [r7, #28]
 8002ca2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4847      	ldr	r0, [pc, #284]	@ (8002ddc <HAL_TIM_Encoder_MspInit+0x218>)
 8002cc0:	f001 fad8 	bl	8004274 <HAL_GPIO_Init>
}
 8002cc4:	e080      	b.n	8002dc8 <HAL_TIM_Encoder_MspInit+0x204>
  else if(htim_encoder->Instance==TIM3)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a45      	ldr	r2, [pc, #276]	@ (8002de0 <HAL_TIM_Encoder_MspInit+0x21c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d14a      	bne.n	8002d66 <HAL_TIM_Encoder_MspInit+0x1a2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	61bb      	str	r3, [r7, #24]
 8002cd4:	4b3f      	ldr	r3, [pc, #252]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd8:	4a3e      	ldr	r2, [pc, #248]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002cda:	f043 0302 	orr.w	r3, r3, #2
 8002cde:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ce0:	4b3c      	ldr	r3, [pc, #240]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	61bb      	str	r3, [r7, #24]
 8002cea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	4b38      	ldr	r3, [pc, #224]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf4:	4a37      	ldr	r2, [pc, #220]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cfc:	4b35      	ldr	r3, [pc, #212]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d08:	2300      	movs	r3, #0
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	4b31      	ldr	r3, [pc, #196]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d10:	4a30      	ldr	r2, [pc, #192]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002d12:	f043 0302 	orr.w	r3, r3, #2
 8002d16:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d18:	4b2e      	ldr	r3, [pc, #184]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d24:	2340      	movs	r3, #64	@ 0x40
 8002d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d30:	2300      	movs	r3, #0
 8002d32:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d34:	2302      	movs	r3, #2
 8002d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4827      	ldr	r0, [pc, #156]	@ (8002ddc <HAL_TIM_Encoder_MspInit+0x218>)
 8002d40:	f001 fa98 	bl	8004274 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002d44:	2320      	movs	r3, #32
 8002d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d50:	2300      	movs	r3, #0
 8002d52:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d54:	2302      	movs	r3, #2
 8002d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4821      	ldr	r0, [pc, #132]	@ (8002de4 <HAL_TIM_Encoder_MspInit+0x220>)
 8002d60:	f001 fa88 	bl	8004274 <HAL_GPIO_Init>
}
 8002d64:	e030      	b.n	8002dc8 <HAL_TIM_Encoder_MspInit+0x204>
  else if(htim_encoder->Instance==TIM5)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8002de8 <HAL_TIM_Encoder_MspInit+0x224>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d12b      	bne.n	8002dc8 <HAL_TIM_Encoder_MspInit+0x204>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d70:	2300      	movs	r3, #0
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	4b17      	ldr	r3, [pc, #92]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d78:	4a16      	ldr	r2, [pc, #88]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002d7a:	f043 0308 	orr.w	r3, r3, #8
 8002d7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d80:	4b14      	ldr	r3, [pc, #80]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60bb      	str	r3, [r7, #8]
 8002d90:	4b10      	ldr	r3, [pc, #64]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d94:	4a0f      	ldr	r2, [pc, #60]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002d96:	f043 0320 	orr.w	r3, r3, #32
 8002d9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002da8:	2318      	movs	r3, #24
 8002daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dac:	2302      	movs	r3, #2
 8002dae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db4:	2300      	movs	r3, #0
 8002db6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002db8:	2302      	movs	r3, #2
 8002dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	480a      	ldr	r0, [pc, #40]	@ (8002dec <HAL_TIM_Encoder_MspInit+0x228>)
 8002dc4:	f001 fa56 	bl	8004274 <HAL_GPIO_Init>
}
 8002dc8:	bf00      	nop
 8002dca:	3740      	adds	r7, #64	@ 0x40
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40010000 	.word	0x40010000
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40020000 	.word	0x40020000
 8002de0:	40000400 	.word	0x40000400
 8002de4:	40020400 	.word	0x40020400
 8002de8:	40000c00 	.word	0x40000c00
 8002dec:	40021400 	.word	0x40021400

08002df0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a34      	ldr	r2, [pc, #208]	@ (8002ed0 <HAL_TIM_Base_MspInit+0xe0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d10e      	bne.n	8002e20 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	4b33      	ldr	r3, [pc, #204]	@ (8002ed4 <HAL_TIM_Base_MspInit+0xe4>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	4a32      	ldr	r2, [pc, #200]	@ (8002ed4 <HAL_TIM_Base_MspInit+0xe4>)
 8002e0c:	f043 0304 	orr.w	r3, r3, #4
 8002e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e12:	4b30      	ldr	r3, [pc, #192]	@ (8002ed4 <HAL_TIM_Base_MspInit+0xe4>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002e1e:	e052      	b.n	8002ec6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM9)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a2c      	ldr	r2, [pc, #176]	@ (8002ed8 <HAL_TIM_Base_MspInit+0xe8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d116      	bne.n	8002e58 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	4b29      	ldr	r3, [pc, #164]	@ (8002ed4 <HAL_TIM_Base_MspInit+0xe4>)
 8002e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e32:	4a28      	ldr	r2, [pc, #160]	@ (8002ed4 <HAL_TIM_Base_MspInit+0xe4>)
 8002e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e38:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e3a:	4b26      	ldr	r3, [pc, #152]	@ (8002ed4 <HAL_TIM_Base_MspInit+0xe4>)
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002e46:	2200      	movs	r2, #0
 8002e48:	2100      	movs	r1, #0
 8002e4a:	2018      	movs	r0, #24
 8002e4c:	f000 fdd9 	bl	8003a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002e50:	2018      	movs	r0, #24
 8002e52:	f000 fdf2 	bl	8003a3a <HAL_NVIC_EnableIRQ>
}
 8002e56:	e036      	b.n	8002ec6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM10)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8002edc <HAL_TIM_Base_MspInit+0xec>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d116      	bne.n	8002e90 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed4 <HAL_TIM_Base_MspInit+0xe4>)
 8002e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ed4 <HAL_TIM_Base_MspInit+0xe4>)
 8002e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e72:	4b18      	ldr	r3, [pc, #96]	@ (8002ed4 <HAL_TIM_Base_MspInit+0xe4>)
 8002e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2100      	movs	r1, #0
 8002e82:	2019      	movs	r0, #25
 8002e84:	f000 fdbd 	bl	8003a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002e88:	2019      	movs	r0, #25
 8002e8a:	f000 fdd6 	bl	8003a3a <HAL_NVIC_EnableIRQ>
}
 8002e8e:	e01a      	b.n	8002ec6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM12)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a12      	ldr	r2, [pc, #72]	@ (8002ee0 <HAL_TIM_Base_MspInit+0xf0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d115      	bne.n	8002ec6 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed4 <HAL_TIM_Base_MspInit+0xe4>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ed4 <HAL_TIM_Base_MspInit+0xe4>)
 8002ea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed4 <HAL_TIM_Base_MspInit+0xe4>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2100      	movs	r1, #0
 8002eba:	202b      	movs	r0, #43	@ 0x2b
 8002ebc:	f000 fda1 	bl	8003a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002ec0:	202b      	movs	r0, #43	@ 0x2b
 8002ec2:	f000 fdba 	bl	8003a3a <HAL_NVIC_EnableIRQ>
}
 8002ec6:	bf00      	nop
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40000800 	.word	0x40000800
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	40014000 	.word	0x40014000
 8002edc:	40014400 	.word	0x40014400
 8002ee0:	40001800 	.word	0x40001800

08002ee4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a0e      	ldr	r2, [pc, #56]	@ (8002f2c <HAL_TIM_PWM_MspInit+0x48>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d115      	bne.n	8002f22 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	4b0d      	ldr	r3, [pc, #52]	@ (8002f30 <HAL_TIM_PWM_MspInit+0x4c>)
 8002efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efe:	4a0c      	ldr	r2, [pc, #48]	@ (8002f30 <HAL_TIM_PWM_MspInit+0x4c>)
 8002f00:	f043 0302 	orr.w	r3, r3, #2
 8002f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f06:	4b0a      	ldr	r3, [pc, #40]	@ (8002f30 <HAL_TIM_PWM_MspInit+0x4c>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002f12:	2200      	movs	r2, #0
 8002f14:	2100      	movs	r1, #0
 8002f16:	202b      	movs	r0, #43	@ 0x2b
 8002f18:	f000 fd73 	bl	8003a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002f1c:	202b      	movs	r0, #43	@ 0x2b
 8002f1e:	f000 fd8c 	bl	8003a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40010400 	.word	0x40010400
 8002f30:	40023800 	.word	0x40023800

08002f34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08a      	sub	sp, #40	@ 0x28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f3c:	f107 0314 	add.w	r3, r7, #20
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	605a      	str	r2, [r3, #4]
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	60da      	str	r2, [r3, #12]
 8002f4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a25      	ldr	r2, [pc, #148]	@ (8002fe8 <HAL_TIM_MspPostInit+0xb4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d11f      	bne.n	8002f96 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	4b24      	ldr	r3, [pc, #144]	@ (8002fec <HAL_TIM_MspPostInit+0xb8>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5e:	4a23      	ldr	r2, [pc, #140]	@ (8002fec <HAL_TIM_MspPostInit+0xb8>)
 8002f60:	f043 0308 	orr.w	r3, r3, #8
 8002f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f66:	4b21      	ldr	r3, [pc, #132]	@ (8002fec <HAL_TIM_MspPostInit+0xb8>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	693b      	ldr	r3, [r7, #16]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002f72:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f80:	2300      	movs	r3, #0
 8002f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f84:	2302      	movs	r3, #2
 8002f86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f88:	f107 0314 	add.w	r3, r7, #20
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4818      	ldr	r0, [pc, #96]	@ (8002ff0 <HAL_TIM_MspPostInit+0xbc>)
 8002f90:	f001 f970 	bl	8004274 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002f94:	e023      	b.n	8002fde <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a16      	ldr	r2, [pc, #88]	@ (8002ff4 <HAL_TIM_MspPostInit+0xc0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d11e      	bne.n	8002fde <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	4b11      	ldr	r3, [pc, #68]	@ (8002fec <HAL_TIM_MspPostInit+0xb8>)
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa8:	4a10      	ldr	r2, [pc, #64]	@ (8002fec <HAL_TIM_MspPostInit+0xb8>)
 8002faa:	f043 0304 	orr.w	r3, r3, #4
 8002fae:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8002fec <HAL_TIM_MspPostInit+0xb8>)
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002fbc:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fd2:	f107 0314 	add.w	r3, r7, #20
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4807      	ldr	r0, [pc, #28]	@ (8002ff8 <HAL_TIM_MspPostInit+0xc4>)
 8002fda:	f001 f94b 	bl	8004274 <HAL_GPIO_Init>
}
 8002fde:	bf00      	nop
 8002fe0:	3728      	adds	r7, #40	@ 0x28
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40000800 	.word	0x40000800
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40020c00 	.word	0x40020c00
 8002ff4:	40010400 	.word	0x40010400
 8002ff8:	40020800 	.word	0x40020800

08002ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08e      	sub	sp, #56	@ 0x38
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003004:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	609a      	str	r2, [r3, #8]
 8003010:	60da      	str	r2, [r3, #12]
 8003012:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a9d      	ldr	r2, [pc, #628]	@ (8003290 <HAL_UART_MspInit+0x294>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d162      	bne.n	80030e4 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	623b      	str	r3, [r7, #32]
 8003022:	4b9c      	ldr	r3, [pc, #624]	@ (8003294 <HAL_UART_MspInit+0x298>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	4a9b      	ldr	r2, [pc, #620]	@ (8003294 <HAL_UART_MspInit+0x298>)
 8003028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800302c:	6413      	str	r3, [r2, #64]	@ 0x40
 800302e:	4b99      	ldr	r3, [pc, #612]	@ (8003294 <HAL_UART_MspInit+0x298>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003036:	623b      	str	r3, [r7, #32]
 8003038:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
 800303e:	4b95      	ldr	r3, [pc, #596]	@ (8003294 <HAL_UART_MspInit+0x298>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003042:	4a94      	ldr	r2, [pc, #592]	@ (8003294 <HAL_UART_MspInit+0x298>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	6313      	str	r3, [r2, #48]	@ 0x30
 800304a:	4b92      	ldr	r3, [pc, #584]	@ (8003294 <HAL_UART_MspInit+0x298>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003056:	230c      	movs	r3, #12
 8003058:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305a:	2302      	movs	r3, #2
 800305c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003062:	2303      	movs	r3, #3
 8003064:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003066:	2307      	movs	r3, #7
 8003068:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800306e:	4619      	mov	r1, r3
 8003070:	4889      	ldr	r0, [pc, #548]	@ (8003298 <HAL_UART_MspInit+0x29c>)
 8003072:	f001 f8ff 	bl	8004274 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003076:	4b89      	ldr	r3, [pc, #548]	@ (800329c <HAL_UART_MspInit+0x2a0>)
 8003078:	4a89      	ldr	r2, [pc, #548]	@ (80032a0 <HAL_UART_MspInit+0x2a4>)
 800307a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800307c:	4b87      	ldr	r3, [pc, #540]	@ (800329c <HAL_UART_MspInit+0x2a0>)
 800307e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003082:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003084:	4b85      	ldr	r3, [pc, #532]	@ (800329c <HAL_UART_MspInit+0x2a0>)
 8003086:	2200      	movs	r2, #0
 8003088:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800308a:	4b84      	ldr	r3, [pc, #528]	@ (800329c <HAL_UART_MspInit+0x2a0>)
 800308c:	2200      	movs	r2, #0
 800308e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003090:	4b82      	ldr	r3, [pc, #520]	@ (800329c <HAL_UART_MspInit+0x2a0>)
 8003092:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003096:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003098:	4b80      	ldr	r3, [pc, #512]	@ (800329c <HAL_UART_MspInit+0x2a0>)
 800309a:	2200      	movs	r2, #0
 800309c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800309e:	4b7f      	ldr	r3, [pc, #508]	@ (800329c <HAL_UART_MspInit+0x2a0>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80030a4:	4b7d      	ldr	r3, [pc, #500]	@ (800329c <HAL_UART_MspInit+0x2a0>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030aa:	4b7c      	ldr	r3, [pc, #496]	@ (800329c <HAL_UART_MspInit+0x2a0>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030b0:	4b7a      	ldr	r3, [pc, #488]	@ (800329c <HAL_UART_MspInit+0x2a0>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80030b6:	4879      	ldr	r0, [pc, #484]	@ (800329c <HAL_UART_MspInit+0x2a0>)
 80030b8:	f000 fcda 	bl	8003a70 <HAL_DMA_Init>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80030c2:	f7ff fce9 	bl	8002a98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a74      	ldr	r2, [pc, #464]	@ (800329c <HAL_UART_MspInit+0x2a0>)
 80030ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80030cc:	4a73      	ldr	r2, [pc, #460]	@ (800329c <HAL_UART_MspInit+0x2a0>)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80030d2:	2200      	movs	r2, #0
 80030d4:	2100      	movs	r1, #0
 80030d6:	2026      	movs	r0, #38	@ 0x26
 80030d8:	f000 fc93 	bl	8003a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80030dc:	2026      	movs	r0, #38	@ 0x26
 80030de:	f000 fcac 	bl	8003a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80030e2:	e0d0      	b.n	8003286 <HAL_UART_MspInit+0x28a>
  else if(huart->Instance==USART3)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a6e      	ldr	r2, [pc, #440]	@ (80032a4 <HAL_UART_MspInit+0x2a8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d163      	bne.n	80031b6 <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART3_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	61bb      	str	r3, [r7, #24]
 80030f2:	4b68      	ldr	r3, [pc, #416]	@ (8003294 <HAL_UART_MspInit+0x298>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f6:	4a67      	ldr	r2, [pc, #412]	@ (8003294 <HAL_UART_MspInit+0x298>)
 80030f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80030fe:	4b65      	ldr	r3, [pc, #404]	@ (8003294 <HAL_UART_MspInit+0x298>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003106:	61bb      	str	r3, [r7, #24]
 8003108:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	4b61      	ldr	r3, [pc, #388]	@ (8003294 <HAL_UART_MspInit+0x298>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	4a60      	ldr	r2, [pc, #384]	@ (8003294 <HAL_UART_MspInit+0x298>)
 8003114:	f043 0308 	orr.w	r3, r3, #8
 8003118:	6313      	str	r3, [r2, #48]	@ 0x30
 800311a:	4b5e      	ldr	r3, [pc, #376]	@ (8003294 <HAL_UART_MspInit+0x298>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003126:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800312a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312c:	2302      	movs	r3, #2
 800312e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003130:	2300      	movs	r3, #0
 8003132:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003134:	2303      	movs	r3, #3
 8003136:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003138:	2307      	movs	r3, #7
 800313a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800313c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003140:	4619      	mov	r1, r3
 8003142:	4859      	ldr	r0, [pc, #356]	@ (80032a8 <HAL_UART_MspInit+0x2ac>)
 8003144:	f001 f896 	bl	8004274 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003148:	4b58      	ldr	r3, [pc, #352]	@ (80032ac <HAL_UART_MspInit+0x2b0>)
 800314a:	4a59      	ldr	r2, [pc, #356]	@ (80032b0 <HAL_UART_MspInit+0x2b4>)
 800314c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800314e:	4b57      	ldr	r3, [pc, #348]	@ (80032ac <HAL_UART_MspInit+0x2b0>)
 8003150:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003154:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003156:	4b55      	ldr	r3, [pc, #340]	@ (80032ac <HAL_UART_MspInit+0x2b0>)
 8003158:	2200      	movs	r2, #0
 800315a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800315c:	4b53      	ldr	r3, [pc, #332]	@ (80032ac <HAL_UART_MspInit+0x2b0>)
 800315e:	2200      	movs	r2, #0
 8003160:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003162:	4b52      	ldr	r3, [pc, #328]	@ (80032ac <HAL_UART_MspInit+0x2b0>)
 8003164:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003168:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800316a:	4b50      	ldr	r3, [pc, #320]	@ (80032ac <HAL_UART_MspInit+0x2b0>)
 800316c:	2200      	movs	r2, #0
 800316e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003170:	4b4e      	ldr	r3, [pc, #312]	@ (80032ac <HAL_UART_MspInit+0x2b0>)
 8003172:	2200      	movs	r2, #0
 8003174:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003176:	4b4d      	ldr	r3, [pc, #308]	@ (80032ac <HAL_UART_MspInit+0x2b0>)
 8003178:	2200      	movs	r2, #0
 800317a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800317c:	4b4b      	ldr	r3, [pc, #300]	@ (80032ac <HAL_UART_MspInit+0x2b0>)
 800317e:	2200      	movs	r2, #0
 8003180:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003182:	4b4a      	ldr	r3, [pc, #296]	@ (80032ac <HAL_UART_MspInit+0x2b0>)
 8003184:	2200      	movs	r2, #0
 8003186:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003188:	4848      	ldr	r0, [pc, #288]	@ (80032ac <HAL_UART_MspInit+0x2b0>)
 800318a:	f000 fc71 	bl	8003a70 <HAL_DMA_Init>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8003194:	f7ff fc80 	bl	8002a98 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a44      	ldr	r2, [pc, #272]	@ (80032ac <HAL_UART_MspInit+0x2b0>)
 800319c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800319e:	4a43      	ldr	r2, [pc, #268]	@ (80032ac <HAL_UART_MspInit+0x2b0>)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80031a4:	2200      	movs	r2, #0
 80031a6:	2100      	movs	r1, #0
 80031a8:	2027      	movs	r0, #39	@ 0x27
 80031aa:	f000 fc2a 	bl	8003a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80031ae:	2027      	movs	r0, #39	@ 0x27
 80031b0:	f000 fc43 	bl	8003a3a <HAL_NVIC_EnableIRQ>
}
 80031b4:	e067      	b.n	8003286 <HAL_UART_MspInit+0x28a>
  else if(huart->Instance==USART6)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a3e      	ldr	r2, [pc, #248]	@ (80032b4 <HAL_UART_MspInit+0x2b8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d162      	bne.n	8003286 <HAL_UART_MspInit+0x28a>
    __HAL_RCC_USART6_CLK_ENABLE();
 80031c0:	2300      	movs	r3, #0
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	4b33      	ldr	r3, [pc, #204]	@ (8003294 <HAL_UART_MspInit+0x298>)
 80031c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c8:	4a32      	ldr	r2, [pc, #200]	@ (8003294 <HAL_UART_MspInit+0x298>)
 80031ca:	f043 0320 	orr.w	r3, r3, #32
 80031ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80031d0:	4b30      	ldr	r3, [pc, #192]	@ (8003294 <HAL_UART_MspInit+0x298>)
 80031d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	613b      	str	r3, [r7, #16]
 80031da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80031dc:	2300      	movs	r3, #0
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	4b2c      	ldr	r3, [pc, #176]	@ (8003294 <HAL_UART_MspInit+0x298>)
 80031e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003294 <HAL_UART_MspInit+0x298>)
 80031e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ec:	4b29      	ldr	r3, [pc, #164]	@ (8003294 <HAL_UART_MspInit+0x298>)
 80031ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80031f8:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80031fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fe:	2302      	movs	r3, #2
 8003200:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003202:	2300      	movs	r3, #0
 8003204:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003206:	2303      	movs	r3, #3
 8003208:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800320a:	2308      	movs	r3, #8
 800320c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800320e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003212:	4619      	mov	r1, r3
 8003214:	4828      	ldr	r0, [pc, #160]	@ (80032b8 <HAL_UART_MspInit+0x2bc>)
 8003216:	f001 f82d 	bl	8004274 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800321a:	4b28      	ldr	r3, [pc, #160]	@ (80032bc <HAL_UART_MspInit+0x2c0>)
 800321c:	4a28      	ldr	r2, [pc, #160]	@ (80032c0 <HAL_UART_MspInit+0x2c4>)
 800321e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003220:	4b26      	ldr	r3, [pc, #152]	@ (80032bc <HAL_UART_MspInit+0x2c0>)
 8003222:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003226:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003228:	4b24      	ldr	r3, [pc, #144]	@ (80032bc <HAL_UART_MspInit+0x2c0>)
 800322a:	2200      	movs	r2, #0
 800322c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800322e:	4b23      	ldr	r3, [pc, #140]	@ (80032bc <HAL_UART_MspInit+0x2c0>)
 8003230:	2200      	movs	r2, #0
 8003232:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003234:	4b21      	ldr	r3, [pc, #132]	@ (80032bc <HAL_UART_MspInit+0x2c0>)
 8003236:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800323a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800323c:	4b1f      	ldr	r3, [pc, #124]	@ (80032bc <HAL_UART_MspInit+0x2c0>)
 800323e:	2200      	movs	r2, #0
 8003240:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003242:	4b1e      	ldr	r3, [pc, #120]	@ (80032bc <HAL_UART_MspInit+0x2c0>)
 8003244:	2200      	movs	r2, #0
 8003246:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003248:	4b1c      	ldr	r3, [pc, #112]	@ (80032bc <HAL_UART_MspInit+0x2c0>)
 800324a:	2200      	movs	r2, #0
 800324c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800324e:	4b1b      	ldr	r3, [pc, #108]	@ (80032bc <HAL_UART_MspInit+0x2c0>)
 8003250:	2200      	movs	r2, #0
 8003252:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003254:	4b19      	ldr	r3, [pc, #100]	@ (80032bc <HAL_UART_MspInit+0x2c0>)
 8003256:	2200      	movs	r2, #0
 8003258:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800325a:	4818      	ldr	r0, [pc, #96]	@ (80032bc <HAL_UART_MspInit+0x2c0>)
 800325c:	f000 fc08 	bl	8003a70 <HAL_DMA_Init>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_UART_MspInit+0x26e>
      Error_Handler();
 8003266:	f7ff fc17 	bl	8002a98 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a13      	ldr	r2, [pc, #76]	@ (80032bc <HAL_UART_MspInit+0x2c0>)
 800326e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003270:	4a12      	ldr	r2, [pc, #72]	@ (80032bc <HAL_UART_MspInit+0x2c0>)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003276:	2200      	movs	r2, #0
 8003278:	2100      	movs	r1, #0
 800327a:	2047      	movs	r0, #71	@ 0x47
 800327c:	f000 fbc1 	bl	8003a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003280:	2047      	movs	r0, #71	@ 0x47
 8003282:	f000 fbda 	bl	8003a3a <HAL_NVIC_EnableIRQ>
}
 8003286:	bf00      	nop
 8003288:	3738      	adds	r7, #56	@ 0x38
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40004400 	.word	0x40004400
 8003294:	40023800 	.word	0x40023800
 8003298:	40020000 	.word	0x40020000
 800329c:	200005fc 	.word	0x200005fc
 80032a0:	40026088 	.word	0x40026088
 80032a4:	40004800 	.word	0x40004800
 80032a8:	40020c00 	.word	0x40020c00
 80032ac:	2000065c 	.word	0x2000065c
 80032b0:	40026028 	.word	0x40026028
 80032b4:	40011400 	.word	0x40011400
 80032b8:	40021800 	.word	0x40021800
 80032bc:	200006bc 	.word	0x200006bc
 80032c0:	40026428 	.word	0x40026428

080032c4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b098      	sub	sp, #96	@ 0x60
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032cc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032dc:	f107 0310 	add.w	r3, r7, #16
 80032e0:	223c      	movs	r2, #60	@ 0x3c
 80032e2:	2100      	movs	r1, #0
 80032e4:	4618      	mov	r0, r3
 80032e6:	f006 fb60 	bl	80099aa <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032f2:	d14d      	bne.n	8003390 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80032f4:	2320      	movs	r3, #32
 80032f6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80032f8:	2300      	movs	r3, #0
 80032fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032fc:	f107 0310 	add.w	r3, r7, #16
 8003300:	4618      	mov	r0, r3
 8003302:	f001 fce3 	bl	8004ccc <HAL_RCCEx_PeriphCLKConfig>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 800330c:	f7ff fbc4 	bl	8002a98 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	4b20      	ldr	r3, [pc, #128]	@ (8003398 <HAL_PCD_MspInit+0xd4>)
 8003316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003318:	4a1f      	ldr	r2, [pc, #124]	@ (8003398 <HAL_PCD_MspInit+0xd4>)
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003320:	4b1d      	ldr	r3, [pc, #116]	@ (8003398 <HAL_PCD_MspInit+0xd4>)
 8003322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800332c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8003330:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003332:	2302      	movs	r3, #2
 8003334:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003336:	2300      	movs	r3, #0
 8003338:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800333a:	2303      	movs	r3, #3
 800333c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800333e:	230a      	movs	r3, #10
 8003340:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003342:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003346:	4619      	mov	r1, r3
 8003348:	4814      	ldr	r0, [pc, #80]	@ (800339c <HAL_PCD_MspInit+0xd8>)
 800334a:	f000 ff93 	bl	8004274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800334e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003352:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003354:	2300      	movs	r3, #0
 8003356:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003358:	2300      	movs	r3, #0
 800335a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800335c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003360:	4619      	mov	r1, r3
 8003362:	480e      	ldr	r0, [pc, #56]	@ (800339c <HAL_PCD_MspInit+0xd8>)
 8003364:	f000 ff86 	bl	8004274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003368:	4b0b      	ldr	r3, [pc, #44]	@ (8003398 <HAL_PCD_MspInit+0xd4>)
 800336a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800336c:	4a0a      	ldr	r2, [pc, #40]	@ (8003398 <HAL_PCD_MspInit+0xd4>)
 800336e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003372:	6353      	str	r3, [r2, #52]	@ 0x34
 8003374:	2300      	movs	r3, #0
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	4b07      	ldr	r3, [pc, #28]	@ (8003398 <HAL_PCD_MspInit+0xd4>)
 800337a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337c:	4a06      	ldr	r2, [pc, #24]	@ (8003398 <HAL_PCD_MspInit+0xd4>)
 800337e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003382:	6453      	str	r3, [r2, #68]	@ 0x44
 8003384:	4b04      	ldr	r3, [pc, #16]	@ (8003398 <HAL_PCD_MspInit+0xd4>)
 8003386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003388:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003390:	bf00      	nop
 8003392:	3760      	adds	r7, #96	@ 0x60
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40023800 	.word	0x40023800
 800339c:	40020000 	.word	0x40020000

080033a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033a4:	bf00      	nop
 80033a6:	e7fd      	b.n	80033a4 <NMI_Handler+0x4>

080033a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033ac:	bf00      	nop
 80033ae:	e7fd      	b.n	80033ac <HardFault_Handler+0x4>

080033b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033b4:	bf00      	nop
 80033b6:	e7fd      	b.n	80033b4 <MemManage_Handler+0x4>

080033b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033bc:	bf00      	nop
 80033be:	e7fd      	b.n	80033bc <BusFault_Handler+0x4>

080033c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033c4:	bf00      	nop
 80033c6:	e7fd      	b.n	80033c4 <UsageFault_Handler+0x4>

080033c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033cc:	bf00      	nop
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033d6:	b480      	push	{r7}
 80033d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033e8:	bf00      	nop
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033f6:	f000 f9e5 	bl	80037c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}

080033fe <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003402:	2004      	movs	r0, #4
 8003404:	f001 f8e4 	bl	80045d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003408:	bf00      	nop
 800340a:	bd80      	pop	{r7, pc}

0800340c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003410:	2008      	movs	r0, #8
 8003412:	f001 f8dd 	bl	80045d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
	...

0800341c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003420:	4802      	ldr	r0, [pc, #8]	@ (800342c <DMA1_Stream1_IRQHandler+0x10>)
 8003422:	f000 fcbd 	bl	8003da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	2000065c 	.word	0x2000065c

08003430 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003434:	4802      	ldr	r0, [pc, #8]	@ (8003440 <DMA1_Stream5_IRQHandler+0x10>)
 8003436:	f000 fcb3 	bl	8003da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800343a:	bf00      	nop
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	200005fc 	.word	0x200005fc

08003444 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003448:	2040      	movs	r0, #64	@ 0x40
 800344a:	f001 f8c1 	bl	80045d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800344e:	2080      	movs	r0, #128	@ 0x80
 8003450:	f001 f8be 	bl	80045d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003454:	bf00      	nop
 8003456:	bd80      	pop	{r7, pc}

08003458 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800345c:	4803      	ldr	r0, [pc, #12]	@ (800346c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800345e:	f002 fc1b 	bl	8005c98 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8003462:	4803      	ldr	r0, [pc, #12]	@ (8003470 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8003464:	f002 fc18 	bl	8005c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003468:	bf00      	nop
 800346a:	bd80      	pop	{r7, pc}
 800346c:	2000029c 	.word	0x2000029c
 8003470:	2000044c 	.word	0x2000044c

08003474 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003478:	4803      	ldr	r0, [pc, #12]	@ (8003488 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800347a:	f002 fc0d 	bl	8005c98 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800347e:	4803      	ldr	r0, [pc, #12]	@ (800348c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003480:	f002 fc0a 	bl	8005c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003484:	bf00      	nop
 8003486:	bd80      	pop	{r7, pc}
 8003488:	2000029c 	.word	0x2000029c
 800348c:	20000494 	.word	0x20000494

08003490 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003494:	4802      	ldr	r0, [pc, #8]	@ (80034a0 <USART2_IRQHandler+0x10>)
 8003496:	f003 fb15 	bl	8006ac4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800349a:	bf00      	nop
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000524 	.word	0x20000524

080034a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80034a8:	4802      	ldr	r0, [pc, #8]	@ (80034b4 <USART3_IRQHandler+0x10>)
 80034aa:	f003 fb0b 	bl	8006ac4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80034ae:	bf00      	nop
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	2000056c 	.word	0x2000056c

080034b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80034bc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80034c0:	f001 f886 	bl	80045d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80034c4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80034c8:	f001 f882 	bl	80045d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80034cc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80034d0:	f001 f87e 	bl	80045d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80034d4:	bf00      	nop
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80034dc:	4803      	ldr	r0, [pc, #12]	@ (80034ec <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80034de:	f002 fbdb 	bl	8005c98 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80034e2:	4803      	ldr	r0, [pc, #12]	@ (80034f0 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80034e4:	f002 fbd8 	bl	8005c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80034e8:	bf00      	nop
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20000404 	.word	0x20000404
 80034f0:	200004dc 	.word	0x200004dc

080034f4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80034f8:	4802      	ldr	r0, [pc, #8]	@ (8003504 <DMA2_Stream1_IRQHandler+0x10>)
 80034fa:	f000 fc51 	bl	8003da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	200006bc 	.word	0x200006bc

08003508 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800350c:	4802      	ldr	r0, [pc, #8]	@ (8003518 <USART6_IRQHandler+0x10>)
 800350e:	f003 fad9 	bl	8006ac4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003512:	bf00      	nop
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	200005b4 	.word	0x200005b4

0800351c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  return 1;
 8003520:	2301      	movs	r3, #1
}
 8003522:	4618      	mov	r0, r3
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <_kill>:

int _kill(int pid, int sig)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003536:	f006 faf9 	bl	8009b2c <__errno>
 800353a:	4603      	mov	r3, r0
 800353c:	2216      	movs	r2, #22
 800353e:	601a      	str	r2, [r3, #0]
  return -1;
 8003540:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003544:	4618      	mov	r0, r3
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <_exit>:

void _exit (int status)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003554:	f04f 31ff 	mov.w	r1, #4294967295
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff ffe7 	bl	800352c <_kill>
  while (1) {}    /* Make sure we hang here */
 800355e:	bf00      	nop
 8003560:	e7fd      	b.n	800355e <_exit+0x12>

08003562 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b086      	sub	sp, #24
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	e00a      	b.n	800358a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003574:	f3af 8000 	nop.w
 8003578:	4601      	mov	r1, r0
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	60ba      	str	r2, [r7, #8]
 8003580:	b2ca      	uxtb	r2, r1
 8003582:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	3301      	adds	r3, #1
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	429a      	cmp	r2, r3
 8003590:	dbf0      	blt.n	8003574 <_read+0x12>
  }

  return len;
 8003592:	687b      	ldr	r3, [r7, #4]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	e009      	b.n	80035c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	60ba      	str	r2, [r7, #8]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	3301      	adds	r3, #1
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	dbf1      	blt.n	80035ae <_write+0x12>
  }
  return len;
 80035ca:	687b      	ldr	r3, [r7, #4]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <_close>:

int _close(int file)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035fc:	605a      	str	r2, [r3, #4]
  return 0;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <_isatty>:

int _isatty(int file)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003614:	2301      	movs	r3, #1
}
 8003616:	4618      	mov	r0, r3
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003622:	b480      	push	{r7}
 8003624:	b085      	sub	sp, #20
 8003626:	af00      	add	r7, sp, #0
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003644:	4a14      	ldr	r2, [pc, #80]	@ (8003698 <_sbrk+0x5c>)
 8003646:	4b15      	ldr	r3, [pc, #84]	@ (800369c <_sbrk+0x60>)
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003650:	4b13      	ldr	r3, [pc, #76]	@ (80036a0 <_sbrk+0x64>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d102      	bne.n	800365e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003658:	4b11      	ldr	r3, [pc, #68]	@ (80036a0 <_sbrk+0x64>)
 800365a:	4a12      	ldr	r2, [pc, #72]	@ (80036a4 <_sbrk+0x68>)
 800365c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800365e:	4b10      	ldr	r3, [pc, #64]	@ (80036a0 <_sbrk+0x64>)
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4413      	add	r3, r2
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	429a      	cmp	r2, r3
 800366a:	d207      	bcs.n	800367c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800366c:	f006 fa5e 	bl	8009b2c <__errno>
 8003670:	4603      	mov	r3, r0
 8003672:	220c      	movs	r2, #12
 8003674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003676:	f04f 33ff 	mov.w	r3, #4294967295
 800367a:	e009      	b.n	8003690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800367c:	4b08      	ldr	r3, [pc, #32]	@ (80036a0 <_sbrk+0x64>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003682:	4b07      	ldr	r3, [pc, #28]	@ (80036a0 <_sbrk+0x64>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4413      	add	r3, r2
 800368a:	4a05      	ldr	r2, [pc, #20]	@ (80036a0 <_sbrk+0x64>)
 800368c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800368e:	68fb      	ldr	r3, [r7, #12]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	20040000 	.word	0x20040000
 800369c:	00000400 	.word	0x00000400
 80036a0:	20000d18 	.word	0x20000d18
 80036a4:	20000e70 	.word	0x20000e70

080036a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036ac:	4b06      	ldr	r3, [pc, #24]	@ (80036c8 <SystemInit+0x20>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b2:	4a05      	ldr	r2, [pc, #20]	@ (80036c8 <SystemInit+0x20>)
 80036b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036bc:	bf00      	nop
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80036cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003704 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036d0:	480d      	ldr	r0, [pc, #52]	@ (8003708 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80036d2:	490e      	ldr	r1, [pc, #56]	@ (800370c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80036d4:	4a0e      	ldr	r2, [pc, #56]	@ (8003710 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80036d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036d8:	e002      	b.n	80036e0 <LoopCopyDataInit>

080036da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036de:	3304      	adds	r3, #4

080036e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036e4:	d3f9      	bcc.n	80036da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036e6:	4a0b      	ldr	r2, [pc, #44]	@ (8003714 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80036e8:	4c0b      	ldr	r4, [pc, #44]	@ (8003718 <LoopFillZerobss+0x26>)
  movs r3, #0
 80036ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036ec:	e001      	b.n	80036f2 <LoopFillZerobss>

080036ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036f0:	3204      	adds	r2, #4

080036f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036f4:	d3fb      	bcc.n	80036ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036f6:	f7ff ffd7 	bl	80036a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036fa:	f006 fa1d 	bl	8009b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036fe:	f7fe fb3b 	bl	8001d78 <main>
  bx  lr    
 8003702:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003704:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8003708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800370c:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8003710:	0800c994 	.word	0x0800c994
  ldr r2, =_sbss
 8003714:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8003718:	20000e6c 	.word	0x20000e6c

0800371c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800371c:	e7fe      	b.n	800371c <ADC_IRQHandler>
	...

08003720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003724:	4b0e      	ldr	r3, [pc, #56]	@ (8003760 <HAL_Init+0x40>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a0d      	ldr	r2, [pc, #52]	@ (8003760 <HAL_Init+0x40>)
 800372a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800372e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003730:	4b0b      	ldr	r3, [pc, #44]	@ (8003760 <HAL_Init+0x40>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a0a      	ldr	r2, [pc, #40]	@ (8003760 <HAL_Init+0x40>)
 8003736:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800373a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800373c:	4b08      	ldr	r3, [pc, #32]	@ (8003760 <HAL_Init+0x40>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a07      	ldr	r2, [pc, #28]	@ (8003760 <HAL_Init+0x40>)
 8003742:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003746:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003748:	2003      	movs	r0, #3
 800374a:	f000 f94f 	bl	80039ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800374e:	2000      	movs	r0, #0
 8003750:	f000 f808 	bl	8003764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003754:	f7ff f9a6 	bl	8002aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40023c00 	.word	0x40023c00

08003764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800376c:	4b12      	ldr	r3, [pc, #72]	@ (80037b8 <HAL_InitTick+0x54>)
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	4b12      	ldr	r3, [pc, #72]	@ (80037bc <HAL_InitTick+0x58>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	4619      	mov	r1, r3
 8003776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800377a:	fbb3 f3f1 	udiv	r3, r3, r1
 800377e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003782:	4618      	mov	r0, r3
 8003784:	f000 f967 	bl	8003a56 <HAL_SYSTICK_Config>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e00e      	b.n	80037b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b0f      	cmp	r3, #15
 8003796:	d80a      	bhi.n	80037ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003798:	2200      	movs	r2, #0
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	f04f 30ff 	mov.w	r0, #4294967295
 80037a0:	f000 f92f 	bl	8003a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037a4:	4a06      	ldr	r2, [pc, #24]	@ (80037c0 <HAL_InitTick+0x5c>)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	e000      	b.n	80037b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20000040 	.word	0x20000040
 80037bc:	20000048 	.word	0x20000048
 80037c0:	20000044 	.word	0x20000044

080037c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037c8:	4b06      	ldr	r3, [pc, #24]	@ (80037e4 <HAL_IncTick+0x20>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	461a      	mov	r2, r3
 80037ce:	4b06      	ldr	r3, [pc, #24]	@ (80037e8 <HAL_IncTick+0x24>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4413      	add	r3, r2
 80037d4:	4a04      	ldr	r2, [pc, #16]	@ (80037e8 <HAL_IncTick+0x24>)
 80037d6:	6013      	str	r3, [r2, #0]
}
 80037d8:	bf00      	nop
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	20000048 	.word	0x20000048
 80037e8:	20000d1c 	.word	0x20000d1c

080037ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return uwTick;
 80037f0:	4b03      	ldr	r3, [pc, #12]	@ (8003800 <HAL_GetTick+0x14>)
 80037f2:	681b      	ldr	r3, [r3, #0]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	20000d1c 	.word	0x20000d1c

08003804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800380c:	f7ff ffee 	bl	80037ec <HAL_GetTick>
 8003810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381c:	d005      	beq.n	800382a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800381e:	4b0a      	ldr	r3, [pc, #40]	@ (8003848 <HAL_Delay+0x44>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4413      	add	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800382a:	bf00      	nop
 800382c:	f7ff ffde 	bl	80037ec <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	429a      	cmp	r2, r3
 800383a:	d8f7      	bhi.n	800382c <HAL_Delay+0x28>
  {
  }
}
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	20000048 	.word	0x20000048

0800384c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800385c:	4b0c      	ldr	r3, [pc, #48]	@ (8003890 <__NVIC_SetPriorityGrouping+0x44>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003868:	4013      	ands	r3, r2
 800386a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003874:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800387c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800387e:	4a04      	ldr	r2, [pc, #16]	@ (8003890 <__NVIC_SetPriorityGrouping+0x44>)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	60d3      	str	r3, [r2, #12]
}
 8003884:	bf00      	nop
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	e000ed00 	.word	0xe000ed00

08003894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003898:	4b04      	ldr	r3, [pc, #16]	@ (80038ac <__NVIC_GetPriorityGrouping+0x18>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	0a1b      	lsrs	r3, r3, #8
 800389e:	f003 0307 	and.w	r3, r3, #7
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	e000ed00 	.word	0xe000ed00

080038b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	db0b      	blt.n	80038da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	f003 021f 	and.w	r2, r3, #31
 80038c8:	4907      	ldr	r1, [pc, #28]	@ (80038e8 <__NVIC_EnableIRQ+0x38>)
 80038ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	2001      	movs	r0, #1
 80038d2:	fa00 f202 	lsl.w	r2, r0, r2
 80038d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	e000e100 	.word	0xe000e100

080038ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	6039      	str	r1, [r7, #0]
 80038f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	db0a      	blt.n	8003916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	b2da      	uxtb	r2, r3
 8003904:	490c      	ldr	r1, [pc, #48]	@ (8003938 <__NVIC_SetPriority+0x4c>)
 8003906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390a:	0112      	lsls	r2, r2, #4
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	440b      	add	r3, r1
 8003910:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003914:	e00a      	b.n	800392c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	b2da      	uxtb	r2, r3
 800391a:	4908      	ldr	r1, [pc, #32]	@ (800393c <__NVIC_SetPriority+0x50>)
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	3b04      	subs	r3, #4
 8003924:	0112      	lsls	r2, r2, #4
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	440b      	add	r3, r1
 800392a:	761a      	strb	r2, [r3, #24]
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	e000e100 	.word	0xe000e100
 800393c:	e000ed00 	.word	0xe000ed00

08003940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003940:	b480      	push	{r7}
 8003942:	b089      	sub	sp, #36	@ 0x24
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f1c3 0307 	rsb	r3, r3, #7
 800395a:	2b04      	cmp	r3, #4
 800395c:	bf28      	it	cs
 800395e:	2304      	movcs	r3, #4
 8003960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	3304      	adds	r3, #4
 8003966:	2b06      	cmp	r3, #6
 8003968:	d902      	bls.n	8003970 <NVIC_EncodePriority+0x30>
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3b03      	subs	r3, #3
 800396e:	e000      	b.n	8003972 <NVIC_EncodePriority+0x32>
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003974:	f04f 32ff 	mov.w	r2, #4294967295
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43da      	mvns	r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	401a      	ands	r2, r3
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003988:	f04f 31ff 	mov.w	r1, #4294967295
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	fa01 f303 	lsl.w	r3, r1, r3
 8003992:	43d9      	mvns	r1, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003998:	4313      	orrs	r3, r2
         );
}
 800399a:	4618      	mov	r0, r3
 800399c:	3724      	adds	r7, #36	@ 0x24
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039b8:	d301      	bcc.n	80039be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039ba:	2301      	movs	r3, #1
 80039bc:	e00f      	b.n	80039de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039be:	4a0a      	ldr	r2, [pc, #40]	@ (80039e8 <SysTick_Config+0x40>)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039c6:	210f      	movs	r1, #15
 80039c8:	f04f 30ff 	mov.w	r0, #4294967295
 80039cc:	f7ff ff8e 	bl	80038ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039d0:	4b05      	ldr	r3, [pc, #20]	@ (80039e8 <SysTick_Config+0x40>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039d6:	4b04      	ldr	r3, [pc, #16]	@ (80039e8 <SysTick_Config+0x40>)
 80039d8:	2207      	movs	r2, #7
 80039da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	e000e010 	.word	0xe000e010

080039ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff ff29 	bl	800384c <__NVIC_SetPriorityGrouping>
}
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b086      	sub	sp, #24
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	4603      	mov	r3, r0
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	607a      	str	r2, [r7, #4]
 8003a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a14:	f7ff ff3e 	bl	8003894 <__NVIC_GetPriorityGrouping>
 8003a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	68b9      	ldr	r1, [r7, #8]
 8003a1e:	6978      	ldr	r0, [r7, #20]
 8003a20:	f7ff ff8e 	bl	8003940 <NVIC_EncodePriority>
 8003a24:	4602      	mov	r2, r0
 8003a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff ff5d 	bl	80038ec <__NVIC_SetPriority>
}
 8003a32:	bf00      	nop
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	4603      	mov	r3, r0
 8003a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff ff31 	bl	80038b0 <__NVIC_EnableIRQ>
}
 8003a4e:	bf00      	nop
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff ffa2 	bl	80039a8 <SysTick_Config>
 8003a64:	4603      	mov	r3, r0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a7c:	f7ff feb6 	bl	80037ec <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e099      	b.n	8003bc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aac:	e00f      	b.n	8003ace <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003aae:	f7ff fe9d 	bl	80037ec <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b05      	cmp	r3, #5
 8003aba:	d908      	bls.n	8003ace <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2203      	movs	r2, #3
 8003ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e078      	b.n	8003bc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1e8      	bne.n	8003aae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	4b38      	ldr	r3, [pc, #224]	@ (8003bc8 <HAL_DMA_Init+0x158>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d107      	bne.n	8003b38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b30:	4313      	orrs	r3, r2
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f023 0307 	bic.w	r3, r3, #7
 8003b4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d117      	bne.n	8003b92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00e      	beq.n	8003b92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 fb01 	bl	800417c <DMA_CheckFifoParam>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2240      	movs	r2, #64	@ 0x40
 8003b84:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e016      	b.n	8003bc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fab8 	bl	8004110 <DMA_CalcBaseAndBitshift>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba8:	223f      	movs	r2, #63	@ 0x3f
 8003baa:	409a      	lsls	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	f010803f 	.word	0xf010803f

08003bcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_DMA_Start_IT+0x26>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e040      	b.n	8003c74 <HAL_DMA_Start_IT+0xa8>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d12f      	bne.n	8003c66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2202      	movs	r2, #2
 8003c0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	68b9      	ldr	r1, [r7, #8]
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 fa4a 	bl	80040b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c24:	223f      	movs	r2, #63	@ 0x3f
 8003c26:	409a      	lsls	r2, r3
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0216 	orr.w	r2, r2, #22
 8003c3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0208 	orr.w	r2, r2, #8
 8003c52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	e005      	b.n	8003c72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c8a:	f7ff fdaf 	bl	80037ec <HAL_GetTick>
 8003c8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d008      	beq.n	8003cae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2280      	movs	r2, #128	@ 0x80
 8003ca0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e052      	b.n	8003d54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0216 	bic.w	r2, r2, #22
 8003cbc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695a      	ldr	r2, [r3, #20]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ccc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d103      	bne.n	8003cde <HAL_DMA_Abort+0x62>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d007      	beq.n	8003cee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0208 	bic.w	r2, r2, #8
 8003cec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0201 	bic.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cfe:	e013      	b.n	8003d28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d00:	f7ff fd74 	bl	80037ec <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b05      	cmp	r3, #5
 8003d0c:	d90c      	bls.n	8003d28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2203      	movs	r2, #3
 8003d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e015      	b.n	8003d54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e4      	bne.n	8003d00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d3a:	223f      	movs	r2, #63	@ 0x3f
 8003d3c:	409a      	lsls	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d004      	beq.n	8003d7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2280      	movs	r2, #128	@ 0x80
 8003d74:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e00c      	b.n	8003d94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2205      	movs	r2, #5
 8003d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0201 	bic.w	r2, r2, #1
 8003d90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003dac:	4b8e      	ldr	r3, [pc, #568]	@ (8003fe8 <HAL_DMA_IRQHandler+0x248>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a8e      	ldr	r2, [pc, #568]	@ (8003fec <HAL_DMA_IRQHandler+0x24c>)
 8003db2:	fba2 2303 	umull	r2, r3, r2, r3
 8003db6:	0a9b      	lsrs	r3, r3, #10
 8003db8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dca:	2208      	movs	r2, #8
 8003dcc:	409a      	lsls	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d01a      	beq.n	8003e0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d013      	beq.n	8003e0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0204 	bic.w	r2, r2, #4
 8003df2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df8:	2208      	movs	r2, #8
 8003dfa:	409a      	lsls	r2, r3
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e04:	f043 0201 	orr.w	r2, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e10:	2201      	movs	r2, #1
 8003e12:	409a      	lsls	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4013      	ands	r3, r2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d012      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00b      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2e:	2201      	movs	r2, #1
 8003e30:	409a      	lsls	r2, r3
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e3a:	f043 0202 	orr.w	r2, r3, #2
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e46:	2204      	movs	r2, #4
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d012      	beq.n	8003e78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00b      	beq.n	8003e78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e64:	2204      	movs	r2, #4
 8003e66:	409a      	lsls	r2, r3
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e70:	f043 0204 	orr.w	r2, r3, #4
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e7c:	2210      	movs	r2, #16
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4013      	ands	r3, r2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d043      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d03c      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9a:	2210      	movs	r2, #16
 8003e9c:	409a      	lsls	r2, r3
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d018      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d108      	bne.n	8003ed0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d024      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	4798      	blx	r3
 8003ece:	e01f      	b.n	8003f10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01b      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	4798      	blx	r3
 8003ee0:	e016      	b.n	8003f10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d107      	bne.n	8003f00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0208 	bic.w	r2, r2, #8
 8003efe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f14:	2220      	movs	r2, #32
 8003f16:	409a      	lsls	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 808f 	beq.w	8004040 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0310 	and.w	r3, r3, #16
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 8087 	beq.w	8004040 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f36:	2220      	movs	r2, #32
 8003f38:	409a      	lsls	r2, r3
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b05      	cmp	r3, #5
 8003f48:	d136      	bne.n	8003fb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0216 	bic.w	r2, r2, #22
 8003f58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695a      	ldr	r2, [r3, #20]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d103      	bne.n	8003f7a <HAL_DMA_IRQHandler+0x1da>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0208 	bic.w	r2, r2, #8
 8003f88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f8e:	223f      	movs	r2, #63	@ 0x3f
 8003f90:	409a      	lsls	r2, r3
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d07e      	beq.n	80040ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	4798      	blx	r3
        }
        return;
 8003fb6:	e079      	b.n	80040ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d01d      	beq.n	8004002 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10d      	bne.n	8003ff0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d031      	beq.n	8004040 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	4798      	blx	r3
 8003fe4:	e02c      	b.n	8004040 <HAL_DMA_IRQHandler+0x2a0>
 8003fe6:	bf00      	nop
 8003fe8:	20000040 	.word	0x20000040
 8003fec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d023      	beq.n	8004040 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	4798      	blx	r3
 8004000:	e01e      	b.n	8004040 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10f      	bne.n	8004030 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0210 	bic.w	r2, r2, #16
 800401e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004044:	2b00      	cmp	r3, #0
 8004046:	d032      	beq.n	80040ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d022      	beq.n	800409a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2205      	movs	r2, #5
 8004058:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0201 	bic.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	3301      	adds	r3, #1
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	429a      	cmp	r2, r3
 8004076:	d307      	bcc.n	8004088 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f2      	bne.n	800406c <HAL_DMA_IRQHandler+0x2cc>
 8004086:	e000      	b.n	800408a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004088:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d005      	beq.n	80040ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	4798      	blx	r3
 80040aa:	e000      	b.n	80040ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80040ac:	bf00      	nop
    }
  }
}
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80040d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b40      	cmp	r3, #64	@ 0x40
 80040e0:	d108      	bne.n	80040f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80040f2:	e007      	b.n	8004104 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	60da      	str	r2, [r3, #12]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	b2db      	uxtb	r3, r3
 800411e:	3b10      	subs	r3, #16
 8004120:	4a14      	ldr	r2, [pc, #80]	@ (8004174 <DMA_CalcBaseAndBitshift+0x64>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	091b      	lsrs	r3, r3, #4
 8004128:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800412a:	4a13      	ldr	r2, [pc, #76]	@ (8004178 <DMA_CalcBaseAndBitshift+0x68>)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4413      	add	r3, r2
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b03      	cmp	r3, #3
 800413c:	d909      	bls.n	8004152 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004146:	f023 0303 	bic.w	r3, r3, #3
 800414a:	1d1a      	adds	r2, r3, #4
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004150:	e007      	b.n	8004162 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800415a:	f023 0303 	bic.w	r3, r3, #3
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004166:	4618      	mov	r0, r3
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	aaaaaaab 	.word	0xaaaaaaab
 8004178:	0800c4f8 	.word	0x0800c4f8

0800417c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d11f      	bne.n	80041d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	2b03      	cmp	r3, #3
 800419a:	d856      	bhi.n	800424a <DMA_CheckFifoParam+0xce>
 800419c:	a201      	add	r2, pc, #4	@ (adr r2, 80041a4 <DMA_CheckFifoParam+0x28>)
 800419e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a2:	bf00      	nop
 80041a4:	080041b5 	.word	0x080041b5
 80041a8:	080041c7 	.word	0x080041c7
 80041ac:	080041b5 	.word	0x080041b5
 80041b0:	0800424b 	.word	0x0800424b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d046      	beq.n	800424e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c4:	e043      	b.n	800424e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80041ce:	d140      	bne.n	8004252 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041d4:	e03d      	b.n	8004252 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041de:	d121      	bne.n	8004224 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d837      	bhi.n	8004256 <DMA_CheckFifoParam+0xda>
 80041e6:	a201      	add	r2, pc, #4	@ (adr r2, 80041ec <DMA_CheckFifoParam+0x70>)
 80041e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ec:	080041fd 	.word	0x080041fd
 80041f0:	08004203 	.word	0x08004203
 80041f4:	080041fd 	.word	0x080041fd
 80041f8:	08004215 	.word	0x08004215
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004200:	e030      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004206:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d025      	beq.n	800425a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004212:	e022      	b.n	800425a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004218:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800421c:	d11f      	bne.n	800425e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004222:	e01c      	b.n	800425e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d903      	bls.n	8004232 <DMA_CheckFifoParam+0xb6>
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2b03      	cmp	r3, #3
 800422e:	d003      	beq.n	8004238 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004230:	e018      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	73fb      	strb	r3, [r7, #15]
      break;
 8004236:	e015      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00e      	beq.n	8004262 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
      break;
 8004248:	e00b      	b.n	8004262 <DMA_CheckFifoParam+0xe6>
      break;
 800424a:	bf00      	nop
 800424c:	e00a      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      break;
 800424e:	bf00      	nop
 8004250:	e008      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      break;
 8004252:	bf00      	nop
 8004254:	e006      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      break;
 8004256:	bf00      	nop
 8004258:	e004      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      break;
 800425a:	bf00      	nop
 800425c:	e002      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      break;   
 800425e:	bf00      	nop
 8004260:	e000      	b.n	8004264 <DMA_CheckFifoParam+0xe8>
      break;
 8004262:	bf00      	nop
    }
  } 
  
  return status; 
 8004264:	7bfb      	ldrb	r3, [r7, #15]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop

08004274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004274:	b480      	push	{r7}
 8004276:	b089      	sub	sp, #36	@ 0x24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004282:	2300      	movs	r3, #0
 8004284:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004286:	2300      	movs	r3, #0
 8004288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800428a:	2300      	movs	r3, #0
 800428c:	61fb      	str	r3, [r7, #28]
 800428e:	e165      	b.n	800455c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004290:	2201      	movs	r2, #1
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4013      	ands	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	f040 8154 	bne.w	8004556 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d005      	beq.n	80042c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d130      	bne.n	8004328 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	2203      	movs	r2, #3
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	43db      	mvns	r3, r3
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	4013      	ands	r3, r2
 80042dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042fc:	2201      	movs	r2, #1
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	43db      	mvns	r3, r3
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	4013      	ands	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	091b      	lsrs	r3, r3, #4
 8004312:	f003 0201 	and.w	r2, r3, #1
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4313      	orrs	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	2b03      	cmp	r3, #3
 8004332:	d017      	beq.n	8004364 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	2203      	movs	r2, #3
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	43db      	mvns	r3, r3
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	4013      	ands	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4313      	orrs	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d123      	bne.n	80043b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	08da      	lsrs	r2, r3, #3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3208      	adds	r2, #8
 8004378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800437c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	220f      	movs	r2, #15
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	43db      	mvns	r3, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	4013      	ands	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	08da      	lsrs	r2, r3, #3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3208      	adds	r2, #8
 80043b2:	69b9      	ldr	r1, [r7, #24]
 80043b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	2203      	movs	r2, #3
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	43db      	mvns	r3, r3
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	4013      	ands	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f003 0203 	and.w	r2, r3, #3
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 80ae 	beq.w	8004556 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	4b5d      	ldr	r3, [pc, #372]	@ (8004574 <HAL_GPIO_Init+0x300>)
 8004400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004402:	4a5c      	ldr	r2, [pc, #368]	@ (8004574 <HAL_GPIO_Init+0x300>)
 8004404:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004408:	6453      	str	r3, [r2, #68]	@ 0x44
 800440a:	4b5a      	ldr	r3, [pc, #360]	@ (8004574 <HAL_GPIO_Init+0x300>)
 800440c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004416:	4a58      	ldr	r2, [pc, #352]	@ (8004578 <HAL_GPIO_Init+0x304>)
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	089b      	lsrs	r3, r3, #2
 800441c:	3302      	adds	r3, #2
 800441e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004422:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	220f      	movs	r2, #15
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	43db      	mvns	r3, r3
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	4013      	ands	r3, r2
 8004438:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a4f      	ldr	r2, [pc, #316]	@ (800457c <HAL_GPIO_Init+0x308>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d025      	beq.n	800448e <HAL_GPIO_Init+0x21a>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a4e      	ldr	r2, [pc, #312]	@ (8004580 <HAL_GPIO_Init+0x30c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d01f      	beq.n	800448a <HAL_GPIO_Init+0x216>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a4d      	ldr	r2, [pc, #308]	@ (8004584 <HAL_GPIO_Init+0x310>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d019      	beq.n	8004486 <HAL_GPIO_Init+0x212>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a4c      	ldr	r2, [pc, #304]	@ (8004588 <HAL_GPIO_Init+0x314>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d013      	beq.n	8004482 <HAL_GPIO_Init+0x20e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a4b      	ldr	r2, [pc, #300]	@ (800458c <HAL_GPIO_Init+0x318>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d00d      	beq.n	800447e <HAL_GPIO_Init+0x20a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a4a      	ldr	r2, [pc, #296]	@ (8004590 <HAL_GPIO_Init+0x31c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d007      	beq.n	800447a <HAL_GPIO_Init+0x206>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a49      	ldr	r2, [pc, #292]	@ (8004594 <HAL_GPIO_Init+0x320>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d101      	bne.n	8004476 <HAL_GPIO_Init+0x202>
 8004472:	2306      	movs	r3, #6
 8004474:	e00c      	b.n	8004490 <HAL_GPIO_Init+0x21c>
 8004476:	2307      	movs	r3, #7
 8004478:	e00a      	b.n	8004490 <HAL_GPIO_Init+0x21c>
 800447a:	2305      	movs	r3, #5
 800447c:	e008      	b.n	8004490 <HAL_GPIO_Init+0x21c>
 800447e:	2304      	movs	r3, #4
 8004480:	e006      	b.n	8004490 <HAL_GPIO_Init+0x21c>
 8004482:	2303      	movs	r3, #3
 8004484:	e004      	b.n	8004490 <HAL_GPIO_Init+0x21c>
 8004486:	2302      	movs	r3, #2
 8004488:	e002      	b.n	8004490 <HAL_GPIO_Init+0x21c>
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <HAL_GPIO_Init+0x21c>
 800448e:	2300      	movs	r3, #0
 8004490:	69fa      	ldr	r2, [r7, #28]
 8004492:	f002 0203 	and.w	r2, r2, #3
 8004496:	0092      	lsls	r2, r2, #2
 8004498:	4093      	lsls	r3, r2
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4313      	orrs	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044a0:	4935      	ldr	r1, [pc, #212]	@ (8004578 <HAL_GPIO_Init+0x304>)
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	089b      	lsrs	r3, r3, #2
 80044a6:	3302      	adds	r3, #2
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044ae:	4b3a      	ldr	r3, [pc, #232]	@ (8004598 <HAL_GPIO_Init+0x324>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	43db      	mvns	r3, r3
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	4013      	ands	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044d2:	4a31      	ldr	r2, [pc, #196]	@ (8004598 <HAL_GPIO_Init+0x324>)
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044d8:	4b2f      	ldr	r3, [pc, #188]	@ (8004598 <HAL_GPIO_Init+0x324>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	43db      	mvns	r3, r3
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	4013      	ands	r3, r2
 80044e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044fc:	4a26      	ldr	r2, [pc, #152]	@ (8004598 <HAL_GPIO_Init+0x324>)
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004502:	4b25      	ldr	r3, [pc, #148]	@ (8004598 <HAL_GPIO_Init+0x324>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	43db      	mvns	r3, r3
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	4013      	ands	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	4313      	orrs	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004526:	4a1c      	ldr	r2, [pc, #112]	@ (8004598 <HAL_GPIO_Init+0x324>)
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800452c:	4b1a      	ldr	r3, [pc, #104]	@ (8004598 <HAL_GPIO_Init+0x324>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	43db      	mvns	r3, r3
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4013      	ands	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004550:	4a11      	ldr	r2, [pc, #68]	@ (8004598 <HAL_GPIO_Init+0x324>)
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	3301      	adds	r3, #1
 800455a:	61fb      	str	r3, [r7, #28]
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	2b0f      	cmp	r3, #15
 8004560:	f67f ae96 	bls.w	8004290 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004564:	bf00      	nop
 8004566:	bf00      	nop
 8004568:	3724      	adds	r7, #36	@ 0x24
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	40023800 	.word	0x40023800
 8004578:	40013800 	.word	0x40013800
 800457c:	40020000 	.word	0x40020000
 8004580:	40020400 	.word	0x40020400
 8004584:	40020800 	.word	0x40020800
 8004588:	40020c00 	.word	0x40020c00
 800458c:	40021000 	.word	0x40021000
 8004590:	40021400 	.word	0x40021400
 8004594:	40021800 	.word	0x40021800
 8004598:	40013c00 	.word	0x40013c00

0800459c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	807b      	strh	r3, [r7, #2]
 80045a8:	4613      	mov	r3, r2
 80045aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045ac:	787b      	ldrb	r3, [r7, #1]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045b2:	887a      	ldrh	r2, [r7, #2]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045b8:	e003      	b.n	80045c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045ba:	887b      	ldrh	r3, [r7, #2]
 80045bc:	041a      	lsls	r2, r3, #16
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	619a      	str	r2, [r3, #24]
}
 80045c2:	bf00      	nop
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
	...

080045d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	4603      	mov	r3, r0
 80045d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80045da:	4b08      	ldr	r3, [pc, #32]	@ (80045fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045dc:	695a      	ldr	r2, [r3, #20]
 80045de:	88fb      	ldrh	r3, [r7, #6]
 80045e0:	4013      	ands	r3, r2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d006      	beq.n	80045f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045e6:	4a05      	ldr	r2, [pc, #20]	@ (80045fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045e8:	88fb      	ldrh	r3, [r7, #6]
 80045ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045ec:	88fb      	ldrh	r3, [r7, #6]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 f806 	bl	8004600 <HAL_GPIO_EXTI_Callback>
  }
}
 80045f4:	bf00      	nop
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40013c00 	.word	0x40013c00

08004600 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	4603      	mov	r3, r0
 8004608:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b086      	sub	sp, #24
 800461a:	af02      	add	r7, sp, #8
 800461c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e108      	b.n	800483a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d106      	bne.n	8004648 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7fe fe3e 	bl	80032c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2203      	movs	r2, #3
 800464c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004656:	d102      	bne.n	800465e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f003 fb16 	bl	8007c94 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6818      	ldr	r0, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	7c1a      	ldrb	r2, [r3, #16]
 8004670:	f88d 2000 	strb.w	r2, [sp]
 8004674:	3304      	adds	r3, #4
 8004676:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004678:	f003 faa8 	bl	8007bcc <USB_CoreInit>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d005      	beq.n	800468e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2202      	movs	r2, #2
 8004686:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e0d5      	b.n	800483a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2100      	movs	r1, #0
 8004694:	4618      	mov	r0, r3
 8004696:	f003 fb0e 	bl	8007cb6 <USB_SetCurrentMode>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d005      	beq.n	80046ac <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e0c6      	b.n	800483a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046ac:	2300      	movs	r3, #0
 80046ae:	73fb      	strb	r3, [r7, #15]
 80046b0:	e04a      	b.n	8004748 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80046b2:	7bfa      	ldrb	r2, [r7, #15]
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	4613      	mov	r3, r2
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	4413      	add	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	440b      	add	r3, r1
 80046c0:	3315      	adds	r3, #21
 80046c2:	2201      	movs	r2, #1
 80046c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80046c6:	7bfa      	ldrb	r2, [r7, #15]
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	3314      	adds	r3, #20
 80046d6:	7bfa      	ldrb	r2, [r7, #15]
 80046d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80046da:	7bfa      	ldrb	r2, [r7, #15]
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
 80046de:	b298      	uxth	r0, r3
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	4613      	mov	r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	4413      	add	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	440b      	add	r3, r1
 80046ec:	332e      	adds	r3, #46	@ 0x2e
 80046ee:	4602      	mov	r2, r0
 80046f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80046f2:	7bfa      	ldrb	r2, [r7, #15]
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	4613      	mov	r3, r2
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	4413      	add	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	440b      	add	r3, r1
 8004700:	3318      	adds	r3, #24
 8004702:	2200      	movs	r2, #0
 8004704:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004706:	7bfa      	ldrb	r2, [r7, #15]
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	4613      	mov	r3, r2
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	4413      	add	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	440b      	add	r3, r1
 8004714:	331c      	adds	r3, #28
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800471a:	7bfa      	ldrb	r2, [r7, #15]
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	4613      	mov	r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	440b      	add	r3, r1
 8004728:	3320      	adds	r3, #32
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800472e:	7bfa      	ldrb	r2, [r7, #15]
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	4613      	mov	r3, r2
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	4413      	add	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	440b      	add	r3, r1
 800473c:	3324      	adds	r3, #36	@ 0x24
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004742:	7bfb      	ldrb	r3, [r7, #15]
 8004744:	3301      	adds	r3, #1
 8004746:	73fb      	strb	r3, [r7, #15]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	791b      	ldrb	r3, [r3, #4]
 800474c:	7bfa      	ldrb	r2, [r7, #15]
 800474e:	429a      	cmp	r2, r3
 8004750:	d3af      	bcc.n	80046b2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004752:	2300      	movs	r3, #0
 8004754:	73fb      	strb	r3, [r7, #15]
 8004756:	e044      	b.n	80047e2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004758:	7bfa      	ldrb	r2, [r7, #15]
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	4613      	mov	r3, r2
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	4413      	add	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800476a:	2200      	movs	r2, #0
 800476c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800476e:	7bfa      	ldrb	r2, [r7, #15]
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	4613      	mov	r3, r2
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	4413      	add	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	440b      	add	r3, r1
 800477c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004780:	7bfa      	ldrb	r2, [r7, #15]
 8004782:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004784:	7bfa      	ldrb	r2, [r7, #15]
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	4613      	mov	r3, r2
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	4413      	add	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	440b      	add	r3, r1
 8004792:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004796:	2200      	movs	r2, #0
 8004798:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800479a:	7bfa      	ldrb	r2, [r7, #15]
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	4613      	mov	r3, r2
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	4413      	add	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	440b      	add	r3, r1
 80047a8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80047b0:	7bfa      	ldrb	r2, [r7, #15]
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	4613      	mov	r3, r2
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	4413      	add	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	440b      	add	r3, r1
 80047be:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80047c6:	7bfa      	ldrb	r2, [r7, #15]
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	4613      	mov	r3, r2
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	4413      	add	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	440b      	add	r3, r1
 80047d4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
 80047de:	3301      	adds	r3, #1
 80047e0:	73fb      	strb	r3, [r7, #15]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	791b      	ldrb	r3, [r3, #4]
 80047e6:	7bfa      	ldrb	r2, [r7, #15]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d3b5      	bcc.n	8004758 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6818      	ldr	r0, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	7c1a      	ldrb	r2, [r3, #16]
 80047f4:	f88d 2000 	strb.w	r2, [sp]
 80047f8:	3304      	adds	r3, #4
 80047fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047fc:	f003 faa8 	bl	8007d50 <USB_DevInit>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d005      	beq.n	8004812 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2202      	movs	r2, #2
 800480a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e013      	b.n	800483a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	7b1b      	ldrb	r3, [r3, #12]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d102      	bne.n	800482e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f80a 	bl	8004842 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f003 fc63 	bl	80080fe <USB_DevDisconnect>

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004842:	b480      	push	{r7}
 8004844:	b085      	sub	sp, #20
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004874:	f043 0303 	orr.w	r3, r3, #3
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
	...

0800488c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0cc      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048a0:	4b68      	ldr	r3, [pc, #416]	@ (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d90c      	bls.n	80048c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ae:	4b65      	ldr	r3, [pc, #404]	@ (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b6:	4b63      	ldr	r3, [pc, #396]	@ (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d001      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0b8      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d020      	beq.n	8004916 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048e0:	4b59      	ldr	r3, [pc, #356]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	4a58      	ldr	r2, [pc, #352]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d005      	beq.n	8004904 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048f8:	4b53      	ldr	r3, [pc, #332]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	4a52      	ldr	r2, [pc, #328]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004902:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004904:	4b50      	ldr	r3, [pc, #320]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	494d      	ldr	r1, [pc, #308]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	4313      	orrs	r3, r2
 8004914:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d044      	beq.n	80049ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d107      	bne.n	800493a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492a:	4b47      	ldr	r3, [pc, #284]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d119      	bne.n	800496a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e07f      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2b02      	cmp	r3, #2
 8004940:	d003      	beq.n	800494a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004946:	2b03      	cmp	r3, #3
 8004948:	d107      	bne.n	800495a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800494a:	4b3f      	ldr	r3, [pc, #252]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d109      	bne.n	800496a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e06f      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800495a:	4b3b      	ldr	r3, [pc, #236]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e067      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800496a:	4b37      	ldr	r3, [pc, #220]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f023 0203 	bic.w	r2, r3, #3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	4934      	ldr	r1, [pc, #208]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004978:	4313      	orrs	r3, r2
 800497a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800497c:	f7fe ff36 	bl	80037ec <HAL_GetTick>
 8004980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004982:	e00a      	b.n	800499a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004984:	f7fe ff32 	bl	80037ec <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004992:	4293      	cmp	r3, r2
 8004994:	d901      	bls.n	800499a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e04f      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800499a:	4b2b      	ldr	r3, [pc, #172]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 020c 	and.w	r2, r3, #12
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d1eb      	bne.n	8004984 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049ac:	4b25      	ldr	r3, [pc, #148]	@ (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d20c      	bcs.n	80049d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ba:	4b22      	ldr	r3, [pc, #136]	@ (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c2:	4b20      	ldr	r3, [pc, #128]	@ (8004a44 <HAL_RCC_ClockConfig+0x1b8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d001      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e032      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d008      	beq.n	80049f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049e0:	4b19      	ldr	r3, [pc, #100]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	4916      	ldr	r1, [pc, #88]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d009      	beq.n	8004a12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049fe:	4b12      	ldr	r3, [pc, #72]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	490e      	ldr	r1, [pc, #56]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a12:	f000 f821 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 8004a16:	4602      	mov	r2, r0
 8004a18:	4b0b      	ldr	r3, [pc, #44]	@ (8004a48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	091b      	lsrs	r3, r3, #4
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	490a      	ldr	r1, [pc, #40]	@ (8004a4c <HAL_RCC_ClockConfig+0x1c0>)
 8004a24:	5ccb      	ldrb	r3, [r1, r3]
 8004a26:	fa22 f303 	lsr.w	r3, r2, r3
 8004a2a:	4a09      	ldr	r2, [pc, #36]	@ (8004a50 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a2e:	4b09      	ldr	r3, [pc, #36]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fe fe96 	bl	8003764 <HAL_InitTick>

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	40023c00 	.word	0x40023c00
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	0800c4e0 	.word	0x0800c4e0
 8004a50:	20000040 	.word	0x20000040
 8004a54:	20000044 	.word	0x20000044

08004a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a5c:	b094      	sub	sp, #80	@ 0x50
 8004a5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a64:	2300      	movs	r3, #0
 8004a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a68:	2300      	movs	r3, #0
 8004a6a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a70:	4b79      	ldr	r3, [pc, #484]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 030c 	and.w	r3, r3, #12
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d00d      	beq.n	8004a98 <HAL_RCC_GetSysClockFreq+0x40>
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	f200 80e1 	bhi.w	8004c44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <HAL_RCC_GetSysClockFreq+0x34>
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d003      	beq.n	8004a92 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a8a:	e0db      	b.n	8004c44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a8c:	4b73      	ldr	r3, [pc, #460]	@ (8004c5c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004a90:	e0db      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a92:	4b73      	ldr	r3, [pc, #460]	@ (8004c60 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a96:	e0d8      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a98:	4b6f      	ldr	r3, [pc, #444]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004aa0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aa2:	4b6d      	ldr	r3, [pc, #436]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d063      	beq.n	8004b76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aae:	4b6a      	ldr	r3, [pc, #424]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	099b      	lsrs	r3, r3, #6
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ab8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ac6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004aca:	4622      	mov	r2, r4
 8004acc:	462b      	mov	r3, r5
 8004ace:	f04f 0000 	mov.w	r0, #0
 8004ad2:	f04f 0100 	mov.w	r1, #0
 8004ad6:	0159      	lsls	r1, r3, #5
 8004ad8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004adc:	0150      	lsls	r0, r2, #5
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4621      	mov	r1, r4
 8004ae4:	1a51      	subs	r1, r2, r1
 8004ae6:	6139      	str	r1, [r7, #16]
 8004ae8:	4629      	mov	r1, r5
 8004aea:	eb63 0301 	sbc.w	r3, r3, r1
 8004aee:	617b      	str	r3, [r7, #20]
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004afc:	4659      	mov	r1, fp
 8004afe:	018b      	lsls	r3, r1, #6
 8004b00:	4651      	mov	r1, sl
 8004b02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b06:	4651      	mov	r1, sl
 8004b08:	018a      	lsls	r2, r1, #6
 8004b0a:	4651      	mov	r1, sl
 8004b0c:	ebb2 0801 	subs.w	r8, r2, r1
 8004b10:	4659      	mov	r1, fp
 8004b12:	eb63 0901 	sbc.w	r9, r3, r1
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b2a:	4690      	mov	r8, r2
 8004b2c:	4699      	mov	r9, r3
 8004b2e:	4623      	mov	r3, r4
 8004b30:	eb18 0303 	adds.w	r3, r8, r3
 8004b34:	60bb      	str	r3, [r7, #8]
 8004b36:	462b      	mov	r3, r5
 8004b38:	eb49 0303 	adc.w	r3, r9, r3
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	f04f 0200 	mov.w	r2, #0
 8004b42:	f04f 0300 	mov.w	r3, #0
 8004b46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b4a:	4629      	mov	r1, r5
 8004b4c:	024b      	lsls	r3, r1, #9
 8004b4e:	4621      	mov	r1, r4
 8004b50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b54:	4621      	mov	r1, r4
 8004b56:	024a      	lsls	r2, r1, #9
 8004b58:	4610      	mov	r0, r2
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b5e:	2200      	movs	r2, #0
 8004b60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b68:	f7fc f8ae 	bl	8000cc8 <__aeabi_uldivmod>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4613      	mov	r3, r2
 8004b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b74:	e058      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b76:	4b38      	ldr	r3, [pc, #224]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	099b      	lsrs	r3, r3, #6
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	4618      	mov	r0, r3
 8004b80:	4611      	mov	r1, r2
 8004b82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b86:	623b      	str	r3, [r7, #32]
 8004b88:	2300      	movs	r3, #0
 8004b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b90:	4642      	mov	r2, r8
 8004b92:	464b      	mov	r3, r9
 8004b94:	f04f 0000 	mov.w	r0, #0
 8004b98:	f04f 0100 	mov.w	r1, #0
 8004b9c:	0159      	lsls	r1, r3, #5
 8004b9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ba2:	0150      	lsls	r0, r2, #5
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4641      	mov	r1, r8
 8004baa:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bae:	4649      	mov	r1, r9
 8004bb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bc8:	ebb2 040a 	subs.w	r4, r2, sl
 8004bcc:	eb63 050b 	sbc.w	r5, r3, fp
 8004bd0:	f04f 0200 	mov.w	r2, #0
 8004bd4:	f04f 0300 	mov.w	r3, #0
 8004bd8:	00eb      	lsls	r3, r5, #3
 8004bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bde:	00e2      	lsls	r2, r4, #3
 8004be0:	4614      	mov	r4, r2
 8004be2:	461d      	mov	r5, r3
 8004be4:	4643      	mov	r3, r8
 8004be6:	18e3      	adds	r3, r4, r3
 8004be8:	603b      	str	r3, [r7, #0]
 8004bea:	464b      	mov	r3, r9
 8004bec:	eb45 0303 	adc.w	r3, r5, r3
 8004bf0:	607b      	str	r3, [r7, #4]
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bfe:	4629      	mov	r1, r5
 8004c00:	028b      	lsls	r3, r1, #10
 8004c02:	4621      	mov	r1, r4
 8004c04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c08:	4621      	mov	r1, r4
 8004c0a:	028a      	lsls	r2, r1, #10
 8004c0c:	4610      	mov	r0, r2
 8004c0e:	4619      	mov	r1, r3
 8004c10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c12:	2200      	movs	r2, #0
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	61fa      	str	r2, [r7, #28]
 8004c18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c1c:	f7fc f854 	bl	8000cc8 <__aeabi_uldivmod>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4613      	mov	r3, r2
 8004c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c28:	4b0b      	ldr	r3, [pc, #44]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	0c1b      	lsrs	r3, r3, #16
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	3301      	adds	r3, #1
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004c38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c42:	e002      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c44:	4b05      	ldr	r3, [pc, #20]	@ (8004c5c <HAL_RCC_GetSysClockFreq+0x204>)
 8004c46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3750      	adds	r7, #80	@ 0x50
 8004c50:	46bd      	mov	sp, r7
 8004c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c56:	bf00      	nop
 8004c58:	40023800 	.word	0x40023800
 8004c5c:	00f42400 	.word	0x00f42400
 8004c60:	007a1200 	.word	0x007a1200

08004c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c68:	4b03      	ldr	r3, [pc, #12]	@ (8004c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20000040 	.word	0x20000040

08004c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c80:	f7ff fff0 	bl	8004c64 <HAL_RCC_GetHCLKFreq>
 8004c84:	4602      	mov	r2, r0
 8004c86:	4b05      	ldr	r3, [pc, #20]	@ (8004c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	0a9b      	lsrs	r3, r3, #10
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	4903      	ldr	r1, [pc, #12]	@ (8004ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c92:	5ccb      	ldrb	r3, [r1, r3]
 8004c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	0800c4f0 	.word	0x0800c4f0

08004ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ca8:	f7ff ffdc 	bl	8004c64 <HAL_RCC_GetHCLKFreq>
 8004cac:	4602      	mov	r2, r0
 8004cae:	4b05      	ldr	r3, [pc, #20]	@ (8004cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	0b5b      	lsrs	r3, r3, #13
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	4903      	ldr	r1, [pc, #12]	@ (8004cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cba:	5ccb      	ldrb	r3, [r1, r3]
 8004cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40023800 	.word	0x40023800
 8004cc8:	0800c4f0 	.word	0x0800c4f0

08004ccc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d010      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004cec:	4b87      	ldr	r3, [pc, #540]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cf2:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	4984      	ldr	r1, [pc, #528]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d010      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004d1a:	4b7c      	ldr	r3, [pc, #496]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d20:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	4978      	ldr	r1, [pc, #480]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0308 	and.w	r3, r3, #8
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 8083 	beq.w	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60bb      	str	r3, [r7, #8]
 8004d4e:	4b6f      	ldr	r3, [pc, #444]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d52:	4a6e      	ldr	r2, [pc, #440]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d5a:	4b6c      	ldr	r3, [pc, #432]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d62:	60bb      	str	r3, [r7, #8]
 8004d64:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d66:	4b6a      	ldr	r3, [pc, #424]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a69      	ldr	r2, [pc, #420]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d70:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d72:	f7fe fd3b 	bl	80037ec <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d78:	e008      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d7a:	f7fe fd37 	bl	80037ec <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e162      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d8c:	4b60      	ldr	r3, [pc, #384]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0f0      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d98:	4b5c      	ldr	r3, [pc, #368]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004da0:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d02f      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d028      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004db6:	4b55      	ldr	r3, [pc, #340]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dbe:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dc0:	4b54      	ldr	r3, [pc, #336]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dc6:	4b53      	ldr	r3, [pc, #332]	@ (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004dcc:	4a4f      	ldr	r2, [pc, #316]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004dd2:	4b4e      	ldr	r3, [pc, #312]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d114      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004dde:	f7fe fd05 	bl	80037ec <HAL_GetTick>
 8004de2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de4:	e00a      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004de6:	f7fe fd01 	bl	80037ec <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e12a      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfc:	4b43      	ldr	r3, [pc, #268]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0ee      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e14:	d10d      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004e16:	4b3d      	ldr	r3, [pc, #244]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004e26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e2a:	4938      	ldr	r1, [pc, #224]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	608b      	str	r3, [r1, #8]
 8004e30:	e005      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004e32:	4b36      	ldr	r3, [pc, #216]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	4a35      	ldr	r2, [pc, #212]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e38:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004e3c:	6093      	str	r3, [r2, #8]
 8004e3e:	4b33      	ldr	r3, [pc, #204]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e40:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e4a:	4930      	ldr	r1, [pc, #192]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d004      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8004e62:	4b2d      	ldr	r3, [pc, #180]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004e64:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0310 	and.w	r3, r3, #16
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004e72:	4b26      	ldr	r3, [pc, #152]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e78:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e80:	4922      	ldr	r1, [pc, #136]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0320 	and.w	r3, r3, #32
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d011      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e94:	4b1d      	ldr	r3, [pc, #116]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e9a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea2:	491a      	ldr	r1, [pc, #104]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004eb2:	d101      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004ec4:	4b11      	ldr	r3, [pc, #68]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004eca:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	490e      	ldr	r1, [pc, #56]	@ (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d004      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b80      	cmp	r3, #128	@ 0x80
 8004ee6:	f040 8091 	bne.w	800500c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004eea:	4b0c      	ldr	r3, [pc, #48]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ef0:	f7fe fc7c 	bl	80037ec <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ef6:	e013      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ef8:	f7fe fc78 	bl	80037ec <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d90c      	bls.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e0a3      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004f0a:	bf00      	nop
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	40007000 	.word	0x40007000
 8004f14:	42470e40 	.word	0x42470e40
 8004f18:	424711e0 	.word	0x424711e0
 8004f1c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f20:	4b4e      	ldr	r3, [pc, #312]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1e5      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8004f2c:	4a4c      	ldr	r2, [pc, #304]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f32:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d003      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d023      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d019      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d004      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f70:	d00e      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d019      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d115      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f8e:	d110      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	019b      	lsls	r3, r3, #6
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	061b      	lsls	r3, r3, #24
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	071b      	lsls	r3, r3, #28
 8004faa:	492c      	ldr	r1, [pc, #176]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d010      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	019b      	lsls	r3, r3, #6
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	061b      	lsls	r3, r3, #24
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	071b      	lsls	r3, r3, #28
 8004fd8:	4920      	ldr	r1, [pc, #128]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fe0:	4b20      	ldr	r3, [pc, #128]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fe6:	f7fe fc01 	bl	80037ec <HAL_GetTick>
 8004fea:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fec:	e008      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fee:	f7fe fbfd 	bl	80037ec <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d901      	bls.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e028      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005000:	4b16      	ldr	r3, [pc, #88]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0f0      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005018:	4b10      	ldr	r3, [pc, #64]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800501a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800501e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005026:	490d      	ldr	r1, [pc, #52]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005028:	4313      	orrs	r3, r2
 800502a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800503a:	4b08      	ldr	r3, [pc, #32]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800503c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005040:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005048:	4904      	ldr	r1, [pc, #16]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	40023800 	.word	0x40023800
 8005060:	424710d8 	.word	0x424710d8
 8005064:	42470068 	.word	0x42470068

08005068 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e273      	b.n	8005562 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d075      	beq.n	8005172 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005086:	4b88      	ldr	r3, [pc, #544]	@ (80052a8 <HAL_RCC_OscConfig+0x240>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 030c 	and.w	r3, r3, #12
 800508e:	2b04      	cmp	r3, #4
 8005090:	d00c      	beq.n	80050ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005092:	4b85      	ldr	r3, [pc, #532]	@ (80052a8 <HAL_RCC_OscConfig+0x240>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800509a:	2b08      	cmp	r3, #8
 800509c:	d112      	bne.n	80050c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800509e:	4b82      	ldr	r3, [pc, #520]	@ (80052a8 <HAL_RCC_OscConfig+0x240>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050aa:	d10b      	bne.n	80050c4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050ac:	4b7e      	ldr	r3, [pc, #504]	@ (80052a8 <HAL_RCC_OscConfig+0x240>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d05b      	beq.n	8005170 <HAL_RCC_OscConfig+0x108>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d157      	bne.n	8005170 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e24e      	b.n	8005562 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050cc:	d106      	bne.n	80050dc <HAL_RCC_OscConfig+0x74>
 80050ce:	4b76      	ldr	r3, [pc, #472]	@ (80052a8 <HAL_RCC_OscConfig+0x240>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a75      	ldr	r2, [pc, #468]	@ (80052a8 <HAL_RCC_OscConfig+0x240>)
 80050d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050d8:	6013      	str	r3, [r2, #0]
 80050da:	e01d      	b.n	8005118 <HAL_RCC_OscConfig+0xb0>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050e4:	d10c      	bne.n	8005100 <HAL_RCC_OscConfig+0x98>
 80050e6:	4b70      	ldr	r3, [pc, #448]	@ (80052a8 <HAL_RCC_OscConfig+0x240>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a6f      	ldr	r2, [pc, #444]	@ (80052a8 <HAL_RCC_OscConfig+0x240>)
 80050ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	4b6d      	ldr	r3, [pc, #436]	@ (80052a8 <HAL_RCC_OscConfig+0x240>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a6c      	ldr	r2, [pc, #432]	@ (80052a8 <HAL_RCC_OscConfig+0x240>)
 80050f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	e00b      	b.n	8005118 <HAL_RCC_OscConfig+0xb0>
 8005100:	4b69      	ldr	r3, [pc, #420]	@ (80052a8 <HAL_RCC_OscConfig+0x240>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a68      	ldr	r2, [pc, #416]	@ (80052a8 <HAL_RCC_OscConfig+0x240>)
 8005106:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	4b66      	ldr	r3, [pc, #408]	@ (80052a8 <HAL_RCC_OscConfig+0x240>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a65      	ldr	r2, [pc, #404]	@ (80052a8 <HAL_RCC_OscConfig+0x240>)
 8005112:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d013      	beq.n	8005148 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005120:	f7fe fb64 	bl	80037ec <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005128:	f7fe fb60 	bl	80037ec <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b64      	cmp	r3, #100	@ 0x64
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e213      	b.n	8005562 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800513a:	4b5b      	ldr	r3, [pc, #364]	@ (80052a8 <HAL_RCC_OscConfig+0x240>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0f0      	beq.n	8005128 <HAL_RCC_OscConfig+0xc0>
 8005146:	e014      	b.n	8005172 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005148:	f7fe fb50 	bl	80037ec <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800514e:	e008      	b.n	8005162 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005150:	f7fe fb4c 	bl	80037ec <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b64      	cmp	r3, #100	@ 0x64
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e1ff      	b.n	8005562 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005162:	4b51      	ldr	r3, [pc, #324]	@ (80052a8 <HAL_RCC_OscConfig+0x240>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1f0      	bne.n	8005150 <HAL_RCC_OscConfig+0xe8>
 800516e:	e000      	b.n	8005172 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d063      	beq.n	8005246 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800517e:	4b4a      	ldr	r3, [pc, #296]	@ (80052a8 <HAL_RCC_OscConfig+0x240>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 030c 	and.w	r3, r3, #12
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00b      	beq.n	80051a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800518a:	4b47      	ldr	r3, [pc, #284]	@ (80052a8 <HAL_RCC_OscConfig+0x240>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005192:	2b08      	cmp	r3, #8
 8005194:	d11c      	bne.n	80051d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005196:	4b44      	ldr	r3, [pc, #272]	@ (80052a8 <HAL_RCC_OscConfig+0x240>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d116      	bne.n	80051d0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051a2:	4b41      	ldr	r3, [pc, #260]	@ (80052a8 <HAL_RCC_OscConfig+0x240>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d005      	beq.n	80051ba <HAL_RCC_OscConfig+0x152>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d001      	beq.n	80051ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e1d3      	b.n	8005562 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ba:	4b3b      	ldr	r3, [pc, #236]	@ (80052a8 <HAL_RCC_OscConfig+0x240>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	4937      	ldr	r1, [pc, #220]	@ (80052a8 <HAL_RCC_OscConfig+0x240>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ce:	e03a      	b.n	8005246 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d020      	beq.n	800521a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051d8:	4b34      	ldr	r3, [pc, #208]	@ (80052ac <HAL_RCC_OscConfig+0x244>)
 80051da:	2201      	movs	r2, #1
 80051dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051de:	f7fe fb05 	bl	80037ec <HAL_GetTick>
 80051e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e4:	e008      	b.n	80051f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051e6:	f7fe fb01 	bl	80037ec <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e1b4      	b.n	8005562 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051f8:	4b2b      	ldr	r3, [pc, #172]	@ (80052a8 <HAL_RCC_OscConfig+0x240>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0f0      	beq.n	80051e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005204:	4b28      	ldr	r3, [pc, #160]	@ (80052a8 <HAL_RCC_OscConfig+0x240>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	4925      	ldr	r1, [pc, #148]	@ (80052a8 <HAL_RCC_OscConfig+0x240>)
 8005214:	4313      	orrs	r3, r2
 8005216:	600b      	str	r3, [r1, #0]
 8005218:	e015      	b.n	8005246 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800521a:	4b24      	ldr	r3, [pc, #144]	@ (80052ac <HAL_RCC_OscConfig+0x244>)
 800521c:	2200      	movs	r2, #0
 800521e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005220:	f7fe fae4 	bl	80037ec <HAL_GetTick>
 8005224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005226:	e008      	b.n	800523a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005228:	f7fe fae0 	bl	80037ec <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e193      	b.n	8005562 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800523a:	4b1b      	ldr	r3, [pc, #108]	@ (80052a8 <HAL_RCC_OscConfig+0x240>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1f0      	bne.n	8005228 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b00      	cmp	r3, #0
 8005250:	d036      	beq.n	80052c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d016      	beq.n	8005288 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800525a:	4b15      	ldr	r3, [pc, #84]	@ (80052b0 <HAL_RCC_OscConfig+0x248>)
 800525c:	2201      	movs	r2, #1
 800525e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005260:	f7fe fac4 	bl	80037ec <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005268:	f7fe fac0 	bl	80037ec <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e173      	b.n	8005562 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800527a:	4b0b      	ldr	r3, [pc, #44]	@ (80052a8 <HAL_RCC_OscConfig+0x240>)
 800527c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0f0      	beq.n	8005268 <HAL_RCC_OscConfig+0x200>
 8005286:	e01b      	b.n	80052c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005288:	4b09      	ldr	r3, [pc, #36]	@ (80052b0 <HAL_RCC_OscConfig+0x248>)
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800528e:	f7fe faad 	bl	80037ec <HAL_GetTick>
 8005292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005294:	e00e      	b.n	80052b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005296:	f7fe faa9 	bl	80037ec <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d907      	bls.n	80052b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e15c      	b.n	8005562 <HAL_RCC_OscConfig+0x4fa>
 80052a8:	40023800 	.word	0x40023800
 80052ac:	42470000 	.word	0x42470000
 80052b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052b4:	4b8a      	ldr	r3, [pc, #552]	@ (80054e0 <HAL_RCC_OscConfig+0x478>)
 80052b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1ea      	bne.n	8005296 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 8097 	beq.w	80053fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ce:	2300      	movs	r3, #0
 80052d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052d2:	4b83      	ldr	r3, [pc, #524]	@ (80054e0 <HAL_RCC_OscConfig+0x478>)
 80052d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10f      	bne.n	80052fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052de:	2300      	movs	r3, #0
 80052e0:	60bb      	str	r3, [r7, #8]
 80052e2:	4b7f      	ldr	r3, [pc, #508]	@ (80054e0 <HAL_RCC_OscConfig+0x478>)
 80052e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e6:	4a7e      	ldr	r2, [pc, #504]	@ (80054e0 <HAL_RCC_OscConfig+0x478>)
 80052e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80052ee:	4b7c      	ldr	r3, [pc, #496]	@ (80054e0 <HAL_RCC_OscConfig+0x478>)
 80052f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052f6:	60bb      	str	r3, [r7, #8]
 80052f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052fa:	2301      	movs	r3, #1
 80052fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052fe:	4b79      	ldr	r3, [pc, #484]	@ (80054e4 <HAL_RCC_OscConfig+0x47c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005306:	2b00      	cmp	r3, #0
 8005308:	d118      	bne.n	800533c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800530a:	4b76      	ldr	r3, [pc, #472]	@ (80054e4 <HAL_RCC_OscConfig+0x47c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a75      	ldr	r2, [pc, #468]	@ (80054e4 <HAL_RCC_OscConfig+0x47c>)
 8005310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005316:	f7fe fa69 	bl	80037ec <HAL_GetTick>
 800531a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800531c:	e008      	b.n	8005330 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800531e:	f7fe fa65 	bl	80037ec <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d901      	bls.n	8005330 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e118      	b.n	8005562 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005330:	4b6c      	ldr	r3, [pc, #432]	@ (80054e4 <HAL_RCC_OscConfig+0x47c>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005338:	2b00      	cmp	r3, #0
 800533a:	d0f0      	beq.n	800531e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d106      	bne.n	8005352 <HAL_RCC_OscConfig+0x2ea>
 8005344:	4b66      	ldr	r3, [pc, #408]	@ (80054e0 <HAL_RCC_OscConfig+0x478>)
 8005346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005348:	4a65      	ldr	r2, [pc, #404]	@ (80054e0 <HAL_RCC_OscConfig+0x478>)
 800534a:	f043 0301 	orr.w	r3, r3, #1
 800534e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005350:	e01c      	b.n	800538c <HAL_RCC_OscConfig+0x324>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	2b05      	cmp	r3, #5
 8005358:	d10c      	bne.n	8005374 <HAL_RCC_OscConfig+0x30c>
 800535a:	4b61      	ldr	r3, [pc, #388]	@ (80054e0 <HAL_RCC_OscConfig+0x478>)
 800535c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800535e:	4a60      	ldr	r2, [pc, #384]	@ (80054e0 <HAL_RCC_OscConfig+0x478>)
 8005360:	f043 0304 	orr.w	r3, r3, #4
 8005364:	6713      	str	r3, [r2, #112]	@ 0x70
 8005366:	4b5e      	ldr	r3, [pc, #376]	@ (80054e0 <HAL_RCC_OscConfig+0x478>)
 8005368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800536a:	4a5d      	ldr	r2, [pc, #372]	@ (80054e0 <HAL_RCC_OscConfig+0x478>)
 800536c:	f043 0301 	orr.w	r3, r3, #1
 8005370:	6713      	str	r3, [r2, #112]	@ 0x70
 8005372:	e00b      	b.n	800538c <HAL_RCC_OscConfig+0x324>
 8005374:	4b5a      	ldr	r3, [pc, #360]	@ (80054e0 <HAL_RCC_OscConfig+0x478>)
 8005376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005378:	4a59      	ldr	r2, [pc, #356]	@ (80054e0 <HAL_RCC_OscConfig+0x478>)
 800537a:	f023 0301 	bic.w	r3, r3, #1
 800537e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005380:	4b57      	ldr	r3, [pc, #348]	@ (80054e0 <HAL_RCC_OscConfig+0x478>)
 8005382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005384:	4a56      	ldr	r2, [pc, #344]	@ (80054e0 <HAL_RCC_OscConfig+0x478>)
 8005386:	f023 0304 	bic.w	r3, r3, #4
 800538a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d015      	beq.n	80053c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005394:	f7fe fa2a 	bl	80037ec <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800539a:	e00a      	b.n	80053b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800539c:	f7fe fa26 	bl	80037ec <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e0d7      	b.n	8005562 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b2:	4b4b      	ldr	r3, [pc, #300]	@ (80054e0 <HAL_RCC_OscConfig+0x478>)
 80053b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d0ee      	beq.n	800539c <HAL_RCC_OscConfig+0x334>
 80053be:	e014      	b.n	80053ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c0:	f7fe fa14 	bl	80037ec <HAL_GetTick>
 80053c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053c6:	e00a      	b.n	80053de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053c8:	f7fe fa10 	bl	80037ec <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e0c1      	b.n	8005562 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053de:	4b40      	ldr	r3, [pc, #256]	@ (80054e0 <HAL_RCC_OscConfig+0x478>)
 80053e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1ee      	bne.n	80053c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053ea:	7dfb      	ldrb	r3, [r7, #23]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d105      	bne.n	80053fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053f0:	4b3b      	ldr	r3, [pc, #236]	@ (80054e0 <HAL_RCC_OscConfig+0x478>)
 80053f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f4:	4a3a      	ldr	r2, [pc, #232]	@ (80054e0 <HAL_RCC_OscConfig+0x478>)
 80053f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 80ad 	beq.w	8005560 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005406:	4b36      	ldr	r3, [pc, #216]	@ (80054e0 <HAL_RCC_OscConfig+0x478>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 030c 	and.w	r3, r3, #12
 800540e:	2b08      	cmp	r3, #8
 8005410:	d060      	beq.n	80054d4 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	2b02      	cmp	r3, #2
 8005418:	d145      	bne.n	80054a6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800541a:	4b33      	ldr	r3, [pc, #204]	@ (80054e8 <HAL_RCC_OscConfig+0x480>)
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005420:	f7fe f9e4 	bl	80037ec <HAL_GetTick>
 8005424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005428:	f7fe f9e0 	bl	80037ec <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e093      	b.n	8005562 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800543a:	4b29      	ldr	r3, [pc, #164]	@ (80054e0 <HAL_RCC_OscConfig+0x478>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1f0      	bne.n	8005428 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69da      	ldr	r2, [r3, #28]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005454:	019b      	lsls	r3, r3, #6
 8005456:	431a      	orrs	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545c:	085b      	lsrs	r3, r3, #1
 800545e:	3b01      	subs	r3, #1
 8005460:	041b      	lsls	r3, r3, #16
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005468:	061b      	lsls	r3, r3, #24
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005470:	071b      	lsls	r3, r3, #28
 8005472:	491b      	ldr	r1, [pc, #108]	@ (80054e0 <HAL_RCC_OscConfig+0x478>)
 8005474:	4313      	orrs	r3, r2
 8005476:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005478:	4b1b      	ldr	r3, [pc, #108]	@ (80054e8 <HAL_RCC_OscConfig+0x480>)
 800547a:	2201      	movs	r2, #1
 800547c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800547e:	f7fe f9b5 	bl	80037ec <HAL_GetTick>
 8005482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005484:	e008      	b.n	8005498 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005486:	f7fe f9b1 	bl	80037ec <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	2b02      	cmp	r3, #2
 8005492:	d901      	bls.n	8005498 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e064      	b.n	8005562 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005498:	4b11      	ldr	r3, [pc, #68]	@ (80054e0 <HAL_RCC_OscConfig+0x478>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0f0      	beq.n	8005486 <HAL_RCC_OscConfig+0x41e>
 80054a4:	e05c      	b.n	8005560 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054a6:	4b10      	ldr	r3, [pc, #64]	@ (80054e8 <HAL_RCC_OscConfig+0x480>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ac:	f7fe f99e 	bl	80037ec <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054b4:	f7fe f99a 	bl	80037ec <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e04d      	b.n	8005562 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054c6:	4b06      	ldr	r3, [pc, #24]	@ (80054e0 <HAL_RCC_OscConfig+0x478>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1f0      	bne.n	80054b4 <HAL_RCC_OscConfig+0x44c>
 80054d2:	e045      	b.n	8005560 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d107      	bne.n	80054ec <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e040      	b.n	8005562 <HAL_RCC_OscConfig+0x4fa>
 80054e0:	40023800 	.word	0x40023800
 80054e4:	40007000 	.word	0x40007000
 80054e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054ec:	4b1f      	ldr	r3, [pc, #124]	@ (800556c <HAL_RCC_OscConfig+0x504>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d030      	beq.n	800555c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005504:	429a      	cmp	r2, r3
 8005506:	d129      	bne.n	800555c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005512:	429a      	cmp	r2, r3
 8005514:	d122      	bne.n	800555c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800551c:	4013      	ands	r3, r2
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005522:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005524:	4293      	cmp	r3, r2
 8005526:	d119      	bne.n	800555c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005532:	085b      	lsrs	r3, r3, #1
 8005534:	3b01      	subs	r3, #1
 8005536:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005538:	429a      	cmp	r2, r3
 800553a:	d10f      	bne.n	800555c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005546:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005548:	429a      	cmp	r2, r3
 800554a:	d107      	bne.n	800555c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005556:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005558:	429a      	cmp	r2, r3
 800555a:	d001      	beq.n	8005560 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e000      	b.n	8005562 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	40023800 	.word	0x40023800

08005570 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e07b      	b.n	800567a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005586:	2b00      	cmp	r3, #0
 8005588:	d108      	bne.n	800559c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005592:	d009      	beq.n	80055a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	61da      	str	r2, [r3, #28]
 800559a:	e005      	b.n	80055a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d106      	bne.n	80055c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7fd fa96 	bl	8002af4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80055f0:	431a      	orrs	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	431a      	orrs	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	431a      	orrs	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005618:	431a      	orrs	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800562c:	ea42 0103 	orr.w	r1, r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005634:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	0c1b      	lsrs	r3, r3, #16
 8005646:	f003 0104 	and.w	r1, r3, #4
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564e:	f003 0210 	and.w	r2, r3, #16
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005668:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b082      	sub	sp, #8
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e041      	b.n	8005718 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d106      	bne.n	80056ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f7fd fba1 	bl	8002df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2202      	movs	r2, #2
 80056b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3304      	adds	r3, #4
 80056be:	4619      	mov	r1, r3
 80056c0:	4610      	mov	r0, r2
 80056c2:	f000 fd8b 	bl	80061dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b01      	cmp	r3, #1
 8005732:	d001      	beq.n	8005738 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e04e      	b.n	80057d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0201 	orr.w	r2, r2, #1
 800574e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a23      	ldr	r2, [pc, #140]	@ (80057e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d022      	beq.n	80057a0 <HAL_TIM_Base_Start_IT+0x80>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005762:	d01d      	beq.n	80057a0 <HAL_TIM_Base_Start_IT+0x80>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a1f      	ldr	r2, [pc, #124]	@ (80057e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d018      	beq.n	80057a0 <HAL_TIM_Base_Start_IT+0x80>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a1e      	ldr	r2, [pc, #120]	@ (80057ec <HAL_TIM_Base_Start_IT+0xcc>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d013      	beq.n	80057a0 <HAL_TIM_Base_Start_IT+0x80>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a1c      	ldr	r2, [pc, #112]	@ (80057f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d00e      	beq.n	80057a0 <HAL_TIM_Base_Start_IT+0x80>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a1b      	ldr	r2, [pc, #108]	@ (80057f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d009      	beq.n	80057a0 <HAL_TIM_Base_Start_IT+0x80>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a19      	ldr	r2, [pc, #100]	@ (80057f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d004      	beq.n	80057a0 <HAL_TIM_Base_Start_IT+0x80>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a18      	ldr	r2, [pc, #96]	@ (80057fc <HAL_TIM_Base_Start_IT+0xdc>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d111      	bne.n	80057c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 0307 	and.w	r3, r3, #7
 80057aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2b06      	cmp	r3, #6
 80057b0:	d010      	beq.n	80057d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f042 0201 	orr.w	r2, r2, #1
 80057c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c2:	e007      	b.n	80057d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0201 	orr.w	r2, r2, #1
 80057d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40010000 	.word	0x40010000
 80057e8:	40000400 	.word	0x40000400
 80057ec:	40000800 	.word	0x40000800
 80057f0:	40000c00 	.word	0x40000c00
 80057f4:	40010400 	.word	0x40010400
 80057f8:	40014000 	.word	0x40014000
 80057fc:	40001800 	.word	0x40001800

08005800 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e041      	b.n	8005896 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d106      	bne.n	800582c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7fd fb5c 	bl	8002ee4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3304      	adds	r3, #4
 800583c:	4619      	mov	r1, r3
 800583e:	4610      	mov	r0, r2
 8005840:	f000 fccc 	bl	80061dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
	...

080058a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d109      	bne.n	80058c4 <HAL_TIM_PWM_Start+0x24>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	bf14      	ite	ne
 80058bc:	2301      	movne	r3, #1
 80058be:	2300      	moveq	r3, #0
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	e022      	b.n	800590a <HAL_TIM_PWM_Start+0x6a>
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	d109      	bne.n	80058de <HAL_TIM_PWM_Start+0x3e>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	bf14      	ite	ne
 80058d6:	2301      	movne	r3, #1
 80058d8:	2300      	moveq	r3, #0
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	e015      	b.n	800590a <HAL_TIM_PWM_Start+0x6a>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d109      	bne.n	80058f8 <HAL_TIM_PWM_Start+0x58>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	bf14      	ite	ne
 80058f0:	2301      	movne	r3, #1
 80058f2:	2300      	moveq	r3, #0
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	e008      	b.n	800590a <HAL_TIM_PWM_Start+0x6a>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b01      	cmp	r3, #1
 8005902:	bf14      	ite	ne
 8005904:	2301      	movne	r3, #1
 8005906:	2300      	moveq	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e07c      	b.n	8005a0c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d104      	bne.n	8005922 <HAL_TIM_PWM_Start+0x82>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005920:	e013      	b.n	800594a <HAL_TIM_PWM_Start+0xaa>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b04      	cmp	r3, #4
 8005926:	d104      	bne.n	8005932 <HAL_TIM_PWM_Start+0x92>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005930:	e00b      	b.n	800594a <HAL_TIM_PWM_Start+0xaa>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b08      	cmp	r3, #8
 8005936:	d104      	bne.n	8005942 <HAL_TIM_PWM_Start+0xa2>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005940:	e003      	b.n	800594a <HAL_TIM_PWM_Start+0xaa>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2202      	movs	r2, #2
 8005946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2201      	movs	r2, #1
 8005950:	6839      	ldr	r1, [r7, #0]
 8005952:	4618      	mov	r0, r3
 8005954:	f000 ff38 	bl	80067c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a2d      	ldr	r2, [pc, #180]	@ (8005a14 <HAL_TIM_PWM_Start+0x174>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d004      	beq.n	800596c <HAL_TIM_PWM_Start+0xcc>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a2c      	ldr	r2, [pc, #176]	@ (8005a18 <HAL_TIM_PWM_Start+0x178>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d101      	bne.n	8005970 <HAL_TIM_PWM_Start+0xd0>
 800596c:	2301      	movs	r3, #1
 800596e:	e000      	b.n	8005972 <HAL_TIM_PWM_Start+0xd2>
 8005970:	2300      	movs	r3, #0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d007      	beq.n	8005986 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005984:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a22      	ldr	r2, [pc, #136]	@ (8005a14 <HAL_TIM_PWM_Start+0x174>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d022      	beq.n	80059d6 <HAL_TIM_PWM_Start+0x136>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005998:	d01d      	beq.n	80059d6 <HAL_TIM_PWM_Start+0x136>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a1f      	ldr	r2, [pc, #124]	@ (8005a1c <HAL_TIM_PWM_Start+0x17c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d018      	beq.n	80059d6 <HAL_TIM_PWM_Start+0x136>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005a20 <HAL_TIM_PWM_Start+0x180>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d013      	beq.n	80059d6 <HAL_TIM_PWM_Start+0x136>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a1c      	ldr	r2, [pc, #112]	@ (8005a24 <HAL_TIM_PWM_Start+0x184>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d00e      	beq.n	80059d6 <HAL_TIM_PWM_Start+0x136>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a16      	ldr	r2, [pc, #88]	@ (8005a18 <HAL_TIM_PWM_Start+0x178>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d009      	beq.n	80059d6 <HAL_TIM_PWM_Start+0x136>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a18      	ldr	r2, [pc, #96]	@ (8005a28 <HAL_TIM_PWM_Start+0x188>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d004      	beq.n	80059d6 <HAL_TIM_PWM_Start+0x136>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a16      	ldr	r2, [pc, #88]	@ (8005a2c <HAL_TIM_PWM_Start+0x18c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d111      	bne.n	80059fa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f003 0307 	and.w	r3, r3, #7
 80059e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b06      	cmp	r3, #6
 80059e6:	d010      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0201 	orr.w	r2, r2, #1
 80059f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f8:	e007      	b.n	8005a0a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f042 0201 	orr.w	r2, r2, #1
 8005a08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40010000 	.word	0x40010000
 8005a18:	40010400 	.word	0x40010400
 8005a1c:	40000400 	.word	0x40000400
 8005a20:	40000800 	.word	0x40000800
 8005a24:	40000c00 	.word	0x40000c00
 8005a28:	40014000 	.word	0x40014000
 8005a2c:	40001800 	.word	0x40001800

08005a30 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e097      	b.n	8005b74 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d106      	bne.n	8005a5e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7fd f8b3 	bl	8002bc4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2202      	movs	r2, #2
 8005a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	6812      	ldr	r2, [r2, #0]
 8005a70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a74:	f023 0307 	bic.w	r3, r3, #7
 8005a78:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	3304      	adds	r3, #4
 8005a82:	4619      	mov	r1, r3
 8005a84:	4610      	mov	r0, r2
 8005a86:	f000 fba9 	bl	80061dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ab2:	f023 0303 	bic.w	r3, r3, #3
 8005ab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	021b      	lsls	r3, r3, #8
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005ad0:	f023 030c 	bic.w	r3, r3, #12
 8005ad4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005adc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ae0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	021b      	lsls	r3, r3, #8
 8005aec:	4313      	orrs	r3, r2
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	011a      	lsls	r2, r3, #4
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	031b      	lsls	r3, r3, #12
 8005b00:	4313      	orrs	r3, r2
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005b0e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005b16:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	011b      	lsls	r3, r3, #4
 8005b22:	4313      	orrs	r3, r2
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b8c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b94:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b9c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005ba4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d110      	bne.n	8005bce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d102      	bne.n	8005bb8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bb2:	7b7b      	ldrb	r3, [r7, #13]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d001      	beq.n	8005bbc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e069      	b.n	8005c90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bcc:	e031      	b.n	8005c32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d110      	bne.n	8005bf6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bd4:	7bbb      	ldrb	r3, [r7, #14]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d102      	bne.n	8005be0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bda:	7b3b      	ldrb	r3, [r7, #12]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d001      	beq.n	8005be4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e055      	b.n	8005c90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bf4:	e01d      	b.n	8005c32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bf6:	7bfb      	ldrb	r3, [r7, #15]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d108      	bne.n	8005c0e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bfc:	7bbb      	ldrb	r3, [r7, #14]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d105      	bne.n	8005c0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c02:	7b7b      	ldrb	r3, [r7, #13]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d102      	bne.n	8005c0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c08:	7b3b      	ldrb	r3, [r7, #12]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d001      	beq.n	8005c12 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e03e      	b.n	8005c90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2202      	movs	r2, #2
 8005c16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2202      	movs	r2, #2
 8005c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d003      	beq.n	8005c40 <HAL_TIM_Encoder_Start+0xc4>
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	d008      	beq.n	8005c50 <HAL_TIM_Encoder_Start+0xd4>
 8005c3e:	e00f      	b.n	8005c60 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2201      	movs	r2, #1
 8005c46:	2100      	movs	r1, #0
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fdbd 	bl	80067c8 <TIM_CCxChannelCmd>
      break;
 8005c4e:	e016      	b.n	8005c7e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2201      	movs	r2, #1
 8005c56:	2104      	movs	r1, #4
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 fdb5 	bl	80067c8 <TIM_CCxChannelCmd>
      break;
 8005c5e:	e00e      	b.n	8005c7e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2201      	movs	r2, #1
 8005c66:	2100      	movs	r1, #0
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 fdad 	bl	80067c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2201      	movs	r2, #1
 8005c74:	2104      	movs	r1, #4
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 fda6 	bl	80067c8 <TIM_CCxChannelCmd>
      break;
 8005c7c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f042 0201 	orr.w	r2, r2, #1
 8005c8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d020      	beq.n	8005cfc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d01b      	beq.n	8005cfc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f06f 0202 	mvn.w	r2, #2
 8005ccc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	f003 0303 	and.w	r3, r3, #3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fa5b 	bl	800619e <HAL_TIM_IC_CaptureCallback>
 8005ce8:	e005      	b.n	8005cf6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fa4d 	bl	800618a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fa5e 	bl	80061b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f003 0304 	and.w	r3, r3, #4
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d020      	beq.n	8005d48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f003 0304 	and.w	r3, r3, #4
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d01b      	beq.n	8005d48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f06f 0204 	mvn.w	r2, #4
 8005d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fa35 	bl	800619e <HAL_TIM_IC_CaptureCallback>
 8005d34:	e005      	b.n	8005d42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fa27 	bl	800618a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fa38 	bl	80061b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	f003 0308 	and.w	r3, r3, #8
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d020      	beq.n	8005d94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f003 0308 	and.w	r3, r3, #8
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d01b      	beq.n	8005d94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f06f 0208 	mvn.w	r2, #8
 8005d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2204      	movs	r2, #4
 8005d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	f003 0303 	and.w	r3, r3, #3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d003      	beq.n	8005d82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fa0f 	bl	800619e <HAL_TIM_IC_CaptureCallback>
 8005d80:	e005      	b.n	8005d8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fa01 	bl	800618a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fa12 	bl	80061b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f003 0310 	and.w	r3, r3, #16
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d020      	beq.n	8005de0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f003 0310 	and.w	r3, r3, #16
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d01b      	beq.n	8005de0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f06f 0210 	mvn.w	r2, #16
 8005db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2208      	movs	r2, #8
 8005db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f9e9 	bl	800619e <HAL_TIM_IC_CaptureCallback>
 8005dcc:	e005      	b.n	8005dda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f9db 	bl	800618a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 f9ec 	bl	80061b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00c      	beq.n	8005e04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d007      	beq.n	8005e04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f06f 0201 	mvn.w	r2, #1
 8005dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fb f9b6 	bl	8001170 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00c      	beq.n	8005e28 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d007      	beq.n	8005e28 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fdce 	bl	80069c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00c      	beq.n	8005e4c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d007      	beq.n	8005e4c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f9bd 	bl	80061c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	f003 0320 	and.w	r3, r3, #32
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00c      	beq.n	8005e70 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f003 0320 	and.w	r3, r3, #32
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d007      	beq.n	8005e70 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f06f 0220 	mvn.w	r2, #32
 8005e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fda0 	bl	80069b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e70:	bf00      	nop
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e84:	2300      	movs	r3, #0
 8005e86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d101      	bne.n	8005e96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e92:	2302      	movs	r3, #2
 8005e94:	e0ae      	b.n	8005ff4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b0c      	cmp	r3, #12
 8005ea2:	f200 809f 	bhi.w	8005fe4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8005eac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eac:	08005ee1 	.word	0x08005ee1
 8005eb0:	08005fe5 	.word	0x08005fe5
 8005eb4:	08005fe5 	.word	0x08005fe5
 8005eb8:	08005fe5 	.word	0x08005fe5
 8005ebc:	08005f21 	.word	0x08005f21
 8005ec0:	08005fe5 	.word	0x08005fe5
 8005ec4:	08005fe5 	.word	0x08005fe5
 8005ec8:	08005fe5 	.word	0x08005fe5
 8005ecc:	08005f63 	.word	0x08005f63
 8005ed0:	08005fe5 	.word	0x08005fe5
 8005ed4:	08005fe5 	.word	0x08005fe5
 8005ed8:	08005fe5 	.word	0x08005fe5
 8005edc:	08005fa3 	.word	0x08005fa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68b9      	ldr	r1, [r7, #8]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 fa24 	bl	8006334 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699a      	ldr	r2, [r3, #24]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0208 	orr.w	r2, r2, #8
 8005efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699a      	ldr	r2, [r3, #24]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0204 	bic.w	r2, r2, #4
 8005f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6999      	ldr	r1, [r3, #24]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	691a      	ldr	r2, [r3, #16]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	619a      	str	r2, [r3, #24]
      break;
 8005f1e:	e064      	b.n	8005fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68b9      	ldr	r1, [r7, #8]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 fa74 	bl	8006414 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	699a      	ldr	r2, [r3, #24]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699a      	ldr	r2, [r3, #24]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6999      	ldr	r1, [r3, #24]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	021a      	lsls	r2, r3, #8
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	619a      	str	r2, [r3, #24]
      break;
 8005f60:	e043      	b.n	8005fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68b9      	ldr	r1, [r7, #8]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 fac9 	bl	8006500 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69da      	ldr	r2, [r3, #28]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f042 0208 	orr.w	r2, r2, #8
 8005f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69da      	ldr	r2, [r3, #28]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 0204 	bic.w	r2, r2, #4
 8005f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69d9      	ldr	r1, [r3, #28]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	691a      	ldr	r2, [r3, #16]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	61da      	str	r2, [r3, #28]
      break;
 8005fa0:	e023      	b.n	8005fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68b9      	ldr	r1, [r7, #8]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 fb1d 	bl	80065e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	69da      	ldr	r2, [r3, #28]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69da      	ldr	r2, [r3, #28]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69d9      	ldr	r1, [r3, #28]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	021a      	lsls	r2, r3, #8
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	61da      	str	r2, [r3, #28]
      break;
 8005fe2:	e002      	b.n	8005fea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8005fe8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3718      	adds	r7, #24
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006010:	2b01      	cmp	r3, #1
 8006012:	d101      	bne.n	8006018 <HAL_TIM_ConfigClockSource+0x1c>
 8006014:	2302      	movs	r3, #2
 8006016:	e0b4      	b.n	8006182 <HAL_TIM_ConfigClockSource+0x186>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006036:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800603e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006050:	d03e      	beq.n	80060d0 <HAL_TIM_ConfigClockSource+0xd4>
 8006052:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006056:	f200 8087 	bhi.w	8006168 <HAL_TIM_ConfigClockSource+0x16c>
 800605a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800605e:	f000 8086 	beq.w	800616e <HAL_TIM_ConfigClockSource+0x172>
 8006062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006066:	d87f      	bhi.n	8006168 <HAL_TIM_ConfigClockSource+0x16c>
 8006068:	2b70      	cmp	r3, #112	@ 0x70
 800606a:	d01a      	beq.n	80060a2 <HAL_TIM_ConfigClockSource+0xa6>
 800606c:	2b70      	cmp	r3, #112	@ 0x70
 800606e:	d87b      	bhi.n	8006168 <HAL_TIM_ConfigClockSource+0x16c>
 8006070:	2b60      	cmp	r3, #96	@ 0x60
 8006072:	d050      	beq.n	8006116 <HAL_TIM_ConfigClockSource+0x11a>
 8006074:	2b60      	cmp	r3, #96	@ 0x60
 8006076:	d877      	bhi.n	8006168 <HAL_TIM_ConfigClockSource+0x16c>
 8006078:	2b50      	cmp	r3, #80	@ 0x50
 800607a:	d03c      	beq.n	80060f6 <HAL_TIM_ConfigClockSource+0xfa>
 800607c:	2b50      	cmp	r3, #80	@ 0x50
 800607e:	d873      	bhi.n	8006168 <HAL_TIM_ConfigClockSource+0x16c>
 8006080:	2b40      	cmp	r3, #64	@ 0x40
 8006082:	d058      	beq.n	8006136 <HAL_TIM_ConfigClockSource+0x13a>
 8006084:	2b40      	cmp	r3, #64	@ 0x40
 8006086:	d86f      	bhi.n	8006168 <HAL_TIM_ConfigClockSource+0x16c>
 8006088:	2b30      	cmp	r3, #48	@ 0x30
 800608a:	d064      	beq.n	8006156 <HAL_TIM_ConfigClockSource+0x15a>
 800608c:	2b30      	cmp	r3, #48	@ 0x30
 800608e:	d86b      	bhi.n	8006168 <HAL_TIM_ConfigClockSource+0x16c>
 8006090:	2b20      	cmp	r3, #32
 8006092:	d060      	beq.n	8006156 <HAL_TIM_ConfigClockSource+0x15a>
 8006094:	2b20      	cmp	r3, #32
 8006096:	d867      	bhi.n	8006168 <HAL_TIM_ConfigClockSource+0x16c>
 8006098:	2b00      	cmp	r3, #0
 800609a:	d05c      	beq.n	8006156 <HAL_TIM_ConfigClockSource+0x15a>
 800609c:	2b10      	cmp	r3, #16
 800609e:	d05a      	beq.n	8006156 <HAL_TIM_ConfigClockSource+0x15a>
 80060a0:	e062      	b.n	8006168 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060b2:	f000 fb69 	bl	8006788 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80060c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	609a      	str	r2, [r3, #8]
      break;
 80060ce:	e04f      	b.n	8006170 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060e0:	f000 fb52 	bl	8006788 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689a      	ldr	r2, [r3, #8]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060f2:	609a      	str	r2, [r3, #8]
      break;
 80060f4:	e03c      	b.n	8006170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006102:	461a      	mov	r2, r3
 8006104:	f000 fac6 	bl	8006694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2150      	movs	r1, #80	@ 0x50
 800610e:	4618      	mov	r0, r3
 8006110:	f000 fb1f 	bl	8006752 <TIM_ITRx_SetConfig>
      break;
 8006114:	e02c      	b.n	8006170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006122:	461a      	mov	r2, r3
 8006124:	f000 fae5 	bl	80066f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2160      	movs	r1, #96	@ 0x60
 800612e:	4618      	mov	r0, r3
 8006130:	f000 fb0f 	bl	8006752 <TIM_ITRx_SetConfig>
      break;
 8006134:	e01c      	b.n	8006170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006142:	461a      	mov	r2, r3
 8006144:	f000 faa6 	bl	8006694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2140      	movs	r1, #64	@ 0x40
 800614e:	4618      	mov	r0, r3
 8006150:	f000 faff 	bl	8006752 <TIM_ITRx_SetConfig>
      break;
 8006154:	e00c      	b.n	8006170 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4619      	mov	r1, r3
 8006160:	4610      	mov	r0, r2
 8006162:	f000 faf6 	bl	8006752 <TIM_ITRx_SetConfig>
      break;
 8006166:	e003      	b.n	8006170 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	73fb      	strb	r3, [r7, #15]
      break;
 800616c:	e000      	b.n	8006170 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800616e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006180:	7bfb      	ldrb	r3, [r7, #15]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006192:	bf00      	nop
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b083      	sub	sp, #12
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061ba:	bf00      	nop
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
	...

080061dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a46      	ldr	r2, [pc, #280]	@ (8006308 <TIM_Base_SetConfig+0x12c>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d013      	beq.n	800621c <TIM_Base_SetConfig+0x40>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061fa:	d00f      	beq.n	800621c <TIM_Base_SetConfig+0x40>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a43      	ldr	r2, [pc, #268]	@ (800630c <TIM_Base_SetConfig+0x130>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d00b      	beq.n	800621c <TIM_Base_SetConfig+0x40>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a42      	ldr	r2, [pc, #264]	@ (8006310 <TIM_Base_SetConfig+0x134>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d007      	beq.n	800621c <TIM_Base_SetConfig+0x40>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a41      	ldr	r2, [pc, #260]	@ (8006314 <TIM_Base_SetConfig+0x138>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d003      	beq.n	800621c <TIM_Base_SetConfig+0x40>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a40      	ldr	r2, [pc, #256]	@ (8006318 <TIM_Base_SetConfig+0x13c>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d108      	bne.n	800622e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	4313      	orrs	r3, r2
 800622c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a35      	ldr	r2, [pc, #212]	@ (8006308 <TIM_Base_SetConfig+0x12c>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d02b      	beq.n	800628e <TIM_Base_SetConfig+0xb2>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800623c:	d027      	beq.n	800628e <TIM_Base_SetConfig+0xb2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a32      	ldr	r2, [pc, #200]	@ (800630c <TIM_Base_SetConfig+0x130>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d023      	beq.n	800628e <TIM_Base_SetConfig+0xb2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a31      	ldr	r2, [pc, #196]	@ (8006310 <TIM_Base_SetConfig+0x134>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d01f      	beq.n	800628e <TIM_Base_SetConfig+0xb2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a30      	ldr	r2, [pc, #192]	@ (8006314 <TIM_Base_SetConfig+0x138>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d01b      	beq.n	800628e <TIM_Base_SetConfig+0xb2>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a2f      	ldr	r2, [pc, #188]	@ (8006318 <TIM_Base_SetConfig+0x13c>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d017      	beq.n	800628e <TIM_Base_SetConfig+0xb2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a2e      	ldr	r2, [pc, #184]	@ (800631c <TIM_Base_SetConfig+0x140>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d013      	beq.n	800628e <TIM_Base_SetConfig+0xb2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a2d      	ldr	r2, [pc, #180]	@ (8006320 <TIM_Base_SetConfig+0x144>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d00f      	beq.n	800628e <TIM_Base_SetConfig+0xb2>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a2c      	ldr	r2, [pc, #176]	@ (8006324 <TIM_Base_SetConfig+0x148>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d00b      	beq.n	800628e <TIM_Base_SetConfig+0xb2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a2b      	ldr	r2, [pc, #172]	@ (8006328 <TIM_Base_SetConfig+0x14c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d007      	beq.n	800628e <TIM_Base_SetConfig+0xb2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a2a      	ldr	r2, [pc, #168]	@ (800632c <TIM_Base_SetConfig+0x150>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d003      	beq.n	800628e <TIM_Base_SetConfig+0xb2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a29      	ldr	r2, [pc, #164]	@ (8006330 <TIM_Base_SetConfig+0x154>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d108      	bne.n	80062a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	4313      	orrs	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	689a      	ldr	r2, [r3, #8]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a10      	ldr	r2, [pc, #64]	@ (8006308 <TIM_Base_SetConfig+0x12c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d003      	beq.n	80062d4 <TIM_Base_SetConfig+0xf8>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a12      	ldr	r2, [pc, #72]	@ (8006318 <TIM_Base_SetConfig+0x13c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d103      	bne.n	80062dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	691a      	ldr	r2, [r3, #16]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d105      	bne.n	80062fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	f023 0201 	bic.w	r2, r3, #1
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	611a      	str	r2, [r3, #16]
  }
}
 80062fa:	bf00      	nop
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	40010000 	.word	0x40010000
 800630c:	40000400 	.word	0x40000400
 8006310:	40000800 	.word	0x40000800
 8006314:	40000c00 	.word	0x40000c00
 8006318:	40010400 	.word	0x40010400
 800631c:	40014000 	.word	0x40014000
 8006320:	40014400 	.word	0x40014400
 8006324:	40014800 	.word	0x40014800
 8006328:	40001800 	.word	0x40001800
 800632c:	40001c00 	.word	0x40001c00
 8006330:	40002000 	.word	0x40002000

08006334 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006334:	b480      	push	{r7}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	f023 0201 	bic.w	r2, r3, #1
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 0303 	bic.w	r3, r3, #3
 800636a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	4313      	orrs	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f023 0302 	bic.w	r3, r3, #2
 800637c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	4313      	orrs	r3, r2
 8006386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a20      	ldr	r2, [pc, #128]	@ (800640c <TIM_OC1_SetConfig+0xd8>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d003      	beq.n	8006398 <TIM_OC1_SetConfig+0x64>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a1f      	ldr	r2, [pc, #124]	@ (8006410 <TIM_OC1_SetConfig+0xdc>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d10c      	bne.n	80063b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f023 0308 	bic.w	r3, r3, #8
 800639e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f023 0304 	bic.w	r3, r3, #4
 80063b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a15      	ldr	r2, [pc, #84]	@ (800640c <TIM_OC1_SetConfig+0xd8>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d003      	beq.n	80063c2 <TIM_OC1_SetConfig+0x8e>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a14      	ldr	r2, [pc, #80]	@ (8006410 <TIM_OC1_SetConfig+0xdc>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d111      	bne.n	80063e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	4313      	orrs	r3, r2
 80063da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	621a      	str	r2, [r3, #32]
}
 8006400:	bf00      	nop
 8006402:	371c      	adds	r7, #28
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	40010000 	.word	0x40010000
 8006410:	40010400 	.word	0x40010400

08006414 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a1b      	ldr	r3, [r3, #32]
 8006428:	f023 0210 	bic.w	r2, r3, #16
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800644a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	021b      	lsls	r3, r3, #8
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	4313      	orrs	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f023 0320 	bic.w	r3, r3, #32
 800645e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	011b      	lsls	r3, r3, #4
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a22      	ldr	r2, [pc, #136]	@ (80064f8 <TIM_OC2_SetConfig+0xe4>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d003      	beq.n	800647c <TIM_OC2_SetConfig+0x68>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a21      	ldr	r2, [pc, #132]	@ (80064fc <TIM_OC2_SetConfig+0xe8>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d10d      	bne.n	8006498 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	011b      	lsls	r3, r3, #4
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	4313      	orrs	r3, r2
 800648e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006496:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a17      	ldr	r2, [pc, #92]	@ (80064f8 <TIM_OC2_SetConfig+0xe4>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d003      	beq.n	80064a8 <TIM_OC2_SetConfig+0x94>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a16      	ldr	r2, [pc, #88]	@ (80064fc <TIM_OC2_SetConfig+0xe8>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d113      	bne.n	80064d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80064ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	621a      	str	r2, [r3, #32]
}
 80064ea:	bf00      	nop
 80064ec:	371c      	adds	r7, #28
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	40010000 	.word	0x40010000
 80064fc:	40010400 	.word	0x40010400

08006500 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006500:	b480      	push	{r7}
 8006502:	b087      	sub	sp, #28
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800652e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f023 0303 	bic.w	r3, r3, #3
 8006536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	4313      	orrs	r3, r2
 8006540:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006548:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	021b      	lsls	r3, r3, #8
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	4313      	orrs	r3, r2
 8006554:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a21      	ldr	r2, [pc, #132]	@ (80065e0 <TIM_OC3_SetConfig+0xe0>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d003      	beq.n	8006566 <TIM_OC3_SetConfig+0x66>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a20      	ldr	r2, [pc, #128]	@ (80065e4 <TIM_OC3_SetConfig+0xe4>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d10d      	bne.n	8006582 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800656c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	021b      	lsls	r3, r3, #8
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	4313      	orrs	r3, r2
 8006578:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006580:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a16      	ldr	r2, [pc, #88]	@ (80065e0 <TIM_OC3_SetConfig+0xe0>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d003      	beq.n	8006592 <TIM_OC3_SetConfig+0x92>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a15      	ldr	r2, [pc, #84]	@ (80065e4 <TIM_OC3_SetConfig+0xe4>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d113      	bne.n	80065ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	011b      	lsls	r3, r3, #4
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	011b      	lsls	r3, r3, #4
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	621a      	str	r2, [r3, #32]
}
 80065d4:	bf00      	nop
 80065d6:	371c      	adds	r7, #28
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	40010000 	.word	0x40010000
 80065e4:	40010400 	.word	0x40010400

080065e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800661e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	021b      	lsls	r3, r3, #8
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	4313      	orrs	r3, r2
 800662a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006632:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	031b      	lsls	r3, r3, #12
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	4313      	orrs	r3, r2
 800663e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a12      	ldr	r2, [pc, #72]	@ (800668c <TIM_OC4_SetConfig+0xa4>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d003      	beq.n	8006650 <TIM_OC4_SetConfig+0x68>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a11      	ldr	r2, [pc, #68]	@ (8006690 <TIM_OC4_SetConfig+0xa8>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d109      	bne.n	8006664 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006656:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	019b      	lsls	r3, r3, #6
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	4313      	orrs	r3, r2
 8006662:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685a      	ldr	r2, [r3, #4]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	621a      	str	r2, [r3, #32]
}
 800667e:	bf00      	nop
 8006680:	371c      	adds	r7, #28
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	40010000 	.word	0x40010000
 8006690:	40010400 	.word	0x40010400

08006694 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	f023 0201 	bic.w	r2, r3, #1
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	011b      	lsls	r3, r3, #4
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f023 030a 	bic.w	r3, r3, #10
 80066d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	621a      	str	r2, [r3, #32]
}
 80066e6:	bf00      	nop
 80066e8:	371c      	adds	r7, #28
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b087      	sub	sp, #28
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	60f8      	str	r0, [r7, #12]
 80066fa:	60b9      	str	r1, [r7, #8]
 80066fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6a1b      	ldr	r3, [r3, #32]
 8006708:	f023 0210 	bic.w	r2, r3, #16
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800671c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	031b      	lsls	r3, r3, #12
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	4313      	orrs	r3, r2
 8006726:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800672e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	011b      	lsls	r3, r3, #4
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	4313      	orrs	r3, r2
 8006738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	621a      	str	r2, [r3, #32]
}
 8006746:	bf00      	nop
 8006748:	371c      	adds	r7, #28
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006752:	b480      	push	{r7}
 8006754:	b085      	sub	sp, #20
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006768:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4313      	orrs	r3, r2
 8006770:	f043 0307 	orr.w	r3, r3, #7
 8006774:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	609a      	str	r2, [r3, #8]
}
 800677c:	bf00      	nop
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
 8006794:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	021a      	lsls	r2, r3, #8
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	431a      	orrs	r2, r3
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	609a      	str	r2, [r3, #8]
}
 80067bc:	bf00      	nop
 80067be:	371c      	adds	r7, #28
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b087      	sub	sp, #28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f003 031f 	and.w	r3, r3, #31
 80067da:	2201      	movs	r2, #1
 80067dc:	fa02 f303 	lsl.w	r3, r2, r3
 80067e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6a1a      	ldr	r2, [r3, #32]
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	43db      	mvns	r3, r3
 80067ea:	401a      	ands	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6a1a      	ldr	r2, [r3, #32]
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f003 031f 	and.w	r3, r3, #31
 80067fa:	6879      	ldr	r1, [r7, #4]
 80067fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006800:	431a      	orrs	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	621a      	str	r2, [r3, #32]
}
 8006806:	bf00      	nop
 8006808:	371c      	adds	r7, #28
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
	...

08006814 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006824:	2b01      	cmp	r3, #1
 8006826:	d101      	bne.n	800682c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006828:	2302      	movs	r3, #2
 800682a:	e05a      	b.n	80068e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2202      	movs	r2, #2
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006852:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	4313      	orrs	r3, r2
 800685c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a21      	ldr	r2, [pc, #132]	@ (80068f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d022      	beq.n	80068b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006878:	d01d      	beq.n	80068b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a1d      	ldr	r2, [pc, #116]	@ (80068f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d018      	beq.n	80068b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a1b      	ldr	r2, [pc, #108]	@ (80068f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d013      	beq.n	80068b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a1a      	ldr	r2, [pc, #104]	@ (80068fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00e      	beq.n	80068b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a18      	ldr	r2, [pc, #96]	@ (8006900 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d009      	beq.n	80068b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a17      	ldr	r2, [pc, #92]	@ (8006904 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d004      	beq.n	80068b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a15      	ldr	r2, [pc, #84]	@ (8006908 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d10c      	bne.n	80068d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	40010000 	.word	0x40010000
 80068f4:	40000400 	.word	0x40000400
 80068f8:	40000800 	.word	0x40000800
 80068fc:	40000c00 	.word	0x40000c00
 8006900:	40010400 	.word	0x40010400
 8006904:	40014000 	.word	0x40014000
 8006908:	40001800 	.word	0x40001800

0800690c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006916:	2300      	movs	r3, #0
 8006918:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006920:	2b01      	cmp	r3, #1
 8006922:	d101      	bne.n	8006928 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006924:	2302      	movs	r3, #2
 8006926:	e03d      	b.n	80069a4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	4313      	orrs	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	4313      	orrs	r3, r2
 8006958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4313      	orrs	r3, r2
 8006966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	4313      	orrs	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	4313      	orrs	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	69db      	ldr	r3, [r3, #28]
 800698e:	4313      	orrs	r3, r2
 8006990:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e042      	b.n	8006a70 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d106      	bne.n	8006a04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7fc fafc 	bl	8002ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2224      	movs	r2, #36	@ 0x24
 8006a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68da      	ldr	r2, [r3, #12]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fe61 	bl	80076e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	691a      	ldr	r2, [r3, #16]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	695a      	ldr	r2, [r3, #20]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68da      	ldr	r2, [r3, #12]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2220      	movs	r2, #32
 8006a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3708      	adds	r7, #8
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	4613      	mov	r3, r2
 8006a84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b20      	cmp	r3, #32
 8006a90:	d112      	bne.n	8006ab8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d002      	beq.n	8006a9e <HAL_UART_Receive_DMA+0x26>
 8006a98:	88fb      	ldrh	r3, [r7, #6]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d101      	bne.n	8006aa2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e00b      	b.n	8006aba <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006aa8:	88fb      	ldrh	r3, [r7, #6]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	68b9      	ldr	r1, [r7, #8]
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 fbb8 	bl	8007224 <UART_Start_Receive_DMA>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	e000      	b.n	8006aba <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006ab8:	2302      	movs	r3, #2
  }
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
	...

08006ac4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b0ba      	sub	sp, #232	@ 0xe8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006afa:	f003 030f 	and.w	r3, r3, #15
 8006afe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006b02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10f      	bne.n	8006b2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b0e:	f003 0320 	and.w	r3, r3, #32
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d009      	beq.n	8006b2a <HAL_UART_IRQHandler+0x66>
 8006b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b1a:	f003 0320 	and.w	r3, r3, #32
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d003      	beq.n	8006b2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fd1f 	bl	8007566 <UART_Receive_IT>
      return;
 8006b28:	e25b      	b.n	8006fe2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006b2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 80de 	beq.w	8006cf0 <HAL_UART_IRQHandler+0x22c>
 8006b34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d106      	bne.n	8006b4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b44:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 80d1 	beq.w	8006cf0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00b      	beq.n	8006b72 <HAL_UART_IRQHandler+0xae>
 8006b5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d005      	beq.n	8006b72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b6a:	f043 0201 	orr.w	r2, r3, #1
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b76:	f003 0304 	and.w	r3, r3, #4
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00b      	beq.n	8006b96 <HAL_UART_IRQHandler+0xd2>
 8006b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d005      	beq.n	8006b96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b8e:	f043 0202 	orr.w	r2, r3, #2
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00b      	beq.n	8006bba <HAL_UART_IRQHandler+0xf6>
 8006ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d005      	beq.n	8006bba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bb2:	f043 0204 	orr.w	r2, r3, #4
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bbe:	f003 0308 	and.w	r3, r3, #8
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d011      	beq.n	8006bea <HAL_UART_IRQHandler+0x126>
 8006bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d105      	bne.n	8006bde <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d005      	beq.n	8006bea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006be2:	f043 0208 	orr.w	r2, r3, #8
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f000 81f2 	beq.w	8006fd8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bf8:	f003 0320 	and.w	r3, r3, #32
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d008      	beq.n	8006c12 <HAL_UART_IRQHandler+0x14e>
 8006c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c04:	f003 0320 	and.w	r3, r3, #32
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d002      	beq.n	8006c12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fcaa 	bl	8007566 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c1c:	2b40      	cmp	r3, #64	@ 0x40
 8006c1e:	bf0c      	ite	eq
 8006c20:	2301      	moveq	r3, #1
 8006c22:	2300      	movne	r3, #0
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c2e:	f003 0308 	and.w	r3, r3, #8
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d103      	bne.n	8006c3e <HAL_UART_IRQHandler+0x17a>
 8006c36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d04f      	beq.n	8006cde <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fbb2 	bl	80073a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c4e:	2b40      	cmp	r3, #64	@ 0x40
 8006c50:	d141      	bne.n	8006cd6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	3314      	adds	r3, #20
 8006c58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c60:	e853 3f00 	ldrex	r3, [r3]
 8006c64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006c68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	3314      	adds	r3, #20
 8006c7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006c82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006c8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006c8e:	e841 2300 	strex	r3, r2, [r1]
 8006c92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1d9      	bne.n	8006c52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d013      	beq.n	8006cce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006caa:	4a7e      	ldr	r2, [pc, #504]	@ (8006ea4 <HAL_UART_IRQHandler+0x3e0>)
 8006cac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fd f852 	bl	8003d5c <HAL_DMA_Abort_IT>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d016      	beq.n	8006cec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006cc8:	4610      	mov	r0, r2
 8006cca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ccc:	e00e      	b.n	8006cec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f994 	bl	8006ffc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd4:	e00a      	b.n	8006cec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f990 	bl	8006ffc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cdc:	e006      	b.n	8006cec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f98c 	bl	8006ffc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006cea:	e175      	b.n	8006fd8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cec:	bf00      	nop
    return;
 8006cee:	e173      	b.n	8006fd8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	f040 814f 	bne.w	8006f98 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cfe:	f003 0310 	and.w	r3, r3, #16
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 8148 	beq.w	8006f98 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d0c:	f003 0310 	and.w	r3, r3, #16
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 8141 	beq.w	8006f98 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d16:	2300      	movs	r3, #0
 8006d18:	60bb      	str	r3, [r7, #8]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	60bb      	str	r3, [r7, #8]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	60bb      	str	r3, [r7, #8]
 8006d2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d36:	2b40      	cmp	r3, #64	@ 0x40
 8006d38:	f040 80b6 	bne.w	8006ea8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f000 8145 	beq.w	8006fdc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	f080 813e 	bcs.w	8006fdc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d66:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d6c:	69db      	ldr	r3, [r3, #28]
 8006d6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d72:	f000 8088 	beq.w	8006e86 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	330c      	adds	r3, #12
 8006d7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d84:	e853 3f00 	ldrex	r3, [r3]
 8006d88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006d8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	330c      	adds	r3, #12
 8006d9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006da2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006da6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006daa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006dae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006db2:	e841 2300 	strex	r3, r2, [r1]
 8006db6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006dba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1d9      	bne.n	8006d76 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3314      	adds	r3, #20
 8006dc8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006dcc:	e853 3f00 	ldrex	r3, [r3]
 8006dd0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006dd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006dd4:	f023 0301 	bic.w	r3, r3, #1
 8006dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	3314      	adds	r3, #20
 8006de2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006de6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006dea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006dee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006df2:	e841 2300 	strex	r3, r2, [r1]
 8006df6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006df8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1e1      	bne.n	8006dc2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	3314      	adds	r3, #20
 8006e04:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e08:	e853 3f00 	ldrex	r3, [r3]
 8006e0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006e0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	3314      	adds	r3, #20
 8006e1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006e22:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006e24:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e26:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006e28:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006e2a:	e841 2300 	strex	r3, r2, [r1]
 8006e2e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006e30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1e3      	bne.n	8006dfe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2220      	movs	r2, #32
 8006e3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	330c      	adds	r3, #12
 8006e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e4e:	e853 3f00 	ldrex	r3, [r3]
 8006e52:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e56:	f023 0310 	bic.w	r3, r3, #16
 8006e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	330c      	adds	r3, #12
 8006e64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006e68:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006e6a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e70:	e841 2300 	strex	r3, r2, [r1]
 8006e74:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1e3      	bne.n	8006e44 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7fc fefb 	bl	8003c7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2202      	movs	r2, #2
 8006e8a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 f8b7 	bl	8007010 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ea2:	e09b      	b.n	8006fdc <HAL_UART_IRQHandler+0x518>
 8006ea4:	0800746f 	.word	0x0800746f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f000 808e 	beq.w	8006fe0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006ec4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 8089 	beq.w	8006fe0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	330c      	adds	r3, #12
 8006ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed8:	e853 3f00 	ldrex	r3, [r3]
 8006edc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ee4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	330c      	adds	r3, #12
 8006eee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006ef2:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ef4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ef8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006efa:	e841 2300 	strex	r3, r2, [r1]
 8006efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1e3      	bne.n	8006ece <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3314      	adds	r3, #20
 8006f0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f10:	e853 3f00 	ldrex	r3, [r3]
 8006f14:	623b      	str	r3, [r7, #32]
   return(result);
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	f023 0301 	bic.w	r3, r3, #1
 8006f1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3314      	adds	r3, #20
 8006f26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006f2a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f32:	e841 2300 	strex	r3, r2, [r1]
 8006f36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1e3      	bne.n	8006f06 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2220      	movs	r2, #32
 8006f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	330c      	adds	r3, #12
 8006f52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	e853 3f00 	ldrex	r3, [r3]
 8006f5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f023 0310 	bic.w	r3, r3, #16
 8006f62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	330c      	adds	r3, #12
 8006f6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006f70:	61fa      	str	r2, [r7, #28]
 8006f72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f74:	69b9      	ldr	r1, [r7, #24]
 8006f76:	69fa      	ldr	r2, [r7, #28]
 8006f78:	e841 2300 	strex	r3, r2, [r1]
 8006f7c:	617b      	str	r3, [r7, #20]
   return(result);
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1e3      	bne.n	8006f4c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2202      	movs	r2, #2
 8006f88:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 f83d 	bl	8007010 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f96:	e023      	b.n	8006fe0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d009      	beq.n	8006fb8 <HAL_UART_IRQHandler+0x4f4>
 8006fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d003      	beq.n	8006fb8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 fa70 	bl	8007496 <UART_Transmit_IT>
    return;
 8006fb6:	e014      	b.n	8006fe2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00e      	beq.n	8006fe2 <HAL_UART_IRQHandler+0x51e>
 8006fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d008      	beq.n	8006fe2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fab0 	bl	8007536 <UART_EndTransmit_IT>
    return;
 8006fd6:	e004      	b.n	8006fe2 <HAL_UART_IRQHandler+0x51e>
    return;
 8006fd8:	bf00      	nop
 8006fda:	e002      	b.n	8006fe2 <HAL_UART_IRQHandler+0x51e>
      return;
 8006fdc:	bf00      	nop
 8006fde:	e000      	b.n	8006fe2 <HAL_UART_IRQHandler+0x51e>
      return;
 8006fe0:	bf00      	nop
  }
}
 8006fe2:	37e8      	adds	r7, #232	@ 0xe8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	460b      	mov	r3, r1
 800701a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b09c      	sub	sp, #112	@ 0x70
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007034:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007040:	2b00      	cmp	r3, #0
 8007042:	d172      	bne.n	800712a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007044:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007046:	2200      	movs	r2, #0
 8007048:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800704a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	330c      	adds	r3, #12
 8007050:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007054:	e853 3f00 	ldrex	r3, [r3]
 8007058:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800705a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800705c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007060:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007062:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	330c      	adds	r3, #12
 8007068:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800706a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800706c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007070:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007072:	e841 2300 	strex	r3, r2, [r1]
 8007076:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007078:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1e5      	bne.n	800704a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800707e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	3314      	adds	r3, #20
 8007084:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007088:	e853 3f00 	ldrex	r3, [r3]
 800708c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800708e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007090:	f023 0301 	bic.w	r3, r3, #1
 8007094:	667b      	str	r3, [r7, #100]	@ 0x64
 8007096:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	3314      	adds	r3, #20
 800709c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800709e:	647a      	str	r2, [r7, #68]	@ 0x44
 80070a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070a6:	e841 2300 	strex	r3, r2, [r1]
 80070aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1e5      	bne.n	800707e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	3314      	adds	r3, #20
 80070b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070bc:	e853 3f00 	ldrex	r3, [r3]
 80070c0:	623b      	str	r3, [r7, #32]
   return(result);
 80070c2:	6a3b      	ldr	r3, [r7, #32]
 80070c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80070ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	3314      	adds	r3, #20
 80070d0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80070d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80070d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070da:	e841 2300 	strex	r3, r2, [r1]
 80070de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1e5      	bne.n	80070b2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80070e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070e8:	2220      	movs	r2, #32
 80070ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d119      	bne.n	800712a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	330c      	adds	r3, #12
 80070fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	e853 3f00 	ldrex	r3, [r3]
 8007104:	60fb      	str	r3, [r7, #12]
   return(result);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f023 0310 	bic.w	r3, r3, #16
 800710c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800710e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	330c      	adds	r3, #12
 8007114:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007116:	61fa      	str	r2, [r7, #28]
 8007118:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711a:	69b9      	ldr	r1, [r7, #24]
 800711c:	69fa      	ldr	r2, [r7, #28]
 800711e:	e841 2300 	strex	r3, r2, [r1]
 8007122:	617b      	str	r3, [r7, #20]
   return(result);
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1e5      	bne.n	80070f6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800712a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800712c:	2200      	movs	r2, #0
 800712e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007130:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007134:	2b01      	cmp	r3, #1
 8007136:	d106      	bne.n	8007146 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007138:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800713a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800713c:	4619      	mov	r1, r3
 800713e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007140:	f7ff ff66 	bl	8007010 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007144:	e002      	b.n	800714c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007146:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007148:	f7fa f946 	bl	80013d8 <HAL_UART_RxCpltCallback>
}
 800714c:	bf00      	nop
 800714e:	3770      	adds	r7, #112	@ 0x70
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007160:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2201      	movs	r2, #1
 8007166:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800716c:	2b01      	cmp	r3, #1
 800716e:	d108      	bne.n	8007182 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007174:	085b      	lsrs	r3, r3, #1
 8007176:	b29b      	uxth	r3, r3
 8007178:	4619      	mov	r1, r3
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f7ff ff48 	bl	8007010 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007180:	e002      	b.n	8007188 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f7ff ff30 	bl	8006fe8 <HAL_UART_RxHalfCpltCallback>
}
 8007188:	bf00      	nop
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007198:	2300      	movs	r3, #0
 800719a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071ac:	2b80      	cmp	r3, #128	@ 0x80
 80071ae:	bf0c      	ite	eq
 80071b0:	2301      	moveq	r3, #1
 80071b2:	2300      	movne	r3, #0
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b21      	cmp	r3, #33	@ 0x21
 80071c2:	d108      	bne.n	80071d6 <UART_DMAError+0x46>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d005      	beq.n	80071d6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	2200      	movs	r2, #0
 80071ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80071d0:	68b8      	ldr	r0, [r7, #8]
 80071d2:	f000 f8c1 	bl	8007358 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	695b      	ldr	r3, [r3, #20]
 80071dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071e0:	2b40      	cmp	r3, #64	@ 0x40
 80071e2:	bf0c      	ite	eq
 80071e4:	2301      	moveq	r3, #1
 80071e6:	2300      	movne	r3, #0
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b22      	cmp	r3, #34	@ 0x22
 80071f6:	d108      	bne.n	800720a <UART_DMAError+0x7a>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d005      	beq.n	800720a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	2200      	movs	r2, #0
 8007202:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007204:	68b8      	ldr	r0, [r7, #8]
 8007206:	f000 f8cf 	bl	80073a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800720e:	f043 0210 	orr.w	r2, r3, #16
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007216:	68b8      	ldr	r0, [r7, #8]
 8007218:	f7ff fef0 	bl	8006ffc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800721c:	bf00      	nop
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b098      	sub	sp, #96	@ 0x60
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	4613      	mov	r3, r2
 8007230:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	88fa      	ldrh	r2, [r7, #6]
 800723c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2222      	movs	r2, #34	@ 0x22
 8007248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007250:	4a3e      	ldr	r2, [pc, #248]	@ (800734c <UART_Start_Receive_DMA+0x128>)
 8007252:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007258:	4a3d      	ldr	r2, [pc, #244]	@ (8007350 <UART_Start_Receive_DMA+0x12c>)
 800725a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007260:	4a3c      	ldr	r2, [pc, #240]	@ (8007354 <UART_Start_Receive_DMA+0x130>)
 8007262:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007268:	2200      	movs	r2, #0
 800726a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800726c:	f107 0308 	add.w	r3, r7, #8
 8007270:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	3304      	adds	r3, #4
 800727c:	4619      	mov	r1, r3
 800727e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	88fb      	ldrh	r3, [r7, #6]
 8007284:	f7fc fca2 	bl	8003bcc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007288:	2300      	movs	r3, #0
 800728a:	613b      	str	r3, [r7, #16]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	613b      	str	r3, [r7, #16]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	613b      	str	r3, [r7, #16]
 800729c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d019      	beq.n	80072da <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	330c      	adds	r3, #12
 80072ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072b0:	e853 3f00 	ldrex	r3, [r3]
 80072b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	330c      	adds	r3, #12
 80072c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072c6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80072c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ca:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80072cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80072d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1e5      	bne.n	80072a6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3314      	adds	r3, #20
 80072e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e4:	e853 3f00 	ldrex	r3, [r3]
 80072e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ec:	f043 0301 	orr.w	r3, r3, #1
 80072f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	3314      	adds	r3, #20
 80072f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80072fa:	63ba      	str	r2, [r7, #56]	@ 0x38
 80072fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007300:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007302:	e841 2300 	strex	r3, r2, [r1]
 8007306:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1e5      	bne.n	80072da <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	3314      	adds	r3, #20
 8007314:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	e853 3f00 	ldrex	r3, [r3]
 800731c:	617b      	str	r3, [r7, #20]
   return(result);
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007324:	653b      	str	r3, [r7, #80]	@ 0x50
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	3314      	adds	r3, #20
 800732c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800732e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007330:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	6a39      	ldr	r1, [r7, #32]
 8007334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	61fb      	str	r3, [r7, #28]
   return(result);
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e5      	bne.n	800730e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3760      	adds	r7, #96	@ 0x60
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	08007029 	.word	0x08007029
 8007350:	08007155 	.word	0x08007155
 8007354:	08007191 	.word	0x08007191

08007358 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007358:	b480      	push	{r7}
 800735a:	b089      	sub	sp, #36	@ 0x24
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	330c      	adds	r3, #12
 8007366:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	e853 3f00 	ldrex	r3, [r3]
 800736e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007376:	61fb      	str	r3, [r7, #28]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	330c      	adds	r3, #12
 800737e:	69fa      	ldr	r2, [r7, #28]
 8007380:	61ba      	str	r2, [r7, #24]
 8007382:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007384:	6979      	ldr	r1, [r7, #20]
 8007386:	69ba      	ldr	r2, [r7, #24]
 8007388:	e841 2300 	strex	r3, r2, [r1]
 800738c:	613b      	str	r3, [r7, #16]
   return(result);
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1e5      	bne.n	8007360 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2220      	movs	r2, #32
 8007398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800739c:	bf00      	nop
 800739e:	3724      	adds	r7, #36	@ 0x24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b095      	sub	sp, #84	@ 0x54
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	330c      	adds	r3, #12
 80073b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ba:	e853 3f00 	ldrex	r3, [r3]
 80073be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	330c      	adds	r3, #12
 80073ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073d0:	643a      	str	r2, [r7, #64]	@ 0x40
 80073d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073d8:	e841 2300 	strex	r3, r2, [r1]
 80073dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1e5      	bne.n	80073b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	3314      	adds	r3, #20
 80073ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ec:	6a3b      	ldr	r3, [r7, #32]
 80073ee:	e853 3f00 	ldrex	r3, [r3]
 80073f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	f023 0301 	bic.w	r3, r3, #1
 80073fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	3314      	adds	r3, #20
 8007402:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007404:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007406:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007408:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800740a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800740c:	e841 2300 	strex	r3, r2, [r1]
 8007410:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1e5      	bne.n	80073e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800741c:	2b01      	cmp	r3, #1
 800741e:	d119      	bne.n	8007454 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	330c      	adds	r3, #12
 8007426:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	e853 3f00 	ldrex	r3, [r3]
 800742e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	f023 0310 	bic.w	r3, r3, #16
 8007436:	647b      	str	r3, [r7, #68]	@ 0x44
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	330c      	adds	r3, #12
 800743e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007440:	61ba      	str	r2, [r7, #24]
 8007442:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007444:	6979      	ldr	r1, [r7, #20]
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	e841 2300 	strex	r3, r2, [r1]
 800744c:	613b      	str	r3, [r7, #16]
   return(result);
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1e5      	bne.n	8007420 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2220      	movs	r2, #32
 8007458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007462:	bf00      	nop
 8007464:	3754      	adds	r7, #84	@ 0x54
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b084      	sub	sp, #16
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800747a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f7ff fdb7 	bl	8006ffc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800748e:	bf00      	nop
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007496:	b480      	push	{r7}
 8007498:	b085      	sub	sp, #20
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b21      	cmp	r3, #33	@ 0x21
 80074a8:	d13e      	bne.n	8007528 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074b2:	d114      	bne.n	80074de <UART_Transmit_IT+0x48>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d110      	bne.n	80074de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a1b      	ldr	r3, [r3, #32]
 80074c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	881b      	ldrh	r3, [r3, #0]
 80074c6:	461a      	mov	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	1c9a      	adds	r2, r3, #2
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	621a      	str	r2, [r3, #32]
 80074dc:	e008      	b.n	80074f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	1c59      	adds	r1, r3, #1
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	6211      	str	r1, [r2, #32]
 80074e8:	781a      	ldrb	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	3b01      	subs	r3, #1
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	4619      	mov	r1, r3
 80074fe:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10f      	bne.n	8007524 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68da      	ldr	r2, [r3, #12]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007512:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68da      	ldr	r2, [r3, #12]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007522:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007524:	2300      	movs	r3, #0
 8007526:	e000      	b.n	800752a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007528:	2302      	movs	r3, #2
  }
}
 800752a:	4618      	mov	r0, r3
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b082      	sub	sp, #8
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68da      	ldr	r2, [r3, #12]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800754c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2220      	movs	r2, #32
 8007552:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7f9 ff34 	bl	80013c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3708      	adds	r7, #8
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b08c      	sub	sp, #48	@ 0x30
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b22      	cmp	r3, #34	@ 0x22
 8007578:	f040 80ae 	bne.w	80076d8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007584:	d117      	bne.n	80075b6 <UART_Receive_IT+0x50>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d113      	bne.n	80075b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800758e:	2300      	movs	r3, #0
 8007590:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007596:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	b29b      	uxth	r3, r3
 80075a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ae:	1c9a      	adds	r2, r3, #2
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80075b4:	e026      	b.n	8007604 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80075bc:	2300      	movs	r3, #0
 80075be:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075c8:	d007      	beq.n	80075da <UART_Receive_IT+0x74>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10a      	bne.n	80075e8 <UART_Receive_IT+0x82>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d106      	bne.n	80075e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075e4:	701a      	strb	r2, [r3, #0]
 80075e6:	e008      	b.n	80075fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075f4:	b2da      	uxtb	r2, r3
 80075f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fe:	1c5a      	adds	r2, r3, #1
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007608:	b29b      	uxth	r3, r3
 800760a:	3b01      	subs	r3, #1
 800760c:	b29b      	uxth	r3, r3
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	4619      	mov	r1, r3
 8007612:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007614:	2b00      	cmp	r3, #0
 8007616:	d15d      	bne.n	80076d4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68da      	ldr	r2, [r3, #12]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f022 0220 	bic.w	r2, r2, #32
 8007626:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68da      	ldr	r2, [r3, #12]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007636:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	695a      	ldr	r2, [r3, #20]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f022 0201 	bic.w	r2, r2, #1
 8007646:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2220      	movs	r2, #32
 800764c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800765a:	2b01      	cmp	r3, #1
 800765c:	d135      	bne.n	80076ca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	330c      	adds	r3, #12
 800766a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	e853 3f00 	ldrex	r3, [r3]
 8007672:	613b      	str	r3, [r7, #16]
   return(result);
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	f023 0310 	bic.w	r3, r3, #16
 800767a:	627b      	str	r3, [r7, #36]	@ 0x24
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	330c      	adds	r3, #12
 8007682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007684:	623a      	str	r2, [r7, #32]
 8007686:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007688:	69f9      	ldr	r1, [r7, #28]
 800768a:	6a3a      	ldr	r2, [r7, #32]
 800768c:	e841 2300 	strex	r3, r2, [r1]
 8007690:	61bb      	str	r3, [r7, #24]
   return(result);
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1e5      	bne.n	8007664 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0310 	and.w	r3, r3, #16
 80076a2:	2b10      	cmp	r3, #16
 80076a4:	d10a      	bne.n	80076bc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076a6:	2300      	movs	r3, #0
 80076a8:	60fb      	str	r3, [r7, #12]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	60fb      	str	r3, [r7, #12]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	60fb      	str	r3, [r7, #12]
 80076ba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80076c0:	4619      	mov	r1, r3
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7ff fca4 	bl	8007010 <HAL_UARTEx_RxEventCallback>
 80076c8:	e002      	b.n	80076d0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7f9 fe84 	bl	80013d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	e002      	b.n	80076da <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	e000      	b.n	80076da <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80076d8:	2302      	movs	r3, #2
  }
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3730      	adds	r7, #48	@ 0x30
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
	...

080076e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076e8:	b0c0      	sub	sp, #256	@ 0x100
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80076fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007700:	68d9      	ldr	r1, [r3, #12]
 8007702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	ea40 0301 	orr.w	r3, r0, r1
 800770c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800770e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	431a      	orrs	r2, r3
 800771c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	431a      	orrs	r2, r3
 8007724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007728:	69db      	ldr	r3, [r3, #28]
 800772a:	4313      	orrs	r3, r2
 800772c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800773c:	f021 010c 	bic.w	r1, r1, #12
 8007740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800774a:	430b      	orrs	r3, r1
 800774c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800774e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800775a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800775e:	6999      	ldr	r1, [r3, #24]
 8007760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	ea40 0301 	orr.w	r3, r0, r1
 800776a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800776c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	4b8f      	ldr	r3, [pc, #572]	@ (80079b0 <UART_SetConfig+0x2cc>)
 8007774:	429a      	cmp	r2, r3
 8007776:	d005      	beq.n	8007784 <UART_SetConfig+0xa0>
 8007778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	4b8d      	ldr	r3, [pc, #564]	@ (80079b4 <UART_SetConfig+0x2d0>)
 8007780:	429a      	cmp	r2, r3
 8007782:	d104      	bne.n	800778e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007784:	f7fd fa8e 	bl	8004ca4 <HAL_RCC_GetPCLK2Freq>
 8007788:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800778c:	e003      	b.n	8007796 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800778e:	f7fd fa75 	bl	8004c7c <HAL_RCC_GetPCLK1Freq>
 8007792:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800779a:	69db      	ldr	r3, [r3, #28]
 800779c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077a0:	f040 810c 	bne.w	80079bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077a8:	2200      	movs	r2, #0
 80077aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80077ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80077b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80077b6:	4622      	mov	r2, r4
 80077b8:	462b      	mov	r3, r5
 80077ba:	1891      	adds	r1, r2, r2
 80077bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80077be:	415b      	adcs	r3, r3
 80077c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80077c6:	4621      	mov	r1, r4
 80077c8:	eb12 0801 	adds.w	r8, r2, r1
 80077cc:	4629      	mov	r1, r5
 80077ce:	eb43 0901 	adc.w	r9, r3, r1
 80077d2:	f04f 0200 	mov.w	r2, #0
 80077d6:	f04f 0300 	mov.w	r3, #0
 80077da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077e6:	4690      	mov	r8, r2
 80077e8:	4699      	mov	r9, r3
 80077ea:	4623      	mov	r3, r4
 80077ec:	eb18 0303 	adds.w	r3, r8, r3
 80077f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80077f4:	462b      	mov	r3, r5
 80077f6:	eb49 0303 	adc.w	r3, r9, r3
 80077fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800780a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800780e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007812:	460b      	mov	r3, r1
 8007814:	18db      	adds	r3, r3, r3
 8007816:	653b      	str	r3, [r7, #80]	@ 0x50
 8007818:	4613      	mov	r3, r2
 800781a:	eb42 0303 	adc.w	r3, r2, r3
 800781e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007820:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007824:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007828:	f7f9 fa4e 	bl	8000cc8 <__aeabi_uldivmod>
 800782c:	4602      	mov	r2, r0
 800782e:	460b      	mov	r3, r1
 8007830:	4b61      	ldr	r3, [pc, #388]	@ (80079b8 <UART_SetConfig+0x2d4>)
 8007832:	fba3 2302 	umull	r2, r3, r3, r2
 8007836:	095b      	lsrs	r3, r3, #5
 8007838:	011c      	lsls	r4, r3, #4
 800783a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800783e:	2200      	movs	r2, #0
 8007840:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007844:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007848:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800784c:	4642      	mov	r2, r8
 800784e:	464b      	mov	r3, r9
 8007850:	1891      	adds	r1, r2, r2
 8007852:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007854:	415b      	adcs	r3, r3
 8007856:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007858:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800785c:	4641      	mov	r1, r8
 800785e:	eb12 0a01 	adds.w	sl, r2, r1
 8007862:	4649      	mov	r1, r9
 8007864:	eb43 0b01 	adc.w	fp, r3, r1
 8007868:	f04f 0200 	mov.w	r2, #0
 800786c:	f04f 0300 	mov.w	r3, #0
 8007870:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007874:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007878:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800787c:	4692      	mov	sl, r2
 800787e:	469b      	mov	fp, r3
 8007880:	4643      	mov	r3, r8
 8007882:	eb1a 0303 	adds.w	r3, sl, r3
 8007886:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800788a:	464b      	mov	r3, r9
 800788c:	eb4b 0303 	adc.w	r3, fp, r3
 8007890:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80078a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80078a8:	460b      	mov	r3, r1
 80078aa:	18db      	adds	r3, r3, r3
 80078ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80078ae:	4613      	mov	r3, r2
 80078b0:	eb42 0303 	adc.w	r3, r2, r3
 80078b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80078b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80078ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80078be:	f7f9 fa03 	bl	8000cc8 <__aeabi_uldivmod>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	4611      	mov	r1, r2
 80078c8:	4b3b      	ldr	r3, [pc, #236]	@ (80079b8 <UART_SetConfig+0x2d4>)
 80078ca:	fba3 2301 	umull	r2, r3, r3, r1
 80078ce:	095b      	lsrs	r3, r3, #5
 80078d0:	2264      	movs	r2, #100	@ 0x64
 80078d2:	fb02 f303 	mul.w	r3, r2, r3
 80078d6:	1acb      	subs	r3, r1, r3
 80078d8:	00db      	lsls	r3, r3, #3
 80078da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80078de:	4b36      	ldr	r3, [pc, #216]	@ (80079b8 <UART_SetConfig+0x2d4>)
 80078e0:	fba3 2302 	umull	r2, r3, r3, r2
 80078e4:	095b      	lsrs	r3, r3, #5
 80078e6:	005b      	lsls	r3, r3, #1
 80078e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80078ec:	441c      	add	r4, r3
 80078ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078f2:	2200      	movs	r2, #0
 80078f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80078f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80078fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007900:	4642      	mov	r2, r8
 8007902:	464b      	mov	r3, r9
 8007904:	1891      	adds	r1, r2, r2
 8007906:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007908:	415b      	adcs	r3, r3
 800790a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800790c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007910:	4641      	mov	r1, r8
 8007912:	1851      	adds	r1, r2, r1
 8007914:	6339      	str	r1, [r7, #48]	@ 0x30
 8007916:	4649      	mov	r1, r9
 8007918:	414b      	adcs	r3, r1
 800791a:	637b      	str	r3, [r7, #52]	@ 0x34
 800791c:	f04f 0200 	mov.w	r2, #0
 8007920:	f04f 0300 	mov.w	r3, #0
 8007924:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007928:	4659      	mov	r1, fp
 800792a:	00cb      	lsls	r3, r1, #3
 800792c:	4651      	mov	r1, sl
 800792e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007932:	4651      	mov	r1, sl
 8007934:	00ca      	lsls	r2, r1, #3
 8007936:	4610      	mov	r0, r2
 8007938:	4619      	mov	r1, r3
 800793a:	4603      	mov	r3, r0
 800793c:	4642      	mov	r2, r8
 800793e:	189b      	adds	r3, r3, r2
 8007940:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007944:	464b      	mov	r3, r9
 8007946:	460a      	mov	r2, r1
 8007948:	eb42 0303 	adc.w	r3, r2, r3
 800794c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800795c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007960:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007964:	460b      	mov	r3, r1
 8007966:	18db      	adds	r3, r3, r3
 8007968:	62bb      	str	r3, [r7, #40]	@ 0x28
 800796a:	4613      	mov	r3, r2
 800796c:	eb42 0303 	adc.w	r3, r2, r3
 8007970:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007972:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007976:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800797a:	f7f9 f9a5 	bl	8000cc8 <__aeabi_uldivmod>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	4b0d      	ldr	r3, [pc, #52]	@ (80079b8 <UART_SetConfig+0x2d4>)
 8007984:	fba3 1302 	umull	r1, r3, r3, r2
 8007988:	095b      	lsrs	r3, r3, #5
 800798a:	2164      	movs	r1, #100	@ 0x64
 800798c:	fb01 f303 	mul.w	r3, r1, r3
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	00db      	lsls	r3, r3, #3
 8007994:	3332      	adds	r3, #50	@ 0x32
 8007996:	4a08      	ldr	r2, [pc, #32]	@ (80079b8 <UART_SetConfig+0x2d4>)
 8007998:	fba2 2303 	umull	r2, r3, r2, r3
 800799c:	095b      	lsrs	r3, r3, #5
 800799e:	f003 0207 	and.w	r2, r3, #7
 80079a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4422      	add	r2, r4
 80079aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80079ac:	e106      	b.n	8007bbc <UART_SetConfig+0x4d8>
 80079ae:	bf00      	nop
 80079b0:	40011000 	.word	0x40011000
 80079b4:	40011400 	.word	0x40011400
 80079b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079c0:	2200      	movs	r2, #0
 80079c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80079c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80079ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80079ce:	4642      	mov	r2, r8
 80079d0:	464b      	mov	r3, r9
 80079d2:	1891      	adds	r1, r2, r2
 80079d4:	6239      	str	r1, [r7, #32]
 80079d6:	415b      	adcs	r3, r3
 80079d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80079da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079de:	4641      	mov	r1, r8
 80079e0:	1854      	adds	r4, r2, r1
 80079e2:	4649      	mov	r1, r9
 80079e4:	eb43 0501 	adc.w	r5, r3, r1
 80079e8:	f04f 0200 	mov.w	r2, #0
 80079ec:	f04f 0300 	mov.w	r3, #0
 80079f0:	00eb      	lsls	r3, r5, #3
 80079f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079f6:	00e2      	lsls	r2, r4, #3
 80079f8:	4614      	mov	r4, r2
 80079fa:	461d      	mov	r5, r3
 80079fc:	4643      	mov	r3, r8
 80079fe:	18e3      	adds	r3, r4, r3
 8007a00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a04:	464b      	mov	r3, r9
 8007a06:	eb45 0303 	adc.w	r3, r5, r3
 8007a0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a1e:	f04f 0200 	mov.w	r2, #0
 8007a22:	f04f 0300 	mov.w	r3, #0
 8007a26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007a2a:	4629      	mov	r1, r5
 8007a2c:	008b      	lsls	r3, r1, #2
 8007a2e:	4621      	mov	r1, r4
 8007a30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a34:	4621      	mov	r1, r4
 8007a36:	008a      	lsls	r2, r1, #2
 8007a38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007a3c:	f7f9 f944 	bl	8000cc8 <__aeabi_uldivmod>
 8007a40:	4602      	mov	r2, r0
 8007a42:	460b      	mov	r3, r1
 8007a44:	4b60      	ldr	r3, [pc, #384]	@ (8007bc8 <UART_SetConfig+0x4e4>)
 8007a46:	fba3 2302 	umull	r2, r3, r3, r2
 8007a4a:	095b      	lsrs	r3, r3, #5
 8007a4c:	011c      	lsls	r4, r3, #4
 8007a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a52:	2200      	movs	r2, #0
 8007a54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007a5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007a60:	4642      	mov	r2, r8
 8007a62:	464b      	mov	r3, r9
 8007a64:	1891      	adds	r1, r2, r2
 8007a66:	61b9      	str	r1, [r7, #24]
 8007a68:	415b      	adcs	r3, r3
 8007a6a:	61fb      	str	r3, [r7, #28]
 8007a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a70:	4641      	mov	r1, r8
 8007a72:	1851      	adds	r1, r2, r1
 8007a74:	6139      	str	r1, [r7, #16]
 8007a76:	4649      	mov	r1, r9
 8007a78:	414b      	adcs	r3, r1
 8007a7a:	617b      	str	r3, [r7, #20]
 8007a7c:	f04f 0200 	mov.w	r2, #0
 8007a80:	f04f 0300 	mov.w	r3, #0
 8007a84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a88:	4659      	mov	r1, fp
 8007a8a:	00cb      	lsls	r3, r1, #3
 8007a8c:	4651      	mov	r1, sl
 8007a8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a92:	4651      	mov	r1, sl
 8007a94:	00ca      	lsls	r2, r1, #3
 8007a96:	4610      	mov	r0, r2
 8007a98:	4619      	mov	r1, r3
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	4642      	mov	r2, r8
 8007a9e:	189b      	adds	r3, r3, r2
 8007aa0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007aa4:	464b      	mov	r3, r9
 8007aa6:	460a      	mov	r2, r1
 8007aa8:	eb42 0303 	adc.w	r3, r2, r3
 8007aac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007aba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007abc:	f04f 0200 	mov.w	r2, #0
 8007ac0:	f04f 0300 	mov.w	r3, #0
 8007ac4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007ac8:	4649      	mov	r1, r9
 8007aca:	008b      	lsls	r3, r1, #2
 8007acc:	4641      	mov	r1, r8
 8007ace:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ad2:	4641      	mov	r1, r8
 8007ad4:	008a      	lsls	r2, r1, #2
 8007ad6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007ada:	f7f9 f8f5 	bl	8000cc8 <__aeabi_uldivmod>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	4611      	mov	r1, r2
 8007ae4:	4b38      	ldr	r3, [pc, #224]	@ (8007bc8 <UART_SetConfig+0x4e4>)
 8007ae6:	fba3 2301 	umull	r2, r3, r3, r1
 8007aea:	095b      	lsrs	r3, r3, #5
 8007aec:	2264      	movs	r2, #100	@ 0x64
 8007aee:	fb02 f303 	mul.w	r3, r2, r3
 8007af2:	1acb      	subs	r3, r1, r3
 8007af4:	011b      	lsls	r3, r3, #4
 8007af6:	3332      	adds	r3, #50	@ 0x32
 8007af8:	4a33      	ldr	r2, [pc, #204]	@ (8007bc8 <UART_SetConfig+0x4e4>)
 8007afa:	fba2 2303 	umull	r2, r3, r2, r3
 8007afe:	095b      	lsrs	r3, r3, #5
 8007b00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b04:	441c      	add	r4, r3
 8007b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007b10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007b14:	4642      	mov	r2, r8
 8007b16:	464b      	mov	r3, r9
 8007b18:	1891      	adds	r1, r2, r2
 8007b1a:	60b9      	str	r1, [r7, #8]
 8007b1c:	415b      	adcs	r3, r3
 8007b1e:	60fb      	str	r3, [r7, #12]
 8007b20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b24:	4641      	mov	r1, r8
 8007b26:	1851      	adds	r1, r2, r1
 8007b28:	6039      	str	r1, [r7, #0]
 8007b2a:	4649      	mov	r1, r9
 8007b2c:	414b      	adcs	r3, r1
 8007b2e:	607b      	str	r3, [r7, #4]
 8007b30:	f04f 0200 	mov.w	r2, #0
 8007b34:	f04f 0300 	mov.w	r3, #0
 8007b38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b3c:	4659      	mov	r1, fp
 8007b3e:	00cb      	lsls	r3, r1, #3
 8007b40:	4651      	mov	r1, sl
 8007b42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b46:	4651      	mov	r1, sl
 8007b48:	00ca      	lsls	r2, r1, #3
 8007b4a:	4610      	mov	r0, r2
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	4603      	mov	r3, r0
 8007b50:	4642      	mov	r2, r8
 8007b52:	189b      	adds	r3, r3, r2
 8007b54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b56:	464b      	mov	r3, r9
 8007b58:	460a      	mov	r2, r1
 8007b5a:	eb42 0303 	adc.w	r3, r2, r3
 8007b5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b6a:	667a      	str	r2, [r7, #100]	@ 0x64
 8007b6c:	f04f 0200 	mov.w	r2, #0
 8007b70:	f04f 0300 	mov.w	r3, #0
 8007b74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007b78:	4649      	mov	r1, r9
 8007b7a:	008b      	lsls	r3, r1, #2
 8007b7c:	4641      	mov	r1, r8
 8007b7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b82:	4641      	mov	r1, r8
 8007b84:	008a      	lsls	r2, r1, #2
 8007b86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007b8a:	f7f9 f89d 	bl	8000cc8 <__aeabi_uldivmod>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	460b      	mov	r3, r1
 8007b92:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc8 <UART_SetConfig+0x4e4>)
 8007b94:	fba3 1302 	umull	r1, r3, r3, r2
 8007b98:	095b      	lsrs	r3, r3, #5
 8007b9a:	2164      	movs	r1, #100	@ 0x64
 8007b9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	011b      	lsls	r3, r3, #4
 8007ba4:	3332      	adds	r3, #50	@ 0x32
 8007ba6:	4a08      	ldr	r2, [pc, #32]	@ (8007bc8 <UART_SetConfig+0x4e4>)
 8007ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8007bac:	095b      	lsrs	r3, r3, #5
 8007bae:	f003 020f 	and.w	r2, r3, #15
 8007bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4422      	add	r2, r4
 8007bba:	609a      	str	r2, [r3, #8]
}
 8007bbc:	bf00      	nop
 8007bbe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bc8:	51eb851f 	.word	0x51eb851f

08007bcc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bcc:	b084      	sub	sp, #16
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b084      	sub	sp, #16
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	f107 001c 	add.w	r0, r7, #28
 8007bda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007bde:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d123      	bne.n	8007c2e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007bfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c0e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d105      	bne.n	8007c22 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fa9a 	bl	800815c <USB_CoreReset>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	73fb      	strb	r3, [r7, #15]
 8007c2c:	e01b      	b.n	8007c66 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fa8e 	bl	800815c <USB_CoreReset>
 8007c40:	4603      	mov	r3, r0
 8007c42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007c44:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d106      	bne.n	8007c5a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c50:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	639a      	str	r2, [r3, #56]	@ 0x38
 8007c58:	e005      	b.n	8007c66 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c5e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007c66:	7fbb      	ldrb	r3, [r7, #30]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d10b      	bne.n	8007c84 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f043 0206 	orr.w	r2, r3, #6
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f043 0220 	orr.w	r2, r3, #32
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c90:	b004      	add	sp, #16
 8007c92:	4770      	bx	lr

08007c94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f023 0201 	bic.w	r2, r3, #1
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr

08007cb6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007cd2:	78fb      	ldrb	r3, [r7, #3]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d115      	bne.n	8007d04 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007ce4:	200a      	movs	r0, #10
 8007ce6:	f7fb fd8d 	bl	8003804 <HAL_Delay>
      ms += 10U;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	330a      	adds	r3, #10
 8007cee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fa25 	bl	8008140 <USB_GetMode>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d01e      	beq.n	8007d3a <USB_SetCurrentMode+0x84>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2bc7      	cmp	r3, #199	@ 0xc7
 8007d00:	d9f0      	bls.n	8007ce4 <USB_SetCurrentMode+0x2e>
 8007d02:	e01a      	b.n	8007d3a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d04:	78fb      	ldrb	r3, [r7, #3]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d115      	bne.n	8007d36 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007d16:	200a      	movs	r0, #10
 8007d18:	f7fb fd74 	bl	8003804 <HAL_Delay>
      ms += 10U;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	330a      	adds	r3, #10
 8007d20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fa0c 	bl	8008140 <USB_GetMode>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d005      	beq.n	8007d3a <USB_SetCurrentMode+0x84>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2bc7      	cmp	r3, #199	@ 0xc7
 8007d32:	d9f0      	bls.n	8007d16 <USB_SetCurrentMode+0x60>
 8007d34:	e001      	b.n	8007d3a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e005      	b.n	8007d46 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2bc8      	cmp	r3, #200	@ 0xc8
 8007d3e:	d101      	bne.n	8007d44 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e000      	b.n	8007d46 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
	...

08007d50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d50:	b084      	sub	sp, #16
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b086      	sub	sp, #24
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007d5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d62:	2300      	movs	r3, #0
 8007d64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	613b      	str	r3, [r7, #16]
 8007d6e:	e009      	b.n	8007d84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	3340      	adds	r3, #64	@ 0x40
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4413      	add	r3, r2
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	3301      	adds	r3, #1
 8007d82:	613b      	str	r3, [r7, #16]
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	2b0e      	cmp	r3, #14
 8007d88:	d9f2      	bls.n	8007d70 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007d8a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d11c      	bne.n	8007dcc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007da0:	f043 0302 	orr.w	r3, r3, #2
 8007da4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007daa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	601a      	str	r2, [r3, #0]
 8007dca:	e005      	b.n	8007dd8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007dde:	461a      	mov	r2, r3
 8007de0:	2300      	movs	r3, #0
 8007de2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007de4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d10d      	bne.n	8007e08 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007dec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d104      	bne.n	8007dfe <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007df4:	2100      	movs	r1, #0
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f968 	bl	80080cc <USB_SetDevSpeed>
 8007dfc:	e008      	b.n	8007e10 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007dfe:	2101      	movs	r1, #1
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f963 	bl	80080cc <USB_SetDevSpeed>
 8007e06:	e003      	b.n	8007e10 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007e08:	2103      	movs	r1, #3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f95e 	bl	80080cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e10:	2110      	movs	r1, #16
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f8fa 	bl	800800c <USB_FlushTxFifo>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d001      	beq.n	8007e22 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f924 	bl	8008070 <USB_FlushRxFifo>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d001      	beq.n	8007e32 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e38:	461a      	mov	r2, r3
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e44:	461a      	mov	r2, r3
 8007e46:	2300      	movs	r3, #0
 8007e48:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e50:	461a      	mov	r2, r3
 8007e52:	2300      	movs	r3, #0
 8007e54:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e56:	2300      	movs	r3, #0
 8007e58:	613b      	str	r3, [r7, #16]
 8007e5a:	e043      	b.n	8007ee4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	015a      	lsls	r2, r3, #5
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	4413      	add	r3, r2
 8007e64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e72:	d118      	bne.n	8007ea6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10a      	bne.n	8007e90 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	015a      	lsls	r2, r3, #5
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	4413      	add	r3, r2
 8007e82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e86:	461a      	mov	r2, r3
 8007e88:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007e8c:	6013      	str	r3, [r2, #0]
 8007e8e:	e013      	b.n	8007eb8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007ea2:	6013      	str	r3, [r2, #0]
 8007ea4:	e008      	b.n	8007eb8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	015a      	lsls	r2, r3, #5
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	4413      	add	r3, r2
 8007eae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	015a      	lsls	r2, r3, #5
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	015a      	lsls	r2, r3, #5
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007edc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	613b      	str	r3, [r7, #16]
 8007ee4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007ee8:	461a      	mov	r2, r3
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d3b5      	bcc.n	8007e5c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	613b      	str	r3, [r7, #16]
 8007ef4:	e043      	b.n	8007f7e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	015a      	lsls	r2, r3, #5
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	4413      	add	r3, r2
 8007efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f0c:	d118      	bne.n	8007f40 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10a      	bne.n	8007f2a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	015a      	lsls	r2, r3, #5
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f20:	461a      	mov	r2, r3
 8007f22:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007f26:	6013      	str	r3, [r2, #0]
 8007f28:	e013      	b.n	8007f52 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	015a      	lsls	r2, r3, #5
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	4413      	add	r3, r2
 8007f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f36:	461a      	mov	r2, r3
 8007f38:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007f3c:	6013      	str	r3, [r2, #0]
 8007f3e:	e008      	b.n	8007f52 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	015a      	lsls	r2, r3, #5
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	4413      	add	r3, r2
 8007f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	2300      	movs	r3, #0
 8007f50:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	015a      	lsls	r2, r3, #5
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	4413      	add	r3, r2
 8007f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f5e:	461a      	mov	r2, r3
 8007f60:	2300      	movs	r3, #0
 8007f62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	015a      	lsls	r2, r3, #5
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f70:	461a      	mov	r2, r3
 8007f72:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007f76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	613b      	str	r3, [r7, #16]
 8007f7e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007f82:	461a      	mov	r2, r3
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d3b5      	bcc.n	8007ef6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f9c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007faa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007fac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d105      	bne.n	8007fc0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	f043 0210 	orr.w	r2, r3, #16
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	699a      	ldr	r2, [r3, #24]
 8007fc4:	4b10      	ldr	r3, [pc, #64]	@ (8008008 <USB_DevInit+0x2b8>)
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007fcc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d005      	beq.n	8007fe0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	f043 0208 	orr.w	r2, r3, #8
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007fe0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d107      	bne.n	8007ff8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ff0:	f043 0304 	orr.w	r3, r3, #4
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3718      	adds	r7, #24
 8007ffe:	46bd      	mov	sp, r7
 8008000:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008004:	b004      	add	sp, #16
 8008006:	4770      	bx	lr
 8008008:	803c3800 	.word	0x803c3800

0800800c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008016:	2300      	movs	r3, #0
 8008018:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	3301      	adds	r3, #1
 800801e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008026:	d901      	bls.n	800802c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008028:	2303      	movs	r3, #3
 800802a:	e01b      	b.n	8008064 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	2b00      	cmp	r3, #0
 8008032:	daf2      	bge.n	800801a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008034:	2300      	movs	r3, #0
 8008036:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	019b      	lsls	r3, r3, #6
 800803c:	f043 0220 	orr.w	r2, r3, #32
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	3301      	adds	r3, #1
 8008048:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008050:	d901      	bls.n	8008056 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e006      	b.n	8008064 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	f003 0320 	and.w	r3, r3, #32
 800805e:	2b20      	cmp	r3, #32
 8008060:	d0f0      	beq.n	8008044 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3714      	adds	r7, #20
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008078:	2300      	movs	r3, #0
 800807a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	3301      	adds	r3, #1
 8008080:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008088:	d901      	bls.n	800808e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	e018      	b.n	80080c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	2b00      	cmp	r3, #0
 8008094:	daf2      	bge.n	800807c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008096:	2300      	movs	r3, #0
 8008098:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2210      	movs	r2, #16
 800809e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	3301      	adds	r3, #1
 80080a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080ac:	d901      	bls.n	80080b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e006      	b.n	80080c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	691b      	ldr	r3, [r3, #16]
 80080b6:	f003 0310 	and.w	r3, r3, #16
 80080ba:	2b10      	cmp	r3, #16
 80080bc:	d0f0      	beq.n	80080a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3714      	adds	r7, #20
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	460b      	mov	r3, r1
 80080d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	78fb      	ldrb	r3, [r7, #3]
 80080e6:	68f9      	ldr	r1, [r7, #12]
 80080e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080ec:	4313      	orrs	r3, r2
 80080ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3714      	adds	r7, #20
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80080fe:	b480      	push	{r7}
 8008100:	b085      	sub	sp, #20
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008118:	f023 0303 	bic.w	r3, r3, #3
 800811c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800812c:	f043 0302 	orr.w	r3, r3, #2
 8008130:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	695b      	ldr	r3, [r3, #20]
 800814c:	f003 0301 	and.w	r3, r3, #1
}
 8008150:	4618      	mov	r0, r3
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008164:	2300      	movs	r3, #0
 8008166:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	3301      	adds	r3, #1
 800816c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008174:	d901      	bls.n	800817a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e01b      	b.n	80081b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	2b00      	cmp	r3, #0
 8008180:	daf2      	bge.n	8008168 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008182:	2300      	movs	r3, #0
 8008184:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	f043 0201 	orr.w	r2, r3, #1
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	3301      	adds	r3, #1
 8008196:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800819e:	d901      	bls.n	80081a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e006      	b.n	80081b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	f003 0301 	and.w	r3, r3, #1
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d0f0      	beq.n	8008192 <USB_CoreReset+0x36>

  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <atoi>:
 80081be:	220a      	movs	r2, #10
 80081c0:	2100      	movs	r1, #0
 80081c2:	f000 be8b 	b.w	8008edc <strtol>

080081c6 <sulp>:
 80081c6:	b570      	push	{r4, r5, r6, lr}
 80081c8:	4604      	mov	r4, r0
 80081ca:	460d      	mov	r5, r1
 80081cc:	ec45 4b10 	vmov	d0, r4, r5
 80081d0:	4616      	mov	r6, r2
 80081d2:	f003 fb1d 	bl	800b810 <__ulp>
 80081d6:	ec51 0b10 	vmov	r0, r1, d0
 80081da:	b17e      	cbz	r6, 80081fc <sulp+0x36>
 80081dc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80081e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	dd09      	ble.n	80081fc <sulp+0x36>
 80081e8:	051b      	lsls	r3, r3, #20
 80081ea:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80081ee:	2400      	movs	r4, #0
 80081f0:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80081f4:	4622      	mov	r2, r4
 80081f6:	462b      	mov	r3, r5
 80081f8:	f7f8 fa1e 	bl	8000638 <__aeabi_dmul>
 80081fc:	ec41 0b10 	vmov	d0, r0, r1
 8008200:	bd70      	pop	{r4, r5, r6, pc}
 8008202:	0000      	movs	r0, r0
 8008204:	0000      	movs	r0, r0
	...

08008208 <_strtod_l>:
 8008208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800820c:	b09f      	sub	sp, #124	@ 0x7c
 800820e:	460c      	mov	r4, r1
 8008210:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008212:	2200      	movs	r2, #0
 8008214:	921a      	str	r2, [sp, #104]	@ 0x68
 8008216:	9005      	str	r0, [sp, #20]
 8008218:	f04f 0a00 	mov.w	sl, #0
 800821c:	f04f 0b00 	mov.w	fp, #0
 8008220:	460a      	mov	r2, r1
 8008222:	9219      	str	r2, [sp, #100]	@ 0x64
 8008224:	7811      	ldrb	r1, [r2, #0]
 8008226:	292b      	cmp	r1, #43	@ 0x2b
 8008228:	d04a      	beq.n	80082c0 <_strtod_l+0xb8>
 800822a:	d838      	bhi.n	800829e <_strtod_l+0x96>
 800822c:	290d      	cmp	r1, #13
 800822e:	d832      	bhi.n	8008296 <_strtod_l+0x8e>
 8008230:	2908      	cmp	r1, #8
 8008232:	d832      	bhi.n	800829a <_strtod_l+0x92>
 8008234:	2900      	cmp	r1, #0
 8008236:	d03b      	beq.n	80082b0 <_strtod_l+0xa8>
 8008238:	2200      	movs	r2, #0
 800823a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800823c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800823e:	782a      	ldrb	r2, [r5, #0]
 8008240:	2a30      	cmp	r2, #48	@ 0x30
 8008242:	f040 80b3 	bne.w	80083ac <_strtod_l+0x1a4>
 8008246:	786a      	ldrb	r2, [r5, #1]
 8008248:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800824c:	2a58      	cmp	r2, #88	@ 0x58
 800824e:	d16e      	bne.n	800832e <_strtod_l+0x126>
 8008250:	9302      	str	r3, [sp, #8]
 8008252:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008254:	9301      	str	r3, [sp, #4]
 8008256:	ab1a      	add	r3, sp, #104	@ 0x68
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	4a8e      	ldr	r2, [pc, #568]	@ (8008494 <_strtod_l+0x28c>)
 800825c:	9805      	ldr	r0, [sp, #20]
 800825e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008260:	a919      	add	r1, sp, #100	@ 0x64
 8008262:	f002 fbc7 	bl	800a9f4 <__gethex>
 8008266:	f010 060f 	ands.w	r6, r0, #15
 800826a:	4604      	mov	r4, r0
 800826c:	d005      	beq.n	800827a <_strtod_l+0x72>
 800826e:	2e06      	cmp	r6, #6
 8008270:	d128      	bne.n	80082c4 <_strtod_l+0xbc>
 8008272:	3501      	adds	r5, #1
 8008274:	2300      	movs	r3, #0
 8008276:	9519      	str	r5, [sp, #100]	@ 0x64
 8008278:	930b      	str	r3, [sp, #44]	@ 0x2c
 800827a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800827c:	2b00      	cmp	r3, #0
 800827e:	f040 858e 	bne.w	8008d9e <_strtod_l+0xb96>
 8008282:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008284:	b1cb      	cbz	r3, 80082ba <_strtod_l+0xb2>
 8008286:	4652      	mov	r2, sl
 8008288:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800828c:	ec43 2b10 	vmov	d0, r2, r3
 8008290:	b01f      	add	sp, #124	@ 0x7c
 8008292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008296:	2920      	cmp	r1, #32
 8008298:	d1ce      	bne.n	8008238 <_strtod_l+0x30>
 800829a:	3201      	adds	r2, #1
 800829c:	e7c1      	b.n	8008222 <_strtod_l+0x1a>
 800829e:	292d      	cmp	r1, #45	@ 0x2d
 80082a0:	d1ca      	bne.n	8008238 <_strtod_l+0x30>
 80082a2:	2101      	movs	r1, #1
 80082a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80082a6:	1c51      	adds	r1, r2, #1
 80082a8:	9119      	str	r1, [sp, #100]	@ 0x64
 80082aa:	7852      	ldrb	r2, [r2, #1]
 80082ac:	2a00      	cmp	r2, #0
 80082ae:	d1c5      	bne.n	800823c <_strtod_l+0x34>
 80082b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80082b2:	9419      	str	r4, [sp, #100]	@ 0x64
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f040 8570 	bne.w	8008d9a <_strtod_l+0xb92>
 80082ba:	4652      	mov	r2, sl
 80082bc:	465b      	mov	r3, fp
 80082be:	e7e5      	b.n	800828c <_strtod_l+0x84>
 80082c0:	2100      	movs	r1, #0
 80082c2:	e7ef      	b.n	80082a4 <_strtod_l+0x9c>
 80082c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80082c6:	b13a      	cbz	r2, 80082d8 <_strtod_l+0xd0>
 80082c8:	2135      	movs	r1, #53	@ 0x35
 80082ca:	a81c      	add	r0, sp, #112	@ 0x70
 80082cc:	f003 fb9a 	bl	800ba04 <__copybits>
 80082d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082d2:	9805      	ldr	r0, [sp, #20]
 80082d4:	f002 ff68 	bl	800b1a8 <_Bfree>
 80082d8:	3e01      	subs	r6, #1
 80082da:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80082dc:	2e04      	cmp	r6, #4
 80082de:	d806      	bhi.n	80082ee <_strtod_l+0xe6>
 80082e0:	e8df f006 	tbb	[pc, r6]
 80082e4:	201d0314 	.word	0x201d0314
 80082e8:	14          	.byte	0x14
 80082e9:	00          	.byte	0x00
 80082ea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80082ee:	05e1      	lsls	r1, r4, #23
 80082f0:	bf48      	it	mi
 80082f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80082f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80082fa:	0d1b      	lsrs	r3, r3, #20
 80082fc:	051b      	lsls	r3, r3, #20
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1bb      	bne.n	800827a <_strtod_l+0x72>
 8008302:	f001 fc13 	bl	8009b2c <__errno>
 8008306:	2322      	movs	r3, #34	@ 0x22
 8008308:	6003      	str	r3, [r0, #0]
 800830a:	e7b6      	b.n	800827a <_strtod_l+0x72>
 800830c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008310:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008314:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008318:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800831c:	e7e7      	b.n	80082ee <_strtod_l+0xe6>
 800831e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800849c <_strtod_l+0x294>
 8008322:	e7e4      	b.n	80082ee <_strtod_l+0xe6>
 8008324:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008328:	f04f 3aff 	mov.w	sl, #4294967295
 800832c:	e7df      	b.n	80082ee <_strtod_l+0xe6>
 800832e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008330:	1c5a      	adds	r2, r3, #1
 8008332:	9219      	str	r2, [sp, #100]	@ 0x64
 8008334:	785b      	ldrb	r3, [r3, #1]
 8008336:	2b30      	cmp	r3, #48	@ 0x30
 8008338:	d0f9      	beq.n	800832e <_strtod_l+0x126>
 800833a:	2b00      	cmp	r3, #0
 800833c:	d09d      	beq.n	800827a <_strtod_l+0x72>
 800833e:	2301      	movs	r3, #1
 8008340:	9309      	str	r3, [sp, #36]	@ 0x24
 8008342:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008344:	930c      	str	r3, [sp, #48]	@ 0x30
 8008346:	2300      	movs	r3, #0
 8008348:	9308      	str	r3, [sp, #32]
 800834a:	930a      	str	r3, [sp, #40]	@ 0x28
 800834c:	461f      	mov	r7, r3
 800834e:	220a      	movs	r2, #10
 8008350:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008352:	7805      	ldrb	r5, [r0, #0]
 8008354:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008358:	b2d9      	uxtb	r1, r3
 800835a:	2909      	cmp	r1, #9
 800835c:	d928      	bls.n	80083b0 <_strtod_l+0x1a8>
 800835e:	494e      	ldr	r1, [pc, #312]	@ (8008498 <_strtod_l+0x290>)
 8008360:	2201      	movs	r2, #1
 8008362:	f001 fb2a 	bl	80099ba <strncmp>
 8008366:	2800      	cmp	r0, #0
 8008368:	d032      	beq.n	80083d0 <_strtod_l+0x1c8>
 800836a:	2000      	movs	r0, #0
 800836c:	462a      	mov	r2, r5
 800836e:	4681      	mov	r9, r0
 8008370:	463d      	mov	r5, r7
 8008372:	4603      	mov	r3, r0
 8008374:	2a65      	cmp	r2, #101	@ 0x65
 8008376:	d001      	beq.n	800837c <_strtod_l+0x174>
 8008378:	2a45      	cmp	r2, #69	@ 0x45
 800837a:	d114      	bne.n	80083a6 <_strtod_l+0x19e>
 800837c:	b91d      	cbnz	r5, 8008386 <_strtod_l+0x17e>
 800837e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008380:	4302      	orrs	r2, r0
 8008382:	d095      	beq.n	80082b0 <_strtod_l+0xa8>
 8008384:	2500      	movs	r5, #0
 8008386:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008388:	1c62      	adds	r2, r4, #1
 800838a:	9219      	str	r2, [sp, #100]	@ 0x64
 800838c:	7862      	ldrb	r2, [r4, #1]
 800838e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008390:	d077      	beq.n	8008482 <_strtod_l+0x27a>
 8008392:	2a2d      	cmp	r2, #45	@ 0x2d
 8008394:	d07b      	beq.n	800848e <_strtod_l+0x286>
 8008396:	f04f 0c00 	mov.w	ip, #0
 800839a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800839e:	2909      	cmp	r1, #9
 80083a0:	f240 8082 	bls.w	80084a8 <_strtod_l+0x2a0>
 80083a4:	9419      	str	r4, [sp, #100]	@ 0x64
 80083a6:	f04f 0800 	mov.w	r8, #0
 80083aa:	e0a2      	b.n	80084f2 <_strtod_l+0x2ea>
 80083ac:	2300      	movs	r3, #0
 80083ae:	e7c7      	b.n	8008340 <_strtod_l+0x138>
 80083b0:	2f08      	cmp	r7, #8
 80083b2:	bfd5      	itete	le
 80083b4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80083b6:	9908      	ldrgt	r1, [sp, #32]
 80083b8:	fb02 3301 	mlale	r3, r2, r1, r3
 80083bc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80083c0:	f100 0001 	add.w	r0, r0, #1
 80083c4:	bfd4      	ite	le
 80083c6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80083c8:	9308      	strgt	r3, [sp, #32]
 80083ca:	3701      	adds	r7, #1
 80083cc:	9019      	str	r0, [sp, #100]	@ 0x64
 80083ce:	e7bf      	b.n	8008350 <_strtod_l+0x148>
 80083d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083d2:	1c5a      	adds	r2, r3, #1
 80083d4:	9219      	str	r2, [sp, #100]	@ 0x64
 80083d6:	785a      	ldrb	r2, [r3, #1]
 80083d8:	b37f      	cbz	r7, 800843a <_strtod_l+0x232>
 80083da:	4681      	mov	r9, r0
 80083dc:	463d      	mov	r5, r7
 80083de:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80083e2:	2b09      	cmp	r3, #9
 80083e4:	d912      	bls.n	800840c <_strtod_l+0x204>
 80083e6:	2301      	movs	r3, #1
 80083e8:	e7c4      	b.n	8008374 <_strtod_l+0x16c>
 80083ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083ec:	1c5a      	adds	r2, r3, #1
 80083ee:	9219      	str	r2, [sp, #100]	@ 0x64
 80083f0:	785a      	ldrb	r2, [r3, #1]
 80083f2:	3001      	adds	r0, #1
 80083f4:	2a30      	cmp	r2, #48	@ 0x30
 80083f6:	d0f8      	beq.n	80083ea <_strtod_l+0x1e2>
 80083f8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80083fc:	2b08      	cmp	r3, #8
 80083fe:	f200 84d3 	bhi.w	8008da8 <_strtod_l+0xba0>
 8008402:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008404:	930c      	str	r3, [sp, #48]	@ 0x30
 8008406:	4681      	mov	r9, r0
 8008408:	2000      	movs	r0, #0
 800840a:	4605      	mov	r5, r0
 800840c:	3a30      	subs	r2, #48	@ 0x30
 800840e:	f100 0301 	add.w	r3, r0, #1
 8008412:	d02a      	beq.n	800846a <_strtod_l+0x262>
 8008414:	4499      	add	r9, r3
 8008416:	eb00 0c05 	add.w	ip, r0, r5
 800841a:	462b      	mov	r3, r5
 800841c:	210a      	movs	r1, #10
 800841e:	4563      	cmp	r3, ip
 8008420:	d10d      	bne.n	800843e <_strtod_l+0x236>
 8008422:	1c69      	adds	r1, r5, #1
 8008424:	4401      	add	r1, r0
 8008426:	4428      	add	r0, r5
 8008428:	2808      	cmp	r0, #8
 800842a:	dc16      	bgt.n	800845a <_strtod_l+0x252>
 800842c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800842e:	230a      	movs	r3, #10
 8008430:	fb03 2300 	mla	r3, r3, r0, r2
 8008434:	930a      	str	r3, [sp, #40]	@ 0x28
 8008436:	2300      	movs	r3, #0
 8008438:	e018      	b.n	800846c <_strtod_l+0x264>
 800843a:	4638      	mov	r0, r7
 800843c:	e7da      	b.n	80083f4 <_strtod_l+0x1ec>
 800843e:	2b08      	cmp	r3, #8
 8008440:	f103 0301 	add.w	r3, r3, #1
 8008444:	dc03      	bgt.n	800844e <_strtod_l+0x246>
 8008446:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008448:	434e      	muls	r6, r1
 800844a:	960a      	str	r6, [sp, #40]	@ 0x28
 800844c:	e7e7      	b.n	800841e <_strtod_l+0x216>
 800844e:	2b10      	cmp	r3, #16
 8008450:	bfde      	ittt	le
 8008452:	9e08      	ldrle	r6, [sp, #32]
 8008454:	434e      	mulle	r6, r1
 8008456:	9608      	strle	r6, [sp, #32]
 8008458:	e7e1      	b.n	800841e <_strtod_l+0x216>
 800845a:	280f      	cmp	r0, #15
 800845c:	dceb      	bgt.n	8008436 <_strtod_l+0x22e>
 800845e:	9808      	ldr	r0, [sp, #32]
 8008460:	230a      	movs	r3, #10
 8008462:	fb03 2300 	mla	r3, r3, r0, r2
 8008466:	9308      	str	r3, [sp, #32]
 8008468:	e7e5      	b.n	8008436 <_strtod_l+0x22e>
 800846a:	4629      	mov	r1, r5
 800846c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800846e:	1c50      	adds	r0, r2, #1
 8008470:	9019      	str	r0, [sp, #100]	@ 0x64
 8008472:	7852      	ldrb	r2, [r2, #1]
 8008474:	4618      	mov	r0, r3
 8008476:	460d      	mov	r5, r1
 8008478:	e7b1      	b.n	80083de <_strtod_l+0x1d6>
 800847a:	f04f 0900 	mov.w	r9, #0
 800847e:	2301      	movs	r3, #1
 8008480:	e77d      	b.n	800837e <_strtod_l+0x176>
 8008482:	f04f 0c00 	mov.w	ip, #0
 8008486:	1ca2      	adds	r2, r4, #2
 8008488:	9219      	str	r2, [sp, #100]	@ 0x64
 800848a:	78a2      	ldrb	r2, [r4, #2]
 800848c:	e785      	b.n	800839a <_strtod_l+0x192>
 800848e:	f04f 0c01 	mov.w	ip, #1
 8008492:	e7f8      	b.n	8008486 <_strtod_l+0x27e>
 8008494:	0800c518 	.word	0x0800c518
 8008498:	0800c500 	.word	0x0800c500
 800849c:	7ff00000 	.word	0x7ff00000
 80084a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80084a2:	1c51      	adds	r1, r2, #1
 80084a4:	9119      	str	r1, [sp, #100]	@ 0x64
 80084a6:	7852      	ldrb	r2, [r2, #1]
 80084a8:	2a30      	cmp	r2, #48	@ 0x30
 80084aa:	d0f9      	beq.n	80084a0 <_strtod_l+0x298>
 80084ac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80084b0:	2908      	cmp	r1, #8
 80084b2:	f63f af78 	bhi.w	80083a6 <_strtod_l+0x19e>
 80084b6:	3a30      	subs	r2, #48	@ 0x30
 80084b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80084ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80084bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80084be:	f04f 080a 	mov.w	r8, #10
 80084c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80084c4:	1c56      	adds	r6, r2, #1
 80084c6:	9619      	str	r6, [sp, #100]	@ 0x64
 80084c8:	7852      	ldrb	r2, [r2, #1]
 80084ca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80084ce:	f1be 0f09 	cmp.w	lr, #9
 80084d2:	d939      	bls.n	8008548 <_strtod_l+0x340>
 80084d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80084d6:	1a76      	subs	r6, r6, r1
 80084d8:	2e08      	cmp	r6, #8
 80084da:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80084de:	dc03      	bgt.n	80084e8 <_strtod_l+0x2e0>
 80084e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80084e2:	4588      	cmp	r8, r1
 80084e4:	bfa8      	it	ge
 80084e6:	4688      	movge	r8, r1
 80084e8:	f1bc 0f00 	cmp.w	ip, #0
 80084ec:	d001      	beq.n	80084f2 <_strtod_l+0x2ea>
 80084ee:	f1c8 0800 	rsb	r8, r8, #0
 80084f2:	2d00      	cmp	r5, #0
 80084f4:	d14e      	bne.n	8008594 <_strtod_l+0x38c>
 80084f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80084f8:	4308      	orrs	r0, r1
 80084fa:	f47f aebe 	bne.w	800827a <_strtod_l+0x72>
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f47f aed6 	bne.w	80082b0 <_strtod_l+0xa8>
 8008504:	2a69      	cmp	r2, #105	@ 0x69
 8008506:	d028      	beq.n	800855a <_strtod_l+0x352>
 8008508:	dc25      	bgt.n	8008556 <_strtod_l+0x34e>
 800850a:	2a49      	cmp	r2, #73	@ 0x49
 800850c:	d025      	beq.n	800855a <_strtod_l+0x352>
 800850e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008510:	f47f aece 	bne.w	80082b0 <_strtod_l+0xa8>
 8008514:	499b      	ldr	r1, [pc, #620]	@ (8008784 <_strtod_l+0x57c>)
 8008516:	a819      	add	r0, sp, #100	@ 0x64
 8008518:	f002 fc8e 	bl	800ae38 <__match>
 800851c:	2800      	cmp	r0, #0
 800851e:	f43f aec7 	beq.w	80082b0 <_strtod_l+0xa8>
 8008522:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	2b28      	cmp	r3, #40	@ 0x28
 8008528:	d12e      	bne.n	8008588 <_strtod_l+0x380>
 800852a:	4997      	ldr	r1, [pc, #604]	@ (8008788 <_strtod_l+0x580>)
 800852c:	aa1c      	add	r2, sp, #112	@ 0x70
 800852e:	a819      	add	r0, sp, #100	@ 0x64
 8008530:	f002 fc96 	bl	800ae60 <__hexnan>
 8008534:	2805      	cmp	r0, #5
 8008536:	d127      	bne.n	8008588 <_strtod_l+0x380>
 8008538:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800853a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800853e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008542:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008546:	e698      	b.n	800827a <_strtod_l+0x72>
 8008548:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800854a:	fb08 2101 	mla	r1, r8, r1, r2
 800854e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008552:	920e      	str	r2, [sp, #56]	@ 0x38
 8008554:	e7b5      	b.n	80084c2 <_strtod_l+0x2ba>
 8008556:	2a6e      	cmp	r2, #110	@ 0x6e
 8008558:	e7da      	b.n	8008510 <_strtod_l+0x308>
 800855a:	498c      	ldr	r1, [pc, #560]	@ (800878c <_strtod_l+0x584>)
 800855c:	a819      	add	r0, sp, #100	@ 0x64
 800855e:	f002 fc6b 	bl	800ae38 <__match>
 8008562:	2800      	cmp	r0, #0
 8008564:	f43f aea4 	beq.w	80082b0 <_strtod_l+0xa8>
 8008568:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800856a:	4989      	ldr	r1, [pc, #548]	@ (8008790 <_strtod_l+0x588>)
 800856c:	3b01      	subs	r3, #1
 800856e:	a819      	add	r0, sp, #100	@ 0x64
 8008570:	9319      	str	r3, [sp, #100]	@ 0x64
 8008572:	f002 fc61 	bl	800ae38 <__match>
 8008576:	b910      	cbnz	r0, 800857e <_strtod_l+0x376>
 8008578:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800857a:	3301      	adds	r3, #1
 800857c:	9319      	str	r3, [sp, #100]	@ 0x64
 800857e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80087a0 <_strtod_l+0x598>
 8008582:	f04f 0a00 	mov.w	sl, #0
 8008586:	e678      	b.n	800827a <_strtod_l+0x72>
 8008588:	4882      	ldr	r0, [pc, #520]	@ (8008794 <_strtod_l+0x58c>)
 800858a:	f001 fb0d 	bl	8009ba8 <nan>
 800858e:	ec5b ab10 	vmov	sl, fp, d0
 8008592:	e672      	b.n	800827a <_strtod_l+0x72>
 8008594:	eba8 0309 	sub.w	r3, r8, r9
 8008598:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800859a:	9309      	str	r3, [sp, #36]	@ 0x24
 800859c:	2f00      	cmp	r7, #0
 800859e:	bf08      	it	eq
 80085a0:	462f      	moveq	r7, r5
 80085a2:	2d10      	cmp	r5, #16
 80085a4:	462c      	mov	r4, r5
 80085a6:	bfa8      	it	ge
 80085a8:	2410      	movge	r4, #16
 80085aa:	f7f7 ffcb 	bl	8000544 <__aeabi_ui2d>
 80085ae:	2d09      	cmp	r5, #9
 80085b0:	4682      	mov	sl, r0
 80085b2:	468b      	mov	fp, r1
 80085b4:	dc13      	bgt.n	80085de <_strtod_l+0x3d6>
 80085b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f43f ae5e 	beq.w	800827a <_strtod_l+0x72>
 80085be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085c0:	dd78      	ble.n	80086b4 <_strtod_l+0x4ac>
 80085c2:	2b16      	cmp	r3, #22
 80085c4:	dc5f      	bgt.n	8008686 <_strtod_l+0x47e>
 80085c6:	4974      	ldr	r1, [pc, #464]	@ (8008798 <_strtod_l+0x590>)
 80085c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80085cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085d0:	4652      	mov	r2, sl
 80085d2:	465b      	mov	r3, fp
 80085d4:	f7f8 f830 	bl	8000638 <__aeabi_dmul>
 80085d8:	4682      	mov	sl, r0
 80085da:	468b      	mov	fp, r1
 80085dc:	e64d      	b.n	800827a <_strtod_l+0x72>
 80085de:	4b6e      	ldr	r3, [pc, #440]	@ (8008798 <_strtod_l+0x590>)
 80085e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80085e8:	f7f8 f826 	bl	8000638 <__aeabi_dmul>
 80085ec:	4682      	mov	sl, r0
 80085ee:	9808      	ldr	r0, [sp, #32]
 80085f0:	468b      	mov	fp, r1
 80085f2:	f7f7 ffa7 	bl	8000544 <__aeabi_ui2d>
 80085f6:	4602      	mov	r2, r0
 80085f8:	460b      	mov	r3, r1
 80085fa:	4650      	mov	r0, sl
 80085fc:	4659      	mov	r1, fp
 80085fe:	f7f7 fe65 	bl	80002cc <__adddf3>
 8008602:	2d0f      	cmp	r5, #15
 8008604:	4682      	mov	sl, r0
 8008606:	468b      	mov	fp, r1
 8008608:	ddd5      	ble.n	80085b6 <_strtod_l+0x3ae>
 800860a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800860c:	1b2c      	subs	r4, r5, r4
 800860e:	441c      	add	r4, r3
 8008610:	2c00      	cmp	r4, #0
 8008612:	f340 8096 	ble.w	8008742 <_strtod_l+0x53a>
 8008616:	f014 030f 	ands.w	r3, r4, #15
 800861a:	d00a      	beq.n	8008632 <_strtod_l+0x42a>
 800861c:	495e      	ldr	r1, [pc, #376]	@ (8008798 <_strtod_l+0x590>)
 800861e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008622:	4652      	mov	r2, sl
 8008624:	465b      	mov	r3, fp
 8008626:	e9d1 0100 	ldrd	r0, r1, [r1]
 800862a:	f7f8 f805 	bl	8000638 <__aeabi_dmul>
 800862e:	4682      	mov	sl, r0
 8008630:	468b      	mov	fp, r1
 8008632:	f034 040f 	bics.w	r4, r4, #15
 8008636:	d073      	beq.n	8008720 <_strtod_l+0x518>
 8008638:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800863c:	dd48      	ble.n	80086d0 <_strtod_l+0x4c8>
 800863e:	2400      	movs	r4, #0
 8008640:	46a0      	mov	r8, r4
 8008642:	940a      	str	r4, [sp, #40]	@ 0x28
 8008644:	46a1      	mov	r9, r4
 8008646:	9a05      	ldr	r2, [sp, #20]
 8008648:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80087a0 <_strtod_l+0x598>
 800864c:	2322      	movs	r3, #34	@ 0x22
 800864e:	6013      	str	r3, [r2, #0]
 8008650:	f04f 0a00 	mov.w	sl, #0
 8008654:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008656:	2b00      	cmp	r3, #0
 8008658:	f43f ae0f 	beq.w	800827a <_strtod_l+0x72>
 800865c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800865e:	9805      	ldr	r0, [sp, #20]
 8008660:	f002 fda2 	bl	800b1a8 <_Bfree>
 8008664:	9805      	ldr	r0, [sp, #20]
 8008666:	4649      	mov	r1, r9
 8008668:	f002 fd9e 	bl	800b1a8 <_Bfree>
 800866c:	9805      	ldr	r0, [sp, #20]
 800866e:	4641      	mov	r1, r8
 8008670:	f002 fd9a 	bl	800b1a8 <_Bfree>
 8008674:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008676:	9805      	ldr	r0, [sp, #20]
 8008678:	f002 fd96 	bl	800b1a8 <_Bfree>
 800867c:	9805      	ldr	r0, [sp, #20]
 800867e:	4621      	mov	r1, r4
 8008680:	f002 fd92 	bl	800b1a8 <_Bfree>
 8008684:	e5f9      	b.n	800827a <_strtod_l+0x72>
 8008686:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008688:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800868c:	4293      	cmp	r3, r2
 800868e:	dbbc      	blt.n	800860a <_strtod_l+0x402>
 8008690:	4c41      	ldr	r4, [pc, #260]	@ (8008798 <_strtod_l+0x590>)
 8008692:	f1c5 050f 	rsb	r5, r5, #15
 8008696:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800869a:	4652      	mov	r2, sl
 800869c:	465b      	mov	r3, fp
 800869e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086a2:	f7f7 ffc9 	bl	8000638 <__aeabi_dmul>
 80086a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086a8:	1b5d      	subs	r5, r3, r5
 80086aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80086ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80086b2:	e78f      	b.n	80085d4 <_strtod_l+0x3cc>
 80086b4:	3316      	adds	r3, #22
 80086b6:	dba8      	blt.n	800860a <_strtod_l+0x402>
 80086b8:	4b37      	ldr	r3, [pc, #220]	@ (8008798 <_strtod_l+0x590>)
 80086ba:	eba9 0808 	sub.w	r8, r9, r8
 80086be:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80086c2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80086c6:	4650      	mov	r0, sl
 80086c8:	4659      	mov	r1, fp
 80086ca:	f7f8 f8df 	bl	800088c <__aeabi_ddiv>
 80086ce:	e783      	b.n	80085d8 <_strtod_l+0x3d0>
 80086d0:	4b32      	ldr	r3, [pc, #200]	@ (800879c <_strtod_l+0x594>)
 80086d2:	9308      	str	r3, [sp, #32]
 80086d4:	2300      	movs	r3, #0
 80086d6:	1124      	asrs	r4, r4, #4
 80086d8:	4650      	mov	r0, sl
 80086da:	4659      	mov	r1, fp
 80086dc:	461e      	mov	r6, r3
 80086de:	2c01      	cmp	r4, #1
 80086e0:	dc21      	bgt.n	8008726 <_strtod_l+0x51e>
 80086e2:	b10b      	cbz	r3, 80086e8 <_strtod_l+0x4e0>
 80086e4:	4682      	mov	sl, r0
 80086e6:	468b      	mov	fp, r1
 80086e8:	492c      	ldr	r1, [pc, #176]	@ (800879c <_strtod_l+0x594>)
 80086ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80086ee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80086f2:	4652      	mov	r2, sl
 80086f4:	465b      	mov	r3, fp
 80086f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086fa:	f7f7 ff9d 	bl	8000638 <__aeabi_dmul>
 80086fe:	4b28      	ldr	r3, [pc, #160]	@ (80087a0 <_strtod_l+0x598>)
 8008700:	460a      	mov	r2, r1
 8008702:	400b      	ands	r3, r1
 8008704:	4927      	ldr	r1, [pc, #156]	@ (80087a4 <_strtod_l+0x59c>)
 8008706:	428b      	cmp	r3, r1
 8008708:	4682      	mov	sl, r0
 800870a:	d898      	bhi.n	800863e <_strtod_l+0x436>
 800870c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008710:	428b      	cmp	r3, r1
 8008712:	bf86      	itte	hi
 8008714:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80087a8 <_strtod_l+0x5a0>
 8008718:	f04f 3aff 	movhi.w	sl, #4294967295
 800871c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008720:	2300      	movs	r3, #0
 8008722:	9308      	str	r3, [sp, #32]
 8008724:	e07a      	b.n	800881c <_strtod_l+0x614>
 8008726:	07e2      	lsls	r2, r4, #31
 8008728:	d505      	bpl.n	8008736 <_strtod_l+0x52e>
 800872a:	9b08      	ldr	r3, [sp, #32]
 800872c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008730:	f7f7 ff82 	bl	8000638 <__aeabi_dmul>
 8008734:	2301      	movs	r3, #1
 8008736:	9a08      	ldr	r2, [sp, #32]
 8008738:	3208      	adds	r2, #8
 800873a:	3601      	adds	r6, #1
 800873c:	1064      	asrs	r4, r4, #1
 800873e:	9208      	str	r2, [sp, #32]
 8008740:	e7cd      	b.n	80086de <_strtod_l+0x4d6>
 8008742:	d0ed      	beq.n	8008720 <_strtod_l+0x518>
 8008744:	4264      	negs	r4, r4
 8008746:	f014 020f 	ands.w	r2, r4, #15
 800874a:	d00a      	beq.n	8008762 <_strtod_l+0x55a>
 800874c:	4b12      	ldr	r3, [pc, #72]	@ (8008798 <_strtod_l+0x590>)
 800874e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008752:	4650      	mov	r0, sl
 8008754:	4659      	mov	r1, fp
 8008756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875a:	f7f8 f897 	bl	800088c <__aeabi_ddiv>
 800875e:	4682      	mov	sl, r0
 8008760:	468b      	mov	fp, r1
 8008762:	1124      	asrs	r4, r4, #4
 8008764:	d0dc      	beq.n	8008720 <_strtod_l+0x518>
 8008766:	2c1f      	cmp	r4, #31
 8008768:	dd20      	ble.n	80087ac <_strtod_l+0x5a4>
 800876a:	2400      	movs	r4, #0
 800876c:	46a0      	mov	r8, r4
 800876e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008770:	46a1      	mov	r9, r4
 8008772:	9a05      	ldr	r2, [sp, #20]
 8008774:	2322      	movs	r3, #34	@ 0x22
 8008776:	f04f 0a00 	mov.w	sl, #0
 800877a:	f04f 0b00 	mov.w	fp, #0
 800877e:	6013      	str	r3, [r2, #0]
 8008780:	e768      	b.n	8008654 <_strtod_l+0x44c>
 8008782:	bf00      	nop
 8008784:	0800c666 	.word	0x0800c666
 8008788:	0800c504 	.word	0x0800c504
 800878c:	0800c65e 	.word	0x0800c65e
 8008790:	0800c745 	.word	0x0800c745
 8008794:	0800c741 	.word	0x0800c741
 8008798:	0800c8a8 	.word	0x0800c8a8
 800879c:	0800c880 	.word	0x0800c880
 80087a0:	7ff00000 	.word	0x7ff00000
 80087a4:	7ca00000 	.word	0x7ca00000
 80087a8:	7fefffff 	.word	0x7fefffff
 80087ac:	f014 0310 	ands.w	r3, r4, #16
 80087b0:	bf18      	it	ne
 80087b2:	236a      	movne	r3, #106	@ 0x6a
 80087b4:	4ea9      	ldr	r6, [pc, #676]	@ (8008a5c <_strtod_l+0x854>)
 80087b6:	9308      	str	r3, [sp, #32]
 80087b8:	4650      	mov	r0, sl
 80087ba:	4659      	mov	r1, fp
 80087bc:	2300      	movs	r3, #0
 80087be:	07e2      	lsls	r2, r4, #31
 80087c0:	d504      	bpl.n	80087cc <_strtod_l+0x5c4>
 80087c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80087c6:	f7f7 ff37 	bl	8000638 <__aeabi_dmul>
 80087ca:	2301      	movs	r3, #1
 80087cc:	1064      	asrs	r4, r4, #1
 80087ce:	f106 0608 	add.w	r6, r6, #8
 80087d2:	d1f4      	bne.n	80087be <_strtod_l+0x5b6>
 80087d4:	b10b      	cbz	r3, 80087da <_strtod_l+0x5d2>
 80087d6:	4682      	mov	sl, r0
 80087d8:	468b      	mov	fp, r1
 80087da:	9b08      	ldr	r3, [sp, #32]
 80087dc:	b1b3      	cbz	r3, 800880c <_strtod_l+0x604>
 80087de:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80087e2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	4659      	mov	r1, fp
 80087ea:	dd0f      	ble.n	800880c <_strtod_l+0x604>
 80087ec:	2b1f      	cmp	r3, #31
 80087ee:	dd55      	ble.n	800889c <_strtod_l+0x694>
 80087f0:	2b34      	cmp	r3, #52	@ 0x34
 80087f2:	bfde      	ittt	le
 80087f4:	f04f 33ff 	movle.w	r3, #4294967295
 80087f8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80087fc:	4093      	lslle	r3, r2
 80087fe:	f04f 0a00 	mov.w	sl, #0
 8008802:	bfcc      	ite	gt
 8008804:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008808:	ea03 0b01 	andle.w	fp, r3, r1
 800880c:	2200      	movs	r2, #0
 800880e:	2300      	movs	r3, #0
 8008810:	4650      	mov	r0, sl
 8008812:	4659      	mov	r1, fp
 8008814:	f7f8 f978 	bl	8000b08 <__aeabi_dcmpeq>
 8008818:	2800      	cmp	r0, #0
 800881a:	d1a6      	bne.n	800876a <_strtod_l+0x562>
 800881c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800881e:	9300      	str	r3, [sp, #0]
 8008820:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008822:	9805      	ldr	r0, [sp, #20]
 8008824:	462b      	mov	r3, r5
 8008826:	463a      	mov	r2, r7
 8008828:	f002 fd26 	bl	800b278 <__s2b>
 800882c:	900a      	str	r0, [sp, #40]	@ 0x28
 800882e:	2800      	cmp	r0, #0
 8008830:	f43f af05 	beq.w	800863e <_strtod_l+0x436>
 8008834:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008836:	2a00      	cmp	r2, #0
 8008838:	eba9 0308 	sub.w	r3, r9, r8
 800883c:	bfa8      	it	ge
 800883e:	2300      	movge	r3, #0
 8008840:	9312      	str	r3, [sp, #72]	@ 0x48
 8008842:	2400      	movs	r4, #0
 8008844:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008848:	9316      	str	r3, [sp, #88]	@ 0x58
 800884a:	46a0      	mov	r8, r4
 800884c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800884e:	9805      	ldr	r0, [sp, #20]
 8008850:	6859      	ldr	r1, [r3, #4]
 8008852:	f002 fc69 	bl	800b128 <_Balloc>
 8008856:	4681      	mov	r9, r0
 8008858:	2800      	cmp	r0, #0
 800885a:	f43f aef4 	beq.w	8008646 <_strtod_l+0x43e>
 800885e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008860:	691a      	ldr	r2, [r3, #16]
 8008862:	3202      	adds	r2, #2
 8008864:	f103 010c 	add.w	r1, r3, #12
 8008868:	0092      	lsls	r2, r2, #2
 800886a:	300c      	adds	r0, #12
 800886c:	f001 f98b 	bl	8009b86 <memcpy>
 8008870:	ec4b ab10 	vmov	d0, sl, fp
 8008874:	9805      	ldr	r0, [sp, #20]
 8008876:	aa1c      	add	r2, sp, #112	@ 0x70
 8008878:	a91b      	add	r1, sp, #108	@ 0x6c
 800887a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800887e:	f003 f837 	bl	800b8f0 <__d2b>
 8008882:	901a      	str	r0, [sp, #104]	@ 0x68
 8008884:	2800      	cmp	r0, #0
 8008886:	f43f aede 	beq.w	8008646 <_strtod_l+0x43e>
 800888a:	9805      	ldr	r0, [sp, #20]
 800888c:	2101      	movs	r1, #1
 800888e:	f002 fd89 	bl	800b3a4 <__i2b>
 8008892:	4680      	mov	r8, r0
 8008894:	b948      	cbnz	r0, 80088aa <_strtod_l+0x6a2>
 8008896:	f04f 0800 	mov.w	r8, #0
 800889a:	e6d4      	b.n	8008646 <_strtod_l+0x43e>
 800889c:	f04f 32ff 	mov.w	r2, #4294967295
 80088a0:	fa02 f303 	lsl.w	r3, r2, r3
 80088a4:	ea03 0a0a 	and.w	sl, r3, sl
 80088a8:	e7b0      	b.n	800880c <_strtod_l+0x604>
 80088aa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80088ac:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80088ae:	2d00      	cmp	r5, #0
 80088b0:	bfab      	itete	ge
 80088b2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80088b4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80088b6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80088b8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80088ba:	bfac      	ite	ge
 80088bc:	18ef      	addge	r7, r5, r3
 80088be:	1b5e      	sublt	r6, r3, r5
 80088c0:	9b08      	ldr	r3, [sp, #32]
 80088c2:	1aed      	subs	r5, r5, r3
 80088c4:	4415      	add	r5, r2
 80088c6:	4b66      	ldr	r3, [pc, #408]	@ (8008a60 <_strtod_l+0x858>)
 80088c8:	3d01      	subs	r5, #1
 80088ca:	429d      	cmp	r5, r3
 80088cc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80088d0:	da50      	bge.n	8008974 <_strtod_l+0x76c>
 80088d2:	1b5b      	subs	r3, r3, r5
 80088d4:	2b1f      	cmp	r3, #31
 80088d6:	eba2 0203 	sub.w	r2, r2, r3
 80088da:	f04f 0101 	mov.w	r1, #1
 80088de:	dc3d      	bgt.n	800895c <_strtod_l+0x754>
 80088e0:	fa01 f303 	lsl.w	r3, r1, r3
 80088e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80088e6:	2300      	movs	r3, #0
 80088e8:	9310      	str	r3, [sp, #64]	@ 0x40
 80088ea:	18bd      	adds	r5, r7, r2
 80088ec:	9b08      	ldr	r3, [sp, #32]
 80088ee:	42af      	cmp	r7, r5
 80088f0:	4416      	add	r6, r2
 80088f2:	441e      	add	r6, r3
 80088f4:	463b      	mov	r3, r7
 80088f6:	bfa8      	it	ge
 80088f8:	462b      	movge	r3, r5
 80088fa:	42b3      	cmp	r3, r6
 80088fc:	bfa8      	it	ge
 80088fe:	4633      	movge	r3, r6
 8008900:	2b00      	cmp	r3, #0
 8008902:	bfc2      	ittt	gt
 8008904:	1aed      	subgt	r5, r5, r3
 8008906:	1af6      	subgt	r6, r6, r3
 8008908:	1aff      	subgt	r7, r7, r3
 800890a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800890c:	2b00      	cmp	r3, #0
 800890e:	dd16      	ble.n	800893e <_strtod_l+0x736>
 8008910:	4641      	mov	r1, r8
 8008912:	9805      	ldr	r0, [sp, #20]
 8008914:	461a      	mov	r2, r3
 8008916:	f002 fe05 	bl	800b524 <__pow5mult>
 800891a:	4680      	mov	r8, r0
 800891c:	2800      	cmp	r0, #0
 800891e:	d0ba      	beq.n	8008896 <_strtod_l+0x68e>
 8008920:	4601      	mov	r1, r0
 8008922:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008924:	9805      	ldr	r0, [sp, #20]
 8008926:	f002 fd53 	bl	800b3d0 <__multiply>
 800892a:	900e      	str	r0, [sp, #56]	@ 0x38
 800892c:	2800      	cmp	r0, #0
 800892e:	f43f ae8a 	beq.w	8008646 <_strtod_l+0x43e>
 8008932:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008934:	9805      	ldr	r0, [sp, #20]
 8008936:	f002 fc37 	bl	800b1a8 <_Bfree>
 800893a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800893c:	931a      	str	r3, [sp, #104]	@ 0x68
 800893e:	2d00      	cmp	r5, #0
 8008940:	dc1d      	bgt.n	800897e <_strtod_l+0x776>
 8008942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008944:	2b00      	cmp	r3, #0
 8008946:	dd23      	ble.n	8008990 <_strtod_l+0x788>
 8008948:	4649      	mov	r1, r9
 800894a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800894c:	9805      	ldr	r0, [sp, #20]
 800894e:	f002 fde9 	bl	800b524 <__pow5mult>
 8008952:	4681      	mov	r9, r0
 8008954:	b9e0      	cbnz	r0, 8008990 <_strtod_l+0x788>
 8008956:	f04f 0900 	mov.w	r9, #0
 800895a:	e674      	b.n	8008646 <_strtod_l+0x43e>
 800895c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008960:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008964:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008968:	35e2      	adds	r5, #226	@ 0xe2
 800896a:	fa01 f305 	lsl.w	r3, r1, r5
 800896e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008970:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008972:	e7ba      	b.n	80088ea <_strtod_l+0x6e2>
 8008974:	2300      	movs	r3, #0
 8008976:	9310      	str	r3, [sp, #64]	@ 0x40
 8008978:	2301      	movs	r3, #1
 800897a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800897c:	e7b5      	b.n	80088ea <_strtod_l+0x6e2>
 800897e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008980:	9805      	ldr	r0, [sp, #20]
 8008982:	462a      	mov	r2, r5
 8008984:	f002 fe28 	bl	800b5d8 <__lshift>
 8008988:	901a      	str	r0, [sp, #104]	@ 0x68
 800898a:	2800      	cmp	r0, #0
 800898c:	d1d9      	bne.n	8008942 <_strtod_l+0x73a>
 800898e:	e65a      	b.n	8008646 <_strtod_l+0x43e>
 8008990:	2e00      	cmp	r6, #0
 8008992:	dd07      	ble.n	80089a4 <_strtod_l+0x79c>
 8008994:	4649      	mov	r1, r9
 8008996:	9805      	ldr	r0, [sp, #20]
 8008998:	4632      	mov	r2, r6
 800899a:	f002 fe1d 	bl	800b5d8 <__lshift>
 800899e:	4681      	mov	r9, r0
 80089a0:	2800      	cmp	r0, #0
 80089a2:	d0d8      	beq.n	8008956 <_strtod_l+0x74e>
 80089a4:	2f00      	cmp	r7, #0
 80089a6:	dd08      	ble.n	80089ba <_strtod_l+0x7b2>
 80089a8:	4641      	mov	r1, r8
 80089aa:	9805      	ldr	r0, [sp, #20]
 80089ac:	463a      	mov	r2, r7
 80089ae:	f002 fe13 	bl	800b5d8 <__lshift>
 80089b2:	4680      	mov	r8, r0
 80089b4:	2800      	cmp	r0, #0
 80089b6:	f43f ae46 	beq.w	8008646 <_strtod_l+0x43e>
 80089ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80089bc:	9805      	ldr	r0, [sp, #20]
 80089be:	464a      	mov	r2, r9
 80089c0:	f002 fe92 	bl	800b6e8 <__mdiff>
 80089c4:	4604      	mov	r4, r0
 80089c6:	2800      	cmp	r0, #0
 80089c8:	f43f ae3d 	beq.w	8008646 <_strtod_l+0x43e>
 80089cc:	68c3      	ldr	r3, [r0, #12]
 80089ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 80089d0:	2300      	movs	r3, #0
 80089d2:	60c3      	str	r3, [r0, #12]
 80089d4:	4641      	mov	r1, r8
 80089d6:	f002 fe6b 	bl	800b6b0 <__mcmp>
 80089da:	2800      	cmp	r0, #0
 80089dc:	da46      	bge.n	8008a6c <_strtod_l+0x864>
 80089de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089e0:	ea53 030a 	orrs.w	r3, r3, sl
 80089e4:	d16c      	bne.n	8008ac0 <_strtod_l+0x8b8>
 80089e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d168      	bne.n	8008ac0 <_strtod_l+0x8b8>
 80089ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80089f2:	0d1b      	lsrs	r3, r3, #20
 80089f4:	051b      	lsls	r3, r3, #20
 80089f6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80089fa:	d961      	bls.n	8008ac0 <_strtod_l+0x8b8>
 80089fc:	6963      	ldr	r3, [r4, #20]
 80089fe:	b913      	cbnz	r3, 8008a06 <_strtod_l+0x7fe>
 8008a00:	6923      	ldr	r3, [r4, #16]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	dd5c      	ble.n	8008ac0 <_strtod_l+0x8b8>
 8008a06:	4621      	mov	r1, r4
 8008a08:	2201      	movs	r2, #1
 8008a0a:	9805      	ldr	r0, [sp, #20]
 8008a0c:	f002 fde4 	bl	800b5d8 <__lshift>
 8008a10:	4641      	mov	r1, r8
 8008a12:	4604      	mov	r4, r0
 8008a14:	f002 fe4c 	bl	800b6b0 <__mcmp>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	dd51      	ble.n	8008ac0 <_strtod_l+0x8b8>
 8008a1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a20:	9a08      	ldr	r2, [sp, #32]
 8008a22:	0d1b      	lsrs	r3, r3, #20
 8008a24:	051b      	lsls	r3, r3, #20
 8008a26:	2a00      	cmp	r2, #0
 8008a28:	d06b      	beq.n	8008b02 <_strtod_l+0x8fa>
 8008a2a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008a2e:	d868      	bhi.n	8008b02 <_strtod_l+0x8fa>
 8008a30:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008a34:	f67f ae9d 	bls.w	8008772 <_strtod_l+0x56a>
 8008a38:	4b0a      	ldr	r3, [pc, #40]	@ (8008a64 <_strtod_l+0x85c>)
 8008a3a:	4650      	mov	r0, sl
 8008a3c:	4659      	mov	r1, fp
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f7f7 fdfa 	bl	8000638 <__aeabi_dmul>
 8008a44:	4b08      	ldr	r3, [pc, #32]	@ (8008a68 <_strtod_l+0x860>)
 8008a46:	400b      	ands	r3, r1
 8008a48:	4682      	mov	sl, r0
 8008a4a:	468b      	mov	fp, r1
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f47f ae05 	bne.w	800865c <_strtod_l+0x454>
 8008a52:	9a05      	ldr	r2, [sp, #20]
 8008a54:	2322      	movs	r3, #34	@ 0x22
 8008a56:	6013      	str	r3, [r2, #0]
 8008a58:	e600      	b.n	800865c <_strtod_l+0x454>
 8008a5a:	bf00      	nop
 8008a5c:	0800c530 	.word	0x0800c530
 8008a60:	fffffc02 	.word	0xfffffc02
 8008a64:	39500000 	.word	0x39500000
 8008a68:	7ff00000 	.word	0x7ff00000
 8008a6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008a70:	d165      	bne.n	8008b3e <_strtod_l+0x936>
 8008a72:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008a74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a78:	b35a      	cbz	r2, 8008ad2 <_strtod_l+0x8ca>
 8008a7a:	4a9f      	ldr	r2, [pc, #636]	@ (8008cf8 <_strtod_l+0xaf0>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d12b      	bne.n	8008ad8 <_strtod_l+0x8d0>
 8008a80:	9b08      	ldr	r3, [sp, #32]
 8008a82:	4651      	mov	r1, sl
 8008a84:	b303      	cbz	r3, 8008ac8 <_strtod_l+0x8c0>
 8008a86:	4b9d      	ldr	r3, [pc, #628]	@ (8008cfc <_strtod_l+0xaf4>)
 8008a88:	465a      	mov	r2, fp
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008a90:	f04f 32ff 	mov.w	r2, #4294967295
 8008a94:	d81b      	bhi.n	8008ace <_strtod_l+0x8c6>
 8008a96:	0d1b      	lsrs	r3, r3, #20
 8008a98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa0:	4299      	cmp	r1, r3
 8008aa2:	d119      	bne.n	8008ad8 <_strtod_l+0x8d0>
 8008aa4:	4b96      	ldr	r3, [pc, #600]	@ (8008d00 <_strtod_l+0xaf8>)
 8008aa6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d102      	bne.n	8008ab2 <_strtod_l+0x8aa>
 8008aac:	3101      	adds	r1, #1
 8008aae:	f43f adca 	beq.w	8008646 <_strtod_l+0x43e>
 8008ab2:	4b92      	ldr	r3, [pc, #584]	@ (8008cfc <_strtod_l+0xaf4>)
 8008ab4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ab6:	401a      	ands	r2, r3
 8008ab8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008abc:	f04f 0a00 	mov.w	sl, #0
 8008ac0:	9b08      	ldr	r3, [sp, #32]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1b8      	bne.n	8008a38 <_strtod_l+0x830>
 8008ac6:	e5c9      	b.n	800865c <_strtod_l+0x454>
 8008ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8008acc:	e7e8      	b.n	8008aa0 <_strtod_l+0x898>
 8008ace:	4613      	mov	r3, r2
 8008ad0:	e7e6      	b.n	8008aa0 <_strtod_l+0x898>
 8008ad2:	ea53 030a 	orrs.w	r3, r3, sl
 8008ad6:	d0a1      	beq.n	8008a1c <_strtod_l+0x814>
 8008ad8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008ada:	b1db      	cbz	r3, 8008b14 <_strtod_l+0x90c>
 8008adc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ade:	4213      	tst	r3, r2
 8008ae0:	d0ee      	beq.n	8008ac0 <_strtod_l+0x8b8>
 8008ae2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ae4:	9a08      	ldr	r2, [sp, #32]
 8008ae6:	4650      	mov	r0, sl
 8008ae8:	4659      	mov	r1, fp
 8008aea:	b1bb      	cbz	r3, 8008b1c <_strtod_l+0x914>
 8008aec:	f7ff fb6b 	bl	80081c6 <sulp>
 8008af0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008af4:	ec53 2b10 	vmov	r2, r3, d0
 8008af8:	f7f7 fbe8 	bl	80002cc <__adddf3>
 8008afc:	4682      	mov	sl, r0
 8008afe:	468b      	mov	fp, r1
 8008b00:	e7de      	b.n	8008ac0 <_strtod_l+0x8b8>
 8008b02:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008b06:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008b0a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008b0e:	f04f 3aff 	mov.w	sl, #4294967295
 8008b12:	e7d5      	b.n	8008ac0 <_strtod_l+0x8b8>
 8008b14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008b16:	ea13 0f0a 	tst.w	r3, sl
 8008b1a:	e7e1      	b.n	8008ae0 <_strtod_l+0x8d8>
 8008b1c:	f7ff fb53 	bl	80081c6 <sulp>
 8008b20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b24:	ec53 2b10 	vmov	r2, r3, d0
 8008b28:	f7f7 fbce 	bl	80002c8 <__aeabi_dsub>
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	2300      	movs	r3, #0
 8008b30:	4682      	mov	sl, r0
 8008b32:	468b      	mov	fp, r1
 8008b34:	f7f7 ffe8 	bl	8000b08 <__aeabi_dcmpeq>
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	d0c1      	beq.n	8008ac0 <_strtod_l+0x8b8>
 8008b3c:	e619      	b.n	8008772 <_strtod_l+0x56a>
 8008b3e:	4641      	mov	r1, r8
 8008b40:	4620      	mov	r0, r4
 8008b42:	f002 ff2d 	bl	800b9a0 <__ratio>
 8008b46:	ec57 6b10 	vmov	r6, r7, d0
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008b50:	4630      	mov	r0, r6
 8008b52:	4639      	mov	r1, r7
 8008b54:	f7f7 ffec 	bl	8000b30 <__aeabi_dcmple>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	d06f      	beq.n	8008c3c <_strtod_l+0xa34>
 8008b5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d17a      	bne.n	8008c58 <_strtod_l+0xa50>
 8008b62:	f1ba 0f00 	cmp.w	sl, #0
 8008b66:	d158      	bne.n	8008c1a <_strtod_l+0xa12>
 8008b68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d15a      	bne.n	8008c28 <_strtod_l+0xa20>
 8008b72:	4b64      	ldr	r3, [pc, #400]	@ (8008d04 <_strtod_l+0xafc>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	4630      	mov	r0, r6
 8008b78:	4639      	mov	r1, r7
 8008b7a:	f7f7 ffcf 	bl	8000b1c <__aeabi_dcmplt>
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	d159      	bne.n	8008c36 <_strtod_l+0xa2e>
 8008b82:	4630      	mov	r0, r6
 8008b84:	4639      	mov	r1, r7
 8008b86:	4b60      	ldr	r3, [pc, #384]	@ (8008d08 <_strtod_l+0xb00>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f7f7 fd55 	bl	8000638 <__aeabi_dmul>
 8008b8e:	4606      	mov	r6, r0
 8008b90:	460f      	mov	r7, r1
 8008b92:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008b96:	9606      	str	r6, [sp, #24]
 8008b98:	9307      	str	r3, [sp, #28]
 8008b9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b9e:	4d57      	ldr	r5, [pc, #348]	@ (8008cfc <_strtod_l+0xaf4>)
 8008ba0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008ba4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ba6:	401d      	ands	r5, r3
 8008ba8:	4b58      	ldr	r3, [pc, #352]	@ (8008d0c <_strtod_l+0xb04>)
 8008baa:	429d      	cmp	r5, r3
 8008bac:	f040 80b2 	bne.w	8008d14 <_strtod_l+0xb0c>
 8008bb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bb2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008bb6:	ec4b ab10 	vmov	d0, sl, fp
 8008bba:	f002 fe29 	bl	800b810 <__ulp>
 8008bbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008bc2:	ec51 0b10 	vmov	r0, r1, d0
 8008bc6:	f7f7 fd37 	bl	8000638 <__aeabi_dmul>
 8008bca:	4652      	mov	r2, sl
 8008bcc:	465b      	mov	r3, fp
 8008bce:	f7f7 fb7d 	bl	80002cc <__adddf3>
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	4949      	ldr	r1, [pc, #292]	@ (8008cfc <_strtod_l+0xaf4>)
 8008bd6:	4a4e      	ldr	r2, [pc, #312]	@ (8008d10 <_strtod_l+0xb08>)
 8008bd8:	4019      	ands	r1, r3
 8008bda:	4291      	cmp	r1, r2
 8008bdc:	4682      	mov	sl, r0
 8008bde:	d942      	bls.n	8008c66 <_strtod_l+0xa5e>
 8008be0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008be2:	4b47      	ldr	r3, [pc, #284]	@ (8008d00 <_strtod_l+0xaf8>)
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d103      	bne.n	8008bf0 <_strtod_l+0x9e8>
 8008be8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008bea:	3301      	adds	r3, #1
 8008bec:	f43f ad2b 	beq.w	8008646 <_strtod_l+0x43e>
 8008bf0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008d00 <_strtod_l+0xaf8>
 8008bf4:	f04f 3aff 	mov.w	sl, #4294967295
 8008bf8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008bfa:	9805      	ldr	r0, [sp, #20]
 8008bfc:	f002 fad4 	bl	800b1a8 <_Bfree>
 8008c00:	9805      	ldr	r0, [sp, #20]
 8008c02:	4649      	mov	r1, r9
 8008c04:	f002 fad0 	bl	800b1a8 <_Bfree>
 8008c08:	9805      	ldr	r0, [sp, #20]
 8008c0a:	4641      	mov	r1, r8
 8008c0c:	f002 facc 	bl	800b1a8 <_Bfree>
 8008c10:	9805      	ldr	r0, [sp, #20]
 8008c12:	4621      	mov	r1, r4
 8008c14:	f002 fac8 	bl	800b1a8 <_Bfree>
 8008c18:	e618      	b.n	800884c <_strtod_l+0x644>
 8008c1a:	f1ba 0f01 	cmp.w	sl, #1
 8008c1e:	d103      	bne.n	8008c28 <_strtod_l+0xa20>
 8008c20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f43f ada5 	beq.w	8008772 <_strtod_l+0x56a>
 8008c28:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008cd8 <_strtod_l+0xad0>
 8008c2c:	4f35      	ldr	r7, [pc, #212]	@ (8008d04 <_strtod_l+0xafc>)
 8008c2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008c32:	2600      	movs	r6, #0
 8008c34:	e7b1      	b.n	8008b9a <_strtod_l+0x992>
 8008c36:	4f34      	ldr	r7, [pc, #208]	@ (8008d08 <_strtod_l+0xb00>)
 8008c38:	2600      	movs	r6, #0
 8008c3a:	e7aa      	b.n	8008b92 <_strtod_l+0x98a>
 8008c3c:	4b32      	ldr	r3, [pc, #200]	@ (8008d08 <_strtod_l+0xb00>)
 8008c3e:	4630      	mov	r0, r6
 8008c40:	4639      	mov	r1, r7
 8008c42:	2200      	movs	r2, #0
 8008c44:	f7f7 fcf8 	bl	8000638 <__aeabi_dmul>
 8008c48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c4a:	4606      	mov	r6, r0
 8008c4c:	460f      	mov	r7, r1
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d09f      	beq.n	8008b92 <_strtod_l+0x98a>
 8008c52:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008c56:	e7a0      	b.n	8008b9a <_strtod_l+0x992>
 8008c58:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008ce0 <_strtod_l+0xad8>
 8008c5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008c60:	ec57 6b17 	vmov	r6, r7, d7
 8008c64:	e799      	b.n	8008b9a <_strtod_l+0x992>
 8008c66:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008c6a:	9b08      	ldr	r3, [sp, #32]
 8008c6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d1c1      	bne.n	8008bf8 <_strtod_l+0x9f0>
 8008c74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c78:	0d1b      	lsrs	r3, r3, #20
 8008c7a:	051b      	lsls	r3, r3, #20
 8008c7c:	429d      	cmp	r5, r3
 8008c7e:	d1bb      	bne.n	8008bf8 <_strtod_l+0x9f0>
 8008c80:	4630      	mov	r0, r6
 8008c82:	4639      	mov	r1, r7
 8008c84:	f7f8 f838 	bl	8000cf8 <__aeabi_d2lz>
 8008c88:	f7f7 fca8 	bl	80005dc <__aeabi_l2d>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4630      	mov	r0, r6
 8008c92:	4639      	mov	r1, r7
 8008c94:	f7f7 fb18 	bl	80002c8 <__aeabi_dsub>
 8008c98:	460b      	mov	r3, r1
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008ca0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008ca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ca6:	ea46 060a 	orr.w	r6, r6, sl
 8008caa:	431e      	orrs	r6, r3
 8008cac:	d06f      	beq.n	8008d8e <_strtod_l+0xb86>
 8008cae:	a30e      	add	r3, pc, #56	@ (adr r3, 8008ce8 <_strtod_l+0xae0>)
 8008cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb4:	f7f7 ff32 	bl	8000b1c <__aeabi_dcmplt>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	f47f accf 	bne.w	800865c <_strtod_l+0x454>
 8008cbe:	a30c      	add	r3, pc, #48	@ (adr r3, 8008cf0 <_strtod_l+0xae8>)
 8008cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008cc8:	f7f7 ff46 	bl	8000b58 <__aeabi_dcmpgt>
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	d093      	beq.n	8008bf8 <_strtod_l+0x9f0>
 8008cd0:	e4c4      	b.n	800865c <_strtod_l+0x454>
 8008cd2:	bf00      	nop
 8008cd4:	f3af 8000 	nop.w
 8008cd8:	00000000 	.word	0x00000000
 8008cdc:	bff00000 	.word	0xbff00000
 8008ce0:	00000000 	.word	0x00000000
 8008ce4:	3ff00000 	.word	0x3ff00000
 8008ce8:	94a03595 	.word	0x94a03595
 8008cec:	3fdfffff 	.word	0x3fdfffff
 8008cf0:	35afe535 	.word	0x35afe535
 8008cf4:	3fe00000 	.word	0x3fe00000
 8008cf8:	000fffff 	.word	0x000fffff
 8008cfc:	7ff00000 	.word	0x7ff00000
 8008d00:	7fefffff 	.word	0x7fefffff
 8008d04:	3ff00000 	.word	0x3ff00000
 8008d08:	3fe00000 	.word	0x3fe00000
 8008d0c:	7fe00000 	.word	0x7fe00000
 8008d10:	7c9fffff 	.word	0x7c9fffff
 8008d14:	9b08      	ldr	r3, [sp, #32]
 8008d16:	b323      	cbz	r3, 8008d62 <_strtod_l+0xb5a>
 8008d18:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008d1c:	d821      	bhi.n	8008d62 <_strtod_l+0xb5a>
 8008d1e:	a328      	add	r3, pc, #160	@ (adr r3, 8008dc0 <_strtod_l+0xbb8>)
 8008d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d24:	4630      	mov	r0, r6
 8008d26:	4639      	mov	r1, r7
 8008d28:	f7f7 ff02 	bl	8000b30 <__aeabi_dcmple>
 8008d2c:	b1a0      	cbz	r0, 8008d58 <_strtod_l+0xb50>
 8008d2e:	4639      	mov	r1, r7
 8008d30:	4630      	mov	r0, r6
 8008d32:	f7f7 ff59 	bl	8000be8 <__aeabi_d2uiz>
 8008d36:	2801      	cmp	r0, #1
 8008d38:	bf38      	it	cc
 8008d3a:	2001      	movcc	r0, #1
 8008d3c:	f7f7 fc02 	bl	8000544 <__aeabi_ui2d>
 8008d40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d42:	4606      	mov	r6, r0
 8008d44:	460f      	mov	r7, r1
 8008d46:	b9fb      	cbnz	r3, 8008d88 <_strtod_l+0xb80>
 8008d48:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008d4c:	9014      	str	r0, [sp, #80]	@ 0x50
 8008d4e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008d50:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008d54:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008d58:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008d5a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008d5e:	1b5b      	subs	r3, r3, r5
 8008d60:	9311      	str	r3, [sp, #68]	@ 0x44
 8008d62:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008d66:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008d6a:	f002 fd51 	bl	800b810 <__ulp>
 8008d6e:	4650      	mov	r0, sl
 8008d70:	ec53 2b10 	vmov	r2, r3, d0
 8008d74:	4659      	mov	r1, fp
 8008d76:	f7f7 fc5f 	bl	8000638 <__aeabi_dmul>
 8008d7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008d7e:	f7f7 faa5 	bl	80002cc <__adddf3>
 8008d82:	4682      	mov	sl, r0
 8008d84:	468b      	mov	fp, r1
 8008d86:	e770      	b.n	8008c6a <_strtod_l+0xa62>
 8008d88:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008d8c:	e7e0      	b.n	8008d50 <_strtod_l+0xb48>
 8008d8e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008dc8 <_strtod_l+0xbc0>)
 8008d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d94:	f7f7 fec2 	bl	8000b1c <__aeabi_dcmplt>
 8008d98:	e798      	b.n	8008ccc <_strtod_l+0xac4>
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d9e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008da0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008da2:	6013      	str	r3, [r2, #0]
 8008da4:	f7ff ba6d 	b.w	8008282 <_strtod_l+0x7a>
 8008da8:	2a65      	cmp	r2, #101	@ 0x65
 8008daa:	f43f ab66 	beq.w	800847a <_strtod_l+0x272>
 8008dae:	2a45      	cmp	r2, #69	@ 0x45
 8008db0:	f43f ab63 	beq.w	800847a <_strtod_l+0x272>
 8008db4:	2301      	movs	r3, #1
 8008db6:	f7ff bb9e 	b.w	80084f6 <_strtod_l+0x2ee>
 8008dba:	bf00      	nop
 8008dbc:	f3af 8000 	nop.w
 8008dc0:	ffc00000 	.word	0xffc00000
 8008dc4:	41dfffff 	.word	0x41dfffff
 8008dc8:	94a03595 	.word	0x94a03595
 8008dcc:	3fcfffff 	.word	0x3fcfffff

08008dd0 <strtod>:
 8008dd0:	460a      	mov	r2, r1
 8008dd2:	4601      	mov	r1, r0
 8008dd4:	4802      	ldr	r0, [pc, #8]	@ (8008de0 <strtod+0x10>)
 8008dd6:	4b03      	ldr	r3, [pc, #12]	@ (8008de4 <strtod+0x14>)
 8008dd8:	6800      	ldr	r0, [r0, #0]
 8008dda:	f7ff ba15 	b.w	8008208 <_strtod_l>
 8008dde:	bf00      	nop
 8008de0:	200001c4 	.word	0x200001c4
 8008de4:	20000058 	.word	0x20000058

08008de8 <_strtol_l.constprop.0>:
 8008de8:	2b24      	cmp	r3, #36	@ 0x24
 8008dea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dee:	4686      	mov	lr, r0
 8008df0:	4690      	mov	r8, r2
 8008df2:	d801      	bhi.n	8008df8 <_strtol_l.constprop.0+0x10>
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d106      	bne.n	8008e06 <_strtol_l.constprop.0+0x1e>
 8008df8:	f000 fe98 	bl	8009b2c <__errno>
 8008dfc:	2316      	movs	r3, #22
 8008dfe:	6003      	str	r3, [r0, #0]
 8008e00:	2000      	movs	r0, #0
 8008e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e06:	4834      	ldr	r0, [pc, #208]	@ (8008ed8 <_strtol_l.constprop.0+0xf0>)
 8008e08:	460d      	mov	r5, r1
 8008e0a:	462a      	mov	r2, r5
 8008e0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e10:	5d06      	ldrb	r6, [r0, r4]
 8008e12:	f016 0608 	ands.w	r6, r6, #8
 8008e16:	d1f8      	bne.n	8008e0a <_strtol_l.constprop.0+0x22>
 8008e18:	2c2d      	cmp	r4, #45	@ 0x2d
 8008e1a:	d12d      	bne.n	8008e78 <_strtol_l.constprop.0+0x90>
 8008e1c:	782c      	ldrb	r4, [r5, #0]
 8008e1e:	2601      	movs	r6, #1
 8008e20:	1c95      	adds	r5, r2, #2
 8008e22:	f033 0210 	bics.w	r2, r3, #16
 8008e26:	d109      	bne.n	8008e3c <_strtol_l.constprop.0+0x54>
 8008e28:	2c30      	cmp	r4, #48	@ 0x30
 8008e2a:	d12a      	bne.n	8008e82 <_strtol_l.constprop.0+0x9a>
 8008e2c:	782a      	ldrb	r2, [r5, #0]
 8008e2e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008e32:	2a58      	cmp	r2, #88	@ 0x58
 8008e34:	d125      	bne.n	8008e82 <_strtol_l.constprop.0+0x9a>
 8008e36:	786c      	ldrb	r4, [r5, #1]
 8008e38:	2310      	movs	r3, #16
 8008e3a:	3502      	adds	r5, #2
 8008e3c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008e40:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008e44:	2200      	movs	r2, #0
 8008e46:	fbbc f9f3 	udiv	r9, ip, r3
 8008e4a:	4610      	mov	r0, r2
 8008e4c:	fb03 ca19 	mls	sl, r3, r9, ip
 8008e50:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008e54:	2f09      	cmp	r7, #9
 8008e56:	d81b      	bhi.n	8008e90 <_strtol_l.constprop.0+0xa8>
 8008e58:	463c      	mov	r4, r7
 8008e5a:	42a3      	cmp	r3, r4
 8008e5c:	dd27      	ble.n	8008eae <_strtol_l.constprop.0+0xc6>
 8008e5e:	1c57      	adds	r7, r2, #1
 8008e60:	d007      	beq.n	8008e72 <_strtol_l.constprop.0+0x8a>
 8008e62:	4581      	cmp	r9, r0
 8008e64:	d320      	bcc.n	8008ea8 <_strtol_l.constprop.0+0xc0>
 8008e66:	d101      	bne.n	8008e6c <_strtol_l.constprop.0+0x84>
 8008e68:	45a2      	cmp	sl, r4
 8008e6a:	db1d      	blt.n	8008ea8 <_strtol_l.constprop.0+0xc0>
 8008e6c:	fb00 4003 	mla	r0, r0, r3, r4
 8008e70:	2201      	movs	r2, #1
 8008e72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e76:	e7eb      	b.n	8008e50 <_strtol_l.constprop.0+0x68>
 8008e78:	2c2b      	cmp	r4, #43	@ 0x2b
 8008e7a:	bf04      	itt	eq
 8008e7c:	782c      	ldrbeq	r4, [r5, #0]
 8008e7e:	1c95      	addeq	r5, r2, #2
 8008e80:	e7cf      	b.n	8008e22 <_strtol_l.constprop.0+0x3a>
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1da      	bne.n	8008e3c <_strtol_l.constprop.0+0x54>
 8008e86:	2c30      	cmp	r4, #48	@ 0x30
 8008e88:	bf0c      	ite	eq
 8008e8a:	2308      	moveq	r3, #8
 8008e8c:	230a      	movne	r3, #10
 8008e8e:	e7d5      	b.n	8008e3c <_strtol_l.constprop.0+0x54>
 8008e90:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008e94:	2f19      	cmp	r7, #25
 8008e96:	d801      	bhi.n	8008e9c <_strtol_l.constprop.0+0xb4>
 8008e98:	3c37      	subs	r4, #55	@ 0x37
 8008e9a:	e7de      	b.n	8008e5a <_strtol_l.constprop.0+0x72>
 8008e9c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008ea0:	2f19      	cmp	r7, #25
 8008ea2:	d804      	bhi.n	8008eae <_strtol_l.constprop.0+0xc6>
 8008ea4:	3c57      	subs	r4, #87	@ 0x57
 8008ea6:	e7d8      	b.n	8008e5a <_strtol_l.constprop.0+0x72>
 8008ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8008eac:	e7e1      	b.n	8008e72 <_strtol_l.constprop.0+0x8a>
 8008eae:	1c53      	adds	r3, r2, #1
 8008eb0:	d108      	bne.n	8008ec4 <_strtol_l.constprop.0+0xdc>
 8008eb2:	2322      	movs	r3, #34	@ 0x22
 8008eb4:	f8ce 3000 	str.w	r3, [lr]
 8008eb8:	4660      	mov	r0, ip
 8008eba:	f1b8 0f00 	cmp.w	r8, #0
 8008ebe:	d0a0      	beq.n	8008e02 <_strtol_l.constprop.0+0x1a>
 8008ec0:	1e69      	subs	r1, r5, #1
 8008ec2:	e006      	b.n	8008ed2 <_strtol_l.constprop.0+0xea>
 8008ec4:	b106      	cbz	r6, 8008ec8 <_strtol_l.constprop.0+0xe0>
 8008ec6:	4240      	negs	r0, r0
 8008ec8:	f1b8 0f00 	cmp.w	r8, #0
 8008ecc:	d099      	beq.n	8008e02 <_strtol_l.constprop.0+0x1a>
 8008ece:	2a00      	cmp	r2, #0
 8008ed0:	d1f6      	bne.n	8008ec0 <_strtol_l.constprop.0+0xd8>
 8008ed2:	f8c8 1000 	str.w	r1, [r8]
 8008ed6:	e794      	b.n	8008e02 <_strtol_l.constprop.0+0x1a>
 8008ed8:	0800c559 	.word	0x0800c559

08008edc <strtol>:
 8008edc:	4613      	mov	r3, r2
 8008ede:	460a      	mov	r2, r1
 8008ee0:	4601      	mov	r1, r0
 8008ee2:	4802      	ldr	r0, [pc, #8]	@ (8008eec <strtol+0x10>)
 8008ee4:	6800      	ldr	r0, [r0, #0]
 8008ee6:	f7ff bf7f 	b.w	8008de8 <_strtol_l.constprop.0>
 8008eea:	bf00      	nop
 8008eec:	200001c4 	.word	0x200001c4

08008ef0 <__cvt>:
 8008ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef4:	ec57 6b10 	vmov	r6, r7, d0
 8008ef8:	2f00      	cmp	r7, #0
 8008efa:	460c      	mov	r4, r1
 8008efc:	4619      	mov	r1, r3
 8008efe:	463b      	mov	r3, r7
 8008f00:	bfbb      	ittet	lt
 8008f02:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008f06:	461f      	movlt	r7, r3
 8008f08:	2300      	movge	r3, #0
 8008f0a:	232d      	movlt	r3, #45	@ 0x2d
 8008f0c:	700b      	strb	r3, [r1, #0]
 8008f0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f10:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008f14:	4691      	mov	r9, r2
 8008f16:	f023 0820 	bic.w	r8, r3, #32
 8008f1a:	bfbc      	itt	lt
 8008f1c:	4632      	movlt	r2, r6
 8008f1e:	4616      	movlt	r6, r2
 8008f20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008f24:	d005      	beq.n	8008f32 <__cvt+0x42>
 8008f26:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008f2a:	d100      	bne.n	8008f2e <__cvt+0x3e>
 8008f2c:	3401      	adds	r4, #1
 8008f2e:	2102      	movs	r1, #2
 8008f30:	e000      	b.n	8008f34 <__cvt+0x44>
 8008f32:	2103      	movs	r1, #3
 8008f34:	ab03      	add	r3, sp, #12
 8008f36:	9301      	str	r3, [sp, #4]
 8008f38:	ab02      	add	r3, sp, #8
 8008f3a:	9300      	str	r3, [sp, #0]
 8008f3c:	ec47 6b10 	vmov	d0, r6, r7
 8008f40:	4653      	mov	r3, sl
 8008f42:	4622      	mov	r2, r4
 8008f44:	f000 fee0 	bl	8009d08 <_dtoa_r>
 8008f48:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008f4c:	4605      	mov	r5, r0
 8008f4e:	d119      	bne.n	8008f84 <__cvt+0x94>
 8008f50:	f019 0f01 	tst.w	r9, #1
 8008f54:	d00e      	beq.n	8008f74 <__cvt+0x84>
 8008f56:	eb00 0904 	add.w	r9, r0, r4
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	4630      	mov	r0, r6
 8008f60:	4639      	mov	r1, r7
 8008f62:	f7f7 fdd1 	bl	8000b08 <__aeabi_dcmpeq>
 8008f66:	b108      	cbz	r0, 8008f6c <__cvt+0x7c>
 8008f68:	f8cd 900c 	str.w	r9, [sp, #12]
 8008f6c:	2230      	movs	r2, #48	@ 0x30
 8008f6e:	9b03      	ldr	r3, [sp, #12]
 8008f70:	454b      	cmp	r3, r9
 8008f72:	d31e      	bcc.n	8008fb2 <__cvt+0xc2>
 8008f74:	9b03      	ldr	r3, [sp, #12]
 8008f76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f78:	1b5b      	subs	r3, r3, r5
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	6013      	str	r3, [r2, #0]
 8008f7e:	b004      	add	sp, #16
 8008f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008f88:	eb00 0904 	add.w	r9, r0, r4
 8008f8c:	d1e5      	bne.n	8008f5a <__cvt+0x6a>
 8008f8e:	7803      	ldrb	r3, [r0, #0]
 8008f90:	2b30      	cmp	r3, #48	@ 0x30
 8008f92:	d10a      	bne.n	8008faa <__cvt+0xba>
 8008f94:	2200      	movs	r2, #0
 8008f96:	2300      	movs	r3, #0
 8008f98:	4630      	mov	r0, r6
 8008f9a:	4639      	mov	r1, r7
 8008f9c:	f7f7 fdb4 	bl	8000b08 <__aeabi_dcmpeq>
 8008fa0:	b918      	cbnz	r0, 8008faa <__cvt+0xba>
 8008fa2:	f1c4 0401 	rsb	r4, r4, #1
 8008fa6:	f8ca 4000 	str.w	r4, [sl]
 8008faa:	f8da 3000 	ldr.w	r3, [sl]
 8008fae:	4499      	add	r9, r3
 8008fb0:	e7d3      	b.n	8008f5a <__cvt+0x6a>
 8008fb2:	1c59      	adds	r1, r3, #1
 8008fb4:	9103      	str	r1, [sp, #12]
 8008fb6:	701a      	strb	r2, [r3, #0]
 8008fb8:	e7d9      	b.n	8008f6e <__cvt+0x7e>

08008fba <__exponent>:
 8008fba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fbc:	2900      	cmp	r1, #0
 8008fbe:	bfba      	itte	lt
 8008fc0:	4249      	neglt	r1, r1
 8008fc2:	232d      	movlt	r3, #45	@ 0x2d
 8008fc4:	232b      	movge	r3, #43	@ 0x2b
 8008fc6:	2909      	cmp	r1, #9
 8008fc8:	7002      	strb	r2, [r0, #0]
 8008fca:	7043      	strb	r3, [r0, #1]
 8008fcc:	dd29      	ble.n	8009022 <__exponent+0x68>
 8008fce:	f10d 0307 	add.w	r3, sp, #7
 8008fd2:	461d      	mov	r5, r3
 8008fd4:	270a      	movs	r7, #10
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	fbb1 f6f7 	udiv	r6, r1, r7
 8008fdc:	fb07 1416 	mls	r4, r7, r6, r1
 8008fe0:	3430      	adds	r4, #48	@ 0x30
 8008fe2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008fe6:	460c      	mov	r4, r1
 8008fe8:	2c63      	cmp	r4, #99	@ 0x63
 8008fea:	f103 33ff 	add.w	r3, r3, #4294967295
 8008fee:	4631      	mov	r1, r6
 8008ff0:	dcf1      	bgt.n	8008fd6 <__exponent+0x1c>
 8008ff2:	3130      	adds	r1, #48	@ 0x30
 8008ff4:	1e94      	subs	r4, r2, #2
 8008ff6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008ffa:	1c41      	adds	r1, r0, #1
 8008ffc:	4623      	mov	r3, r4
 8008ffe:	42ab      	cmp	r3, r5
 8009000:	d30a      	bcc.n	8009018 <__exponent+0x5e>
 8009002:	f10d 0309 	add.w	r3, sp, #9
 8009006:	1a9b      	subs	r3, r3, r2
 8009008:	42ac      	cmp	r4, r5
 800900a:	bf88      	it	hi
 800900c:	2300      	movhi	r3, #0
 800900e:	3302      	adds	r3, #2
 8009010:	4403      	add	r3, r0
 8009012:	1a18      	subs	r0, r3, r0
 8009014:	b003      	add	sp, #12
 8009016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009018:	f813 6b01 	ldrb.w	r6, [r3], #1
 800901c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009020:	e7ed      	b.n	8008ffe <__exponent+0x44>
 8009022:	2330      	movs	r3, #48	@ 0x30
 8009024:	3130      	adds	r1, #48	@ 0x30
 8009026:	7083      	strb	r3, [r0, #2]
 8009028:	70c1      	strb	r1, [r0, #3]
 800902a:	1d03      	adds	r3, r0, #4
 800902c:	e7f1      	b.n	8009012 <__exponent+0x58>
	...

08009030 <_printf_float>:
 8009030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009034:	b08d      	sub	sp, #52	@ 0x34
 8009036:	460c      	mov	r4, r1
 8009038:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800903c:	4616      	mov	r6, r2
 800903e:	461f      	mov	r7, r3
 8009040:	4605      	mov	r5, r0
 8009042:	f000 fd29 	bl	8009a98 <_localeconv_r>
 8009046:	6803      	ldr	r3, [r0, #0]
 8009048:	9304      	str	r3, [sp, #16]
 800904a:	4618      	mov	r0, r3
 800904c:	f7f7 f930 	bl	80002b0 <strlen>
 8009050:	2300      	movs	r3, #0
 8009052:	930a      	str	r3, [sp, #40]	@ 0x28
 8009054:	f8d8 3000 	ldr.w	r3, [r8]
 8009058:	9005      	str	r0, [sp, #20]
 800905a:	3307      	adds	r3, #7
 800905c:	f023 0307 	bic.w	r3, r3, #7
 8009060:	f103 0208 	add.w	r2, r3, #8
 8009064:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009068:	f8d4 b000 	ldr.w	fp, [r4]
 800906c:	f8c8 2000 	str.w	r2, [r8]
 8009070:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009074:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009078:	9307      	str	r3, [sp, #28]
 800907a:	f8cd 8018 	str.w	r8, [sp, #24]
 800907e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009082:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009086:	4b9c      	ldr	r3, [pc, #624]	@ (80092f8 <_printf_float+0x2c8>)
 8009088:	f04f 32ff 	mov.w	r2, #4294967295
 800908c:	f7f7 fd6e 	bl	8000b6c <__aeabi_dcmpun>
 8009090:	bb70      	cbnz	r0, 80090f0 <_printf_float+0xc0>
 8009092:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009096:	4b98      	ldr	r3, [pc, #608]	@ (80092f8 <_printf_float+0x2c8>)
 8009098:	f04f 32ff 	mov.w	r2, #4294967295
 800909c:	f7f7 fd48 	bl	8000b30 <__aeabi_dcmple>
 80090a0:	bb30      	cbnz	r0, 80090f0 <_printf_float+0xc0>
 80090a2:	2200      	movs	r2, #0
 80090a4:	2300      	movs	r3, #0
 80090a6:	4640      	mov	r0, r8
 80090a8:	4649      	mov	r1, r9
 80090aa:	f7f7 fd37 	bl	8000b1c <__aeabi_dcmplt>
 80090ae:	b110      	cbz	r0, 80090b6 <_printf_float+0x86>
 80090b0:	232d      	movs	r3, #45	@ 0x2d
 80090b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090b6:	4a91      	ldr	r2, [pc, #580]	@ (80092fc <_printf_float+0x2cc>)
 80090b8:	4b91      	ldr	r3, [pc, #580]	@ (8009300 <_printf_float+0x2d0>)
 80090ba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80090be:	bf94      	ite	ls
 80090c0:	4690      	movls	r8, r2
 80090c2:	4698      	movhi	r8, r3
 80090c4:	2303      	movs	r3, #3
 80090c6:	6123      	str	r3, [r4, #16]
 80090c8:	f02b 0304 	bic.w	r3, fp, #4
 80090cc:	6023      	str	r3, [r4, #0]
 80090ce:	f04f 0900 	mov.w	r9, #0
 80090d2:	9700      	str	r7, [sp, #0]
 80090d4:	4633      	mov	r3, r6
 80090d6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80090d8:	4621      	mov	r1, r4
 80090da:	4628      	mov	r0, r5
 80090dc:	f000 f9d2 	bl	8009484 <_printf_common>
 80090e0:	3001      	adds	r0, #1
 80090e2:	f040 808d 	bne.w	8009200 <_printf_float+0x1d0>
 80090e6:	f04f 30ff 	mov.w	r0, #4294967295
 80090ea:	b00d      	add	sp, #52	@ 0x34
 80090ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f0:	4642      	mov	r2, r8
 80090f2:	464b      	mov	r3, r9
 80090f4:	4640      	mov	r0, r8
 80090f6:	4649      	mov	r1, r9
 80090f8:	f7f7 fd38 	bl	8000b6c <__aeabi_dcmpun>
 80090fc:	b140      	cbz	r0, 8009110 <_printf_float+0xe0>
 80090fe:	464b      	mov	r3, r9
 8009100:	2b00      	cmp	r3, #0
 8009102:	bfbc      	itt	lt
 8009104:	232d      	movlt	r3, #45	@ 0x2d
 8009106:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800910a:	4a7e      	ldr	r2, [pc, #504]	@ (8009304 <_printf_float+0x2d4>)
 800910c:	4b7e      	ldr	r3, [pc, #504]	@ (8009308 <_printf_float+0x2d8>)
 800910e:	e7d4      	b.n	80090ba <_printf_float+0x8a>
 8009110:	6863      	ldr	r3, [r4, #4]
 8009112:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009116:	9206      	str	r2, [sp, #24]
 8009118:	1c5a      	adds	r2, r3, #1
 800911a:	d13b      	bne.n	8009194 <_printf_float+0x164>
 800911c:	2306      	movs	r3, #6
 800911e:	6063      	str	r3, [r4, #4]
 8009120:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009124:	2300      	movs	r3, #0
 8009126:	6022      	str	r2, [r4, #0]
 8009128:	9303      	str	r3, [sp, #12]
 800912a:	ab0a      	add	r3, sp, #40	@ 0x28
 800912c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009130:	ab09      	add	r3, sp, #36	@ 0x24
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	6861      	ldr	r1, [r4, #4]
 8009136:	ec49 8b10 	vmov	d0, r8, r9
 800913a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800913e:	4628      	mov	r0, r5
 8009140:	f7ff fed6 	bl	8008ef0 <__cvt>
 8009144:	9b06      	ldr	r3, [sp, #24]
 8009146:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009148:	2b47      	cmp	r3, #71	@ 0x47
 800914a:	4680      	mov	r8, r0
 800914c:	d129      	bne.n	80091a2 <_printf_float+0x172>
 800914e:	1cc8      	adds	r0, r1, #3
 8009150:	db02      	blt.n	8009158 <_printf_float+0x128>
 8009152:	6863      	ldr	r3, [r4, #4]
 8009154:	4299      	cmp	r1, r3
 8009156:	dd41      	ble.n	80091dc <_printf_float+0x1ac>
 8009158:	f1aa 0a02 	sub.w	sl, sl, #2
 800915c:	fa5f fa8a 	uxtb.w	sl, sl
 8009160:	3901      	subs	r1, #1
 8009162:	4652      	mov	r2, sl
 8009164:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009168:	9109      	str	r1, [sp, #36]	@ 0x24
 800916a:	f7ff ff26 	bl	8008fba <__exponent>
 800916e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009170:	1813      	adds	r3, r2, r0
 8009172:	2a01      	cmp	r2, #1
 8009174:	4681      	mov	r9, r0
 8009176:	6123      	str	r3, [r4, #16]
 8009178:	dc02      	bgt.n	8009180 <_printf_float+0x150>
 800917a:	6822      	ldr	r2, [r4, #0]
 800917c:	07d2      	lsls	r2, r2, #31
 800917e:	d501      	bpl.n	8009184 <_printf_float+0x154>
 8009180:	3301      	adds	r3, #1
 8009182:	6123      	str	r3, [r4, #16]
 8009184:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009188:	2b00      	cmp	r3, #0
 800918a:	d0a2      	beq.n	80090d2 <_printf_float+0xa2>
 800918c:	232d      	movs	r3, #45	@ 0x2d
 800918e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009192:	e79e      	b.n	80090d2 <_printf_float+0xa2>
 8009194:	9a06      	ldr	r2, [sp, #24]
 8009196:	2a47      	cmp	r2, #71	@ 0x47
 8009198:	d1c2      	bne.n	8009120 <_printf_float+0xf0>
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1c0      	bne.n	8009120 <_printf_float+0xf0>
 800919e:	2301      	movs	r3, #1
 80091a0:	e7bd      	b.n	800911e <_printf_float+0xee>
 80091a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80091a6:	d9db      	bls.n	8009160 <_printf_float+0x130>
 80091a8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80091ac:	d118      	bne.n	80091e0 <_printf_float+0x1b0>
 80091ae:	2900      	cmp	r1, #0
 80091b0:	6863      	ldr	r3, [r4, #4]
 80091b2:	dd0b      	ble.n	80091cc <_printf_float+0x19c>
 80091b4:	6121      	str	r1, [r4, #16]
 80091b6:	b913      	cbnz	r3, 80091be <_printf_float+0x18e>
 80091b8:	6822      	ldr	r2, [r4, #0]
 80091ba:	07d0      	lsls	r0, r2, #31
 80091bc:	d502      	bpl.n	80091c4 <_printf_float+0x194>
 80091be:	3301      	adds	r3, #1
 80091c0:	440b      	add	r3, r1
 80091c2:	6123      	str	r3, [r4, #16]
 80091c4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80091c6:	f04f 0900 	mov.w	r9, #0
 80091ca:	e7db      	b.n	8009184 <_printf_float+0x154>
 80091cc:	b913      	cbnz	r3, 80091d4 <_printf_float+0x1a4>
 80091ce:	6822      	ldr	r2, [r4, #0]
 80091d0:	07d2      	lsls	r2, r2, #31
 80091d2:	d501      	bpl.n	80091d8 <_printf_float+0x1a8>
 80091d4:	3302      	adds	r3, #2
 80091d6:	e7f4      	b.n	80091c2 <_printf_float+0x192>
 80091d8:	2301      	movs	r3, #1
 80091da:	e7f2      	b.n	80091c2 <_printf_float+0x192>
 80091dc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80091e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091e2:	4299      	cmp	r1, r3
 80091e4:	db05      	blt.n	80091f2 <_printf_float+0x1c2>
 80091e6:	6823      	ldr	r3, [r4, #0]
 80091e8:	6121      	str	r1, [r4, #16]
 80091ea:	07d8      	lsls	r0, r3, #31
 80091ec:	d5ea      	bpl.n	80091c4 <_printf_float+0x194>
 80091ee:	1c4b      	adds	r3, r1, #1
 80091f0:	e7e7      	b.n	80091c2 <_printf_float+0x192>
 80091f2:	2900      	cmp	r1, #0
 80091f4:	bfd4      	ite	le
 80091f6:	f1c1 0202 	rsble	r2, r1, #2
 80091fa:	2201      	movgt	r2, #1
 80091fc:	4413      	add	r3, r2
 80091fe:	e7e0      	b.n	80091c2 <_printf_float+0x192>
 8009200:	6823      	ldr	r3, [r4, #0]
 8009202:	055a      	lsls	r2, r3, #21
 8009204:	d407      	bmi.n	8009216 <_printf_float+0x1e6>
 8009206:	6923      	ldr	r3, [r4, #16]
 8009208:	4642      	mov	r2, r8
 800920a:	4631      	mov	r1, r6
 800920c:	4628      	mov	r0, r5
 800920e:	47b8      	blx	r7
 8009210:	3001      	adds	r0, #1
 8009212:	d12b      	bne.n	800926c <_printf_float+0x23c>
 8009214:	e767      	b.n	80090e6 <_printf_float+0xb6>
 8009216:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800921a:	f240 80dd 	bls.w	80093d8 <_printf_float+0x3a8>
 800921e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009222:	2200      	movs	r2, #0
 8009224:	2300      	movs	r3, #0
 8009226:	f7f7 fc6f 	bl	8000b08 <__aeabi_dcmpeq>
 800922a:	2800      	cmp	r0, #0
 800922c:	d033      	beq.n	8009296 <_printf_float+0x266>
 800922e:	4a37      	ldr	r2, [pc, #220]	@ (800930c <_printf_float+0x2dc>)
 8009230:	2301      	movs	r3, #1
 8009232:	4631      	mov	r1, r6
 8009234:	4628      	mov	r0, r5
 8009236:	47b8      	blx	r7
 8009238:	3001      	adds	r0, #1
 800923a:	f43f af54 	beq.w	80090e6 <_printf_float+0xb6>
 800923e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009242:	4543      	cmp	r3, r8
 8009244:	db02      	blt.n	800924c <_printf_float+0x21c>
 8009246:	6823      	ldr	r3, [r4, #0]
 8009248:	07d8      	lsls	r0, r3, #31
 800924a:	d50f      	bpl.n	800926c <_printf_float+0x23c>
 800924c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009250:	4631      	mov	r1, r6
 8009252:	4628      	mov	r0, r5
 8009254:	47b8      	blx	r7
 8009256:	3001      	adds	r0, #1
 8009258:	f43f af45 	beq.w	80090e6 <_printf_float+0xb6>
 800925c:	f04f 0900 	mov.w	r9, #0
 8009260:	f108 38ff 	add.w	r8, r8, #4294967295
 8009264:	f104 0a1a 	add.w	sl, r4, #26
 8009268:	45c8      	cmp	r8, r9
 800926a:	dc09      	bgt.n	8009280 <_printf_float+0x250>
 800926c:	6823      	ldr	r3, [r4, #0]
 800926e:	079b      	lsls	r3, r3, #30
 8009270:	f100 8103 	bmi.w	800947a <_printf_float+0x44a>
 8009274:	68e0      	ldr	r0, [r4, #12]
 8009276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009278:	4298      	cmp	r0, r3
 800927a:	bfb8      	it	lt
 800927c:	4618      	movlt	r0, r3
 800927e:	e734      	b.n	80090ea <_printf_float+0xba>
 8009280:	2301      	movs	r3, #1
 8009282:	4652      	mov	r2, sl
 8009284:	4631      	mov	r1, r6
 8009286:	4628      	mov	r0, r5
 8009288:	47b8      	blx	r7
 800928a:	3001      	adds	r0, #1
 800928c:	f43f af2b 	beq.w	80090e6 <_printf_float+0xb6>
 8009290:	f109 0901 	add.w	r9, r9, #1
 8009294:	e7e8      	b.n	8009268 <_printf_float+0x238>
 8009296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009298:	2b00      	cmp	r3, #0
 800929a:	dc39      	bgt.n	8009310 <_printf_float+0x2e0>
 800929c:	4a1b      	ldr	r2, [pc, #108]	@ (800930c <_printf_float+0x2dc>)
 800929e:	2301      	movs	r3, #1
 80092a0:	4631      	mov	r1, r6
 80092a2:	4628      	mov	r0, r5
 80092a4:	47b8      	blx	r7
 80092a6:	3001      	adds	r0, #1
 80092a8:	f43f af1d 	beq.w	80090e6 <_printf_float+0xb6>
 80092ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80092b0:	ea59 0303 	orrs.w	r3, r9, r3
 80092b4:	d102      	bne.n	80092bc <_printf_float+0x28c>
 80092b6:	6823      	ldr	r3, [r4, #0]
 80092b8:	07d9      	lsls	r1, r3, #31
 80092ba:	d5d7      	bpl.n	800926c <_printf_float+0x23c>
 80092bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092c0:	4631      	mov	r1, r6
 80092c2:	4628      	mov	r0, r5
 80092c4:	47b8      	blx	r7
 80092c6:	3001      	adds	r0, #1
 80092c8:	f43f af0d 	beq.w	80090e6 <_printf_float+0xb6>
 80092cc:	f04f 0a00 	mov.w	sl, #0
 80092d0:	f104 0b1a 	add.w	fp, r4, #26
 80092d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092d6:	425b      	negs	r3, r3
 80092d8:	4553      	cmp	r3, sl
 80092da:	dc01      	bgt.n	80092e0 <_printf_float+0x2b0>
 80092dc:	464b      	mov	r3, r9
 80092de:	e793      	b.n	8009208 <_printf_float+0x1d8>
 80092e0:	2301      	movs	r3, #1
 80092e2:	465a      	mov	r2, fp
 80092e4:	4631      	mov	r1, r6
 80092e6:	4628      	mov	r0, r5
 80092e8:	47b8      	blx	r7
 80092ea:	3001      	adds	r0, #1
 80092ec:	f43f aefb 	beq.w	80090e6 <_printf_float+0xb6>
 80092f0:	f10a 0a01 	add.w	sl, sl, #1
 80092f4:	e7ee      	b.n	80092d4 <_printf_float+0x2a4>
 80092f6:	bf00      	nop
 80092f8:	7fefffff 	.word	0x7fefffff
 80092fc:	0800c659 	.word	0x0800c659
 8009300:	0800c65d 	.word	0x0800c65d
 8009304:	0800c661 	.word	0x0800c661
 8009308:	0800c665 	.word	0x0800c665
 800930c:	0800c669 	.word	0x0800c669
 8009310:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009312:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009316:	4553      	cmp	r3, sl
 8009318:	bfa8      	it	ge
 800931a:	4653      	movge	r3, sl
 800931c:	2b00      	cmp	r3, #0
 800931e:	4699      	mov	r9, r3
 8009320:	dc36      	bgt.n	8009390 <_printf_float+0x360>
 8009322:	f04f 0b00 	mov.w	fp, #0
 8009326:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800932a:	f104 021a 	add.w	r2, r4, #26
 800932e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009330:	9306      	str	r3, [sp, #24]
 8009332:	eba3 0309 	sub.w	r3, r3, r9
 8009336:	455b      	cmp	r3, fp
 8009338:	dc31      	bgt.n	800939e <_printf_float+0x36e>
 800933a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800933c:	459a      	cmp	sl, r3
 800933e:	dc3a      	bgt.n	80093b6 <_printf_float+0x386>
 8009340:	6823      	ldr	r3, [r4, #0]
 8009342:	07da      	lsls	r2, r3, #31
 8009344:	d437      	bmi.n	80093b6 <_printf_float+0x386>
 8009346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009348:	ebaa 0903 	sub.w	r9, sl, r3
 800934c:	9b06      	ldr	r3, [sp, #24]
 800934e:	ebaa 0303 	sub.w	r3, sl, r3
 8009352:	4599      	cmp	r9, r3
 8009354:	bfa8      	it	ge
 8009356:	4699      	movge	r9, r3
 8009358:	f1b9 0f00 	cmp.w	r9, #0
 800935c:	dc33      	bgt.n	80093c6 <_printf_float+0x396>
 800935e:	f04f 0800 	mov.w	r8, #0
 8009362:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009366:	f104 0b1a 	add.w	fp, r4, #26
 800936a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800936c:	ebaa 0303 	sub.w	r3, sl, r3
 8009370:	eba3 0309 	sub.w	r3, r3, r9
 8009374:	4543      	cmp	r3, r8
 8009376:	f77f af79 	ble.w	800926c <_printf_float+0x23c>
 800937a:	2301      	movs	r3, #1
 800937c:	465a      	mov	r2, fp
 800937e:	4631      	mov	r1, r6
 8009380:	4628      	mov	r0, r5
 8009382:	47b8      	blx	r7
 8009384:	3001      	adds	r0, #1
 8009386:	f43f aeae 	beq.w	80090e6 <_printf_float+0xb6>
 800938a:	f108 0801 	add.w	r8, r8, #1
 800938e:	e7ec      	b.n	800936a <_printf_float+0x33a>
 8009390:	4642      	mov	r2, r8
 8009392:	4631      	mov	r1, r6
 8009394:	4628      	mov	r0, r5
 8009396:	47b8      	blx	r7
 8009398:	3001      	adds	r0, #1
 800939a:	d1c2      	bne.n	8009322 <_printf_float+0x2f2>
 800939c:	e6a3      	b.n	80090e6 <_printf_float+0xb6>
 800939e:	2301      	movs	r3, #1
 80093a0:	4631      	mov	r1, r6
 80093a2:	4628      	mov	r0, r5
 80093a4:	9206      	str	r2, [sp, #24]
 80093a6:	47b8      	blx	r7
 80093a8:	3001      	adds	r0, #1
 80093aa:	f43f ae9c 	beq.w	80090e6 <_printf_float+0xb6>
 80093ae:	9a06      	ldr	r2, [sp, #24]
 80093b0:	f10b 0b01 	add.w	fp, fp, #1
 80093b4:	e7bb      	b.n	800932e <_printf_float+0x2fe>
 80093b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093ba:	4631      	mov	r1, r6
 80093bc:	4628      	mov	r0, r5
 80093be:	47b8      	blx	r7
 80093c0:	3001      	adds	r0, #1
 80093c2:	d1c0      	bne.n	8009346 <_printf_float+0x316>
 80093c4:	e68f      	b.n	80090e6 <_printf_float+0xb6>
 80093c6:	9a06      	ldr	r2, [sp, #24]
 80093c8:	464b      	mov	r3, r9
 80093ca:	4442      	add	r2, r8
 80093cc:	4631      	mov	r1, r6
 80093ce:	4628      	mov	r0, r5
 80093d0:	47b8      	blx	r7
 80093d2:	3001      	adds	r0, #1
 80093d4:	d1c3      	bne.n	800935e <_printf_float+0x32e>
 80093d6:	e686      	b.n	80090e6 <_printf_float+0xb6>
 80093d8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80093dc:	f1ba 0f01 	cmp.w	sl, #1
 80093e0:	dc01      	bgt.n	80093e6 <_printf_float+0x3b6>
 80093e2:	07db      	lsls	r3, r3, #31
 80093e4:	d536      	bpl.n	8009454 <_printf_float+0x424>
 80093e6:	2301      	movs	r3, #1
 80093e8:	4642      	mov	r2, r8
 80093ea:	4631      	mov	r1, r6
 80093ec:	4628      	mov	r0, r5
 80093ee:	47b8      	blx	r7
 80093f0:	3001      	adds	r0, #1
 80093f2:	f43f ae78 	beq.w	80090e6 <_printf_float+0xb6>
 80093f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093fa:	4631      	mov	r1, r6
 80093fc:	4628      	mov	r0, r5
 80093fe:	47b8      	blx	r7
 8009400:	3001      	adds	r0, #1
 8009402:	f43f ae70 	beq.w	80090e6 <_printf_float+0xb6>
 8009406:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800940a:	2200      	movs	r2, #0
 800940c:	2300      	movs	r3, #0
 800940e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009412:	f7f7 fb79 	bl	8000b08 <__aeabi_dcmpeq>
 8009416:	b9c0      	cbnz	r0, 800944a <_printf_float+0x41a>
 8009418:	4653      	mov	r3, sl
 800941a:	f108 0201 	add.w	r2, r8, #1
 800941e:	4631      	mov	r1, r6
 8009420:	4628      	mov	r0, r5
 8009422:	47b8      	blx	r7
 8009424:	3001      	adds	r0, #1
 8009426:	d10c      	bne.n	8009442 <_printf_float+0x412>
 8009428:	e65d      	b.n	80090e6 <_printf_float+0xb6>
 800942a:	2301      	movs	r3, #1
 800942c:	465a      	mov	r2, fp
 800942e:	4631      	mov	r1, r6
 8009430:	4628      	mov	r0, r5
 8009432:	47b8      	blx	r7
 8009434:	3001      	adds	r0, #1
 8009436:	f43f ae56 	beq.w	80090e6 <_printf_float+0xb6>
 800943a:	f108 0801 	add.w	r8, r8, #1
 800943e:	45d0      	cmp	r8, sl
 8009440:	dbf3      	blt.n	800942a <_printf_float+0x3fa>
 8009442:	464b      	mov	r3, r9
 8009444:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009448:	e6df      	b.n	800920a <_printf_float+0x1da>
 800944a:	f04f 0800 	mov.w	r8, #0
 800944e:	f104 0b1a 	add.w	fp, r4, #26
 8009452:	e7f4      	b.n	800943e <_printf_float+0x40e>
 8009454:	2301      	movs	r3, #1
 8009456:	4642      	mov	r2, r8
 8009458:	e7e1      	b.n	800941e <_printf_float+0x3ee>
 800945a:	2301      	movs	r3, #1
 800945c:	464a      	mov	r2, r9
 800945e:	4631      	mov	r1, r6
 8009460:	4628      	mov	r0, r5
 8009462:	47b8      	blx	r7
 8009464:	3001      	adds	r0, #1
 8009466:	f43f ae3e 	beq.w	80090e6 <_printf_float+0xb6>
 800946a:	f108 0801 	add.w	r8, r8, #1
 800946e:	68e3      	ldr	r3, [r4, #12]
 8009470:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009472:	1a5b      	subs	r3, r3, r1
 8009474:	4543      	cmp	r3, r8
 8009476:	dcf0      	bgt.n	800945a <_printf_float+0x42a>
 8009478:	e6fc      	b.n	8009274 <_printf_float+0x244>
 800947a:	f04f 0800 	mov.w	r8, #0
 800947e:	f104 0919 	add.w	r9, r4, #25
 8009482:	e7f4      	b.n	800946e <_printf_float+0x43e>

08009484 <_printf_common>:
 8009484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009488:	4616      	mov	r6, r2
 800948a:	4698      	mov	r8, r3
 800948c:	688a      	ldr	r2, [r1, #8]
 800948e:	690b      	ldr	r3, [r1, #16]
 8009490:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009494:	4293      	cmp	r3, r2
 8009496:	bfb8      	it	lt
 8009498:	4613      	movlt	r3, r2
 800949a:	6033      	str	r3, [r6, #0]
 800949c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80094a0:	4607      	mov	r7, r0
 80094a2:	460c      	mov	r4, r1
 80094a4:	b10a      	cbz	r2, 80094aa <_printf_common+0x26>
 80094a6:	3301      	adds	r3, #1
 80094a8:	6033      	str	r3, [r6, #0]
 80094aa:	6823      	ldr	r3, [r4, #0]
 80094ac:	0699      	lsls	r1, r3, #26
 80094ae:	bf42      	ittt	mi
 80094b0:	6833      	ldrmi	r3, [r6, #0]
 80094b2:	3302      	addmi	r3, #2
 80094b4:	6033      	strmi	r3, [r6, #0]
 80094b6:	6825      	ldr	r5, [r4, #0]
 80094b8:	f015 0506 	ands.w	r5, r5, #6
 80094bc:	d106      	bne.n	80094cc <_printf_common+0x48>
 80094be:	f104 0a19 	add.w	sl, r4, #25
 80094c2:	68e3      	ldr	r3, [r4, #12]
 80094c4:	6832      	ldr	r2, [r6, #0]
 80094c6:	1a9b      	subs	r3, r3, r2
 80094c8:	42ab      	cmp	r3, r5
 80094ca:	dc26      	bgt.n	800951a <_printf_common+0x96>
 80094cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80094d0:	6822      	ldr	r2, [r4, #0]
 80094d2:	3b00      	subs	r3, #0
 80094d4:	bf18      	it	ne
 80094d6:	2301      	movne	r3, #1
 80094d8:	0692      	lsls	r2, r2, #26
 80094da:	d42b      	bmi.n	8009534 <_printf_common+0xb0>
 80094dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80094e0:	4641      	mov	r1, r8
 80094e2:	4638      	mov	r0, r7
 80094e4:	47c8      	blx	r9
 80094e6:	3001      	adds	r0, #1
 80094e8:	d01e      	beq.n	8009528 <_printf_common+0xa4>
 80094ea:	6823      	ldr	r3, [r4, #0]
 80094ec:	6922      	ldr	r2, [r4, #16]
 80094ee:	f003 0306 	and.w	r3, r3, #6
 80094f2:	2b04      	cmp	r3, #4
 80094f4:	bf02      	ittt	eq
 80094f6:	68e5      	ldreq	r5, [r4, #12]
 80094f8:	6833      	ldreq	r3, [r6, #0]
 80094fa:	1aed      	subeq	r5, r5, r3
 80094fc:	68a3      	ldr	r3, [r4, #8]
 80094fe:	bf0c      	ite	eq
 8009500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009504:	2500      	movne	r5, #0
 8009506:	4293      	cmp	r3, r2
 8009508:	bfc4      	itt	gt
 800950a:	1a9b      	subgt	r3, r3, r2
 800950c:	18ed      	addgt	r5, r5, r3
 800950e:	2600      	movs	r6, #0
 8009510:	341a      	adds	r4, #26
 8009512:	42b5      	cmp	r5, r6
 8009514:	d11a      	bne.n	800954c <_printf_common+0xc8>
 8009516:	2000      	movs	r0, #0
 8009518:	e008      	b.n	800952c <_printf_common+0xa8>
 800951a:	2301      	movs	r3, #1
 800951c:	4652      	mov	r2, sl
 800951e:	4641      	mov	r1, r8
 8009520:	4638      	mov	r0, r7
 8009522:	47c8      	blx	r9
 8009524:	3001      	adds	r0, #1
 8009526:	d103      	bne.n	8009530 <_printf_common+0xac>
 8009528:	f04f 30ff 	mov.w	r0, #4294967295
 800952c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009530:	3501      	adds	r5, #1
 8009532:	e7c6      	b.n	80094c2 <_printf_common+0x3e>
 8009534:	18e1      	adds	r1, r4, r3
 8009536:	1c5a      	adds	r2, r3, #1
 8009538:	2030      	movs	r0, #48	@ 0x30
 800953a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800953e:	4422      	add	r2, r4
 8009540:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009544:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009548:	3302      	adds	r3, #2
 800954a:	e7c7      	b.n	80094dc <_printf_common+0x58>
 800954c:	2301      	movs	r3, #1
 800954e:	4622      	mov	r2, r4
 8009550:	4641      	mov	r1, r8
 8009552:	4638      	mov	r0, r7
 8009554:	47c8      	blx	r9
 8009556:	3001      	adds	r0, #1
 8009558:	d0e6      	beq.n	8009528 <_printf_common+0xa4>
 800955a:	3601      	adds	r6, #1
 800955c:	e7d9      	b.n	8009512 <_printf_common+0x8e>
	...

08009560 <_printf_i>:
 8009560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009564:	7e0f      	ldrb	r7, [r1, #24]
 8009566:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009568:	2f78      	cmp	r7, #120	@ 0x78
 800956a:	4691      	mov	r9, r2
 800956c:	4680      	mov	r8, r0
 800956e:	460c      	mov	r4, r1
 8009570:	469a      	mov	sl, r3
 8009572:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009576:	d807      	bhi.n	8009588 <_printf_i+0x28>
 8009578:	2f62      	cmp	r7, #98	@ 0x62
 800957a:	d80a      	bhi.n	8009592 <_printf_i+0x32>
 800957c:	2f00      	cmp	r7, #0
 800957e:	f000 80d2 	beq.w	8009726 <_printf_i+0x1c6>
 8009582:	2f58      	cmp	r7, #88	@ 0x58
 8009584:	f000 80b9 	beq.w	80096fa <_printf_i+0x19a>
 8009588:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800958c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009590:	e03a      	b.n	8009608 <_printf_i+0xa8>
 8009592:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009596:	2b15      	cmp	r3, #21
 8009598:	d8f6      	bhi.n	8009588 <_printf_i+0x28>
 800959a:	a101      	add	r1, pc, #4	@ (adr r1, 80095a0 <_printf_i+0x40>)
 800959c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095a0:	080095f9 	.word	0x080095f9
 80095a4:	0800960d 	.word	0x0800960d
 80095a8:	08009589 	.word	0x08009589
 80095ac:	08009589 	.word	0x08009589
 80095b0:	08009589 	.word	0x08009589
 80095b4:	08009589 	.word	0x08009589
 80095b8:	0800960d 	.word	0x0800960d
 80095bc:	08009589 	.word	0x08009589
 80095c0:	08009589 	.word	0x08009589
 80095c4:	08009589 	.word	0x08009589
 80095c8:	08009589 	.word	0x08009589
 80095cc:	0800970d 	.word	0x0800970d
 80095d0:	08009637 	.word	0x08009637
 80095d4:	080096c7 	.word	0x080096c7
 80095d8:	08009589 	.word	0x08009589
 80095dc:	08009589 	.word	0x08009589
 80095e0:	0800972f 	.word	0x0800972f
 80095e4:	08009589 	.word	0x08009589
 80095e8:	08009637 	.word	0x08009637
 80095ec:	08009589 	.word	0x08009589
 80095f0:	08009589 	.word	0x08009589
 80095f4:	080096cf 	.word	0x080096cf
 80095f8:	6833      	ldr	r3, [r6, #0]
 80095fa:	1d1a      	adds	r2, r3, #4
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	6032      	str	r2, [r6, #0]
 8009600:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009604:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009608:	2301      	movs	r3, #1
 800960a:	e09d      	b.n	8009748 <_printf_i+0x1e8>
 800960c:	6833      	ldr	r3, [r6, #0]
 800960e:	6820      	ldr	r0, [r4, #0]
 8009610:	1d19      	adds	r1, r3, #4
 8009612:	6031      	str	r1, [r6, #0]
 8009614:	0606      	lsls	r6, r0, #24
 8009616:	d501      	bpl.n	800961c <_printf_i+0xbc>
 8009618:	681d      	ldr	r5, [r3, #0]
 800961a:	e003      	b.n	8009624 <_printf_i+0xc4>
 800961c:	0645      	lsls	r5, r0, #25
 800961e:	d5fb      	bpl.n	8009618 <_printf_i+0xb8>
 8009620:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009624:	2d00      	cmp	r5, #0
 8009626:	da03      	bge.n	8009630 <_printf_i+0xd0>
 8009628:	232d      	movs	r3, #45	@ 0x2d
 800962a:	426d      	negs	r5, r5
 800962c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009630:	4859      	ldr	r0, [pc, #356]	@ (8009798 <_printf_i+0x238>)
 8009632:	230a      	movs	r3, #10
 8009634:	e011      	b.n	800965a <_printf_i+0xfa>
 8009636:	6821      	ldr	r1, [r4, #0]
 8009638:	6833      	ldr	r3, [r6, #0]
 800963a:	0608      	lsls	r0, r1, #24
 800963c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009640:	d402      	bmi.n	8009648 <_printf_i+0xe8>
 8009642:	0649      	lsls	r1, r1, #25
 8009644:	bf48      	it	mi
 8009646:	b2ad      	uxthmi	r5, r5
 8009648:	2f6f      	cmp	r7, #111	@ 0x6f
 800964a:	4853      	ldr	r0, [pc, #332]	@ (8009798 <_printf_i+0x238>)
 800964c:	6033      	str	r3, [r6, #0]
 800964e:	bf14      	ite	ne
 8009650:	230a      	movne	r3, #10
 8009652:	2308      	moveq	r3, #8
 8009654:	2100      	movs	r1, #0
 8009656:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800965a:	6866      	ldr	r6, [r4, #4]
 800965c:	60a6      	str	r6, [r4, #8]
 800965e:	2e00      	cmp	r6, #0
 8009660:	bfa2      	ittt	ge
 8009662:	6821      	ldrge	r1, [r4, #0]
 8009664:	f021 0104 	bicge.w	r1, r1, #4
 8009668:	6021      	strge	r1, [r4, #0]
 800966a:	b90d      	cbnz	r5, 8009670 <_printf_i+0x110>
 800966c:	2e00      	cmp	r6, #0
 800966e:	d04b      	beq.n	8009708 <_printf_i+0x1a8>
 8009670:	4616      	mov	r6, r2
 8009672:	fbb5 f1f3 	udiv	r1, r5, r3
 8009676:	fb03 5711 	mls	r7, r3, r1, r5
 800967a:	5dc7      	ldrb	r7, [r0, r7]
 800967c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009680:	462f      	mov	r7, r5
 8009682:	42bb      	cmp	r3, r7
 8009684:	460d      	mov	r5, r1
 8009686:	d9f4      	bls.n	8009672 <_printf_i+0x112>
 8009688:	2b08      	cmp	r3, #8
 800968a:	d10b      	bne.n	80096a4 <_printf_i+0x144>
 800968c:	6823      	ldr	r3, [r4, #0]
 800968e:	07df      	lsls	r7, r3, #31
 8009690:	d508      	bpl.n	80096a4 <_printf_i+0x144>
 8009692:	6923      	ldr	r3, [r4, #16]
 8009694:	6861      	ldr	r1, [r4, #4]
 8009696:	4299      	cmp	r1, r3
 8009698:	bfde      	ittt	le
 800969a:	2330      	movle	r3, #48	@ 0x30
 800969c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80096a4:	1b92      	subs	r2, r2, r6
 80096a6:	6122      	str	r2, [r4, #16]
 80096a8:	f8cd a000 	str.w	sl, [sp]
 80096ac:	464b      	mov	r3, r9
 80096ae:	aa03      	add	r2, sp, #12
 80096b0:	4621      	mov	r1, r4
 80096b2:	4640      	mov	r0, r8
 80096b4:	f7ff fee6 	bl	8009484 <_printf_common>
 80096b8:	3001      	adds	r0, #1
 80096ba:	d14a      	bne.n	8009752 <_printf_i+0x1f2>
 80096bc:	f04f 30ff 	mov.w	r0, #4294967295
 80096c0:	b004      	add	sp, #16
 80096c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096c6:	6823      	ldr	r3, [r4, #0]
 80096c8:	f043 0320 	orr.w	r3, r3, #32
 80096cc:	6023      	str	r3, [r4, #0]
 80096ce:	4833      	ldr	r0, [pc, #204]	@ (800979c <_printf_i+0x23c>)
 80096d0:	2778      	movs	r7, #120	@ 0x78
 80096d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80096d6:	6823      	ldr	r3, [r4, #0]
 80096d8:	6831      	ldr	r1, [r6, #0]
 80096da:	061f      	lsls	r7, r3, #24
 80096dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80096e0:	d402      	bmi.n	80096e8 <_printf_i+0x188>
 80096e2:	065f      	lsls	r7, r3, #25
 80096e4:	bf48      	it	mi
 80096e6:	b2ad      	uxthmi	r5, r5
 80096e8:	6031      	str	r1, [r6, #0]
 80096ea:	07d9      	lsls	r1, r3, #31
 80096ec:	bf44      	itt	mi
 80096ee:	f043 0320 	orrmi.w	r3, r3, #32
 80096f2:	6023      	strmi	r3, [r4, #0]
 80096f4:	b11d      	cbz	r5, 80096fe <_printf_i+0x19e>
 80096f6:	2310      	movs	r3, #16
 80096f8:	e7ac      	b.n	8009654 <_printf_i+0xf4>
 80096fa:	4827      	ldr	r0, [pc, #156]	@ (8009798 <_printf_i+0x238>)
 80096fc:	e7e9      	b.n	80096d2 <_printf_i+0x172>
 80096fe:	6823      	ldr	r3, [r4, #0]
 8009700:	f023 0320 	bic.w	r3, r3, #32
 8009704:	6023      	str	r3, [r4, #0]
 8009706:	e7f6      	b.n	80096f6 <_printf_i+0x196>
 8009708:	4616      	mov	r6, r2
 800970a:	e7bd      	b.n	8009688 <_printf_i+0x128>
 800970c:	6833      	ldr	r3, [r6, #0]
 800970e:	6825      	ldr	r5, [r4, #0]
 8009710:	6961      	ldr	r1, [r4, #20]
 8009712:	1d18      	adds	r0, r3, #4
 8009714:	6030      	str	r0, [r6, #0]
 8009716:	062e      	lsls	r6, r5, #24
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	d501      	bpl.n	8009720 <_printf_i+0x1c0>
 800971c:	6019      	str	r1, [r3, #0]
 800971e:	e002      	b.n	8009726 <_printf_i+0x1c6>
 8009720:	0668      	lsls	r0, r5, #25
 8009722:	d5fb      	bpl.n	800971c <_printf_i+0x1bc>
 8009724:	8019      	strh	r1, [r3, #0]
 8009726:	2300      	movs	r3, #0
 8009728:	6123      	str	r3, [r4, #16]
 800972a:	4616      	mov	r6, r2
 800972c:	e7bc      	b.n	80096a8 <_printf_i+0x148>
 800972e:	6833      	ldr	r3, [r6, #0]
 8009730:	1d1a      	adds	r2, r3, #4
 8009732:	6032      	str	r2, [r6, #0]
 8009734:	681e      	ldr	r6, [r3, #0]
 8009736:	6862      	ldr	r2, [r4, #4]
 8009738:	2100      	movs	r1, #0
 800973a:	4630      	mov	r0, r6
 800973c:	f7f6 fd68 	bl	8000210 <memchr>
 8009740:	b108      	cbz	r0, 8009746 <_printf_i+0x1e6>
 8009742:	1b80      	subs	r0, r0, r6
 8009744:	6060      	str	r0, [r4, #4]
 8009746:	6863      	ldr	r3, [r4, #4]
 8009748:	6123      	str	r3, [r4, #16]
 800974a:	2300      	movs	r3, #0
 800974c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009750:	e7aa      	b.n	80096a8 <_printf_i+0x148>
 8009752:	6923      	ldr	r3, [r4, #16]
 8009754:	4632      	mov	r2, r6
 8009756:	4649      	mov	r1, r9
 8009758:	4640      	mov	r0, r8
 800975a:	47d0      	blx	sl
 800975c:	3001      	adds	r0, #1
 800975e:	d0ad      	beq.n	80096bc <_printf_i+0x15c>
 8009760:	6823      	ldr	r3, [r4, #0]
 8009762:	079b      	lsls	r3, r3, #30
 8009764:	d413      	bmi.n	800978e <_printf_i+0x22e>
 8009766:	68e0      	ldr	r0, [r4, #12]
 8009768:	9b03      	ldr	r3, [sp, #12]
 800976a:	4298      	cmp	r0, r3
 800976c:	bfb8      	it	lt
 800976e:	4618      	movlt	r0, r3
 8009770:	e7a6      	b.n	80096c0 <_printf_i+0x160>
 8009772:	2301      	movs	r3, #1
 8009774:	4632      	mov	r2, r6
 8009776:	4649      	mov	r1, r9
 8009778:	4640      	mov	r0, r8
 800977a:	47d0      	blx	sl
 800977c:	3001      	adds	r0, #1
 800977e:	d09d      	beq.n	80096bc <_printf_i+0x15c>
 8009780:	3501      	adds	r5, #1
 8009782:	68e3      	ldr	r3, [r4, #12]
 8009784:	9903      	ldr	r1, [sp, #12]
 8009786:	1a5b      	subs	r3, r3, r1
 8009788:	42ab      	cmp	r3, r5
 800978a:	dcf2      	bgt.n	8009772 <_printf_i+0x212>
 800978c:	e7eb      	b.n	8009766 <_printf_i+0x206>
 800978e:	2500      	movs	r5, #0
 8009790:	f104 0619 	add.w	r6, r4, #25
 8009794:	e7f5      	b.n	8009782 <_printf_i+0x222>
 8009796:	bf00      	nop
 8009798:	0800c66b 	.word	0x0800c66b
 800979c:	0800c67c 	.word	0x0800c67c

080097a0 <std>:
 80097a0:	2300      	movs	r3, #0
 80097a2:	b510      	push	{r4, lr}
 80097a4:	4604      	mov	r4, r0
 80097a6:	e9c0 3300 	strd	r3, r3, [r0]
 80097aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097ae:	6083      	str	r3, [r0, #8]
 80097b0:	8181      	strh	r1, [r0, #12]
 80097b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80097b4:	81c2      	strh	r2, [r0, #14]
 80097b6:	6183      	str	r3, [r0, #24]
 80097b8:	4619      	mov	r1, r3
 80097ba:	2208      	movs	r2, #8
 80097bc:	305c      	adds	r0, #92	@ 0x5c
 80097be:	f000 f8f4 	bl	80099aa <memset>
 80097c2:	4b0d      	ldr	r3, [pc, #52]	@ (80097f8 <std+0x58>)
 80097c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80097c6:	4b0d      	ldr	r3, [pc, #52]	@ (80097fc <std+0x5c>)
 80097c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80097ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009800 <std+0x60>)
 80097cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80097ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009804 <std+0x64>)
 80097d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80097d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009808 <std+0x68>)
 80097d4:	6224      	str	r4, [r4, #32]
 80097d6:	429c      	cmp	r4, r3
 80097d8:	d006      	beq.n	80097e8 <std+0x48>
 80097da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80097de:	4294      	cmp	r4, r2
 80097e0:	d002      	beq.n	80097e8 <std+0x48>
 80097e2:	33d0      	adds	r3, #208	@ 0xd0
 80097e4:	429c      	cmp	r4, r3
 80097e6:	d105      	bne.n	80097f4 <std+0x54>
 80097e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80097ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097f0:	f000 b9c6 	b.w	8009b80 <__retarget_lock_init_recursive>
 80097f4:	bd10      	pop	{r4, pc}
 80097f6:	bf00      	nop
 80097f8:	08009925 	.word	0x08009925
 80097fc:	08009947 	.word	0x08009947
 8009800:	0800997f 	.word	0x0800997f
 8009804:	080099a3 	.word	0x080099a3
 8009808:	20000d20 	.word	0x20000d20

0800980c <stdio_exit_handler>:
 800980c:	4a02      	ldr	r2, [pc, #8]	@ (8009818 <stdio_exit_handler+0xc>)
 800980e:	4903      	ldr	r1, [pc, #12]	@ (800981c <stdio_exit_handler+0x10>)
 8009810:	4803      	ldr	r0, [pc, #12]	@ (8009820 <stdio_exit_handler+0x14>)
 8009812:	f000 b869 	b.w	80098e8 <_fwalk_sglue>
 8009816:	bf00      	nop
 8009818:	2000004c 	.word	0x2000004c
 800981c:	0800bbb1 	.word	0x0800bbb1
 8009820:	200001c8 	.word	0x200001c8

08009824 <cleanup_stdio>:
 8009824:	6841      	ldr	r1, [r0, #4]
 8009826:	4b0c      	ldr	r3, [pc, #48]	@ (8009858 <cleanup_stdio+0x34>)
 8009828:	4299      	cmp	r1, r3
 800982a:	b510      	push	{r4, lr}
 800982c:	4604      	mov	r4, r0
 800982e:	d001      	beq.n	8009834 <cleanup_stdio+0x10>
 8009830:	f002 f9be 	bl	800bbb0 <_fflush_r>
 8009834:	68a1      	ldr	r1, [r4, #8]
 8009836:	4b09      	ldr	r3, [pc, #36]	@ (800985c <cleanup_stdio+0x38>)
 8009838:	4299      	cmp	r1, r3
 800983a:	d002      	beq.n	8009842 <cleanup_stdio+0x1e>
 800983c:	4620      	mov	r0, r4
 800983e:	f002 f9b7 	bl	800bbb0 <_fflush_r>
 8009842:	68e1      	ldr	r1, [r4, #12]
 8009844:	4b06      	ldr	r3, [pc, #24]	@ (8009860 <cleanup_stdio+0x3c>)
 8009846:	4299      	cmp	r1, r3
 8009848:	d004      	beq.n	8009854 <cleanup_stdio+0x30>
 800984a:	4620      	mov	r0, r4
 800984c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009850:	f002 b9ae 	b.w	800bbb0 <_fflush_r>
 8009854:	bd10      	pop	{r4, pc}
 8009856:	bf00      	nop
 8009858:	20000d20 	.word	0x20000d20
 800985c:	20000d88 	.word	0x20000d88
 8009860:	20000df0 	.word	0x20000df0

08009864 <global_stdio_init.part.0>:
 8009864:	b510      	push	{r4, lr}
 8009866:	4b0b      	ldr	r3, [pc, #44]	@ (8009894 <global_stdio_init.part.0+0x30>)
 8009868:	4c0b      	ldr	r4, [pc, #44]	@ (8009898 <global_stdio_init.part.0+0x34>)
 800986a:	4a0c      	ldr	r2, [pc, #48]	@ (800989c <global_stdio_init.part.0+0x38>)
 800986c:	601a      	str	r2, [r3, #0]
 800986e:	4620      	mov	r0, r4
 8009870:	2200      	movs	r2, #0
 8009872:	2104      	movs	r1, #4
 8009874:	f7ff ff94 	bl	80097a0 <std>
 8009878:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800987c:	2201      	movs	r2, #1
 800987e:	2109      	movs	r1, #9
 8009880:	f7ff ff8e 	bl	80097a0 <std>
 8009884:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009888:	2202      	movs	r2, #2
 800988a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800988e:	2112      	movs	r1, #18
 8009890:	f7ff bf86 	b.w	80097a0 <std>
 8009894:	20000e58 	.word	0x20000e58
 8009898:	20000d20 	.word	0x20000d20
 800989c:	0800980d 	.word	0x0800980d

080098a0 <__sfp_lock_acquire>:
 80098a0:	4801      	ldr	r0, [pc, #4]	@ (80098a8 <__sfp_lock_acquire+0x8>)
 80098a2:	f000 b96e 	b.w	8009b82 <__retarget_lock_acquire_recursive>
 80098a6:	bf00      	nop
 80098a8:	20000e61 	.word	0x20000e61

080098ac <__sfp_lock_release>:
 80098ac:	4801      	ldr	r0, [pc, #4]	@ (80098b4 <__sfp_lock_release+0x8>)
 80098ae:	f000 b969 	b.w	8009b84 <__retarget_lock_release_recursive>
 80098b2:	bf00      	nop
 80098b4:	20000e61 	.word	0x20000e61

080098b8 <__sinit>:
 80098b8:	b510      	push	{r4, lr}
 80098ba:	4604      	mov	r4, r0
 80098bc:	f7ff fff0 	bl	80098a0 <__sfp_lock_acquire>
 80098c0:	6a23      	ldr	r3, [r4, #32]
 80098c2:	b11b      	cbz	r3, 80098cc <__sinit+0x14>
 80098c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098c8:	f7ff bff0 	b.w	80098ac <__sfp_lock_release>
 80098cc:	4b04      	ldr	r3, [pc, #16]	@ (80098e0 <__sinit+0x28>)
 80098ce:	6223      	str	r3, [r4, #32]
 80098d0:	4b04      	ldr	r3, [pc, #16]	@ (80098e4 <__sinit+0x2c>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d1f5      	bne.n	80098c4 <__sinit+0xc>
 80098d8:	f7ff ffc4 	bl	8009864 <global_stdio_init.part.0>
 80098dc:	e7f2      	b.n	80098c4 <__sinit+0xc>
 80098de:	bf00      	nop
 80098e0:	08009825 	.word	0x08009825
 80098e4:	20000e58 	.word	0x20000e58

080098e8 <_fwalk_sglue>:
 80098e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098ec:	4607      	mov	r7, r0
 80098ee:	4688      	mov	r8, r1
 80098f0:	4614      	mov	r4, r2
 80098f2:	2600      	movs	r6, #0
 80098f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098f8:	f1b9 0901 	subs.w	r9, r9, #1
 80098fc:	d505      	bpl.n	800990a <_fwalk_sglue+0x22>
 80098fe:	6824      	ldr	r4, [r4, #0]
 8009900:	2c00      	cmp	r4, #0
 8009902:	d1f7      	bne.n	80098f4 <_fwalk_sglue+0xc>
 8009904:	4630      	mov	r0, r6
 8009906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800990a:	89ab      	ldrh	r3, [r5, #12]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d907      	bls.n	8009920 <_fwalk_sglue+0x38>
 8009910:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009914:	3301      	adds	r3, #1
 8009916:	d003      	beq.n	8009920 <_fwalk_sglue+0x38>
 8009918:	4629      	mov	r1, r5
 800991a:	4638      	mov	r0, r7
 800991c:	47c0      	blx	r8
 800991e:	4306      	orrs	r6, r0
 8009920:	3568      	adds	r5, #104	@ 0x68
 8009922:	e7e9      	b.n	80098f8 <_fwalk_sglue+0x10>

08009924 <__sread>:
 8009924:	b510      	push	{r4, lr}
 8009926:	460c      	mov	r4, r1
 8009928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800992c:	f000 f8da 	bl	8009ae4 <_read_r>
 8009930:	2800      	cmp	r0, #0
 8009932:	bfab      	itete	ge
 8009934:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009936:	89a3      	ldrhlt	r3, [r4, #12]
 8009938:	181b      	addge	r3, r3, r0
 800993a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800993e:	bfac      	ite	ge
 8009940:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009942:	81a3      	strhlt	r3, [r4, #12]
 8009944:	bd10      	pop	{r4, pc}

08009946 <__swrite>:
 8009946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800994a:	461f      	mov	r7, r3
 800994c:	898b      	ldrh	r3, [r1, #12]
 800994e:	05db      	lsls	r3, r3, #23
 8009950:	4605      	mov	r5, r0
 8009952:	460c      	mov	r4, r1
 8009954:	4616      	mov	r6, r2
 8009956:	d505      	bpl.n	8009964 <__swrite+0x1e>
 8009958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800995c:	2302      	movs	r3, #2
 800995e:	2200      	movs	r2, #0
 8009960:	f000 f8ae 	bl	8009ac0 <_lseek_r>
 8009964:	89a3      	ldrh	r3, [r4, #12]
 8009966:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800996a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800996e:	81a3      	strh	r3, [r4, #12]
 8009970:	4632      	mov	r2, r6
 8009972:	463b      	mov	r3, r7
 8009974:	4628      	mov	r0, r5
 8009976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800997a:	f000 b8c5 	b.w	8009b08 <_write_r>

0800997e <__sseek>:
 800997e:	b510      	push	{r4, lr}
 8009980:	460c      	mov	r4, r1
 8009982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009986:	f000 f89b 	bl	8009ac0 <_lseek_r>
 800998a:	1c43      	adds	r3, r0, #1
 800998c:	89a3      	ldrh	r3, [r4, #12]
 800998e:	bf15      	itete	ne
 8009990:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009992:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009996:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800999a:	81a3      	strheq	r3, [r4, #12]
 800999c:	bf18      	it	ne
 800999e:	81a3      	strhne	r3, [r4, #12]
 80099a0:	bd10      	pop	{r4, pc}

080099a2 <__sclose>:
 80099a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099a6:	f000 b87b 	b.w	8009aa0 <_close_r>

080099aa <memset>:
 80099aa:	4402      	add	r2, r0
 80099ac:	4603      	mov	r3, r0
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d100      	bne.n	80099b4 <memset+0xa>
 80099b2:	4770      	bx	lr
 80099b4:	f803 1b01 	strb.w	r1, [r3], #1
 80099b8:	e7f9      	b.n	80099ae <memset+0x4>

080099ba <strncmp>:
 80099ba:	b510      	push	{r4, lr}
 80099bc:	b16a      	cbz	r2, 80099da <strncmp+0x20>
 80099be:	3901      	subs	r1, #1
 80099c0:	1884      	adds	r4, r0, r2
 80099c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099c6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d103      	bne.n	80099d6 <strncmp+0x1c>
 80099ce:	42a0      	cmp	r0, r4
 80099d0:	d001      	beq.n	80099d6 <strncmp+0x1c>
 80099d2:	2a00      	cmp	r2, #0
 80099d4:	d1f5      	bne.n	80099c2 <strncmp+0x8>
 80099d6:	1ad0      	subs	r0, r2, r3
 80099d8:	bd10      	pop	{r4, pc}
 80099da:	4610      	mov	r0, r2
 80099dc:	e7fc      	b.n	80099d8 <strncmp+0x1e>
	...

080099e0 <strtok>:
 80099e0:	4b16      	ldr	r3, [pc, #88]	@ (8009a3c <strtok+0x5c>)
 80099e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e6:	681f      	ldr	r7, [r3, #0]
 80099e8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80099ea:	4605      	mov	r5, r0
 80099ec:	460e      	mov	r6, r1
 80099ee:	b9ec      	cbnz	r4, 8009a2c <strtok+0x4c>
 80099f0:	2050      	movs	r0, #80	@ 0x50
 80099f2:	f001 fad1 	bl	800af98 <malloc>
 80099f6:	4602      	mov	r2, r0
 80099f8:	6478      	str	r0, [r7, #68]	@ 0x44
 80099fa:	b920      	cbnz	r0, 8009a06 <strtok+0x26>
 80099fc:	4b10      	ldr	r3, [pc, #64]	@ (8009a40 <strtok+0x60>)
 80099fe:	4811      	ldr	r0, [pc, #68]	@ (8009a44 <strtok+0x64>)
 8009a00:	215b      	movs	r1, #91	@ 0x5b
 8009a02:	f000 f8d9 	bl	8009bb8 <__assert_func>
 8009a06:	e9c0 4400 	strd	r4, r4, [r0]
 8009a0a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009a0e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009a12:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8009a16:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8009a1a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8009a1e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8009a22:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009a26:	6184      	str	r4, [r0, #24]
 8009a28:	7704      	strb	r4, [r0, #28]
 8009a2a:	6244      	str	r4, [r0, #36]	@ 0x24
 8009a2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a2e:	4631      	mov	r1, r6
 8009a30:	4628      	mov	r0, r5
 8009a32:	2301      	movs	r3, #1
 8009a34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a38:	f000 b806 	b.w	8009a48 <__strtok_r>
 8009a3c:	200001c4 	.word	0x200001c4
 8009a40:	0800c68d 	.word	0x0800c68d
 8009a44:	0800c6a4 	.word	0x0800c6a4

08009a48 <__strtok_r>:
 8009a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	b908      	cbnz	r0, 8009a52 <__strtok_r+0xa>
 8009a4e:	6814      	ldr	r4, [r2, #0]
 8009a50:	b144      	cbz	r4, 8009a64 <__strtok_r+0x1c>
 8009a52:	4620      	mov	r0, r4
 8009a54:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009a58:	460f      	mov	r7, r1
 8009a5a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009a5e:	b91e      	cbnz	r6, 8009a68 <__strtok_r+0x20>
 8009a60:	b965      	cbnz	r5, 8009a7c <__strtok_r+0x34>
 8009a62:	6015      	str	r5, [r2, #0]
 8009a64:	2000      	movs	r0, #0
 8009a66:	e005      	b.n	8009a74 <__strtok_r+0x2c>
 8009a68:	42b5      	cmp	r5, r6
 8009a6a:	d1f6      	bne.n	8009a5a <__strtok_r+0x12>
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d1f0      	bne.n	8009a52 <__strtok_r+0xa>
 8009a70:	6014      	str	r4, [r2, #0]
 8009a72:	7003      	strb	r3, [r0, #0]
 8009a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a76:	461c      	mov	r4, r3
 8009a78:	e00c      	b.n	8009a94 <__strtok_r+0x4c>
 8009a7a:	b915      	cbnz	r5, 8009a82 <__strtok_r+0x3a>
 8009a7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009a80:	460e      	mov	r6, r1
 8009a82:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009a86:	42ab      	cmp	r3, r5
 8009a88:	d1f7      	bne.n	8009a7a <__strtok_r+0x32>
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d0f3      	beq.n	8009a76 <__strtok_r+0x2e>
 8009a8e:	2300      	movs	r3, #0
 8009a90:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009a94:	6014      	str	r4, [r2, #0]
 8009a96:	e7ed      	b.n	8009a74 <__strtok_r+0x2c>

08009a98 <_localeconv_r>:
 8009a98:	4800      	ldr	r0, [pc, #0]	@ (8009a9c <_localeconv_r+0x4>)
 8009a9a:	4770      	bx	lr
 8009a9c:	20000148 	.word	0x20000148

08009aa0 <_close_r>:
 8009aa0:	b538      	push	{r3, r4, r5, lr}
 8009aa2:	4d06      	ldr	r5, [pc, #24]	@ (8009abc <_close_r+0x1c>)
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	4604      	mov	r4, r0
 8009aa8:	4608      	mov	r0, r1
 8009aaa:	602b      	str	r3, [r5, #0]
 8009aac:	f7f9 fd92 	bl	80035d4 <_close>
 8009ab0:	1c43      	adds	r3, r0, #1
 8009ab2:	d102      	bne.n	8009aba <_close_r+0x1a>
 8009ab4:	682b      	ldr	r3, [r5, #0]
 8009ab6:	b103      	cbz	r3, 8009aba <_close_r+0x1a>
 8009ab8:	6023      	str	r3, [r4, #0]
 8009aba:	bd38      	pop	{r3, r4, r5, pc}
 8009abc:	20000e5c 	.word	0x20000e5c

08009ac0 <_lseek_r>:
 8009ac0:	b538      	push	{r3, r4, r5, lr}
 8009ac2:	4d07      	ldr	r5, [pc, #28]	@ (8009ae0 <_lseek_r+0x20>)
 8009ac4:	4604      	mov	r4, r0
 8009ac6:	4608      	mov	r0, r1
 8009ac8:	4611      	mov	r1, r2
 8009aca:	2200      	movs	r2, #0
 8009acc:	602a      	str	r2, [r5, #0]
 8009ace:	461a      	mov	r2, r3
 8009ad0:	f7f9 fda7 	bl	8003622 <_lseek>
 8009ad4:	1c43      	adds	r3, r0, #1
 8009ad6:	d102      	bne.n	8009ade <_lseek_r+0x1e>
 8009ad8:	682b      	ldr	r3, [r5, #0]
 8009ada:	b103      	cbz	r3, 8009ade <_lseek_r+0x1e>
 8009adc:	6023      	str	r3, [r4, #0]
 8009ade:	bd38      	pop	{r3, r4, r5, pc}
 8009ae0:	20000e5c 	.word	0x20000e5c

08009ae4 <_read_r>:
 8009ae4:	b538      	push	{r3, r4, r5, lr}
 8009ae6:	4d07      	ldr	r5, [pc, #28]	@ (8009b04 <_read_r+0x20>)
 8009ae8:	4604      	mov	r4, r0
 8009aea:	4608      	mov	r0, r1
 8009aec:	4611      	mov	r1, r2
 8009aee:	2200      	movs	r2, #0
 8009af0:	602a      	str	r2, [r5, #0]
 8009af2:	461a      	mov	r2, r3
 8009af4:	f7f9 fd35 	bl	8003562 <_read>
 8009af8:	1c43      	adds	r3, r0, #1
 8009afa:	d102      	bne.n	8009b02 <_read_r+0x1e>
 8009afc:	682b      	ldr	r3, [r5, #0]
 8009afe:	b103      	cbz	r3, 8009b02 <_read_r+0x1e>
 8009b00:	6023      	str	r3, [r4, #0]
 8009b02:	bd38      	pop	{r3, r4, r5, pc}
 8009b04:	20000e5c 	.word	0x20000e5c

08009b08 <_write_r>:
 8009b08:	b538      	push	{r3, r4, r5, lr}
 8009b0a:	4d07      	ldr	r5, [pc, #28]	@ (8009b28 <_write_r+0x20>)
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	4608      	mov	r0, r1
 8009b10:	4611      	mov	r1, r2
 8009b12:	2200      	movs	r2, #0
 8009b14:	602a      	str	r2, [r5, #0]
 8009b16:	461a      	mov	r2, r3
 8009b18:	f7f9 fd40 	bl	800359c <_write>
 8009b1c:	1c43      	adds	r3, r0, #1
 8009b1e:	d102      	bne.n	8009b26 <_write_r+0x1e>
 8009b20:	682b      	ldr	r3, [r5, #0]
 8009b22:	b103      	cbz	r3, 8009b26 <_write_r+0x1e>
 8009b24:	6023      	str	r3, [r4, #0]
 8009b26:	bd38      	pop	{r3, r4, r5, pc}
 8009b28:	20000e5c 	.word	0x20000e5c

08009b2c <__errno>:
 8009b2c:	4b01      	ldr	r3, [pc, #4]	@ (8009b34 <__errno+0x8>)
 8009b2e:	6818      	ldr	r0, [r3, #0]
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop
 8009b34:	200001c4 	.word	0x200001c4

08009b38 <__libc_init_array>:
 8009b38:	b570      	push	{r4, r5, r6, lr}
 8009b3a:	4d0d      	ldr	r5, [pc, #52]	@ (8009b70 <__libc_init_array+0x38>)
 8009b3c:	4c0d      	ldr	r4, [pc, #52]	@ (8009b74 <__libc_init_array+0x3c>)
 8009b3e:	1b64      	subs	r4, r4, r5
 8009b40:	10a4      	asrs	r4, r4, #2
 8009b42:	2600      	movs	r6, #0
 8009b44:	42a6      	cmp	r6, r4
 8009b46:	d109      	bne.n	8009b5c <__libc_init_array+0x24>
 8009b48:	4d0b      	ldr	r5, [pc, #44]	@ (8009b78 <__libc_init_array+0x40>)
 8009b4a:	4c0c      	ldr	r4, [pc, #48]	@ (8009b7c <__libc_init_array+0x44>)
 8009b4c:	f002 fcb0 	bl	800c4b0 <_init>
 8009b50:	1b64      	subs	r4, r4, r5
 8009b52:	10a4      	asrs	r4, r4, #2
 8009b54:	2600      	movs	r6, #0
 8009b56:	42a6      	cmp	r6, r4
 8009b58:	d105      	bne.n	8009b66 <__libc_init_array+0x2e>
 8009b5a:	bd70      	pop	{r4, r5, r6, pc}
 8009b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b60:	4798      	blx	r3
 8009b62:	3601      	adds	r6, #1
 8009b64:	e7ee      	b.n	8009b44 <__libc_init_array+0xc>
 8009b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b6a:	4798      	blx	r3
 8009b6c:	3601      	adds	r6, #1
 8009b6e:	e7f2      	b.n	8009b56 <__libc_init_array+0x1e>
 8009b70:	0800c98c 	.word	0x0800c98c
 8009b74:	0800c98c 	.word	0x0800c98c
 8009b78:	0800c98c 	.word	0x0800c98c
 8009b7c:	0800c990 	.word	0x0800c990

08009b80 <__retarget_lock_init_recursive>:
 8009b80:	4770      	bx	lr

08009b82 <__retarget_lock_acquire_recursive>:
 8009b82:	4770      	bx	lr

08009b84 <__retarget_lock_release_recursive>:
 8009b84:	4770      	bx	lr

08009b86 <memcpy>:
 8009b86:	440a      	add	r2, r1
 8009b88:	4291      	cmp	r1, r2
 8009b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b8e:	d100      	bne.n	8009b92 <memcpy+0xc>
 8009b90:	4770      	bx	lr
 8009b92:	b510      	push	{r4, lr}
 8009b94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b9c:	4291      	cmp	r1, r2
 8009b9e:	d1f9      	bne.n	8009b94 <memcpy+0xe>
 8009ba0:	bd10      	pop	{r4, pc}
 8009ba2:	0000      	movs	r0, r0
 8009ba4:	0000      	movs	r0, r0
	...

08009ba8 <nan>:
 8009ba8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009bb0 <nan+0x8>
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop
 8009bb0:	00000000 	.word	0x00000000
 8009bb4:	7ff80000 	.word	0x7ff80000

08009bb8 <__assert_func>:
 8009bb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bba:	4614      	mov	r4, r2
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	4b09      	ldr	r3, [pc, #36]	@ (8009be4 <__assert_func+0x2c>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4605      	mov	r5, r0
 8009bc4:	68d8      	ldr	r0, [r3, #12]
 8009bc6:	b954      	cbnz	r4, 8009bde <__assert_func+0x26>
 8009bc8:	4b07      	ldr	r3, [pc, #28]	@ (8009be8 <__assert_func+0x30>)
 8009bca:	461c      	mov	r4, r3
 8009bcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009bd0:	9100      	str	r1, [sp, #0]
 8009bd2:	462b      	mov	r3, r5
 8009bd4:	4905      	ldr	r1, [pc, #20]	@ (8009bec <__assert_func+0x34>)
 8009bd6:	f002 f813 	bl	800bc00 <fiprintf>
 8009bda:	f002 f833 	bl	800bc44 <abort>
 8009bde:	4b04      	ldr	r3, [pc, #16]	@ (8009bf0 <__assert_func+0x38>)
 8009be0:	e7f4      	b.n	8009bcc <__assert_func+0x14>
 8009be2:	bf00      	nop
 8009be4:	200001c4 	.word	0x200001c4
 8009be8:	0800c741 	.word	0x0800c741
 8009bec:	0800c713 	.word	0x0800c713
 8009bf0:	0800c706 	.word	0x0800c706

08009bf4 <quorem>:
 8009bf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf8:	6903      	ldr	r3, [r0, #16]
 8009bfa:	690c      	ldr	r4, [r1, #16]
 8009bfc:	42a3      	cmp	r3, r4
 8009bfe:	4607      	mov	r7, r0
 8009c00:	db7e      	blt.n	8009d00 <quorem+0x10c>
 8009c02:	3c01      	subs	r4, #1
 8009c04:	f101 0814 	add.w	r8, r1, #20
 8009c08:	00a3      	lsls	r3, r4, #2
 8009c0a:	f100 0514 	add.w	r5, r0, #20
 8009c0e:	9300      	str	r3, [sp, #0]
 8009c10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c14:	9301      	str	r3, [sp, #4]
 8009c16:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	429a      	cmp	r2, r3
 8009c22:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c26:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c2a:	d32e      	bcc.n	8009c8a <quorem+0x96>
 8009c2c:	f04f 0a00 	mov.w	sl, #0
 8009c30:	46c4      	mov	ip, r8
 8009c32:	46ae      	mov	lr, r5
 8009c34:	46d3      	mov	fp, sl
 8009c36:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009c3a:	b298      	uxth	r0, r3
 8009c3c:	fb06 a000 	mla	r0, r6, r0, sl
 8009c40:	0c02      	lsrs	r2, r0, #16
 8009c42:	0c1b      	lsrs	r3, r3, #16
 8009c44:	fb06 2303 	mla	r3, r6, r3, r2
 8009c48:	f8de 2000 	ldr.w	r2, [lr]
 8009c4c:	b280      	uxth	r0, r0
 8009c4e:	b292      	uxth	r2, r2
 8009c50:	1a12      	subs	r2, r2, r0
 8009c52:	445a      	add	r2, fp
 8009c54:	f8de 0000 	ldr.w	r0, [lr]
 8009c58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009c62:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009c66:	b292      	uxth	r2, r2
 8009c68:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009c6c:	45e1      	cmp	r9, ip
 8009c6e:	f84e 2b04 	str.w	r2, [lr], #4
 8009c72:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009c76:	d2de      	bcs.n	8009c36 <quorem+0x42>
 8009c78:	9b00      	ldr	r3, [sp, #0]
 8009c7a:	58eb      	ldr	r3, [r5, r3]
 8009c7c:	b92b      	cbnz	r3, 8009c8a <quorem+0x96>
 8009c7e:	9b01      	ldr	r3, [sp, #4]
 8009c80:	3b04      	subs	r3, #4
 8009c82:	429d      	cmp	r5, r3
 8009c84:	461a      	mov	r2, r3
 8009c86:	d32f      	bcc.n	8009ce8 <quorem+0xf4>
 8009c88:	613c      	str	r4, [r7, #16]
 8009c8a:	4638      	mov	r0, r7
 8009c8c:	f001 fd10 	bl	800b6b0 <__mcmp>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	db25      	blt.n	8009ce0 <quorem+0xec>
 8009c94:	4629      	mov	r1, r5
 8009c96:	2000      	movs	r0, #0
 8009c98:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c9c:	f8d1 c000 	ldr.w	ip, [r1]
 8009ca0:	fa1f fe82 	uxth.w	lr, r2
 8009ca4:	fa1f f38c 	uxth.w	r3, ip
 8009ca8:	eba3 030e 	sub.w	r3, r3, lr
 8009cac:	4403      	add	r3, r0
 8009cae:	0c12      	lsrs	r2, r2, #16
 8009cb0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009cb4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cbe:	45c1      	cmp	r9, r8
 8009cc0:	f841 3b04 	str.w	r3, [r1], #4
 8009cc4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009cc8:	d2e6      	bcs.n	8009c98 <quorem+0xa4>
 8009cca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009cce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cd2:	b922      	cbnz	r2, 8009cde <quorem+0xea>
 8009cd4:	3b04      	subs	r3, #4
 8009cd6:	429d      	cmp	r5, r3
 8009cd8:	461a      	mov	r2, r3
 8009cda:	d30b      	bcc.n	8009cf4 <quorem+0x100>
 8009cdc:	613c      	str	r4, [r7, #16]
 8009cde:	3601      	adds	r6, #1
 8009ce0:	4630      	mov	r0, r6
 8009ce2:	b003      	add	sp, #12
 8009ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ce8:	6812      	ldr	r2, [r2, #0]
 8009cea:	3b04      	subs	r3, #4
 8009cec:	2a00      	cmp	r2, #0
 8009cee:	d1cb      	bne.n	8009c88 <quorem+0x94>
 8009cf0:	3c01      	subs	r4, #1
 8009cf2:	e7c6      	b.n	8009c82 <quorem+0x8e>
 8009cf4:	6812      	ldr	r2, [r2, #0]
 8009cf6:	3b04      	subs	r3, #4
 8009cf8:	2a00      	cmp	r2, #0
 8009cfa:	d1ef      	bne.n	8009cdc <quorem+0xe8>
 8009cfc:	3c01      	subs	r4, #1
 8009cfe:	e7ea      	b.n	8009cd6 <quorem+0xe2>
 8009d00:	2000      	movs	r0, #0
 8009d02:	e7ee      	b.n	8009ce2 <quorem+0xee>
 8009d04:	0000      	movs	r0, r0
	...

08009d08 <_dtoa_r>:
 8009d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d0c:	69c7      	ldr	r7, [r0, #28]
 8009d0e:	b099      	sub	sp, #100	@ 0x64
 8009d10:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009d14:	ec55 4b10 	vmov	r4, r5, d0
 8009d18:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009d1a:	9109      	str	r1, [sp, #36]	@ 0x24
 8009d1c:	4683      	mov	fp, r0
 8009d1e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d20:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009d22:	b97f      	cbnz	r7, 8009d44 <_dtoa_r+0x3c>
 8009d24:	2010      	movs	r0, #16
 8009d26:	f001 f937 	bl	800af98 <malloc>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009d30:	b920      	cbnz	r0, 8009d3c <_dtoa_r+0x34>
 8009d32:	4ba7      	ldr	r3, [pc, #668]	@ (8009fd0 <_dtoa_r+0x2c8>)
 8009d34:	21ef      	movs	r1, #239	@ 0xef
 8009d36:	48a7      	ldr	r0, [pc, #668]	@ (8009fd4 <_dtoa_r+0x2cc>)
 8009d38:	f7ff ff3e 	bl	8009bb8 <__assert_func>
 8009d3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009d40:	6007      	str	r7, [r0, #0]
 8009d42:	60c7      	str	r7, [r0, #12]
 8009d44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009d48:	6819      	ldr	r1, [r3, #0]
 8009d4a:	b159      	cbz	r1, 8009d64 <_dtoa_r+0x5c>
 8009d4c:	685a      	ldr	r2, [r3, #4]
 8009d4e:	604a      	str	r2, [r1, #4]
 8009d50:	2301      	movs	r3, #1
 8009d52:	4093      	lsls	r3, r2
 8009d54:	608b      	str	r3, [r1, #8]
 8009d56:	4658      	mov	r0, fp
 8009d58:	f001 fa26 	bl	800b1a8 <_Bfree>
 8009d5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009d60:	2200      	movs	r2, #0
 8009d62:	601a      	str	r2, [r3, #0]
 8009d64:	1e2b      	subs	r3, r5, #0
 8009d66:	bfb9      	ittee	lt
 8009d68:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009d6c:	9303      	strlt	r3, [sp, #12]
 8009d6e:	2300      	movge	r3, #0
 8009d70:	6033      	strge	r3, [r6, #0]
 8009d72:	9f03      	ldr	r7, [sp, #12]
 8009d74:	4b98      	ldr	r3, [pc, #608]	@ (8009fd8 <_dtoa_r+0x2d0>)
 8009d76:	bfbc      	itt	lt
 8009d78:	2201      	movlt	r2, #1
 8009d7a:	6032      	strlt	r2, [r6, #0]
 8009d7c:	43bb      	bics	r3, r7
 8009d7e:	d112      	bne.n	8009da6 <_dtoa_r+0x9e>
 8009d80:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009d82:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009d86:	6013      	str	r3, [r2, #0]
 8009d88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d8c:	4323      	orrs	r3, r4
 8009d8e:	f000 854d 	beq.w	800a82c <_dtoa_r+0xb24>
 8009d92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d94:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009fec <_dtoa_r+0x2e4>
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	f000 854f 	beq.w	800a83c <_dtoa_r+0xb34>
 8009d9e:	f10a 0303 	add.w	r3, sl, #3
 8009da2:	f000 bd49 	b.w	800a838 <_dtoa_r+0xb30>
 8009da6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009daa:	2200      	movs	r2, #0
 8009dac:	ec51 0b17 	vmov	r0, r1, d7
 8009db0:	2300      	movs	r3, #0
 8009db2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009db6:	f7f6 fea7 	bl	8000b08 <__aeabi_dcmpeq>
 8009dba:	4680      	mov	r8, r0
 8009dbc:	b158      	cbz	r0, 8009dd6 <_dtoa_r+0xce>
 8009dbe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	6013      	str	r3, [r2, #0]
 8009dc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009dc6:	b113      	cbz	r3, 8009dce <_dtoa_r+0xc6>
 8009dc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009dca:	4b84      	ldr	r3, [pc, #528]	@ (8009fdc <_dtoa_r+0x2d4>)
 8009dcc:	6013      	str	r3, [r2, #0]
 8009dce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009ff0 <_dtoa_r+0x2e8>
 8009dd2:	f000 bd33 	b.w	800a83c <_dtoa_r+0xb34>
 8009dd6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009dda:	aa16      	add	r2, sp, #88	@ 0x58
 8009ddc:	a917      	add	r1, sp, #92	@ 0x5c
 8009dde:	4658      	mov	r0, fp
 8009de0:	f001 fd86 	bl	800b8f0 <__d2b>
 8009de4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009de8:	4681      	mov	r9, r0
 8009dea:	2e00      	cmp	r6, #0
 8009dec:	d077      	beq.n	8009ede <_dtoa_r+0x1d6>
 8009dee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009df0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009df8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009dfc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009e00:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009e04:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009e08:	4619      	mov	r1, r3
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	4b74      	ldr	r3, [pc, #464]	@ (8009fe0 <_dtoa_r+0x2d8>)
 8009e0e:	f7f6 fa5b 	bl	80002c8 <__aeabi_dsub>
 8009e12:	a369      	add	r3, pc, #420	@ (adr r3, 8009fb8 <_dtoa_r+0x2b0>)
 8009e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e18:	f7f6 fc0e 	bl	8000638 <__aeabi_dmul>
 8009e1c:	a368      	add	r3, pc, #416	@ (adr r3, 8009fc0 <_dtoa_r+0x2b8>)
 8009e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e22:	f7f6 fa53 	bl	80002cc <__adddf3>
 8009e26:	4604      	mov	r4, r0
 8009e28:	4630      	mov	r0, r6
 8009e2a:	460d      	mov	r5, r1
 8009e2c:	f7f6 fb9a 	bl	8000564 <__aeabi_i2d>
 8009e30:	a365      	add	r3, pc, #404	@ (adr r3, 8009fc8 <_dtoa_r+0x2c0>)
 8009e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e36:	f7f6 fbff 	bl	8000638 <__aeabi_dmul>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	4620      	mov	r0, r4
 8009e40:	4629      	mov	r1, r5
 8009e42:	f7f6 fa43 	bl	80002cc <__adddf3>
 8009e46:	4604      	mov	r4, r0
 8009e48:	460d      	mov	r5, r1
 8009e4a:	f7f6 fea5 	bl	8000b98 <__aeabi_d2iz>
 8009e4e:	2200      	movs	r2, #0
 8009e50:	4607      	mov	r7, r0
 8009e52:	2300      	movs	r3, #0
 8009e54:	4620      	mov	r0, r4
 8009e56:	4629      	mov	r1, r5
 8009e58:	f7f6 fe60 	bl	8000b1c <__aeabi_dcmplt>
 8009e5c:	b140      	cbz	r0, 8009e70 <_dtoa_r+0x168>
 8009e5e:	4638      	mov	r0, r7
 8009e60:	f7f6 fb80 	bl	8000564 <__aeabi_i2d>
 8009e64:	4622      	mov	r2, r4
 8009e66:	462b      	mov	r3, r5
 8009e68:	f7f6 fe4e 	bl	8000b08 <__aeabi_dcmpeq>
 8009e6c:	b900      	cbnz	r0, 8009e70 <_dtoa_r+0x168>
 8009e6e:	3f01      	subs	r7, #1
 8009e70:	2f16      	cmp	r7, #22
 8009e72:	d851      	bhi.n	8009f18 <_dtoa_r+0x210>
 8009e74:	4b5b      	ldr	r3, [pc, #364]	@ (8009fe4 <_dtoa_r+0x2dc>)
 8009e76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e82:	f7f6 fe4b 	bl	8000b1c <__aeabi_dcmplt>
 8009e86:	2800      	cmp	r0, #0
 8009e88:	d048      	beq.n	8009f1c <_dtoa_r+0x214>
 8009e8a:	3f01      	subs	r7, #1
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009e90:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009e92:	1b9b      	subs	r3, r3, r6
 8009e94:	1e5a      	subs	r2, r3, #1
 8009e96:	bf44      	itt	mi
 8009e98:	f1c3 0801 	rsbmi	r8, r3, #1
 8009e9c:	2300      	movmi	r3, #0
 8009e9e:	9208      	str	r2, [sp, #32]
 8009ea0:	bf54      	ite	pl
 8009ea2:	f04f 0800 	movpl.w	r8, #0
 8009ea6:	9308      	strmi	r3, [sp, #32]
 8009ea8:	2f00      	cmp	r7, #0
 8009eaa:	db39      	blt.n	8009f20 <_dtoa_r+0x218>
 8009eac:	9b08      	ldr	r3, [sp, #32]
 8009eae:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009eb0:	443b      	add	r3, r7
 8009eb2:	9308      	str	r3, [sp, #32]
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009eb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eba:	2b09      	cmp	r3, #9
 8009ebc:	d864      	bhi.n	8009f88 <_dtoa_r+0x280>
 8009ebe:	2b05      	cmp	r3, #5
 8009ec0:	bfc4      	itt	gt
 8009ec2:	3b04      	subgt	r3, #4
 8009ec4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ec8:	f1a3 0302 	sub.w	r3, r3, #2
 8009ecc:	bfcc      	ite	gt
 8009ece:	2400      	movgt	r4, #0
 8009ed0:	2401      	movle	r4, #1
 8009ed2:	2b03      	cmp	r3, #3
 8009ed4:	d863      	bhi.n	8009f9e <_dtoa_r+0x296>
 8009ed6:	e8df f003 	tbb	[pc, r3]
 8009eda:	372a      	.short	0x372a
 8009edc:	5535      	.short	0x5535
 8009ede:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009ee2:	441e      	add	r6, r3
 8009ee4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009ee8:	2b20      	cmp	r3, #32
 8009eea:	bfc1      	itttt	gt
 8009eec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009ef0:	409f      	lslgt	r7, r3
 8009ef2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009ef6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009efa:	bfd6      	itet	le
 8009efc:	f1c3 0320 	rsble	r3, r3, #32
 8009f00:	ea47 0003 	orrgt.w	r0, r7, r3
 8009f04:	fa04 f003 	lslle.w	r0, r4, r3
 8009f08:	f7f6 fb1c 	bl	8000544 <__aeabi_ui2d>
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009f12:	3e01      	subs	r6, #1
 8009f14:	9214      	str	r2, [sp, #80]	@ 0x50
 8009f16:	e777      	b.n	8009e08 <_dtoa_r+0x100>
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e7b8      	b.n	8009e8e <_dtoa_r+0x186>
 8009f1c:	9012      	str	r0, [sp, #72]	@ 0x48
 8009f1e:	e7b7      	b.n	8009e90 <_dtoa_r+0x188>
 8009f20:	427b      	negs	r3, r7
 8009f22:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f24:	2300      	movs	r3, #0
 8009f26:	eba8 0807 	sub.w	r8, r8, r7
 8009f2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009f2c:	e7c4      	b.n	8009eb8 <_dtoa_r+0x1b0>
 8009f2e:	2300      	movs	r3, #0
 8009f30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	dc35      	bgt.n	8009fa4 <_dtoa_r+0x29c>
 8009f38:	2301      	movs	r3, #1
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	9307      	str	r3, [sp, #28]
 8009f3e:	461a      	mov	r2, r3
 8009f40:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f42:	e00b      	b.n	8009f5c <_dtoa_r+0x254>
 8009f44:	2301      	movs	r3, #1
 8009f46:	e7f3      	b.n	8009f30 <_dtoa_r+0x228>
 8009f48:	2300      	movs	r3, #0
 8009f4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f4e:	18fb      	adds	r3, r7, r3
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	3301      	adds	r3, #1
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	9307      	str	r3, [sp, #28]
 8009f58:	bfb8      	it	lt
 8009f5a:	2301      	movlt	r3, #1
 8009f5c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009f60:	2100      	movs	r1, #0
 8009f62:	2204      	movs	r2, #4
 8009f64:	f102 0514 	add.w	r5, r2, #20
 8009f68:	429d      	cmp	r5, r3
 8009f6a:	d91f      	bls.n	8009fac <_dtoa_r+0x2a4>
 8009f6c:	6041      	str	r1, [r0, #4]
 8009f6e:	4658      	mov	r0, fp
 8009f70:	f001 f8da 	bl	800b128 <_Balloc>
 8009f74:	4682      	mov	sl, r0
 8009f76:	2800      	cmp	r0, #0
 8009f78:	d13c      	bne.n	8009ff4 <_dtoa_r+0x2ec>
 8009f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8009fe8 <_dtoa_r+0x2e0>)
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009f82:	e6d8      	b.n	8009d36 <_dtoa_r+0x2e>
 8009f84:	2301      	movs	r3, #1
 8009f86:	e7e0      	b.n	8009f4a <_dtoa_r+0x242>
 8009f88:	2401      	movs	r4, #1
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f8e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009f90:	f04f 33ff 	mov.w	r3, #4294967295
 8009f94:	9300      	str	r3, [sp, #0]
 8009f96:	9307      	str	r3, [sp, #28]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	2312      	movs	r3, #18
 8009f9c:	e7d0      	b.n	8009f40 <_dtoa_r+0x238>
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fa2:	e7f5      	b.n	8009f90 <_dtoa_r+0x288>
 8009fa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fa6:	9300      	str	r3, [sp, #0]
 8009fa8:	9307      	str	r3, [sp, #28]
 8009faa:	e7d7      	b.n	8009f5c <_dtoa_r+0x254>
 8009fac:	3101      	adds	r1, #1
 8009fae:	0052      	lsls	r2, r2, #1
 8009fb0:	e7d8      	b.n	8009f64 <_dtoa_r+0x25c>
 8009fb2:	bf00      	nop
 8009fb4:	f3af 8000 	nop.w
 8009fb8:	636f4361 	.word	0x636f4361
 8009fbc:	3fd287a7 	.word	0x3fd287a7
 8009fc0:	8b60c8b3 	.word	0x8b60c8b3
 8009fc4:	3fc68a28 	.word	0x3fc68a28
 8009fc8:	509f79fb 	.word	0x509f79fb
 8009fcc:	3fd34413 	.word	0x3fd34413
 8009fd0:	0800c68d 	.word	0x0800c68d
 8009fd4:	0800c74f 	.word	0x0800c74f
 8009fd8:	7ff00000 	.word	0x7ff00000
 8009fdc:	0800c66a 	.word	0x0800c66a
 8009fe0:	3ff80000 	.word	0x3ff80000
 8009fe4:	0800c8a8 	.word	0x0800c8a8
 8009fe8:	0800c7a7 	.word	0x0800c7a7
 8009fec:	0800c74b 	.word	0x0800c74b
 8009ff0:	0800c669 	.word	0x0800c669
 8009ff4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009ff8:	6018      	str	r0, [r3, #0]
 8009ffa:	9b07      	ldr	r3, [sp, #28]
 8009ffc:	2b0e      	cmp	r3, #14
 8009ffe:	f200 80a4 	bhi.w	800a14a <_dtoa_r+0x442>
 800a002:	2c00      	cmp	r4, #0
 800a004:	f000 80a1 	beq.w	800a14a <_dtoa_r+0x442>
 800a008:	2f00      	cmp	r7, #0
 800a00a:	dd33      	ble.n	800a074 <_dtoa_r+0x36c>
 800a00c:	4bad      	ldr	r3, [pc, #692]	@ (800a2c4 <_dtoa_r+0x5bc>)
 800a00e:	f007 020f 	and.w	r2, r7, #15
 800a012:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a016:	ed93 7b00 	vldr	d7, [r3]
 800a01a:	05f8      	lsls	r0, r7, #23
 800a01c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a020:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a024:	d516      	bpl.n	800a054 <_dtoa_r+0x34c>
 800a026:	4ba8      	ldr	r3, [pc, #672]	@ (800a2c8 <_dtoa_r+0x5c0>)
 800a028:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a02c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a030:	f7f6 fc2c 	bl	800088c <__aeabi_ddiv>
 800a034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a038:	f004 040f 	and.w	r4, r4, #15
 800a03c:	2603      	movs	r6, #3
 800a03e:	4da2      	ldr	r5, [pc, #648]	@ (800a2c8 <_dtoa_r+0x5c0>)
 800a040:	b954      	cbnz	r4, 800a058 <_dtoa_r+0x350>
 800a042:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a04a:	f7f6 fc1f 	bl	800088c <__aeabi_ddiv>
 800a04e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a052:	e028      	b.n	800a0a6 <_dtoa_r+0x39e>
 800a054:	2602      	movs	r6, #2
 800a056:	e7f2      	b.n	800a03e <_dtoa_r+0x336>
 800a058:	07e1      	lsls	r1, r4, #31
 800a05a:	d508      	bpl.n	800a06e <_dtoa_r+0x366>
 800a05c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a060:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a064:	f7f6 fae8 	bl	8000638 <__aeabi_dmul>
 800a068:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a06c:	3601      	adds	r6, #1
 800a06e:	1064      	asrs	r4, r4, #1
 800a070:	3508      	adds	r5, #8
 800a072:	e7e5      	b.n	800a040 <_dtoa_r+0x338>
 800a074:	f000 80d2 	beq.w	800a21c <_dtoa_r+0x514>
 800a078:	427c      	negs	r4, r7
 800a07a:	4b92      	ldr	r3, [pc, #584]	@ (800a2c4 <_dtoa_r+0x5bc>)
 800a07c:	4d92      	ldr	r5, [pc, #584]	@ (800a2c8 <_dtoa_r+0x5c0>)
 800a07e:	f004 020f 	and.w	r2, r4, #15
 800a082:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a08e:	f7f6 fad3 	bl	8000638 <__aeabi_dmul>
 800a092:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a096:	1124      	asrs	r4, r4, #4
 800a098:	2300      	movs	r3, #0
 800a09a:	2602      	movs	r6, #2
 800a09c:	2c00      	cmp	r4, #0
 800a09e:	f040 80b2 	bne.w	800a206 <_dtoa_r+0x4fe>
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1d3      	bne.n	800a04e <_dtoa_r+0x346>
 800a0a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a0a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f000 80b7 	beq.w	800a220 <_dtoa_r+0x518>
 800a0b2:	4b86      	ldr	r3, [pc, #536]	@ (800a2cc <_dtoa_r+0x5c4>)
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	4629      	mov	r1, r5
 800a0ba:	f7f6 fd2f 	bl	8000b1c <__aeabi_dcmplt>
 800a0be:	2800      	cmp	r0, #0
 800a0c0:	f000 80ae 	beq.w	800a220 <_dtoa_r+0x518>
 800a0c4:	9b07      	ldr	r3, [sp, #28]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	f000 80aa 	beq.w	800a220 <_dtoa_r+0x518>
 800a0cc:	9b00      	ldr	r3, [sp, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	dd37      	ble.n	800a142 <_dtoa_r+0x43a>
 800a0d2:	1e7b      	subs	r3, r7, #1
 800a0d4:	9304      	str	r3, [sp, #16]
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	4b7d      	ldr	r3, [pc, #500]	@ (800a2d0 <_dtoa_r+0x5c8>)
 800a0da:	2200      	movs	r2, #0
 800a0dc:	4629      	mov	r1, r5
 800a0de:	f7f6 faab 	bl	8000638 <__aeabi_dmul>
 800a0e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0e6:	9c00      	ldr	r4, [sp, #0]
 800a0e8:	3601      	adds	r6, #1
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	f7f6 fa3a 	bl	8000564 <__aeabi_i2d>
 800a0f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0f4:	f7f6 faa0 	bl	8000638 <__aeabi_dmul>
 800a0f8:	4b76      	ldr	r3, [pc, #472]	@ (800a2d4 <_dtoa_r+0x5cc>)
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f7f6 f8e6 	bl	80002cc <__adddf3>
 800a100:	4605      	mov	r5, r0
 800a102:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a106:	2c00      	cmp	r4, #0
 800a108:	f040 808d 	bne.w	800a226 <_dtoa_r+0x51e>
 800a10c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a110:	4b71      	ldr	r3, [pc, #452]	@ (800a2d8 <_dtoa_r+0x5d0>)
 800a112:	2200      	movs	r2, #0
 800a114:	f7f6 f8d8 	bl	80002c8 <__aeabi_dsub>
 800a118:	4602      	mov	r2, r0
 800a11a:	460b      	mov	r3, r1
 800a11c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a120:	462a      	mov	r2, r5
 800a122:	4633      	mov	r3, r6
 800a124:	f7f6 fd18 	bl	8000b58 <__aeabi_dcmpgt>
 800a128:	2800      	cmp	r0, #0
 800a12a:	f040 828b 	bne.w	800a644 <_dtoa_r+0x93c>
 800a12e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a132:	462a      	mov	r2, r5
 800a134:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a138:	f7f6 fcf0 	bl	8000b1c <__aeabi_dcmplt>
 800a13c:	2800      	cmp	r0, #0
 800a13e:	f040 8128 	bne.w	800a392 <_dtoa_r+0x68a>
 800a142:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a146:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a14a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f2c0 815a 	blt.w	800a406 <_dtoa_r+0x6fe>
 800a152:	2f0e      	cmp	r7, #14
 800a154:	f300 8157 	bgt.w	800a406 <_dtoa_r+0x6fe>
 800a158:	4b5a      	ldr	r3, [pc, #360]	@ (800a2c4 <_dtoa_r+0x5bc>)
 800a15a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a15e:	ed93 7b00 	vldr	d7, [r3]
 800a162:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a164:	2b00      	cmp	r3, #0
 800a166:	ed8d 7b00 	vstr	d7, [sp]
 800a16a:	da03      	bge.n	800a174 <_dtoa_r+0x46c>
 800a16c:	9b07      	ldr	r3, [sp, #28]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	f340 8101 	ble.w	800a376 <_dtoa_r+0x66e>
 800a174:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a178:	4656      	mov	r6, sl
 800a17a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a17e:	4620      	mov	r0, r4
 800a180:	4629      	mov	r1, r5
 800a182:	f7f6 fb83 	bl	800088c <__aeabi_ddiv>
 800a186:	f7f6 fd07 	bl	8000b98 <__aeabi_d2iz>
 800a18a:	4680      	mov	r8, r0
 800a18c:	f7f6 f9ea 	bl	8000564 <__aeabi_i2d>
 800a190:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a194:	f7f6 fa50 	bl	8000638 <__aeabi_dmul>
 800a198:	4602      	mov	r2, r0
 800a19a:	460b      	mov	r3, r1
 800a19c:	4620      	mov	r0, r4
 800a19e:	4629      	mov	r1, r5
 800a1a0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a1a4:	f7f6 f890 	bl	80002c8 <__aeabi_dsub>
 800a1a8:	f806 4b01 	strb.w	r4, [r6], #1
 800a1ac:	9d07      	ldr	r5, [sp, #28]
 800a1ae:	eba6 040a 	sub.w	r4, r6, sl
 800a1b2:	42a5      	cmp	r5, r4
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	f040 8117 	bne.w	800a3ea <_dtoa_r+0x6e2>
 800a1bc:	f7f6 f886 	bl	80002cc <__adddf3>
 800a1c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1c4:	4604      	mov	r4, r0
 800a1c6:	460d      	mov	r5, r1
 800a1c8:	f7f6 fcc6 	bl	8000b58 <__aeabi_dcmpgt>
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	f040 80f9 	bne.w	800a3c4 <_dtoa_r+0x6bc>
 800a1d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	4629      	mov	r1, r5
 800a1da:	f7f6 fc95 	bl	8000b08 <__aeabi_dcmpeq>
 800a1de:	b118      	cbz	r0, 800a1e8 <_dtoa_r+0x4e0>
 800a1e0:	f018 0f01 	tst.w	r8, #1
 800a1e4:	f040 80ee 	bne.w	800a3c4 <_dtoa_r+0x6bc>
 800a1e8:	4649      	mov	r1, r9
 800a1ea:	4658      	mov	r0, fp
 800a1ec:	f000 ffdc 	bl	800b1a8 <_Bfree>
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	7033      	strb	r3, [r6, #0]
 800a1f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a1f6:	3701      	adds	r7, #1
 800a1f8:	601f      	str	r7, [r3, #0]
 800a1fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	f000 831d 	beq.w	800a83c <_dtoa_r+0xb34>
 800a202:	601e      	str	r6, [r3, #0]
 800a204:	e31a      	b.n	800a83c <_dtoa_r+0xb34>
 800a206:	07e2      	lsls	r2, r4, #31
 800a208:	d505      	bpl.n	800a216 <_dtoa_r+0x50e>
 800a20a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a20e:	f7f6 fa13 	bl	8000638 <__aeabi_dmul>
 800a212:	3601      	adds	r6, #1
 800a214:	2301      	movs	r3, #1
 800a216:	1064      	asrs	r4, r4, #1
 800a218:	3508      	adds	r5, #8
 800a21a:	e73f      	b.n	800a09c <_dtoa_r+0x394>
 800a21c:	2602      	movs	r6, #2
 800a21e:	e742      	b.n	800a0a6 <_dtoa_r+0x39e>
 800a220:	9c07      	ldr	r4, [sp, #28]
 800a222:	9704      	str	r7, [sp, #16]
 800a224:	e761      	b.n	800a0ea <_dtoa_r+0x3e2>
 800a226:	4b27      	ldr	r3, [pc, #156]	@ (800a2c4 <_dtoa_r+0x5bc>)
 800a228:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a22a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a22e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a232:	4454      	add	r4, sl
 800a234:	2900      	cmp	r1, #0
 800a236:	d053      	beq.n	800a2e0 <_dtoa_r+0x5d8>
 800a238:	4928      	ldr	r1, [pc, #160]	@ (800a2dc <_dtoa_r+0x5d4>)
 800a23a:	2000      	movs	r0, #0
 800a23c:	f7f6 fb26 	bl	800088c <__aeabi_ddiv>
 800a240:	4633      	mov	r3, r6
 800a242:	462a      	mov	r2, r5
 800a244:	f7f6 f840 	bl	80002c8 <__aeabi_dsub>
 800a248:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a24c:	4656      	mov	r6, sl
 800a24e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a252:	f7f6 fca1 	bl	8000b98 <__aeabi_d2iz>
 800a256:	4605      	mov	r5, r0
 800a258:	f7f6 f984 	bl	8000564 <__aeabi_i2d>
 800a25c:	4602      	mov	r2, r0
 800a25e:	460b      	mov	r3, r1
 800a260:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a264:	f7f6 f830 	bl	80002c8 <__aeabi_dsub>
 800a268:	3530      	adds	r5, #48	@ 0x30
 800a26a:	4602      	mov	r2, r0
 800a26c:	460b      	mov	r3, r1
 800a26e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a272:	f806 5b01 	strb.w	r5, [r6], #1
 800a276:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a27a:	f7f6 fc4f 	bl	8000b1c <__aeabi_dcmplt>
 800a27e:	2800      	cmp	r0, #0
 800a280:	d171      	bne.n	800a366 <_dtoa_r+0x65e>
 800a282:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a286:	4911      	ldr	r1, [pc, #68]	@ (800a2cc <_dtoa_r+0x5c4>)
 800a288:	2000      	movs	r0, #0
 800a28a:	f7f6 f81d 	bl	80002c8 <__aeabi_dsub>
 800a28e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a292:	f7f6 fc43 	bl	8000b1c <__aeabi_dcmplt>
 800a296:	2800      	cmp	r0, #0
 800a298:	f040 8095 	bne.w	800a3c6 <_dtoa_r+0x6be>
 800a29c:	42a6      	cmp	r6, r4
 800a29e:	f43f af50 	beq.w	800a142 <_dtoa_r+0x43a>
 800a2a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a2a6:	4b0a      	ldr	r3, [pc, #40]	@ (800a2d0 <_dtoa_r+0x5c8>)
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f7f6 f9c5 	bl	8000638 <__aeabi_dmul>
 800a2ae:	4b08      	ldr	r3, [pc, #32]	@ (800a2d0 <_dtoa_r+0x5c8>)
 800a2b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2ba:	f7f6 f9bd 	bl	8000638 <__aeabi_dmul>
 800a2be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2c2:	e7c4      	b.n	800a24e <_dtoa_r+0x546>
 800a2c4:	0800c8a8 	.word	0x0800c8a8
 800a2c8:	0800c880 	.word	0x0800c880
 800a2cc:	3ff00000 	.word	0x3ff00000
 800a2d0:	40240000 	.word	0x40240000
 800a2d4:	401c0000 	.word	0x401c0000
 800a2d8:	40140000 	.word	0x40140000
 800a2dc:	3fe00000 	.word	0x3fe00000
 800a2e0:	4631      	mov	r1, r6
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	f7f6 f9a8 	bl	8000638 <__aeabi_dmul>
 800a2e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a2ec:	9415      	str	r4, [sp, #84]	@ 0x54
 800a2ee:	4656      	mov	r6, sl
 800a2f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2f4:	f7f6 fc50 	bl	8000b98 <__aeabi_d2iz>
 800a2f8:	4605      	mov	r5, r0
 800a2fa:	f7f6 f933 	bl	8000564 <__aeabi_i2d>
 800a2fe:	4602      	mov	r2, r0
 800a300:	460b      	mov	r3, r1
 800a302:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a306:	f7f5 ffdf 	bl	80002c8 <__aeabi_dsub>
 800a30a:	3530      	adds	r5, #48	@ 0x30
 800a30c:	f806 5b01 	strb.w	r5, [r6], #1
 800a310:	4602      	mov	r2, r0
 800a312:	460b      	mov	r3, r1
 800a314:	42a6      	cmp	r6, r4
 800a316:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a31a:	f04f 0200 	mov.w	r2, #0
 800a31e:	d124      	bne.n	800a36a <_dtoa_r+0x662>
 800a320:	4bac      	ldr	r3, [pc, #688]	@ (800a5d4 <_dtoa_r+0x8cc>)
 800a322:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a326:	f7f5 ffd1 	bl	80002cc <__adddf3>
 800a32a:	4602      	mov	r2, r0
 800a32c:	460b      	mov	r3, r1
 800a32e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a332:	f7f6 fc11 	bl	8000b58 <__aeabi_dcmpgt>
 800a336:	2800      	cmp	r0, #0
 800a338:	d145      	bne.n	800a3c6 <_dtoa_r+0x6be>
 800a33a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a33e:	49a5      	ldr	r1, [pc, #660]	@ (800a5d4 <_dtoa_r+0x8cc>)
 800a340:	2000      	movs	r0, #0
 800a342:	f7f5 ffc1 	bl	80002c8 <__aeabi_dsub>
 800a346:	4602      	mov	r2, r0
 800a348:	460b      	mov	r3, r1
 800a34a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a34e:	f7f6 fbe5 	bl	8000b1c <__aeabi_dcmplt>
 800a352:	2800      	cmp	r0, #0
 800a354:	f43f aef5 	beq.w	800a142 <_dtoa_r+0x43a>
 800a358:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a35a:	1e73      	subs	r3, r6, #1
 800a35c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a35e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a362:	2b30      	cmp	r3, #48	@ 0x30
 800a364:	d0f8      	beq.n	800a358 <_dtoa_r+0x650>
 800a366:	9f04      	ldr	r7, [sp, #16]
 800a368:	e73e      	b.n	800a1e8 <_dtoa_r+0x4e0>
 800a36a:	4b9b      	ldr	r3, [pc, #620]	@ (800a5d8 <_dtoa_r+0x8d0>)
 800a36c:	f7f6 f964 	bl	8000638 <__aeabi_dmul>
 800a370:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a374:	e7bc      	b.n	800a2f0 <_dtoa_r+0x5e8>
 800a376:	d10c      	bne.n	800a392 <_dtoa_r+0x68a>
 800a378:	4b98      	ldr	r3, [pc, #608]	@ (800a5dc <_dtoa_r+0x8d4>)
 800a37a:	2200      	movs	r2, #0
 800a37c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a380:	f7f6 f95a 	bl	8000638 <__aeabi_dmul>
 800a384:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a388:	f7f6 fbdc 	bl	8000b44 <__aeabi_dcmpge>
 800a38c:	2800      	cmp	r0, #0
 800a38e:	f000 8157 	beq.w	800a640 <_dtoa_r+0x938>
 800a392:	2400      	movs	r4, #0
 800a394:	4625      	mov	r5, r4
 800a396:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a398:	43db      	mvns	r3, r3
 800a39a:	9304      	str	r3, [sp, #16]
 800a39c:	4656      	mov	r6, sl
 800a39e:	2700      	movs	r7, #0
 800a3a0:	4621      	mov	r1, r4
 800a3a2:	4658      	mov	r0, fp
 800a3a4:	f000 ff00 	bl	800b1a8 <_Bfree>
 800a3a8:	2d00      	cmp	r5, #0
 800a3aa:	d0dc      	beq.n	800a366 <_dtoa_r+0x65e>
 800a3ac:	b12f      	cbz	r7, 800a3ba <_dtoa_r+0x6b2>
 800a3ae:	42af      	cmp	r7, r5
 800a3b0:	d003      	beq.n	800a3ba <_dtoa_r+0x6b2>
 800a3b2:	4639      	mov	r1, r7
 800a3b4:	4658      	mov	r0, fp
 800a3b6:	f000 fef7 	bl	800b1a8 <_Bfree>
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	4658      	mov	r0, fp
 800a3be:	f000 fef3 	bl	800b1a8 <_Bfree>
 800a3c2:	e7d0      	b.n	800a366 <_dtoa_r+0x65e>
 800a3c4:	9704      	str	r7, [sp, #16]
 800a3c6:	4633      	mov	r3, r6
 800a3c8:	461e      	mov	r6, r3
 800a3ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3ce:	2a39      	cmp	r2, #57	@ 0x39
 800a3d0:	d107      	bne.n	800a3e2 <_dtoa_r+0x6da>
 800a3d2:	459a      	cmp	sl, r3
 800a3d4:	d1f8      	bne.n	800a3c8 <_dtoa_r+0x6c0>
 800a3d6:	9a04      	ldr	r2, [sp, #16]
 800a3d8:	3201      	adds	r2, #1
 800a3da:	9204      	str	r2, [sp, #16]
 800a3dc:	2230      	movs	r2, #48	@ 0x30
 800a3de:	f88a 2000 	strb.w	r2, [sl]
 800a3e2:	781a      	ldrb	r2, [r3, #0]
 800a3e4:	3201      	adds	r2, #1
 800a3e6:	701a      	strb	r2, [r3, #0]
 800a3e8:	e7bd      	b.n	800a366 <_dtoa_r+0x65e>
 800a3ea:	4b7b      	ldr	r3, [pc, #492]	@ (800a5d8 <_dtoa_r+0x8d0>)
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	f7f6 f923 	bl	8000638 <__aeabi_dmul>
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	460d      	mov	r5, r1
 800a3fa:	f7f6 fb85 	bl	8000b08 <__aeabi_dcmpeq>
 800a3fe:	2800      	cmp	r0, #0
 800a400:	f43f aebb 	beq.w	800a17a <_dtoa_r+0x472>
 800a404:	e6f0      	b.n	800a1e8 <_dtoa_r+0x4e0>
 800a406:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a408:	2a00      	cmp	r2, #0
 800a40a:	f000 80db 	beq.w	800a5c4 <_dtoa_r+0x8bc>
 800a40e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a410:	2a01      	cmp	r2, #1
 800a412:	f300 80bf 	bgt.w	800a594 <_dtoa_r+0x88c>
 800a416:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a418:	2a00      	cmp	r2, #0
 800a41a:	f000 80b7 	beq.w	800a58c <_dtoa_r+0x884>
 800a41e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a422:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a424:	4646      	mov	r6, r8
 800a426:	9a08      	ldr	r2, [sp, #32]
 800a428:	2101      	movs	r1, #1
 800a42a:	441a      	add	r2, r3
 800a42c:	4658      	mov	r0, fp
 800a42e:	4498      	add	r8, r3
 800a430:	9208      	str	r2, [sp, #32]
 800a432:	f000 ffb7 	bl	800b3a4 <__i2b>
 800a436:	4605      	mov	r5, r0
 800a438:	b15e      	cbz	r6, 800a452 <_dtoa_r+0x74a>
 800a43a:	9b08      	ldr	r3, [sp, #32]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	dd08      	ble.n	800a452 <_dtoa_r+0x74a>
 800a440:	42b3      	cmp	r3, r6
 800a442:	9a08      	ldr	r2, [sp, #32]
 800a444:	bfa8      	it	ge
 800a446:	4633      	movge	r3, r6
 800a448:	eba8 0803 	sub.w	r8, r8, r3
 800a44c:	1af6      	subs	r6, r6, r3
 800a44e:	1ad3      	subs	r3, r2, r3
 800a450:	9308      	str	r3, [sp, #32]
 800a452:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a454:	b1f3      	cbz	r3, 800a494 <_dtoa_r+0x78c>
 800a456:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a458:	2b00      	cmp	r3, #0
 800a45a:	f000 80b7 	beq.w	800a5cc <_dtoa_r+0x8c4>
 800a45e:	b18c      	cbz	r4, 800a484 <_dtoa_r+0x77c>
 800a460:	4629      	mov	r1, r5
 800a462:	4622      	mov	r2, r4
 800a464:	4658      	mov	r0, fp
 800a466:	f001 f85d 	bl	800b524 <__pow5mult>
 800a46a:	464a      	mov	r2, r9
 800a46c:	4601      	mov	r1, r0
 800a46e:	4605      	mov	r5, r0
 800a470:	4658      	mov	r0, fp
 800a472:	f000 ffad 	bl	800b3d0 <__multiply>
 800a476:	4649      	mov	r1, r9
 800a478:	9004      	str	r0, [sp, #16]
 800a47a:	4658      	mov	r0, fp
 800a47c:	f000 fe94 	bl	800b1a8 <_Bfree>
 800a480:	9b04      	ldr	r3, [sp, #16]
 800a482:	4699      	mov	r9, r3
 800a484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a486:	1b1a      	subs	r2, r3, r4
 800a488:	d004      	beq.n	800a494 <_dtoa_r+0x78c>
 800a48a:	4649      	mov	r1, r9
 800a48c:	4658      	mov	r0, fp
 800a48e:	f001 f849 	bl	800b524 <__pow5mult>
 800a492:	4681      	mov	r9, r0
 800a494:	2101      	movs	r1, #1
 800a496:	4658      	mov	r0, fp
 800a498:	f000 ff84 	bl	800b3a4 <__i2b>
 800a49c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a49e:	4604      	mov	r4, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	f000 81cf 	beq.w	800a844 <_dtoa_r+0xb3c>
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	4601      	mov	r1, r0
 800a4aa:	4658      	mov	r0, fp
 800a4ac:	f001 f83a 	bl	800b524 <__pow5mult>
 800a4b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	4604      	mov	r4, r0
 800a4b6:	f300 8095 	bgt.w	800a5e4 <_dtoa_r+0x8dc>
 800a4ba:	9b02      	ldr	r3, [sp, #8]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	f040 8087 	bne.w	800a5d0 <_dtoa_r+0x8c8>
 800a4c2:	9b03      	ldr	r3, [sp, #12]
 800a4c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	f040 8089 	bne.w	800a5e0 <_dtoa_r+0x8d8>
 800a4ce:	9b03      	ldr	r3, [sp, #12]
 800a4d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a4d4:	0d1b      	lsrs	r3, r3, #20
 800a4d6:	051b      	lsls	r3, r3, #20
 800a4d8:	b12b      	cbz	r3, 800a4e6 <_dtoa_r+0x7de>
 800a4da:	9b08      	ldr	r3, [sp, #32]
 800a4dc:	3301      	adds	r3, #1
 800a4de:	9308      	str	r3, [sp, #32]
 800a4e0:	f108 0801 	add.w	r8, r8, #1
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f000 81b0 	beq.w	800a850 <_dtoa_r+0xb48>
 800a4f0:	6923      	ldr	r3, [r4, #16]
 800a4f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a4f6:	6918      	ldr	r0, [r3, #16]
 800a4f8:	f000 ff08 	bl	800b30c <__hi0bits>
 800a4fc:	f1c0 0020 	rsb	r0, r0, #32
 800a500:	9b08      	ldr	r3, [sp, #32]
 800a502:	4418      	add	r0, r3
 800a504:	f010 001f 	ands.w	r0, r0, #31
 800a508:	d077      	beq.n	800a5fa <_dtoa_r+0x8f2>
 800a50a:	f1c0 0320 	rsb	r3, r0, #32
 800a50e:	2b04      	cmp	r3, #4
 800a510:	dd6b      	ble.n	800a5ea <_dtoa_r+0x8e2>
 800a512:	9b08      	ldr	r3, [sp, #32]
 800a514:	f1c0 001c 	rsb	r0, r0, #28
 800a518:	4403      	add	r3, r0
 800a51a:	4480      	add	r8, r0
 800a51c:	4406      	add	r6, r0
 800a51e:	9308      	str	r3, [sp, #32]
 800a520:	f1b8 0f00 	cmp.w	r8, #0
 800a524:	dd05      	ble.n	800a532 <_dtoa_r+0x82a>
 800a526:	4649      	mov	r1, r9
 800a528:	4642      	mov	r2, r8
 800a52a:	4658      	mov	r0, fp
 800a52c:	f001 f854 	bl	800b5d8 <__lshift>
 800a530:	4681      	mov	r9, r0
 800a532:	9b08      	ldr	r3, [sp, #32]
 800a534:	2b00      	cmp	r3, #0
 800a536:	dd05      	ble.n	800a544 <_dtoa_r+0x83c>
 800a538:	4621      	mov	r1, r4
 800a53a:	461a      	mov	r2, r3
 800a53c:	4658      	mov	r0, fp
 800a53e:	f001 f84b 	bl	800b5d8 <__lshift>
 800a542:	4604      	mov	r4, r0
 800a544:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a546:	2b00      	cmp	r3, #0
 800a548:	d059      	beq.n	800a5fe <_dtoa_r+0x8f6>
 800a54a:	4621      	mov	r1, r4
 800a54c:	4648      	mov	r0, r9
 800a54e:	f001 f8af 	bl	800b6b0 <__mcmp>
 800a552:	2800      	cmp	r0, #0
 800a554:	da53      	bge.n	800a5fe <_dtoa_r+0x8f6>
 800a556:	1e7b      	subs	r3, r7, #1
 800a558:	9304      	str	r3, [sp, #16]
 800a55a:	4649      	mov	r1, r9
 800a55c:	2300      	movs	r3, #0
 800a55e:	220a      	movs	r2, #10
 800a560:	4658      	mov	r0, fp
 800a562:	f000 fe43 	bl	800b1ec <__multadd>
 800a566:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a568:	4681      	mov	r9, r0
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	f000 8172 	beq.w	800a854 <_dtoa_r+0xb4c>
 800a570:	2300      	movs	r3, #0
 800a572:	4629      	mov	r1, r5
 800a574:	220a      	movs	r2, #10
 800a576:	4658      	mov	r0, fp
 800a578:	f000 fe38 	bl	800b1ec <__multadd>
 800a57c:	9b00      	ldr	r3, [sp, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	4605      	mov	r5, r0
 800a582:	dc67      	bgt.n	800a654 <_dtoa_r+0x94c>
 800a584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a586:	2b02      	cmp	r3, #2
 800a588:	dc41      	bgt.n	800a60e <_dtoa_r+0x906>
 800a58a:	e063      	b.n	800a654 <_dtoa_r+0x94c>
 800a58c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a58e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a592:	e746      	b.n	800a422 <_dtoa_r+0x71a>
 800a594:	9b07      	ldr	r3, [sp, #28]
 800a596:	1e5c      	subs	r4, r3, #1
 800a598:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a59a:	42a3      	cmp	r3, r4
 800a59c:	bfbf      	itttt	lt
 800a59e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a5a0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a5a2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a5a4:	1ae3      	sublt	r3, r4, r3
 800a5a6:	bfb4      	ite	lt
 800a5a8:	18d2      	addlt	r2, r2, r3
 800a5aa:	1b1c      	subge	r4, r3, r4
 800a5ac:	9b07      	ldr	r3, [sp, #28]
 800a5ae:	bfbc      	itt	lt
 800a5b0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a5b2:	2400      	movlt	r4, #0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	bfb5      	itete	lt
 800a5b8:	eba8 0603 	sublt.w	r6, r8, r3
 800a5bc:	9b07      	ldrge	r3, [sp, #28]
 800a5be:	2300      	movlt	r3, #0
 800a5c0:	4646      	movge	r6, r8
 800a5c2:	e730      	b.n	800a426 <_dtoa_r+0x71e>
 800a5c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a5c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a5c8:	4646      	mov	r6, r8
 800a5ca:	e735      	b.n	800a438 <_dtoa_r+0x730>
 800a5cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a5ce:	e75c      	b.n	800a48a <_dtoa_r+0x782>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	e788      	b.n	800a4e6 <_dtoa_r+0x7de>
 800a5d4:	3fe00000 	.word	0x3fe00000
 800a5d8:	40240000 	.word	0x40240000
 800a5dc:	40140000 	.word	0x40140000
 800a5e0:	9b02      	ldr	r3, [sp, #8]
 800a5e2:	e780      	b.n	800a4e6 <_dtoa_r+0x7de>
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5e8:	e782      	b.n	800a4f0 <_dtoa_r+0x7e8>
 800a5ea:	d099      	beq.n	800a520 <_dtoa_r+0x818>
 800a5ec:	9a08      	ldr	r2, [sp, #32]
 800a5ee:	331c      	adds	r3, #28
 800a5f0:	441a      	add	r2, r3
 800a5f2:	4498      	add	r8, r3
 800a5f4:	441e      	add	r6, r3
 800a5f6:	9208      	str	r2, [sp, #32]
 800a5f8:	e792      	b.n	800a520 <_dtoa_r+0x818>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	e7f6      	b.n	800a5ec <_dtoa_r+0x8e4>
 800a5fe:	9b07      	ldr	r3, [sp, #28]
 800a600:	9704      	str	r7, [sp, #16]
 800a602:	2b00      	cmp	r3, #0
 800a604:	dc20      	bgt.n	800a648 <_dtoa_r+0x940>
 800a606:	9300      	str	r3, [sp, #0]
 800a608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a60a:	2b02      	cmp	r3, #2
 800a60c:	dd1e      	ble.n	800a64c <_dtoa_r+0x944>
 800a60e:	9b00      	ldr	r3, [sp, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	f47f aec0 	bne.w	800a396 <_dtoa_r+0x68e>
 800a616:	4621      	mov	r1, r4
 800a618:	2205      	movs	r2, #5
 800a61a:	4658      	mov	r0, fp
 800a61c:	f000 fde6 	bl	800b1ec <__multadd>
 800a620:	4601      	mov	r1, r0
 800a622:	4604      	mov	r4, r0
 800a624:	4648      	mov	r0, r9
 800a626:	f001 f843 	bl	800b6b0 <__mcmp>
 800a62a:	2800      	cmp	r0, #0
 800a62c:	f77f aeb3 	ble.w	800a396 <_dtoa_r+0x68e>
 800a630:	4656      	mov	r6, sl
 800a632:	2331      	movs	r3, #49	@ 0x31
 800a634:	f806 3b01 	strb.w	r3, [r6], #1
 800a638:	9b04      	ldr	r3, [sp, #16]
 800a63a:	3301      	adds	r3, #1
 800a63c:	9304      	str	r3, [sp, #16]
 800a63e:	e6ae      	b.n	800a39e <_dtoa_r+0x696>
 800a640:	9c07      	ldr	r4, [sp, #28]
 800a642:	9704      	str	r7, [sp, #16]
 800a644:	4625      	mov	r5, r4
 800a646:	e7f3      	b.n	800a630 <_dtoa_r+0x928>
 800a648:	9b07      	ldr	r3, [sp, #28]
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a64e:	2b00      	cmp	r3, #0
 800a650:	f000 8104 	beq.w	800a85c <_dtoa_r+0xb54>
 800a654:	2e00      	cmp	r6, #0
 800a656:	dd05      	ble.n	800a664 <_dtoa_r+0x95c>
 800a658:	4629      	mov	r1, r5
 800a65a:	4632      	mov	r2, r6
 800a65c:	4658      	mov	r0, fp
 800a65e:	f000 ffbb 	bl	800b5d8 <__lshift>
 800a662:	4605      	mov	r5, r0
 800a664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a666:	2b00      	cmp	r3, #0
 800a668:	d05a      	beq.n	800a720 <_dtoa_r+0xa18>
 800a66a:	6869      	ldr	r1, [r5, #4]
 800a66c:	4658      	mov	r0, fp
 800a66e:	f000 fd5b 	bl	800b128 <_Balloc>
 800a672:	4606      	mov	r6, r0
 800a674:	b928      	cbnz	r0, 800a682 <_dtoa_r+0x97a>
 800a676:	4b84      	ldr	r3, [pc, #528]	@ (800a888 <_dtoa_r+0xb80>)
 800a678:	4602      	mov	r2, r0
 800a67a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a67e:	f7ff bb5a 	b.w	8009d36 <_dtoa_r+0x2e>
 800a682:	692a      	ldr	r2, [r5, #16]
 800a684:	3202      	adds	r2, #2
 800a686:	0092      	lsls	r2, r2, #2
 800a688:	f105 010c 	add.w	r1, r5, #12
 800a68c:	300c      	adds	r0, #12
 800a68e:	f7ff fa7a 	bl	8009b86 <memcpy>
 800a692:	2201      	movs	r2, #1
 800a694:	4631      	mov	r1, r6
 800a696:	4658      	mov	r0, fp
 800a698:	f000 ff9e 	bl	800b5d8 <__lshift>
 800a69c:	f10a 0301 	add.w	r3, sl, #1
 800a6a0:	9307      	str	r3, [sp, #28]
 800a6a2:	9b00      	ldr	r3, [sp, #0]
 800a6a4:	4453      	add	r3, sl
 800a6a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6a8:	9b02      	ldr	r3, [sp, #8]
 800a6aa:	f003 0301 	and.w	r3, r3, #1
 800a6ae:	462f      	mov	r7, r5
 800a6b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6b2:	4605      	mov	r5, r0
 800a6b4:	9b07      	ldr	r3, [sp, #28]
 800a6b6:	4621      	mov	r1, r4
 800a6b8:	3b01      	subs	r3, #1
 800a6ba:	4648      	mov	r0, r9
 800a6bc:	9300      	str	r3, [sp, #0]
 800a6be:	f7ff fa99 	bl	8009bf4 <quorem>
 800a6c2:	4639      	mov	r1, r7
 800a6c4:	9002      	str	r0, [sp, #8]
 800a6c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a6ca:	4648      	mov	r0, r9
 800a6cc:	f000 fff0 	bl	800b6b0 <__mcmp>
 800a6d0:	462a      	mov	r2, r5
 800a6d2:	9008      	str	r0, [sp, #32]
 800a6d4:	4621      	mov	r1, r4
 800a6d6:	4658      	mov	r0, fp
 800a6d8:	f001 f806 	bl	800b6e8 <__mdiff>
 800a6dc:	68c2      	ldr	r2, [r0, #12]
 800a6de:	4606      	mov	r6, r0
 800a6e0:	bb02      	cbnz	r2, 800a724 <_dtoa_r+0xa1c>
 800a6e2:	4601      	mov	r1, r0
 800a6e4:	4648      	mov	r0, r9
 800a6e6:	f000 ffe3 	bl	800b6b0 <__mcmp>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	4631      	mov	r1, r6
 800a6ee:	4658      	mov	r0, fp
 800a6f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a6f2:	f000 fd59 	bl	800b1a8 <_Bfree>
 800a6f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6fa:	9e07      	ldr	r6, [sp, #28]
 800a6fc:	ea43 0102 	orr.w	r1, r3, r2
 800a700:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a702:	4319      	orrs	r1, r3
 800a704:	d110      	bne.n	800a728 <_dtoa_r+0xa20>
 800a706:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a70a:	d029      	beq.n	800a760 <_dtoa_r+0xa58>
 800a70c:	9b08      	ldr	r3, [sp, #32]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	dd02      	ble.n	800a718 <_dtoa_r+0xa10>
 800a712:	9b02      	ldr	r3, [sp, #8]
 800a714:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a718:	9b00      	ldr	r3, [sp, #0]
 800a71a:	f883 8000 	strb.w	r8, [r3]
 800a71e:	e63f      	b.n	800a3a0 <_dtoa_r+0x698>
 800a720:	4628      	mov	r0, r5
 800a722:	e7bb      	b.n	800a69c <_dtoa_r+0x994>
 800a724:	2201      	movs	r2, #1
 800a726:	e7e1      	b.n	800a6ec <_dtoa_r+0x9e4>
 800a728:	9b08      	ldr	r3, [sp, #32]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	db04      	blt.n	800a738 <_dtoa_r+0xa30>
 800a72e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a730:	430b      	orrs	r3, r1
 800a732:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a734:	430b      	orrs	r3, r1
 800a736:	d120      	bne.n	800a77a <_dtoa_r+0xa72>
 800a738:	2a00      	cmp	r2, #0
 800a73a:	dded      	ble.n	800a718 <_dtoa_r+0xa10>
 800a73c:	4649      	mov	r1, r9
 800a73e:	2201      	movs	r2, #1
 800a740:	4658      	mov	r0, fp
 800a742:	f000 ff49 	bl	800b5d8 <__lshift>
 800a746:	4621      	mov	r1, r4
 800a748:	4681      	mov	r9, r0
 800a74a:	f000 ffb1 	bl	800b6b0 <__mcmp>
 800a74e:	2800      	cmp	r0, #0
 800a750:	dc03      	bgt.n	800a75a <_dtoa_r+0xa52>
 800a752:	d1e1      	bne.n	800a718 <_dtoa_r+0xa10>
 800a754:	f018 0f01 	tst.w	r8, #1
 800a758:	d0de      	beq.n	800a718 <_dtoa_r+0xa10>
 800a75a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a75e:	d1d8      	bne.n	800a712 <_dtoa_r+0xa0a>
 800a760:	9a00      	ldr	r2, [sp, #0]
 800a762:	2339      	movs	r3, #57	@ 0x39
 800a764:	7013      	strb	r3, [r2, #0]
 800a766:	4633      	mov	r3, r6
 800a768:	461e      	mov	r6, r3
 800a76a:	3b01      	subs	r3, #1
 800a76c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a770:	2a39      	cmp	r2, #57	@ 0x39
 800a772:	d052      	beq.n	800a81a <_dtoa_r+0xb12>
 800a774:	3201      	adds	r2, #1
 800a776:	701a      	strb	r2, [r3, #0]
 800a778:	e612      	b.n	800a3a0 <_dtoa_r+0x698>
 800a77a:	2a00      	cmp	r2, #0
 800a77c:	dd07      	ble.n	800a78e <_dtoa_r+0xa86>
 800a77e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a782:	d0ed      	beq.n	800a760 <_dtoa_r+0xa58>
 800a784:	9a00      	ldr	r2, [sp, #0]
 800a786:	f108 0301 	add.w	r3, r8, #1
 800a78a:	7013      	strb	r3, [r2, #0]
 800a78c:	e608      	b.n	800a3a0 <_dtoa_r+0x698>
 800a78e:	9b07      	ldr	r3, [sp, #28]
 800a790:	9a07      	ldr	r2, [sp, #28]
 800a792:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a796:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a798:	4293      	cmp	r3, r2
 800a79a:	d028      	beq.n	800a7ee <_dtoa_r+0xae6>
 800a79c:	4649      	mov	r1, r9
 800a79e:	2300      	movs	r3, #0
 800a7a0:	220a      	movs	r2, #10
 800a7a2:	4658      	mov	r0, fp
 800a7a4:	f000 fd22 	bl	800b1ec <__multadd>
 800a7a8:	42af      	cmp	r7, r5
 800a7aa:	4681      	mov	r9, r0
 800a7ac:	f04f 0300 	mov.w	r3, #0
 800a7b0:	f04f 020a 	mov.w	r2, #10
 800a7b4:	4639      	mov	r1, r7
 800a7b6:	4658      	mov	r0, fp
 800a7b8:	d107      	bne.n	800a7ca <_dtoa_r+0xac2>
 800a7ba:	f000 fd17 	bl	800b1ec <__multadd>
 800a7be:	4607      	mov	r7, r0
 800a7c0:	4605      	mov	r5, r0
 800a7c2:	9b07      	ldr	r3, [sp, #28]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	9307      	str	r3, [sp, #28]
 800a7c8:	e774      	b.n	800a6b4 <_dtoa_r+0x9ac>
 800a7ca:	f000 fd0f 	bl	800b1ec <__multadd>
 800a7ce:	4629      	mov	r1, r5
 800a7d0:	4607      	mov	r7, r0
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	220a      	movs	r2, #10
 800a7d6:	4658      	mov	r0, fp
 800a7d8:	f000 fd08 	bl	800b1ec <__multadd>
 800a7dc:	4605      	mov	r5, r0
 800a7de:	e7f0      	b.n	800a7c2 <_dtoa_r+0xaba>
 800a7e0:	9b00      	ldr	r3, [sp, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	bfcc      	ite	gt
 800a7e6:	461e      	movgt	r6, r3
 800a7e8:	2601      	movle	r6, #1
 800a7ea:	4456      	add	r6, sl
 800a7ec:	2700      	movs	r7, #0
 800a7ee:	4649      	mov	r1, r9
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	4658      	mov	r0, fp
 800a7f4:	f000 fef0 	bl	800b5d8 <__lshift>
 800a7f8:	4621      	mov	r1, r4
 800a7fa:	4681      	mov	r9, r0
 800a7fc:	f000 ff58 	bl	800b6b0 <__mcmp>
 800a800:	2800      	cmp	r0, #0
 800a802:	dcb0      	bgt.n	800a766 <_dtoa_r+0xa5e>
 800a804:	d102      	bne.n	800a80c <_dtoa_r+0xb04>
 800a806:	f018 0f01 	tst.w	r8, #1
 800a80a:	d1ac      	bne.n	800a766 <_dtoa_r+0xa5e>
 800a80c:	4633      	mov	r3, r6
 800a80e:	461e      	mov	r6, r3
 800a810:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a814:	2a30      	cmp	r2, #48	@ 0x30
 800a816:	d0fa      	beq.n	800a80e <_dtoa_r+0xb06>
 800a818:	e5c2      	b.n	800a3a0 <_dtoa_r+0x698>
 800a81a:	459a      	cmp	sl, r3
 800a81c:	d1a4      	bne.n	800a768 <_dtoa_r+0xa60>
 800a81e:	9b04      	ldr	r3, [sp, #16]
 800a820:	3301      	adds	r3, #1
 800a822:	9304      	str	r3, [sp, #16]
 800a824:	2331      	movs	r3, #49	@ 0x31
 800a826:	f88a 3000 	strb.w	r3, [sl]
 800a82a:	e5b9      	b.n	800a3a0 <_dtoa_r+0x698>
 800a82c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a82e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a88c <_dtoa_r+0xb84>
 800a832:	b11b      	cbz	r3, 800a83c <_dtoa_r+0xb34>
 800a834:	f10a 0308 	add.w	r3, sl, #8
 800a838:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a83a:	6013      	str	r3, [r2, #0]
 800a83c:	4650      	mov	r0, sl
 800a83e:	b019      	add	sp, #100	@ 0x64
 800a840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a844:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a846:	2b01      	cmp	r3, #1
 800a848:	f77f ae37 	ble.w	800a4ba <_dtoa_r+0x7b2>
 800a84c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a84e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a850:	2001      	movs	r0, #1
 800a852:	e655      	b.n	800a500 <_dtoa_r+0x7f8>
 800a854:	9b00      	ldr	r3, [sp, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	f77f aed6 	ble.w	800a608 <_dtoa_r+0x900>
 800a85c:	4656      	mov	r6, sl
 800a85e:	4621      	mov	r1, r4
 800a860:	4648      	mov	r0, r9
 800a862:	f7ff f9c7 	bl	8009bf4 <quorem>
 800a866:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a86a:	f806 8b01 	strb.w	r8, [r6], #1
 800a86e:	9b00      	ldr	r3, [sp, #0]
 800a870:	eba6 020a 	sub.w	r2, r6, sl
 800a874:	4293      	cmp	r3, r2
 800a876:	ddb3      	ble.n	800a7e0 <_dtoa_r+0xad8>
 800a878:	4649      	mov	r1, r9
 800a87a:	2300      	movs	r3, #0
 800a87c:	220a      	movs	r2, #10
 800a87e:	4658      	mov	r0, fp
 800a880:	f000 fcb4 	bl	800b1ec <__multadd>
 800a884:	4681      	mov	r9, r0
 800a886:	e7ea      	b.n	800a85e <_dtoa_r+0xb56>
 800a888:	0800c7a7 	.word	0x0800c7a7
 800a88c:	0800c742 	.word	0x0800c742

0800a890 <_free_r>:
 800a890:	b538      	push	{r3, r4, r5, lr}
 800a892:	4605      	mov	r5, r0
 800a894:	2900      	cmp	r1, #0
 800a896:	d041      	beq.n	800a91c <_free_r+0x8c>
 800a898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a89c:	1f0c      	subs	r4, r1, #4
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	bfb8      	it	lt
 800a8a2:	18e4      	addlt	r4, r4, r3
 800a8a4:	f000 fc34 	bl	800b110 <__malloc_lock>
 800a8a8:	4a1d      	ldr	r2, [pc, #116]	@ (800a920 <_free_r+0x90>)
 800a8aa:	6813      	ldr	r3, [r2, #0]
 800a8ac:	b933      	cbnz	r3, 800a8bc <_free_r+0x2c>
 800a8ae:	6063      	str	r3, [r4, #4]
 800a8b0:	6014      	str	r4, [r2, #0]
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8b8:	f000 bc30 	b.w	800b11c <__malloc_unlock>
 800a8bc:	42a3      	cmp	r3, r4
 800a8be:	d908      	bls.n	800a8d2 <_free_r+0x42>
 800a8c0:	6820      	ldr	r0, [r4, #0]
 800a8c2:	1821      	adds	r1, r4, r0
 800a8c4:	428b      	cmp	r3, r1
 800a8c6:	bf01      	itttt	eq
 800a8c8:	6819      	ldreq	r1, [r3, #0]
 800a8ca:	685b      	ldreq	r3, [r3, #4]
 800a8cc:	1809      	addeq	r1, r1, r0
 800a8ce:	6021      	streq	r1, [r4, #0]
 800a8d0:	e7ed      	b.n	800a8ae <_free_r+0x1e>
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	b10b      	cbz	r3, 800a8dc <_free_r+0x4c>
 800a8d8:	42a3      	cmp	r3, r4
 800a8da:	d9fa      	bls.n	800a8d2 <_free_r+0x42>
 800a8dc:	6811      	ldr	r1, [r2, #0]
 800a8de:	1850      	adds	r0, r2, r1
 800a8e0:	42a0      	cmp	r0, r4
 800a8e2:	d10b      	bne.n	800a8fc <_free_r+0x6c>
 800a8e4:	6820      	ldr	r0, [r4, #0]
 800a8e6:	4401      	add	r1, r0
 800a8e8:	1850      	adds	r0, r2, r1
 800a8ea:	4283      	cmp	r3, r0
 800a8ec:	6011      	str	r1, [r2, #0]
 800a8ee:	d1e0      	bne.n	800a8b2 <_free_r+0x22>
 800a8f0:	6818      	ldr	r0, [r3, #0]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	6053      	str	r3, [r2, #4]
 800a8f6:	4408      	add	r0, r1
 800a8f8:	6010      	str	r0, [r2, #0]
 800a8fa:	e7da      	b.n	800a8b2 <_free_r+0x22>
 800a8fc:	d902      	bls.n	800a904 <_free_r+0x74>
 800a8fe:	230c      	movs	r3, #12
 800a900:	602b      	str	r3, [r5, #0]
 800a902:	e7d6      	b.n	800a8b2 <_free_r+0x22>
 800a904:	6820      	ldr	r0, [r4, #0]
 800a906:	1821      	adds	r1, r4, r0
 800a908:	428b      	cmp	r3, r1
 800a90a:	bf04      	itt	eq
 800a90c:	6819      	ldreq	r1, [r3, #0]
 800a90e:	685b      	ldreq	r3, [r3, #4]
 800a910:	6063      	str	r3, [r4, #4]
 800a912:	bf04      	itt	eq
 800a914:	1809      	addeq	r1, r1, r0
 800a916:	6021      	streq	r1, [r4, #0]
 800a918:	6054      	str	r4, [r2, #4]
 800a91a:	e7ca      	b.n	800a8b2 <_free_r+0x22>
 800a91c:	bd38      	pop	{r3, r4, r5, pc}
 800a91e:	bf00      	nop
 800a920:	20000e68 	.word	0x20000e68

0800a924 <rshift>:
 800a924:	6903      	ldr	r3, [r0, #16]
 800a926:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a92a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a92e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a932:	f100 0414 	add.w	r4, r0, #20
 800a936:	dd45      	ble.n	800a9c4 <rshift+0xa0>
 800a938:	f011 011f 	ands.w	r1, r1, #31
 800a93c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a940:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a944:	d10c      	bne.n	800a960 <rshift+0x3c>
 800a946:	f100 0710 	add.w	r7, r0, #16
 800a94a:	4629      	mov	r1, r5
 800a94c:	42b1      	cmp	r1, r6
 800a94e:	d334      	bcc.n	800a9ba <rshift+0x96>
 800a950:	1a9b      	subs	r3, r3, r2
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	1eea      	subs	r2, r5, #3
 800a956:	4296      	cmp	r6, r2
 800a958:	bf38      	it	cc
 800a95a:	2300      	movcc	r3, #0
 800a95c:	4423      	add	r3, r4
 800a95e:	e015      	b.n	800a98c <rshift+0x68>
 800a960:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a964:	f1c1 0820 	rsb	r8, r1, #32
 800a968:	40cf      	lsrs	r7, r1
 800a96a:	f105 0e04 	add.w	lr, r5, #4
 800a96e:	46a1      	mov	r9, r4
 800a970:	4576      	cmp	r6, lr
 800a972:	46f4      	mov	ip, lr
 800a974:	d815      	bhi.n	800a9a2 <rshift+0x7e>
 800a976:	1a9a      	subs	r2, r3, r2
 800a978:	0092      	lsls	r2, r2, #2
 800a97a:	3a04      	subs	r2, #4
 800a97c:	3501      	adds	r5, #1
 800a97e:	42ae      	cmp	r6, r5
 800a980:	bf38      	it	cc
 800a982:	2200      	movcc	r2, #0
 800a984:	18a3      	adds	r3, r4, r2
 800a986:	50a7      	str	r7, [r4, r2]
 800a988:	b107      	cbz	r7, 800a98c <rshift+0x68>
 800a98a:	3304      	adds	r3, #4
 800a98c:	1b1a      	subs	r2, r3, r4
 800a98e:	42a3      	cmp	r3, r4
 800a990:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a994:	bf08      	it	eq
 800a996:	2300      	moveq	r3, #0
 800a998:	6102      	str	r2, [r0, #16]
 800a99a:	bf08      	it	eq
 800a99c:	6143      	streq	r3, [r0, #20]
 800a99e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9a2:	f8dc c000 	ldr.w	ip, [ip]
 800a9a6:	fa0c fc08 	lsl.w	ip, ip, r8
 800a9aa:	ea4c 0707 	orr.w	r7, ip, r7
 800a9ae:	f849 7b04 	str.w	r7, [r9], #4
 800a9b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a9b6:	40cf      	lsrs	r7, r1
 800a9b8:	e7da      	b.n	800a970 <rshift+0x4c>
 800a9ba:	f851 cb04 	ldr.w	ip, [r1], #4
 800a9be:	f847 cf04 	str.w	ip, [r7, #4]!
 800a9c2:	e7c3      	b.n	800a94c <rshift+0x28>
 800a9c4:	4623      	mov	r3, r4
 800a9c6:	e7e1      	b.n	800a98c <rshift+0x68>

0800a9c8 <__hexdig_fun>:
 800a9c8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a9cc:	2b09      	cmp	r3, #9
 800a9ce:	d802      	bhi.n	800a9d6 <__hexdig_fun+0xe>
 800a9d0:	3820      	subs	r0, #32
 800a9d2:	b2c0      	uxtb	r0, r0
 800a9d4:	4770      	bx	lr
 800a9d6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a9da:	2b05      	cmp	r3, #5
 800a9dc:	d801      	bhi.n	800a9e2 <__hexdig_fun+0x1a>
 800a9de:	3847      	subs	r0, #71	@ 0x47
 800a9e0:	e7f7      	b.n	800a9d2 <__hexdig_fun+0xa>
 800a9e2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a9e6:	2b05      	cmp	r3, #5
 800a9e8:	d801      	bhi.n	800a9ee <__hexdig_fun+0x26>
 800a9ea:	3827      	subs	r0, #39	@ 0x27
 800a9ec:	e7f1      	b.n	800a9d2 <__hexdig_fun+0xa>
 800a9ee:	2000      	movs	r0, #0
 800a9f0:	4770      	bx	lr
	...

0800a9f4 <__gethex>:
 800a9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f8:	b085      	sub	sp, #20
 800a9fa:	468a      	mov	sl, r1
 800a9fc:	9302      	str	r3, [sp, #8]
 800a9fe:	680b      	ldr	r3, [r1, #0]
 800aa00:	9001      	str	r0, [sp, #4]
 800aa02:	4690      	mov	r8, r2
 800aa04:	1c9c      	adds	r4, r3, #2
 800aa06:	46a1      	mov	r9, r4
 800aa08:	f814 0b01 	ldrb.w	r0, [r4], #1
 800aa0c:	2830      	cmp	r0, #48	@ 0x30
 800aa0e:	d0fa      	beq.n	800aa06 <__gethex+0x12>
 800aa10:	eba9 0303 	sub.w	r3, r9, r3
 800aa14:	f1a3 0b02 	sub.w	fp, r3, #2
 800aa18:	f7ff ffd6 	bl	800a9c8 <__hexdig_fun>
 800aa1c:	4605      	mov	r5, r0
 800aa1e:	2800      	cmp	r0, #0
 800aa20:	d168      	bne.n	800aaf4 <__gethex+0x100>
 800aa22:	49a0      	ldr	r1, [pc, #640]	@ (800aca4 <__gethex+0x2b0>)
 800aa24:	2201      	movs	r2, #1
 800aa26:	4648      	mov	r0, r9
 800aa28:	f7fe ffc7 	bl	80099ba <strncmp>
 800aa2c:	4607      	mov	r7, r0
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	d167      	bne.n	800ab02 <__gethex+0x10e>
 800aa32:	f899 0001 	ldrb.w	r0, [r9, #1]
 800aa36:	4626      	mov	r6, r4
 800aa38:	f7ff ffc6 	bl	800a9c8 <__hexdig_fun>
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	d062      	beq.n	800ab06 <__gethex+0x112>
 800aa40:	4623      	mov	r3, r4
 800aa42:	7818      	ldrb	r0, [r3, #0]
 800aa44:	2830      	cmp	r0, #48	@ 0x30
 800aa46:	4699      	mov	r9, r3
 800aa48:	f103 0301 	add.w	r3, r3, #1
 800aa4c:	d0f9      	beq.n	800aa42 <__gethex+0x4e>
 800aa4e:	f7ff ffbb 	bl	800a9c8 <__hexdig_fun>
 800aa52:	fab0 f580 	clz	r5, r0
 800aa56:	096d      	lsrs	r5, r5, #5
 800aa58:	f04f 0b01 	mov.w	fp, #1
 800aa5c:	464a      	mov	r2, r9
 800aa5e:	4616      	mov	r6, r2
 800aa60:	3201      	adds	r2, #1
 800aa62:	7830      	ldrb	r0, [r6, #0]
 800aa64:	f7ff ffb0 	bl	800a9c8 <__hexdig_fun>
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	d1f8      	bne.n	800aa5e <__gethex+0x6a>
 800aa6c:	498d      	ldr	r1, [pc, #564]	@ (800aca4 <__gethex+0x2b0>)
 800aa6e:	2201      	movs	r2, #1
 800aa70:	4630      	mov	r0, r6
 800aa72:	f7fe ffa2 	bl	80099ba <strncmp>
 800aa76:	2800      	cmp	r0, #0
 800aa78:	d13f      	bne.n	800aafa <__gethex+0x106>
 800aa7a:	b944      	cbnz	r4, 800aa8e <__gethex+0x9a>
 800aa7c:	1c74      	adds	r4, r6, #1
 800aa7e:	4622      	mov	r2, r4
 800aa80:	4616      	mov	r6, r2
 800aa82:	3201      	adds	r2, #1
 800aa84:	7830      	ldrb	r0, [r6, #0]
 800aa86:	f7ff ff9f 	bl	800a9c8 <__hexdig_fun>
 800aa8a:	2800      	cmp	r0, #0
 800aa8c:	d1f8      	bne.n	800aa80 <__gethex+0x8c>
 800aa8e:	1ba4      	subs	r4, r4, r6
 800aa90:	00a7      	lsls	r7, r4, #2
 800aa92:	7833      	ldrb	r3, [r6, #0]
 800aa94:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800aa98:	2b50      	cmp	r3, #80	@ 0x50
 800aa9a:	d13e      	bne.n	800ab1a <__gethex+0x126>
 800aa9c:	7873      	ldrb	r3, [r6, #1]
 800aa9e:	2b2b      	cmp	r3, #43	@ 0x2b
 800aaa0:	d033      	beq.n	800ab0a <__gethex+0x116>
 800aaa2:	2b2d      	cmp	r3, #45	@ 0x2d
 800aaa4:	d034      	beq.n	800ab10 <__gethex+0x11c>
 800aaa6:	1c71      	adds	r1, r6, #1
 800aaa8:	2400      	movs	r4, #0
 800aaaa:	7808      	ldrb	r0, [r1, #0]
 800aaac:	f7ff ff8c 	bl	800a9c8 <__hexdig_fun>
 800aab0:	1e43      	subs	r3, r0, #1
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	2b18      	cmp	r3, #24
 800aab6:	d830      	bhi.n	800ab1a <__gethex+0x126>
 800aab8:	f1a0 0210 	sub.w	r2, r0, #16
 800aabc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aac0:	f7ff ff82 	bl	800a9c8 <__hexdig_fun>
 800aac4:	f100 3cff 	add.w	ip, r0, #4294967295
 800aac8:	fa5f fc8c 	uxtb.w	ip, ip
 800aacc:	f1bc 0f18 	cmp.w	ip, #24
 800aad0:	f04f 030a 	mov.w	r3, #10
 800aad4:	d91e      	bls.n	800ab14 <__gethex+0x120>
 800aad6:	b104      	cbz	r4, 800aada <__gethex+0xe6>
 800aad8:	4252      	negs	r2, r2
 800aada:	4417      	add	r7, r2
 800aadc:	f8ca 1000 	str.w	r1, [sl]
 800aae0:	b1ed      	cbz	r5, 800ab1e <__gethex+0x12a>
 800aae2:	f1bb 0f00 	cmp.w	fp, #0
 800aae6:	bf0c      	ite	eq
 800aae8:	2506      	moveq	r5, #6
 800aaea:	2500      	movne	r5, #0
 800aaec:	4628      	mov	r0, r5
 800aaee:	b005      	add	sp, #20
 800aaf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf4:	2500      	movs	r5, #0
 800aaf6:	462c      	mov	r4, r5
 800aaf8:	e7b0      	b.n	800aa5c <__gethex+0x68>
 800aafa:	2c00      	cmp	r4, #0
 800aafc:	d1c7      	bne.n	800aa8e <__gethex+0x9a>
 800aafe:	4627      	mov	r7, r4
 800ab00:	e7c7      	b.n	800aa92 <__gethex+0x9e>
 800ab02:	464e      	mov	r6, r9
 800ab04:	462f      	mov	r7, r5
 800ab06:	2501      	movs	r5, #1
 800ab08:	e7c3      	b.n	800aa92 <__gethex+0x9e>
 800ab0a:	2400      	movs	r4, #0
 800ab0c:	1cb1      	adds	r1, r6, #2
 800ab0e:	e7cc      	b.n	800aaaa <__gethex+0xb6>
 800ab10:	2401      	movs	r4, #1
 800ab12:	e7fb      	b.n	800ab0c <__gethex+0x118>
 800ab14:	fb03 0002 	mla	r0, r3, r2, r0
 800ab18:	e7ce      	b.n	800aab8 <__gethex+0xc4>
 800ab1a:	4631      	mov	r1, r6
 800ab1c:	e7de      	b.n	800aadc <__gethex+0xe8>
 800ab1e:	eba6 0309 	sub.w	r3, r6, r9
 800ab22:	3b01      	subs	r3, #1
 800ab24:	4629      	mov	r1, r5
 800ab26:	2b07      	cmp	r3, #7
 800ab28:	dc0a      	bgt.n	800ab40 <__gethex+0x14c>
 800ab2a:	9801      	ldr	r0, [sp, #4]
 800ab2c:	f000 fafc 	bl	800b128 <_Balloc>
 800ab30:	4604      	mov	r4, r0
 800ab32:	b940      	cbnz	r0, 800ab46 <__gethex+0x152>
 800ab34:	4b5c      	ldr	r3, [pc, #368]	@ (800aca8 <__gethex+0x2b4>)
 800ab36:	4602      	mov	r2, r0
 800ab38:	21e4      	movs	r1, #228	@ 0xe4
 800ab3a:	485c      	ldr	r0, [pc, #368]	@ (800acac <__gethex+0x2b8>)
 800ab3c:	f7ff f83c 	bl	8009bb8 <__assert_func>
 800ab40:	3101      	adds	r1, #1
 800ab42:	105b      	asrs	r3, r3, #1
 800ab44:	e7ef      	b.n	800ab26 <__gethex+0x132>
 800ab46:	f100 0a14 	add.w	sl, r0, #20
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	4655      	mov	r5, sl
 800ab4e:	469b      	mov	fp, r3
 800ab50:	45b1      	cmp	r9, r6
 800ab52:	d337      	bcc.n	800abc4 <__gethex+0x1d0>
 800ab54:	f845 bb04 	str.w	fp, [r5], #4
 800ab58:	eba5 050a 	sub.w	r5, r5, sl
 800ab5c:	10ad      	asrs	r5, r5, #2
 800ab5e:	6125      	str	r5, [r4, #16]
 800ab60:	4658      	mov	r0, fp
 800ab62:	f000 fbd3 	bl	800b30c <__hi0bits>
 800ab66:	016d      	lsls	r5, r5, #5
 800ab68:	f8d8 6000 	ldr.w	r6, [r8]
 800ab6c:	1a2d      	subs	r5, r5, r0
 800ab6e:	42b5      	cmp	r5, r6
 800ab70:	dd54      	ble.n	800ac1c <__gethex+0x228>
 800ab72:	1bad      	subs	r5, r5, r6
 800ab74:	4629      	mov	r1, r5
 800ab76:	4620      	mov	r0, r4
 800ab78:	f000 ff67 	bl	800ba4a <__any_on>
 800ab7c:	4681      	mov	r9, r0
 800ab7e:	b178      	cbz	r0, 800aba0 <__gethex+0x1ac>
 800ab80:	1e6b      	subs	r3, r5, #1
 800ab82:	1159      	asrs	r1, r3, #5
 800ab84:	f003 021f 	and.w	r2, r3, #31
 800ab88:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ab8c:	f04f 0901 	mov.w	r9, #1
 800ab90:	fa09 f202 	lsl.w	r2, r9, r2
 800ab94:	420a      	tst	r2, r1
 800ab96:	d003      	beq.n	800aba0 <__gethex+0x1ac>
 800ab98:	454b      	cmp	r3, r9
 800ab9a:	dc36      	bgt.n	800ac0a <__gethex+0x216>
 800ab9c:	f04f 0902 	mov.w	r9, #2
 800aba0:	4629      	mov	r1, r5
 800aba2:	4620      	mov	r0, r4
 800aba4:	f7ff febe 	bl	800a924 <rshift>
 800aba8:	442f      	add	r7, r5
 800abaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800abae:	42bb      	cmp	r3, r7
 800abb0:	da42      	bge.n	800ac38 <__gethex+0x244>
 800abb2:	9801      	ldr	r0, [sp, #4]
 800abb4:	4621      	mov	r1, r4
 800abb6:	f000 faf7 	bl	800b1a8 <_Bfree>
 800abba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abbc:	2300      	movs	r3, #0
 800abbe:	6013      	str	r3, [r2, #0]
 800abc0:	25a3      	movs	r5, #163	@ 0xa3
 800abc2:	e793      	b.n	800aaec <__gethex+0xf8>
 800abc4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800abc8:	2a2e      	cmp	r2, #46	@ 0x2e
 800abca:	d012      	beq.n	800abf2 <__gethex+0x1fe>
 800abcc:	2b20      	cmp	r3, #32
 800abce:	d104      	bne.n	800abda <__gethex+0x1e6>
 800abd0:	f845 bb04 	str.w	fp, [r5], #4
 800abd4:	f04f 0b00 	mov.w	fp, #0
 800abd8:	465b      	mov	r3, fp
 800abda:	7830      	ldrb	r0, [r6, #0]
 800abdc:	9303      	str	r3, [sp, #12]
 800abde:	f7ff fef3 	bl	800a9c8 <__hexdig_fun>
 800abe2:	9b03      	ldr	r3, [sp, #12]
 800abe4:	f000 000f 	and.w	r0, r0, #15
 800abe8:	4098      	lsls	r0, r3
 800abea:	ea4b 0b00 	orr.w	fp, fp, r0
 800abee:	3304      	adds	r3, #4
 800abf0:	e7ae      	b.n	800ab50 <__gethex+0x15c>
 800abf2:	45b1      	cmp	r9, r6
 800abf4:	d8ea      	bhi.n	800abcc <__gethex+0x1d8>
 800abf6:	492b      	ldr	r1, [pc, #172]	@ (800aca4 <__gethex+0x2b0>)
 800abf8:	9303      	str	r3, [sp, #12]
 800abfa:	2201      	movs	r2, #1
 800abfc:	4630      	mov	r0, r6
 800abfe:	f7fe fedc 	bl	80099ba <strncmp>
 800ac02:	9b03      	ldr	r3, [sp, #12]
 800ac04:	2800      	cmp	r0, #0
 800ac06:	d1e1      	bne.n	800abcc <__gethex+0x1d8>
 800ac08:	e7a2      	b.n	800ab50 <__gethex+0x15c>
 800ac0a:	1ea9      	subs	r1, r5, #2
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	f000 ff1c 	bl	800ba4a <__any_on>
 800ac12:	2800      	cmp	r0, #0
 800ac14:	d0c2      	beq.n	800ab9c <__gethex+0x1a8>
 800ac16:	f04f 0903 	mov.w	r9, #3
 800ac1a:	e7c1      	b.n	800aba0 <__gethex+0x1ac>
 800ac1c:	da09      	bge.n	800ac32 <__gethex+0x23e>
 800ac1e:	1b75      	subs	r5, r6, r5
 800ac20:	4621      	mov	r1, r4
 800ac22:	9801      	ldr	r0, [sp, #4]
 800ac24:	462a      	mov	r2, r5
 800ac26:	f000 fcd7 	bl	800b5d8 <__lshift>
 800ac2a:	1b7f      	subs	r7, r7, r5
 800ac2c:	4604      	mov	r4, r0
 800ac2e:	f100 0a14 	add.w	sl, r0, #20
 800ac32:	f04f 0900 	mov.w	r9, #0
 800ac36:	e7b8      	b.n	800abaa <__gethex+0x1b6>
 800ac38:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ac3c:	42bd      	cmp	r5, r7
 800ac3e:	dd6f      	ble.n	800ad20 <__gethex+0x32c>
 800ac40:	1bed      	subs	r5, r5, r7
 800ac42:	42ae      	cmp	r6, r5
 800ac44:	dc34      	bgt.n	800acb0 <__gethex+0x2bc>
 800ac46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac4a:	2b02      	cmp	r3, #2
 800ac4c:	d022      	beq.n	800ac94 <__gethex+0x2a0>
 800ac4e:	2b03      	cmp	r3, #3
 800ac50:	d024      	beq.n	800ac9c <__gethex+0x2a8>
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d115      	bne.n	800ac82 <__gethex+0x28e>
 800ac56:	42ae      	cmp	r6, r5
 800ac58:	d113      	bne.n	800ac82 <__gethex+0x28e>
 800ac5a:	2e01      	cmp	r6, #1
 800ac5c:	d10b      	bne.n	800ac76 <__gethex+0x282>
 800ac5e:	9a02      	ldr	r2, [sp, #8]
 800ac60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ac64:	6013      	str	r3, [r2, #0]
 800ac66:	2301      	movs	r3, #1
 800ac68:	6123      	str	r3, [r4, #16]
 800ac6a:	f8ca 3000 	str.w	r3, [sl]
 800ac6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac70:	2562      	movs	r5, #98	@ 0x62
 800ac72:	601c      	str	r4, [r3, #0]
 800ac74:	e73a      	b.n	800aaec <__gethex+0xf8>
 800ac76:	1e71      	subs	r1, r6, #1
 800ac78:	4620      	mov	r0, r4
 800ac7a:	f000 fee6 	bl	800ba4a <__any_on>
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	d1ed      	bne.n	800ac5e <__gethex+0x26a>
 800ac82:	9801      	ldr	r0, [sp, #4]
 800ac84:	4621      	mov	r1, r4
 800ac86:	f000 fa8f 	bl	800b1a8 <_Bfree>
 800ac8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	6013      	str	r3, [r2, #0]
 800ac90:	2550      	movs	r5, #80	@ 0x50
 800ac92:	e72b      	b.n	800aaec <__gethex+0xf8>
 800ac94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d1f3      	bne.n	800ac82 <__gethex+0x28e>
 800ac9a:	e7e0      	b.n	800ac5e <__gethex+0x26a>
 800ac9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d1dd      	bne.n	800ac5e <__gethex+0x26a>
 800aca2:	e7ee      	b.n	800ac82 <__gethex+0x28e>
 800aca4:	0800c500 	.word	0x0800c500
 800aca8:	0800c7a7 	.word	0x0800c7a7
 800acac:	0800c7b8 	.word	0x0800c7b8
 800acb0:	1e6f      	subs	r7, r5, #1
 800acb2:	f1b9 0f00 	cmp.w	r9, #0
 800acb6:	d130      	bne.n	800ad1a <__gethex+0x326>
 800acb8:	b127      	cbz	r7, 800acc4 <__gethex+0x2d0>
 800acba:	4639      	mov	r1, r7
 800acbc:	4620      	mov	r0, r4
 800acbe:	f000 fec4 	bl	800ba4a <__any_on>
 800acc2:	4681      	mov	r9, r0
 800acc4:	117a      	asrs	r2, r7, #5
 800acc6:	2301      	movs	r3, #1
 800acc8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800accc:	f007 071f 	and.w	r7, r7, #31
 800acd0:	40bb      	lsls	r3, r7
 800acd2:	4213      	tst	r3, r2
 800acd4:	4629      	mov	r1, r5
 800acd6:	4620      	mov	r0, r4
 800acd8:	bf18      	it	ne
 800acda:	f049 0902 	orrne.w	r9, r9, #2
 800acde:	f7ff fe21 	bl	800a924 <rshift>
 800ace2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ace6:	1b76      	subs	r6, r6, r5
 800ace8:	2502      	movs	r5, #2
 800acea:	f1b9 0f00 	cmp.w	r9, #0
 800acee:	d047      	beq.n	800ad80 <__gethex+0x38c>
 800acf0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800acf4:	2b02      	cmp	r3, #2
 800acf6:	d015      	beq.n	800ad24 <__gethex+0x330>
 800acf8:	2b03      	cmp	r3, #3
 800acfa:	d017      	beq.n	800ad2c <__gethex+0x338>
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d109      	bne.n	800ad14 <__gethex+0x320>
 800ad00:	f019 0f02 	tst.w	r9, #2
 800ad04:	d006      	beq.n	800ad14 <__gethex+0x320>
 800ad06:	f8da 3000 	ldr.w	r3, [sl]
 800ad0a:	ea49 0903 	orr.w	r9, r9, r3
 800ad0e:	f019 0f01 	tst.w	r9, #1
 800ad12:	d10e      	bne.n	800ad32 <__gethex+0x33e>
 800ad14:	f045 0510 	orr.w	r5, r5, #16
 800ad18:	e032      	b.n	800ad80 <__gethex+0x38c>
 800ad1a:	f04f 0901 	mov.w	r9, #1
 800ad1e:	e7d1      	b.n	800acc4 <__gethex+0x2d0>
 800ad20:	2501      	movs	r5, #1
 800ad22:	e7e2      	b.n	800acea <__gethex+0x2f6>
 800ad24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad26:	f1c3 0301 	rsb	r3, r3, #1
 800ad2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ad2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d0f0      	beq.n	800ad14 <__gethex+0x320>
 800ad32:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ad36:	f104 0314 	add.w	r3, r4, #20
 800ad3a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ad3e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ad42:	f04f 0c00 	mov.w	ip, #0
 800ad46:	4618      	mov	r0, r3
 800ad48:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad4c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ad50:	d01b      	beq.n	800ad8a <__gethex+0x396>
 800ad52:	3201      	adds	r2, #1
 800ad54:	6002      	str	r2, [r0, #0]
 800ad56:	2d02      	cmp	r5, #2
 800ad58:	f104 0314 	add.w	r3, r4, #20
 800ad5c:	d13c      	bne.n	800add8 <__gethex+0x3e4>
 800ad5e:	f8d8 2000 	ldr.w	r2, [r8]
 800ad62:	3a01      	subs	r2, #1
 800ad64:	42b2      	cmp	r2, r6
 800ad66:	d109      	bne.n	800ad7c <__gethex+0x388>
 800ad68:	1171      	asrs	r1, r6, #5
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ad70:	f006 061f 	and.w	r6, r6, #31
 800ad74:	fa02 f606 	lsl.w	r6, r2, r6
 800ad78:	421e      	tst	r6, r3
 800ad7a:	d13a      	bne.n	800adf2 <__gethex+0x3fe>
 800ad7c:	f045 0520 	orr.w	r5, r5, #32
 800ad80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad82:	601c      	str	r4, [r3, #0]
 800ad84:	9b02      	ldr	r3, [sp, #8]
 800ad86:	601f      	str	r7, [r3, #0]
 800ad88:	e6b0      	b.n	800aaec <__gethex+0xf8>
 800ad8a:	4299      	cmp	r1, r3
 800ad8c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ad90:	d8d9      	bhi.n	800ad46 <__gethex+0x352>
 800ad92:	68a3      	ldr	r3, [r4, #8]
 800ad94:	459b      	cmp	fp, r3
 800ad96:	db17      	blt.n	800adc8 <__gethex+0x3d4>
 800ad98:	6861      	ldr	r1, [r4, #4]
 800ad9a:	9801      	ldr	r0, [sp, #4]
 800ad9c:	3101      	adds	r1, #1
 800ad9e:	f000 f9c3 	bl	800b128 <_Balloc>
 800ada2:	4681      	mov	r9, r0
 800ada4:	b918      	cbnz	r0, 800adae <__gethex+0x3ba>
 800ada6:	4b1a      	ldr	r3, [pc, #104]	@ (800ae10 <__gethex+0x41c>)
 800ada8:	4602      	mov	r2, r0
 800adaa:	2184      	movs	r1, #132	@ 0x84
 800adac:	e6c5      	b.n	800ab3a <__gethex+0x146>
 800adae:	6922      	ldr	r2, [r4, #16]
 800adb0:	3202      	adds	r2, #2
 800adb2:	f104 010c 	add.w	r1, r4, #12
 800adb6:	0092      	lsls	r2, r2, #2
 800adb8:	300c      	adds	r0, #12
 800adba:	f7fe fee4 	bl	8009b86 <memcpy>
 800adbe:	4621      	mov	r1, r4
 800adc0:	9801      	ldr	r0, [sp, #4]
 800adc2:	f000 f9f1 	bl	800b1a8 <_Bfree>
 800adc6:	464c      	mov	r4, r9
 800adc8:	6923      	ldr	r3, [r4, #16]
 800adca:	1c5a      	adds	r2, r3, #1
 800adcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800add0:	6122      	str	r2, [r4, #16]
 800add2:	2201      	movs	r2, #1
 800add4:	615a      	str	r2, [r3, #20]
 800add6:	e7be      	b.n	800ad56 <__gethex+0x362>
 800add8:	6922      	ldr	r2, [r4, #16]
 800adda:	455a      	cmp	r2, fp
 800addc:	dd0b      	ble.n	800adf6 <__gethex+0x402>
 800adde:	2101      	movs	r1, #1
 800ade0:	4620      	mov	r0, r4
 800ade2:	f7ff fd9f 	bl	800a924 <rshift>
 800ade6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800adea:	3701      	adds	r7, #1
 800adec:	42bb      	cmp	r3, r7
 800adee:	f6ff aee0 	blt.w	800abb2 <__gethex+0x1be>
 800adf2:	2501      	movs	r5, #1
 800adf4:	e7c2      	b.n	800ad7c <__gethex+0x388>
 800adf6:	f016 061f 	ands.w	r6, r6, #31
 800adfa:	d0fa      	beq.n	800adf2 <__gethex+0x3fe>
 800adfc:	4453      	add	r3, sl
 800adfe:	f1c6 0620 	rsb	r6, r6, #32
 800ae02:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ae06:	f000 fa81 	bl	800b30c <__hi0bits>
 800ae0a:	42b0      	cmp	r0, r6
 800ae0c:	dbe7      	blt.n	800adde <__gethex+0x3ea>
 800ae0e:	e7f0      	b.n	800adf2 <__gethex+0x3fe>
 800ae10:	0800c7a7 	.word	0x0800c7a7

0800ae14 <L_shift>:
 800ae14:	f1c2 0208 	rsb	r2, r2, #8
 800ae18:	0092      	lsls	r2, r2, #2
 800ae1a:	b570      	push	{r4, r5, r6, lr}
 800ae1c:	f1c2 0620 	rsb	r6, r2, #32
 800ae20:	6843      	ldr	r3, [r0, #4]
 800ae22:	6804      	ldr	r4, [r0, #0]
 800ae24:	fa03 f506 	lsl.w	r5, r3, r6
 800ae28:	432c      	orrs	r4, r5
 800ae2a:	40d3      	lsrs	r3, r2
 800ae2c:	6004      	str	r4, [r0, #0]
 800ae2e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ae32:	4288      	cmp	r0, r1
 800ae34:	d3f4      	bcc.n	800ae20 <L_shift+0xc>
 800ae36:	bd70      	pop	{r4, r5, r6, pc}

0800ae38 <__match>:
 800ae38:	b530      	push	{r4, r5, lr}
 800ae3a:	6803      	ldr	r3, [r0, #0]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae42:	b914      	cbnz	r4, 800ae4a <__match+0x12>
 800ae44:	6003      	str	r3, [r0, #0]
 800ae46:	2001      	movs	r0, #1
 800ae48:	bd30      	pop	{r4, r5, pc}
 800ae4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae4e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ae52:	2d19      	cmp	r5, #25
 800ae54:	bf98      	it	ls
 800ae56:	3220      	addls	r2, #32
 800ae58:	42a2      	cmp	r2, r4
 800ae5a:	d0f0      	beq.n	800ae3e <__match+0x6>
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	e7f3      	b.n	800ae48 <__match+0x10>

0800ae60 <__hexnan>:
 800ae60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae64:	680b      	ldr	r3, [r1, #0]
 800ae66:	6801      	ldr	r1, [r0, #0]
 800ae68:	115e      	asrs	r6, r3, #5
 800ae6a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ae6e:	f013 031f 	ands.w	r3, r3, #31
 800ae72:	b087      	sub	sp, #28
 800ae74:	bf18      	it	ne
 800ae76:	3604      	addne	r6, #4
 800ae78:	2500      	movs	r5, #0
 800ae7a:	1f37      	subs	r7, r6, #4
 800ae7c:	4682      	mov	sl, r0
 800ae7e:	4690      	mov	r8, r2
 800ae80:	9301      	str	r3, [sp, #4]
 800ae82:	f846 5c04 	str.w	r5, [r6, #-4]
 800ae86:	46b9      	mov	r9, r7
 800ae88:	463c      	mov	r4, r7
 800ae8a:	9502      	str	r5, [sp, #8]
 800ae8c:	46ab      	mov	fp, r5
 800ae8e:	784a      	ldrb	r2, [r1, #1]
 800ae90:	1c4b      	adds	r3, r1, #1
 800ae92:	9303      	str	r3, [sp, #12]
 800ae94:	b342      	cbz	r2, 800aee8 <__hexnan+0x88>
 800ae96:	4610      	mov	r0, r2
 800ae98:	9105      	str	r1, [sp, #20]
 800ae9a:	9204      	str	r2, [sp, #16]
 800ae9c:	f7ff fd94 	bl	800a9c8 <__hexdig_fun>
 800aea0:	2800      	cmp	r0, #0
 800aea2:	d151      	bne.n	800af48 <__hexnan+0xe8>
 800aea4:	9a04      	ldr	r2, [sp, #16]
 800aea6:	9905      	ldr	r1, [sp, #20]
 800aea8:	2a20      	cmp	r2, #32
 800aeaa:	d818      	bhi.n	800aede <__hexnan+0x7e>
 800aeac:	9b02      	ldr	r3, [sp, #8]
 800aeae:	459b      	cmp	fp, r3
 800aeb0:	dd13      	ble.n	800aeda <__hexnan+0x7a>
 800aeb2:	454c      	cmp	r4, r9
 800aeb4:	d206      	bcs.n	800aec4 <__hexnan+0x64>
 800aeb6:	2d07      	cmp	r5, #7
 800aeb8:	dc04      	bgt.n	800aec4 <__hexnan+0x64>
 800aeba:	462a      	mov	r2, r5
 800aebc:	4649      	mov	r1, r9
 800aebe:	4620      	mov	r0, r4
 800aec0:	f7ff ffa8 	bl	800ae14 <L_shift>
 800aec4:	4544      	cmp	r4, r8
 800aec6:	d952      	bls.n	800af6e <__hexnan+0x10e>
 800aec8:	2300      	movs	r3, #0
 800aeca:	f1a4 0904 	sub.w	r9, r4, #4
 800aece:	f844 3c04 	str.w	r3, [r4, #-4]
 800aed2:	f8cd b008 	str.w	fp, [sp, #8]
 800aed6:	464c      	mov	r4, r9
 800aed8:	461d      	mov	r5, r3
 800aeda:	9903      	ldr	r1, [sp, #12]
 800aedc:	e7d7      	b.n	800ae8e <__hexnan+0x2e>
 800aede:	2a29      	cmp	r2, #41	@ 0x29
 800aee0:	d157      	bne.n	800af92 <__hexnan+0x132>
 800aee2:	3102      	adds	r1, #2
 800aee4:	f8ca 1000 	str.w	r1, [sl]
 800aee8:	f1bb 0f00 	cmp.w	fp, #0
 800aeec:	d051      	beq.n	800af92 <__hexnan+0x132>
 800aeee:	454c      	cmp	r4, r9
 800aef0:	d206      	bcs.n	800af00 <__hexnan+0xa0>
 800aef2:	2d07      	cmp	r5, #7
 800aef4:	dc04      	bgt.n	800af00 <__hexnan+0xa0>
 800aef6:	462a      	mov	r2, r5
 800aef8:	4649      	mov	r1, r9
 800aefa:	4620      	mov	r0, r4
 800aefc:	f7ff ff8a 	bl	800ae14 <L_shift>
 800af00:	4544      	cmp	r4, r8
 800af02:	d936      	bls.n	800af72 <__hexnan+0x112>
 800af04:	f1a8 0204 	sub.w	r2, r8, #4
 800af08:	4623      	mov	r3, r4
 800af0a:	f853 1b04 	ldr.w	r1, [r3], #4
 800af0e:	f842 1f04 	str.w	r1, [r2, #4]!
 800af12:	429f      	cmp	r7, r3
 800af14:	d2f9      	bcs.n	800af0a <__hexnan+0xaa>
 800af16:	1b3b      	subs	r3, r7, r4
 800af18:	f023 0303 	bic.w	r3, r3, #3
 800af1c:	3304      	adds	r3, #4
 800af1e:	3401      	adds	r4, #1
 800af20:	3e03      	subs	r6, #3
 800af22:	42b4      	cmp	r4, r6
 800af24:	bf88      	it	hi
 800af26:	2304      	movhi	r3, #4
 800af28:	4443      	add	r3, r8
 800af2a:	2200      	movs	r2, #0
 800af2c:	f843 2b04 	str.w	r2, [r3], #4
 800af30:	429f      	cmp	r7, r3
 800af32:	d2fb      	bcs.n	800af2c <__hexnan+0xcc>
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	b91b      	cbnz	r3, 800af40 <__hexnan+0xe0>
 800af38:	4547      	cmp	r7, r8
 800af3a:	d128      	bne.n	800af8e <__hexnan+0x12e>
 800af3c:	2301      	movs	r3, #1
 800af3e:	603b      	str	r3, [r7, #0]
 800af40:	2005      	movs	r0, #5
 800af42:	b007      	add	sp, #28
 800af44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af48:	3501      	adds	r5, #1
 800af4a:	2d08      	cmp	r5, #8
 800af4c:	f10b 0b01 	add.w	fp, fp, #1
 800af50:	dd06      	ble.n	800af60 <__hexnan+0x100>
 800af52:	4544      	cmp	r4, r8
 800af54:	d9c1      	bls.n	800aeda <__hexnan+0x7a>
 800af56:	2300      	movs	r3, #0
 800af58:	f844 3c04 	str.w	r3, [r4, #-4]
 800af5c:	2501      	movs	r5, #1
 800af5e:	3c04      	subs	r4, #4
 800af60:	6822      	ldr	r2, [r4, #0]
 800af62:	f000 000f 	and.w	r0, r0, #15
 800af66:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800af6a:	6020      	str	r0, [r4, #0]
 800af6c:	e7b5      	b.n	800aeda <__hexnan+0x7a>
 800af6e:	2508      	movs	r5, #8
 800af70:	e7b3      	b.n	800aeda <__hexnan+0x7a>
 800af72:	9b01      	ldr	r3, [sp, #4]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d0dd      	beq.n	800af34 <__hexnan+0xd4>
 800af78:	f1c3 0320 	rsb	r3, r3, #32
 800af7c:	f04f 32ff 	mov.w	r2, #4294967295
 800af80:	40da      	lsrs	r2, r3
 800af82:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800af86:	4013      	ands	r3, r2
 800af88:	f846 3c04 	str.w	r3, [r6, #-4]
 800af8c:	e7d2      	b.n	800af34 <__hexnan+0xd4>
 800af8e:	3f04      	subs	r7, #4
 800af90:	e7d0      	b.n	800af34 <__hexnan+0xd4>
 800af92:	2004      	movs	r0, #4
 800af94:	e7d5      	b.n	800af42 <__hexnan+0xe2>
	...

0800af98 <malloc>:
 800af98:	4b02      	ldr	r3, [pc, #8]	@ (800afa4 <malloc+0xc>)
 800af9a:	4601      	mov	r1, r0
 800af9c:	6818      	ldr	r0, [r3, #0]
 800af9e:	f000 b825 	b.w	800afec <_malloc_r>
 800afa2:	bf00      	nop
 800afa4:	200001c4 	.word	0x200001c4

0800afa8 <sbrk_aligned>:
 800afa8:	b570      	push	{r4, r5, r6, lr}
 800afaa:	4e0f      	ldr	r6, [pc, #60]	@ (800afe8 <sbrk_aligned+0x40>)
 800afac:	460c      	mov	r4, r1
 800afae:	6831      	ldr	r1, [r6, #0]
 800afb0:	4605      	mov	r5, r0
 800afb2:	b911      	cbnz	r1, 800afba <sbrk_aligned+0x12>
 800afb4:	f000 fe36 	bl	800bc24 <_sbrk_r>
 800afb8:	6030      	str	r0, [r6, #0]
 800afba:	4621      	mov	r1, r4
 800afbc:	4628      	mov	r0, r5
 800afbe:	f000 fe31 	bl	800bc24 <_sbrk_r>
 800afc2:	1c43      	adds	r3, r0, #1
 800afc4:	d103      	bne.n	800afce <sbrk_aligned+0x26>
 800afc6:	f04f 34ff 	mov.w	r4, #4294967295
 800afca:	4620      	mov	r0, r4
 800afcc:	bd70      	pop	{r4, r5, r6, pc}
 800afce:	1cc4      	adds	r4, r0, #3
 800afd0:	f024 0403 	bic.w	r4, r4, #3
 800afd4:	42a0      	cmp	r0, r4
 800afd6:	d0f8      	beq.n	800afca <sbrk_aligned+0x22>
 800afd8:	1a21      	subs	r1, r4, r0
 800afda:	4628      	mov	r0, r5
 800afdc:	f000 fe22 	bl	800bc24 <_sbrk_r>
 800afe0:	3001      	adds	r0, #1
 800afe2:	d1f2      	bne.n	800afca <sbrk_aligned+0x22>
 800afe4:	e7ef      	b.n	800afc6 <sbrk_aligned+0x1e>
 800afe6:	bf00      	nop
 800afe8:	20000e64 	.word	0x20000e64

0800afec <_malloc_r>:
 800afec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aff0:	1ccd      	adds	r5, r1, #3
 800aff2:	f025 0503 	bic.w	r5, r5, #3
 800aff6:	3508      	adds	r5, #8
 800aff8:	2d0c      	cmp	r5, #12
 800affa:	bf38      	it	cc
 800affc:	250c      	movcc	r5, #12
 800affe:	2d00      	cmp	r5, #0
 800b000:	4606      	mov	r6, r0
 800b002:	db01      	blt.n	800b008 <_malloc_r+0x1c>
 800b004:	42a9      	cmp	r1, r5
 800b006:	d904      	bls.n	800b012 <_malloc_r+0x26>
 800b008:	230c      	movs	r3, #12
 800b00a:	6033      	str	r3, [r6, #0]
 800b00c:	2000      	movs	r0, #0
 800b00e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b012:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b0e8 <_malloc_r+0xfc>
 800b016:	f000 f87b 	bl	800b110 <__malloc_lock>
 800b01a:	f8d8 3000 	ldr.w	r3, [r8]
 800b01e:	461c      	mov	r4, r3
 800b020:	bb44      	cbnz	r4, 800b074 <_malloc_r+0x88>
 800b022:	4629      	mov	r1, r5
 800b024:	4630      	mov	r0, r6
 800b026:	f7ff ffbf 	bl	800afa8 <sbrk_aligned>
 800b02a:	1c43      	adds	r3, r0, #1
 800b02c:	4604      	mov	r4, r0
 800b02e:	d158      	bne.n	800b0e2 <_malloc_r+0xf6>
 800b030:	f8d8 4000 	ldr.w	r4, [r8]
 800b034:	4627      	mov	r7, r4
 800b036:	2f00      	cmp	r7, #0
 800b038:	d143      	bne.n	800b0c2 <_malloc_r+0xd6>
 800b03a:	2c00      	cmp	r4, #0
 800b03c:	d04b      	beq.n	800b0d6 <_malloc_r+0xea>
 800b03e:	6823      	ldr	r3, [r4, #0]
 800b040:	4639      	mov	r1, r7
 800b042:	4630      	mov	r0, r6
 800b044:	eb04 0903 	add.w	r9, r4, r3
 800b048:	f000 fdec 	bl	800bc24 <_sbrk_r>
 800b04c:	4581      	cmp	r9, r0
 800b04e:	d142      	bne.n	800b0d6 <_malloc_r+0xea>
 800b050:	6821      	ldr	r1, [r4, #0]
 800b052:	1a6d      	subs	r5, r5, r1
 800b054:	4629      	mov	r1, r5
 800b056:	4630      	mov	r0, r6
 800b058:	f7ff ffa6 	bl	800afa8 <sbrk_aligned>
 800b05c:	3001      	adds	r0, #1
 800b05e:	d03a      	beq.n	800b0d6 <_malloc_r+0xea>
 800b060:	6823      	ldr	r3, [r4, #0]
 800b062:	442b      	add	r3, r5
 800b064:	6023      	str	r3, [r4, #0]
 800b066:	f8d8 3000 	ldr.w	r3, [r8]
 800b06a:	685a      	ldr	r2, [r3, #4]
 800b06c:	bb62      	cbnz	r2, 800b0c8 <_malloc_r+0xdc>
 800b06e:	f8c8 7000 	str.w	r7, [r8]
 800b072:	e00f      	b.n	800b094 <_malloc_r+0xa8>
 800b074:	6822      	ldr	r2, [r4, #0]
 800b076:	1b52      	subs	r2, r2, r5
 800b078:	d420      	bmi.n	800b0bc <_malloc_r+0xd0>
 800b07a:	2a0b      	cmp	r2, #11
 800b07c:	d917      	bls.n	800b0ae <_malloc_r+0xc2>
 800b07e:	1961      	adds	r1, r4, r5
 800b080:	42a3      	cmp	r3, r4
 800b082:	6025      	str	r5, [r4, #0]
 800b084:	bf18      	it	ne
 800b086:	6059      	strne	r1, [r3, #4]
 800b088:	6863      	ldr	r3, [r4, #4]
 800b08a:	bf08      	it	eq
 800b08c:	f8c8 1000 	streq.w	r1, [r8]
 800b090:	5162      	str	r2, [r4, r5]
 800b092:	604b      	str	r3, [r1, #4]
 800b094:	4630      	mov	r0, r6
 800b096:	f000 f841 	bl	800b11c <__malloc_unlock>
 800b09a:	f104 000b 	add.w	r0, r4, #11
 800b09e:	1d23      	adds	r3, r4, #4
 800b0a0:	f020 0007 	bic.w	r0, r0, #7
 800b0a4:	1ac2      	subs	r2, r0, r3
 800b0a6:	bf1c      	itt	ne
 800b0a8:	1a1b      	subne	r3, r3, r0
 800b0aa:	50a3      	strne	r3, [r4, r2]
 800b0ac:	e7af      	b.n	800b00e <_malloc_r+0x22>
 800b0ae:	6862      	ldr	r2, [r4, #4]
 800b0b0:	42a3      	cmp	r3, r4
 800b0b2:	bf0c      	ite	eq
 800b0b4:	f8c8 2000 	streq.w	r2, [r8]
 800b0b8:	605a      	strne	r2, [r3, #4]
 800b0ba:	e7eb      	b.n	800b094 <_malloc_r+0xa8>
 800b0bc:	4623      	mov	r3, r4
 800b0be:	6864      	ldr	r4, [r4, #4]
 800b0c0:	e7ae      	b.n	800b020 <_malloc_r+0x34>
 800b0c2:	463c      	mov	r4, r7
 800b0c4:	687f      	ldr	r7, [r7, #4]
 800b0c6:	e7b6      	b.n	800b036 <_malloc_r+0x4a>
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	42a3      	cmp	r3, r4
 800b0ce:	d1fb      	bne.n	800b0c8 <_malloc_r+0xdc>
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	6053      	str	r3, [r2, #4]
 800b0d4:	e7de      	b.n	800b094 <_malloc_r+0xa8>
 800b0d6:	230c      	movs	r3, #12
 800b0d8:	6033      	str	r3, [r6, #0]
 800b0da:	4630      	mov	r0, r6
 800b0dc:	f000 f81e 	bl	800b11c <__malloc_unlock>
 800b0e0:	e794      	b.n	800b00c <_malloc_r+0x20>
 800b0e2:	6005      	str	r5, [r0, #0]
 800b0e4:	e7d6      	b.n	800b094 <_malloc_r+0xa8>
 800b0e6:	bf00      	nop
 800b0e8:	20000e68 	.word	0x20000e68

0800b0ec <__ascii_mbtowc>:
 800b0ec:	b082      	sub	sp, #8
 800b0ee:	b901      	cbnz	r1, 800b0f2 <__ascii_mbtowc+0x6>
 800b0f0:	a901      	add	r1, sp, #4
 800b0f2:	b142      	cbz	r2, 800b106 <__ascii_mbtowc+0x1a>
 800b0f4:	b14b      	cbz	r3, 800b10a <__ascii_mbtowc+0x1e>
 800b0f6:	7813      	ldrb	r3, [r2, #0]
 800b0f8:	600b      	str	r3, [r1, #0]
 800b0fa:	7812      	ldrb	r2, [r2, #0]
 800b0fc:	1e10      	subs	r0, r2, #0
 800b0fe:	bf18      	it	ne
 800b100:	2001      	movne	r0, #1
 800b102:	b002      	add	sp, #8
 800b104:	4770      	bx	lr
 800b106:	4610      	mov	r0, r2
 800b108:	e7fb      	b.n	800b102 <__ascii_mbtowc+0x16>
 800b10a:	f06f 0001 	mvn.w	r0, #1
 800b10e:	e7f8      	b.n	800b102 <__ascii_mbtowc+0x16>

0800b110 <__malloc_lock>:
 800b110:	4801      	ldr	r0, [pc, #4]	@ (800b118 <__malloc_lock+0x8>)
 800b112:	f7fe bd36 	b.w	8009b82 <__retarget_lock_acquire_recursive>
 800b116:	bf00      	nop
 800b118:	20000e60 	.word	0x20000e60

0800b11c <__malloc_unlock>:
 800b11c:	4801      	ldr	r0, [pc, #4]	@ (800b124 <__malloc_unlock+0x8>)
 800b11e:	f7fe bd31 	b.w	8009b84 <__retarget_lock_release_recursive>
 800b122:	bf00      	nop
 800b124:	20000e60 	.word	0x20000e60

0800b128 <_Balloc>:
 800b128:	b570      	push	{r4, r5, r6, lr}
 800b12a:	69c6      	ldr	r6, [r0, #28]
 800b12c:	4604      	mov	r4, r0
 800b12e:	460d      	mov	r5, r1
 800b130:	b976      	cbnz	r6, 800b150 <_Balloc+0x28>
 800b132:	2010      	movs	r0, #16
 800b134:	f7ff ff30 	bl	800af98 <malloc>
 800b138:	4602      	mov	r2, r0
 800b13a:	61e0      	str	r0, [r4, #28]
 800b13c:	b920      	cbnz	r0, 800b148 <_Balloc+0x20>
 800b13e:	4b18      	ldr	r3, [pc, #96]	@ (800b1a0 <_Balloc+0x78>)
 800b140:	4818      	ldr	r0, [pc, #96]	@ (800b1a4 <_Balloc+0x7c>)
 800b142:	216b      	movs	r1, #107	@ 0x6b
 800b144:	f7fe fd38 	bl	8009bb8 <__assert_func>
 800b148:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b14c:	6006      	str	r6, [r0, #0]
 800b14e:	60c6      	str	r6, [r0, #12]
 800b150:	69e6      	ldr	r6, [r4, #28]
 800b152:	68f3      	ldr	r3, [r6, #12]
 800b154:	b183      	cbz	r3, 800b178 <_Balloc+0x50>
 800b156:	69e3      	ldr	r3, [r4, #28]
 800b158:	68db      	ldr	r3, [r3, #12]
 800b15a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b15e:	b9b8      	cbnz	r0, 800b190 <_Balloc+0x68>
 800b160:	2101      	movs	r1, #1
 800b162:	fa01 f605 	lsl.w	r6, r1, r5
 800b166:	1d72      	adds	r2, r6, #5
 800b168:	0092      	lsls	r2, r2, #2
 800b16a:	4620      	mov	r0, r4
 800b16c:	f000 fd71 	bl	800bc52 <_calloc_r>
 800b170:	b160      	cbz	r0, 800b18c <_Balloc+0x64>
 800b172:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b176:	e00e      	b.n	800b196 <_Balloc+0x6e>
 800b178:	2221      	movs	r2, #33	@ 0x21
 800b17a:	2104      	movs	r1, #4
 800b17c:	4620      	mov	r0, r4
 800b17e:	f000 fd68 	bl	800bc52 <_calloc_r>
 800b182:	69e3      	ldr	r3, [r4, #28]
 800b184:	60f0      	str	r0, [r6, #12]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d1e4      	bne.n	800b156 <_Balloc+0x2e>
 800b18c:	2000      	movs	r0, #0
 800b18e:	bd70      	pop	{r4, r5, r6, pc}
 800b190:	6802      	ldr	r2, [r0, #0]
 800b192:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b196:	2300      	movs	r3, #0
 800b198:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b19c:	e7f7      	b.n	800b18e <_Balloc+0x66>
 800b19e:	bf00      	nop
 800b1a0:	0800c68d 	.word	0x0800c68d
 800b1a4:	0800c818 	.word	0x0800c818

0800b1a8 <_Bfree>:
 800b1a8:	b570      	push	{r4, r5, r6, lr}
 800b1aa:	69c6      	ldr	r6, [r0, #28]
 800b1ac:	4605      	mov	r5, r0
 800b1ae:	460c      	mov	r4, r1
 800b1b0:	b976      	cbnz	r6, 800b1d0 <_Bfree+0x28>
 800b1b2:	2010      	movs	r0, #16
 800b1b4:	f7ff fef0 	bl	800af98 <malloc>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	61e8      	str	r0, [r5, #28]
 800b1bc:	b920      	cbnz	r0, 800b1c8 <_Bfree+0x20>
 800b1be:	4b09      	ldr	r3, [pc, #36]	@ (800b1e4 <_Bfree+0x3c>)
 800b1c0:	4809      	ldr	r0, [pc, #36]	@ (800b1e8 <_Bfree+0x40>)
 800b1c2:	218f      	movs	r1, #143	@ 0x8f
 800b1c4:	f7fe fcf8 	bl	8009bb8 <__assert_func>
 800b1c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1cc:	6006      	str	r6, [r0, #0]
 800b1ce:	60c6      	str	r6, [r0, #12]
 800b1d0:	b13c      	cbz	r4, 800b1e2 <_Bfree+0x3a>
 800b1d2:	69eb      	ldr	r3, [r5, #28]
 800b1d4:	6862      	ldr	r2, [r4, #4]
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b1dc:	6021      	str	r1, [r4, #0]
 800b1de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b1e2:	bd70      	pop	{r4, r5, r6, pc}
 800b1e4:	0800c68d 	.word	0x0800c68d
 800b1e8:	0800c818 	.word	0x0800c818

0800b1ec <__multadd>:
 800b1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1f0:	690d      	ldr	r5, [r1, #16]
 800b1f2:	4607      	mov	r7, r0
 800b1f4:	460c      	mov	r4, r1
 800b1f6:	461e      	mov	r6, r3
 800b1f8:	f101 0c14 	add.w	ip, r1, #20
 800b1fc:	2000      	movs	r0, #0
 800b1fe:	f8dc 3000 	ldr.w	r3, [ip]
 800b202:	b299      	uxth	r1, r3
 800b204:	fb02 6101 	mla	r1, r2, r1, r6
 800b208:	0c1e      	lsrs	r6, r3, #16
 800b20a:	0c0b      	lsrs	r3, r1, #16
 800b20c:	fb02 3306 	mla	r3, r2, r6, r3
 800b210:	b289      	uxth	r1, r1
 800b212:	3001      	adds	r0, #1
 800b214:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b218:	4285      	cmp	r5, r0
 800b21a:	f84c 1b04 	str.w	r1, [ip], #4
 800b21e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b222:	dcec      	bgt.n	800b1fe <__multadd+0x12>
 800b224:	b30e      	cbz	r6, 800b26a <__multadd+0x7e>
 800b226:	68a3      	ldr	r3, [r4, #8]
 800b228:	42ab      	cmp	r3, r5
 800b22a:	dc19      	bgt.n	800b260 <__multadd+0x74>
 800b22c:	6861      	ldr	r1, [r4, #4]
 800b22e:	4638      	mov	r0, r7
 800b230:	3101      	adds	r1, #1
 800b232:	f7ff ff79 	bl	800b128 <_Balloc>
 800b236:	4680      	mov	r8, r0
 800b238:	b928      	cbnz	r0, 800b246 <__multadd+0x5a>
 800b23a:	4602      	mov	r2, r0
 800b23c:	4b0c      	ldr	r3, [pc, #48]	@ (800b270 <__multadd+0x84>)
 800b23e:	480d      	ldr	r0, [pc, #52]	@ (800b274 <__multadd+0x88>)
 800b240:	21ba      	movs	r1, #186	@ 0xba
 800b242:	f7fe fcb9 	bl	8009bb8 <__assert_func>
 800b246:	6922      	ldr	r2, [r4, #16]
 800b248:	3202      	adds	r2, #2
 800b24a:	f104 010c 	add.w	r1, r4, #12
 800b24e:	0092      	lsls	r2, r2, #2
 800b250:	300c      	adds	r0, #12
 800b252:	f7fe fc98 	bl	8009b86 <memcpy>
 800b256:	4621      	mov	r1, r4
 800b258:	4638      	mov	r0, r7
 800b25a:	f7ff ffa5 	bl	800b1a8 <_Bfree>
 800b25e:	4644      	mov	r4, r8
 800b260:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b264:	3501      	adds	r5, #1
 800b266:	615e      	str	r6, [r3, #20]
 800b268:	6125      	str	r5, [r4, #16]
 800b26a:	4620      	mov	r0, r4
 800b26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b270:	0800c7a7 	.word	0x0800c7a7
 800b274:	0800c818 	.word	0x0800c818

0800b278 <__s2b>:
 800b278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b27c:	460c      	mov	r4, r1
 800b27e:	4615      	mov	r5, r2
 800b280:	461f      	mov	r7, r3
 800b282:	2209      	movs	r2, #9
 800b284:	3308      	adds	r3, #8
 800b286:	4606      	mov	r6, r0
 800b288:	fb93 f3f2 	sdiv	r3, r3, r2
 800b28c:	2100      	movs	r1, #0
 800b28e:	2201      	movs	r2, #1
 800b290:	429a      	cmp	r2, r3
 800b292:	db09      	blt.n	800b2a8 <__s2b+0x30>
 800b294:	4630      	mov	r0, r6
 800b296:	f7ff ff47 	bl	800b128 <_Balloc>
 800b29a:	b940      	cbnz	r0, 800b2ae <__s2b+0x36>
 800b29c:	4602      	mov	r2, r0
 800b29e:	4b19      	ldr	r3, [pc, #100]	@ (800b304 <__s2b+0x8c>)
 800b2a0:	4819      	ldr	r0, [pc, #100]	@ (800b308 <__s2b+0x90>)
 800b2a2:	21d3      	movs	r1, #211	@ 0xd3
 800b2a4:	f7fe fc88 	bl	8009bb8 <__assert_func>
 800b2a8:	0052      	lsls	r2, r2, #1
 800b2aa:	3101      	adds	r1, #1
 800b2ac:	e7f0      	b.n	800b290 <__s2b+0x18>
 800b2ae:	9b08      	ldr	r3, [sp, #32]
 800b2b0:	6143      	str	r3, [r0, #20]
 800b2b2:	2d09      	cmp	r5, #9
 800b2b4:	f04f 0301 	mov.w	r3, #1
 800b2b8:	6103      	str	r3, [r0, #16]
 800b2ba:	dd16      	ble.n	800b2ea <__s2b+0x72>
 800b2bc:	f104 0909 	add.w	r9, r4, #9
 800b2c0:	46c8      	mov	r8, r9
 800b2c2:	442c      	add	r4, r5
 800b2c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b2c8:	4601      	mov	r1, r0
 800b2ca:	3b30      	subs	r3, #48	@ 0x30
 800b2cc:	220a      	movs	r2, #10
 800b2ce:	4630      	mov	r0, r6
 800b2d0:	f7ff ff8c 	bl	800b1ec <__multadd>
 800b2d4:	45a0      	cmp	r8, r4
 800b2d6:	d1f5      	bne.n	800b2c4 <__s2b+0x4c>
 800b2d8:	f1a5 0408 	sub.w	r4, r5, #8
 800b2dc:	444c      	add	r4, r9
 800b2de:	1b2d      	subs	r5, r5, r4
 800b2e0:	1963      	adds	r3, r4, r5
 800b2e2:	42bb      	cmp	r3, r7
 800b2e4:	db04      	blt.n	800b2f0 <__s2b+0x78>
 800b2e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2ea:	340a      	adds	r4, #10
 800b2ec:	2509      	movs	r5, #9
 800b2ee:	e7f6      	b.n	800b2de <__s2b+0x66>
 800b2f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b2f4:	4601      	mov	r1, r0
 800b2f6:	3b30      	subs	r3, #48	@ 0x30
 800b2f8:	220a      	movs	r2, #10
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	f7ff ff76 	bl	800b1ec <__multadd>
 800b300:	e7ee      	b.n	800b2e0 <__s2b+0x68>
 800b302:	bf00      	nop
 800b304:	0800c7a7 	.word	0x0800c7a7
 800b308:	0800c818 	.word	0x0800c818

0800b30c <__hi0bits>:
 800b30c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b310:	4603      	mov	r3, r0
 800b312:	bf36      	itet	cc
 800b314:	0403      	lslcc	r3, r0, #16
 800b316:	2000      	movcs	r0, #0
 800b318:	2010      	movcc	r0, #16
 800b31a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b31e:	bf3c      	itt	cc
 800b320:	021b      	lslcc	r3, r3, #8
 800b322:	3008      	addcc	r0, #8
 800b324:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b328:	bf3c      	itt	cc
 800b32a:	011b      	lslcc	r3, r3, #4
 800b32c:	3004      	addcc	r0, #4
 800b32e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b332:	bf3c      	itt	cc
 800b334:	009b      	lslcc	r3, r3, #2
 800b336:	3002      	addcc	r0, #2
 800b338:	2b00      	cmp	r3, #0
 800b33a:	db05      	blt.n	800b348 <__hi0bits+0x3c>
 800b33c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b340:	f100 0001 	add.w	r0, r0, #1
 800b344:	bf08      	it	eq
 800b346:	2020      	moveq	r0, #32
 800b348:	4770      	bx	lr

0800b34a <__lo0bits>:
 800b34a:	6803      	ldr	r3, [r0, #0]
 800b34c:	4602      	mov	r2, r0
 800b34e:	f013 0007 	ands.w	r0, r3, #7
 800b352:	d00b      	beq.n	800b36c <__lo0bits+0x22>
 800b354:	07d9      	lsls	r1, r3, #31
 800b356:	d421      	bmi.n	800b39c <__lo0bits+0x52>
 800b358:	0798      	lsls	r0, r3, #30
 800b35a:	bf49      	itett	mi
 800b35c:	085b      	lsrmi	r3, r3, #1
 800b35e:	089b      	lsrpl	r3, r3, #2
 800b360:	2001      	movmi	r0, #1
 800b362:	6013      	strmi	r3, [r2, #0]
 800b364:	bf5c      	itt	pl
 800b366:	6013      	strpl	r3, [r2, #0]
 800b368:	2002      	movpl	r0, #2
 800b36a:	4770      	bx	lr
 800b36c:	b299      	uxth	r1, r3
 800b36e:	b909      	cbnz	r1, 800b374 <__lo0bits+0x2a>
 800b370:	0c1b      	lsrs	r3, r3, #16
 800b372:	2010      	movs	r0, #16
 800b374:	b2d9      	uxtb	r1, r3
 800b376:	b909      	cbnz	r1, 800b37c <__lo0bits+0x32>
 800b378:	3008      	adds	r0, #8
 800b37a:	0a1b      	lsrs	r3, r3, #8
 800b37c:	0719      	lsls	r1, r3, #28
 800b37e:	bf04      	itt	eq
 800b380:	091b      	lsreq	r3, r3, #4
 800b382:	3004      	addeq	r0, #4
 800b384:	0799      	lsls	r1, r3, #30
 800b386:	bf04      	itt	eq
 800b388:	089b      	lsreq	r3, r3, #2
 800b38a:	3002      	addeq	r0, #2
 800b38c:	07d9      	lsls	r1, r3, #31
 800b38e:	d403      	bmi.n	800b398 <__lo0bits+0x4e>
 800b390:	085b      	lsrs	r3, r3, #1
 800b392:	f100 0001 	add.w	r0, r0, #1
 800b396:	d003      	beq.n	800b3a0 <__lo0bits+0x56>
 800b398:	6013      	str	r3, [r2, #0]
 800b39a:	4770      	bx	lr
 800b39c:	2000      	movs	r0, #0
 800b39e:	4770      	bx	lr
 800b3a0:	2020      	movs	r0, #32
 800b3a2:	4770      	bx	lr

0800b3a4 <__i2b>:
 800b3a4:	b510      	push	{r4, lr}
 800b3a6:	460c      	mov	r4, r1
 800b3a8:	2101      	movs	r1, #1
 800b3aa:	f7ff febd 	bl	800b128 <_Balloc>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	b928      	cbnz	r0, 800b3be <__i2b+0x1a>
 800b3b2:	4b05      	ldr	r3, [pc, #20]	@ (800b3c8 <__i2b+0x24>)
 800b3b4:	4805      	ldr	r0, [pc, #20]	@ (800b3cc <__i2b+0x28>)
 800b3b6:	f240 1145 	movw	r1, #325	@ 0x145
 800b3ba:	f7fe fbfd 	bl	8009bb8 <__assert_func>
 800b3be:	2301      	movs	r3, #1
 800b3c0:	6144      	str	r4, [r0, #20]
 800b3c2:	6103      	str	r3, [r0, #16]
 800b3c4:	bd10      	pop	{r4, pc}
 800b3c6:	bf00      	nop
 800b3c8:	0800c7a7 	.word	0x0800c7a7
 800b3cc:	0800c818 	.word	0x0800c818

0800b3d0 <__multiply>:
 800b3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d4:	4614      	mov	r4, r2
 800b3d6:	690a      	ldr	r2, [r1, #16]
 800b3d8:	6923      	ldr	r3, [r4, #16]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	bfa8      	it	ge
 800b3de:	4623      	movge	r3, r4
 800b3e0:	460f      	mov	r7, r1
 800b3e2:	bfa4      	itt	ge
 800b3e4:	460c      	movge	r4, r1
 800b3e6:	461f      	movge	r7, r3
 800b3e8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b3ec:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b3f0:	68a3      	ldr	r3, [r4, #8]
 800b3f2:	6861      	ldr	r1, [r4, #4]
 800b3f4:	eb0a 0609 	add.w	r6, sl, r9
 800b3f8:	42b3      	cmp	r3, r6
 800b3fa:	b085      	sub	sp, #20
 800b3fc:	bfb8      	it	lt
 800b3fe:	3101      	addlt	r1, #1
 800b400:	f7ff fe92 	bl	800b128 <_Balloc>
 800b404:	b930      	cbnz	r0, 800b414 <__multiply+0x44>
 800b406:	4602      	mov	r2, r0
 800b408:	4b44      	ldr	r3, [pc, #272]	@ (800b51c <__multiply+0x14c>)
 800b40a:	4845      	ldr	r0, [pc, #276]	@ (800b520 <__multiply+0x150>)
 800b40c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b410:	f7fe fbd2 	bl	8009bb8 <__assert_func>
 800b414:	f100 0514 	add.w	r5, r0, #20
 800b418:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b41c:	462b      	mov	r3, r5
 800b41e:	2200      	movs	r2, #0
 800b420:	4543      	cmp	r3, r8
 800b422:	d321      	bcc.n	800b468 <__multiply+0x98>
 800b424:	f107 0114 	add.w	r1, r7, #20
 800b428:	f104 0214 	add.w	r2, r4, #20
 800b42c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b430:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b434:	9302      	str	r3, [sp, #8]
 800b436:	1b13      	subs	r3, r2, r4
 800b438:	3b15      	subs	r3, #21
 800b43a:	f023 0303 	bic.w	r3, r3, #3
 800b43e:	3304      	adds	r3, #4
 800b440:	f104 0715 	add.w	r7, r4, #21
 800b444:	42ba      	cmp	r2, r7
 800b446:	bf38      	it	cc
 800b448:	2304      	movcc	r3, #4
 800b44a:	9301      	str	r3, [sp, #4]
 800b44c:	9b02      	ldr	r3, [sp, #8]
 800b44e:	9103      	str	r1, [sp, #12]
 800b450:	428b      	cmp	r3, r1
 800b452:	d80c      	bhi.n	800b46e <__multiply+0x9e>
 800b454:	2e00      	cmp	r6, #0
 800b456:	dd03      	ble.n	800b460 <__multiply+0x90>
 800b458:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d05b      	beq.n	800b518 <__multiply+0x148>
 800b460:	6106      	str	r6, [r0, #16]
 800b462:	b005      	add	sp, #20
 800b464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b468:	f843 2b04 	str.w	r2, [r3], #4
 800b46c:	e7d8      	b.n	800b420 <__multiply+0x50>
 800b46e:	f8b1 a000 	ldrh.w	sl, [r1]
 800b472:	f1ba 0f00 	cmp.w	sl, #0
 800b476:	d024      	beq.n	800b4c2 <__multiply+0xf2>
 800b478:	f104 0e14 	add.w	lr, r4, #20
 800b47c:	46a9      	mov	r9, r5
 800b47e:	f04f 0c00 	mov.w	ip, #0
 800b482:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b486:	f8d9 3000 	ldr.w	r3, [r9]
 800b48a:	fa1f fb87 	uxth.w	fp, r7
 800b48e:	b29b      	uxth	r3, r3
 800b490:	fb0a 330b 	mla	r3, sl, fp, r3
 800b494:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b498:	f8d9 7000 	ldr.w	r7, [r9]
 800b49c:	4463      	add	r3, ip
 800b49e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b4a2:	fb0a c70b 	mla	r7, sl, fp, ip
 800b4a6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b4b0:	4572      	cmp	r2, lr
 800b4b2:	f849 3b04 	str.w	r3, [r9], #4
 800b4b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b4ba:	d8e2      	bhi.n	800b482 <__multiply+0xb2>
 800b4bc:	9b01      	ldr	r3, [sp, #4]
 800b4be:	f845 c003 	str.w	ip, [r5, r3]
 800b4c2:	9b03      	ldr	r3, [sp, #12]
 800b4c4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b4c8:	3104      	adds	r1, #4
 800b4ca:	f1b9 0f00 	cmp.w	r9, #0
 800b4ce:	d021      	beq.n	800b514 <__multiply+0x144>
 800b4d0:	682b      	ldr	r3, [r5, #0]
 800b4d2:	f104 0c14 	add.w	ip, r4, #20
 800b4d6:	46ae      	mov	lr, r5
 800b4d8:	f04f 0a00 	mov.w	sl, #0
 800b4dc:	f8bc b000 	ldrh.w	fp, [ip]
 800b4e0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b4e4:	fb09 770b 	mla	r7, r9, fp, r7
 800b4e8:	4457      	add	r7, sl
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b4f0:	f84e 3b04 	str.w	r3, [lr], #4
 800b4f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b4f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b4fc:	f8be 3000 	ldrh.w	r3, [lr]
 800b500:	fb09 330a 	mla	r3, r9, sl, r3
 800b504:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b508:	4562      	cmp	r2, ip
 800b50a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b50e:	d8e5      	bhi.n	800b4dc <__multiply+0x10c>
 800b510:	9f01      	ldr	r7, [sp, #4]
 800b512:	51eb      	str	r3, [r5, r7]
 800b514:	3504      	adds	r5, #4
 800b516:	e799      	b.n	800b44c <__multiply+0x7c>
 800b518:	3e01      	subs	r6, #1
 800b51a:	e79b      	b.n	800b454 <__multiply+0x84>
 800b51c:	0800c7a7 	.word	0x0800c7a7
 800b520:	0800c818 	.word	0x0800c818

0800b524 <__pow5mult>:
 800b524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b528:	4615      	mov	r5, r2
 800b52a:	f012 0203 	ands.w	r2, r2, #3
 800b52e:	4607      	mov	r7, r0
 800b530:	460e      	mov	r6, r1
 800b532:	d007      	beq.n	800b544 <__pow5mult+0x20>
 800b534:	4c25      	ldr	r4, [pc, #148]	@ (800b5cc <__pow5mult+0xa8>)
 800b536:	3a01      	subs	r2, #1
 800b538:	2300      	movs	r3, #0
 800b53a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b53e:	f7ff fe55 	bl	800b1ec <__multadd>
 800b542:	4606      	mov	r6, r0
 800b544:	10ad      	asrs	r5, r5, #2
 800b546:	d03d      	beq.n	800b5c4 <__pow5mult+0xa0>
 800b548:	69fc      	ldr	r4, [r7, #28]
 800b54a:	b97c      	cbnz	r4, 800b56c <__pow5mult+0x48>
 800b54c:	2010      	movs	r0, #16
 800b54e:	f7ff fd23 	bl	800af98 <malloc>
 800b552:	4602      	mov	r2, r0
 800b554:	61f8      	str	r0, [r7, #28]
 800b556:	b928      	cbnz	r0, 800b564 <__pow5mult+0x40>
 800b558:	4b1d      	ldr	r3, [pc, #116]	@ (800b5d0 <__pow5mult+0xac>)
 800b55a:	481e      	ldr	r0, [pc, #120]	@ (800b5d4 <__pow5mult+0xb0>)
 800b55c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b560:	f7fe fb2a 	bl	8009bb8 <__assert_func>
 800b564:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b568:	6004      	str	r4, [r0, #0]
 800b56a:	60c4      	str	r4, [r0, #12]
 800b56c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b570:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b574:	b94c      	cbnz	r4, 800b58a <__pow5mult+0x66>
 800b576:	f240 2171 	movw	r1, #625	@ 0x271
 800b57a:	4638      	mov	r0, r7
 800b57c:	f7ff ff12 	bl	800b3a4 <__i2b>
 800b580:	2300      	movs	r3, #0
 800b582:	f8c8 0008 	str.w	r0, [r8, #8]
 800b586:	4604      	mov	r4, r0
 800b588:	6003      	str	r3, [r0, #0]
 800b58a:	f04f 0900 	mov.w	r9, #0
 800b58e:	07eb      	lsls	r3, r5, #31
 800b590:	d50a      	bpl.n	800b5a8 <__pow5mult+0x84>
 800b592:	4631      	mov	r1, r6
 800b594:	4622      	mov	r2, r4
 800b596:	4638      	mov	r0, r7
 800b598:	f7ff ff1a 	bl	800b3d0 <__multiply>
 800b59c:	4631      	mov	r1, r6
 800b59e:	4680      	mov	r8, r0
 800b5a0:	4638      	mov	r0, r7
 800b5a2:	f7ff fe01 	bl	800b1a8 <_Bfree>
 800b5a6:	4646      	mov	r6, r8
 800b5a8:	106d      	asrs	r5, r5, #1
 800b5aa:	d00b      	beq.n	800b5c4 <__pow5mult+0xa0>
 800b5ac:	6820      	ldr	r0, [r4, #0]
 800b5ae:	b938      	cbnz	r0, 800b5c0 <__pow5mult+0x9c>
 800b5b0:	4622      	mov	r2, r4
 800b5b2:	4621      	mov	r1, r4
 800b5b4:	4638      	mov	r0, r7
 800b5b6:	f7ff ff0b 	bl	800b3d0 <__multiply>
 800b5ba:	6020      	str	r0, [r4, #0]
 800b5bc:	f8c0 9000 	str.w	r9, [r0]
 800b5c0:	4604      	mov	r4, r0
 800b5c2:	e7e4      	b.n	800b58e <__pow5mult+0x6a>
 800b5c4:	4630      	mov	r0, r6
 800b5c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5ca:	bf00      	nop
 800b5cc:	0800c874 	.word	0x0800c874
 800b5d0:	0800c68d 	.word	0x0800c68d
 800b5d4:	0800c818 	.word	0x0800c818

0800b5d8 <__lshift>:
 800b5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5dc:	460c      	mov	r4, r1
 800b5de:	6849      	ldr	r1, [r1, #4]
 800b5e0:	6923      	ldr	r3, [r4, #16]
 800b5e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b5e6:	68a3      	ldr	r3, [r4, #8]
 800b5e8:	4607      	mov	r7, r0
 800b5ea:	4691      	mov	r9, r2
 800b5ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b5f0:	f108 0601 	add.w	r6, r8, #1
 800b5f4:	42b3      	cmp	r3, r6
 800b5f6:	db0b      	blt.n	800b610 <__lshift+0x38>
 800b5f8:	4638      	mov	r0, r7
 800b5fa:	f7ff fd95 	bl	800b128 <_Balloc>
 800b5fe:	4605      	mov	r5, r0
 800b600:	b948      	cbnz	r0, 800b616 <__lshift+0x3e>
 800b602:	4602      	mov	r2, r0
 800b604:	4b28      	ldr	r3, [pc, #160]	@ (800b6a8 <__lshift+0xd0>)
 800b606:	4829      	ldr	r0, [pc, #164]	@ (800b6ac <__lshift+0xd4>)
 800b608:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b60c:	f7fe fad4 	bl	8009bb8 <__assert_func>
 800b610:	3101      	adds	r1, #1
 800b612:	005b      	lsls	r3, r3, #1
 800b614:	e7ee      	b.n	800b5f4 <__lshift+0x1c>
 800b616:	2300      	movs	r3, #0
 800b618:	f100 0114 	add.w	r1, r0, #20
 800b61c:	f100 0210 	add.w	r2, r0, #16
 800b620:	4618      	mov	r0, r3
 800b622:	4553      	cmp	r3, sl
 800b624:	db33      	blt.n	800b68e <__lshift+0xb6>
 800b626:	6920      	ldr	r0, [r4, #16]
 800b628:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b62c:	f104 0314 	add.w	r3, r4, #20
 800b630:	f019 091f 	ands.w	r9, r9, #31
 800b634:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b638:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b63c:	d02b      	beq.n	800b696 <__lshift+0xbe>
 800b63e:	f1c9 0e20 	rsb	lr, r9, #32
 800b642:	468a      	mov	sl, r1
 800b644:	2200      	movs	r2, #0
 800b646:	6818      	ldr	r0, [r3, #0]
 800b648:	fa00 f009 	lsl.w	r0, r0, r9
 800b64c:	4310      	orrs	r0, r2
 800b64e:	f84a 0b04 	str.w	r0, [sl], #4
 800b652:	f853 2b04 	ldr.w	r2, [r3], #4
 800b656:	459c      	cmp	ip, r3
 800b658:	fa22 f20e 	lsr.w	r2, r2, lr
 800b65c:	d8f3      	bhi.n	800b646 <__lshift+0x6e>
 800b65e:	ebac 0304 	sub.w	r3, ip, r4
 800b662:	3b15      	subs	r3, #21
 800b664:	f023 0303 	bic.w	r3, r3, #3
 800b668:	3304      	adds	r3, #4
 800b66a:	f104 0015 	add.w	r0, r4, #21
 800b66e:	4584      	cmp	ip, r0
 800b670:	bf38      	it	cc
 800b672:	2304      	movcc	r3, #4
 800b674:	50ca      	str	r2, [r1, r3]
 800b676:	b10a      	cbz	r2, 800b67c <__lshift+0xa4>
 800b678:	f108 0602 	add.w	r6, r8, #2
 800b67c:	3e01      	subs	r6, #1
 800b67e:	4638      	mov	r0, r7
 800b680:	612e      	str	r6, [r5, #16]
 800b682:	4621      	mov	r1, r4
 800b684:	f7ff fd90 	bl	800b1a8 <_Bfree>
 800b688:	4628      	mov	r0, r5
 800b68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b68e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b692:	3301      	adds	r3, #1
 800b694:	e7c5      	b.n	800b622 <__lshift+0x4a>
 800b696:	3904      	subs	r1, #4
 800b698:	f853 2b04 	ldr.w	r2, [r3], #4
 800b69c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6a0:	459c      	cmp	ip, r3
 800b6a2:	d8f9      	bhi.n	800b698 <__lshift+0xc0>
 800b6a4:	e7ea      	b.n	800b67c <__lshift+0xa4>
 800b6a6:	bf00      	nop
 800b6a8:	0800c7a7 	.word	0x0800c7a7
 800b6ac:	0800c818 	.word	0x0800c818

0800b6b0 <__mcmp>:
 800b6b0:	690a      	ldr	r2, [r1, #16]
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	6900      	ldr	r0, [r0, #16]
 800b6b6:	1a80      	subs	r0, r0, r2
 800b6b8:	b530      	push	{r4, r5, lr}
 800b6ba:	d10e      	bne.n	800b6da <__mcmp+0x2a>
 800b6bc:	3314      	adds	r3, #20
 800b6be:	3114      	adds	r1, #20
 800b6c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b6c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b6c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b6cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b6d0:	4295      	cmp	r5, r2
 800b6d2:	d003      	beq.n	800b6dc <__mcmp+0x2c>
 800b6d4:	d205      	bcs.n	800b6e2 <__mcmp+0x32>
 800b6d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b6da:	bd30      	pop	{r4, r5, pc}
 800b6dc:	42a3      	cmp	r3, r4
 800b6de:	d3f3      	bcc.n	800b6c8 <__mcmp+0x18>
 800b6e0:	e7fb      	b.n	800b6da <__mcmp+0x2a>
 800b6e2:	2001      	movs	r0, #1
 800b6e4:	e7f9      	b.n	800b6da <__mcmp+0x2a>
	...

0800b6e8 <__mdiff>:
 800b6e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ec:	4689      	mov	r9, r1
 800b6ee:	4606      	mov	r6, r0
 800b6f0:	4611      	mov	r1, r2
 800b6f2:	4648      	mov	r0, r9
 800b6f4:	4614      	mov	r4, r2
 800b6f6:	f7ff ffdb 	bl	800b6b0 <__mcmp>
 800b6fa:	1e05      	subs	r5, r0, #0
 800b6fc:	d112      	bne.n	800b724 <__mdiff+0x3c>
 800b6fe:	4629      	mov	r1, r5
 800b700:	4630      	mov	r0, r6
 800b702:	f7ff fd11 	bl	800b128 <_Balloc>
 800b706:	4602      	mov	r2, r0
 800b708:	b928      	cbnz	r0, 800b716 <__mdiff+0x2e>
 800b70a:	4b3f      	ldr	r3, [pc, #252]	@ (800b808 <__mdiff+0x120>)
 800b70c:	f240 2137 	movw	r1, #567	@ 0x237
 800b710:	483e      	ldr	r0, [pc, #248]	@ (800b80c <__mdiff+0x124>)
 800b712:	f7fe fa51 	bl	8009bb8 <__assert_func>
 800b716:	2301      	movs	r3, #1
 800b718:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b71c:	4610      	mov	r0, r2
 800b71e:	b003      	add	sp, #12
 800b720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b724:	bfbc      	itt	lt
 800b726:	464b      	movlt	r3, r9
 800b728:	46a1      	movlt	r9, r4
 800b72a:	4630      	mov	r0, r6
 800b72c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b730:	bfba      	itte	lt
 800b732:	461c      	movlt	r4, r3
 800b734:	2501      	movlt	r5, #1
 800b736:	2500      	movge	r5, #0
 800b738:	f7ff fcf6 	bl	800b128 <_Balloc>
 800b73c:	4602      	mov	r2, r0
 800b73e:	b918      	cbnz	r0, 800b748 <__mdiff+0x60>
 800b740:	4b31      	ldr	r3, [pc, #196]	@ (800b808 <__mdiff+0x120>)
 800b742:	f240 2145 	movw	r1, #581	@ 0x245
 800b746:	e7e3      	b.n	800b710 <__mdiff+0x28>
 800b748:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b74c:	6926      	ldr	r6, [r4, #16]
 800b74e:	60c5      	str	r5, [r0, #12]
 800b750:	f109 0310 	add.w	r3, r9, #16
 800b754:	f109 0514 	add.w	r5, r9, #20
 800b758:	f104 0e14 	add.w	lr, r4, #20
 800b75c:	f100 0b14 	add.w	fp, r0, #20
 800b760:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b764:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b768:	9301      	str	r3, [sp, #4]
 800b76a:	46d9      	mov	r9, fp
 800b76c:	f04f 0c00 	mov.w	ip, #0
 800b770:	9b01      	ldr	r3, [sp, #4]
 800b772:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b776:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b77a:	9301      	str	r3, [sp, #4]
 800b77c:	fa1f f38a 	uxth.w	r3, sl
 800b780:	4619      	mov	r1, r3
 800b782:	b283      	uxth	r3, r0
 800b784:	1acb      	subs	r3, r1, r3
 800b786:	0c00      	lsrs	r0, r0, #16
 800b788:	4463      	add	r3, ip
 800b78a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b78e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b792:	b29b      	uxth	r3, r3
 800b794:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b798:	4576      	cmp	r6, lr
 800b79a:	f849 3b04 	str.w	r3, [r9], #4
 800b79e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b7a2:	d8e5      	bhi.n	800b770 <__mdiff+0x88>
 800b7a4:	1b33      	subs	r3, r6, r4
 800b7a6:	3b15      	subs	r3, #21
 800b7a8:	f023 0303 	bic.w	r3, r3, #3
 800b7ac:	3415      	adds	r4, #21
 800b7ae:	3304      	adds	r3, #4
 800b7b0:	42a6      	cmp	r6, r4
 800b7b2:	bf38      	it	cc
 800b7b4:	2304      	movcc	r3, #4
 800b7b6:	441d      	add	r5, r3
 800b7b8:	445b      	add	r3, fp
 800b7ba:	461e      	mov	r6, r3
 800b7bc:	462c      	mov	r4, r5
 800b7be:	4544      	cmp	r4, r8
 800b7c0:	d30e      	bcc.n	800b7e0 <__mdiff+0xf8>
 800b7c2:	f108 0103 	add.w	r1, r8, #3
 800b7c6:	1b49      	subs	r1, r1, r5
 800b7c8:	f021 0103 	bic.w	r1, r1, #3
 800b7cc:	3d03      	subs	r5, #3
 800b7ce:	45a8      	cmp	r8, r5
 800b7d0:	bf38      	it	cc
 800b7d2:	2100      	movcc	r1, #0
 800b7d4:	440b      	add	r3, r1
 800b7d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b7da:	b191      	cbz	r1, 800b802 <__mdiff+0x11a>
 800b7dc:	6117      	str	r7, [r2, #16]
 800b7de:	e79d      	b.n	800b71c <__mdiff+0x34>
 800b7e0:	f854 1b04 	ldr.w	r1, [r4], #4
 800b7e4:	46e6      	mov	lr, ip
 800b7e6:	0c08      	lsrs	r0, r1, #16
 800b7e8:	fa1c fc81 	uxtah	ip, ip, r1
 800b7ec:	4471      	add	r1, lr
 800b7ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b7f2:	b289      	uxth	r1, r1
 800b7f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b7f8:	f846 1b04 	str.w	r1, [r6], #4
 800b7fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b800:	e7dd      	b.n	800b7be <__mdiff+0xd6>
 800b802:	3f01      	subs	r7, #1
 800b804:	e7e7      	b.n	800b7d6 <__mdiff+0xee>
 800b806:	bf00      	nop
 800b808:	0800c7a7 	.word	0x0800c7a7
 800b80c:	0800c818 	.word	0x0800c818

0800b810 <__ulp>:
 800b810:	b082      	sub	sp, #8
 800b812:	ed8d 0b00 	vstr	d0, [sp]
 800b816:	9a01      	ldr	r2, [sp, #4]
 800b818:	4b0f      	ldr	r3, [pc, #60]	@ (800b858 <__ulp+0x48>)
 800b81a:	4013      	ands	r3, r2
 800b81c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b820:	2b00      	cmp	r3, #0
 800b822:	dc08      	bgt.n	800b836 <__ulp+0x26>
 800b824:	425b      	negs	r3, r3
 800b826:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b82a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b82e:	da04      	bge.n	800b83a <__ulp+0x2a>
 800b830:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b834:	4113      	asrs	r3, r2
 800b836:	2200      	movs	r2, #0
 800b838:	e008      	b.n	800b84c <__ulp+0x3c>
 800b83a:	f1a2 0314 	sub.w	r3, r2, #20
 800b83e:	2b1e      	cmp	r3, #30
 800b840:	bfda      	itte	le
 800b842:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b846:	40da      	lsrle	r2, r3
 800b848:	2201      	movgt	r2, #1
 800b84a:	2300      	movs	r3, #0
 800b84c:	4619      	mov	r1, r3
 800b84e:	4610      	mov	r0, r2
 800b850:	ec41 0b10 	vmov	d0, r0, r1
 800b854:	b002      	add	sp, #8
 800b856:	4770      	bx	lr
 800b858:	7ff00000 	.word	0x7ff00000

0800b85c <__b2d>:
 800b85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b860:	6906      	ldr	r6, [r0, #16]
 800b862:	f100 0814 	add.w	r8, r0, #20
 800b866:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b86a:	1f37      	subs	r7, r6, #4
 800b86c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b870:	4610      	mov	r0, r2
 800b872:	f7ff fd4b 	bl	800b30c <__hi0bits>
 800b876:	f1c0 0320 	rsb	r3, r0, #32
 800b87a:	280a      	cmp	r0, #10
 800b87c:	600b      	str	r3, [r1, #0]
 800b87e:	491b      	ldr	r1, [pc, #108]	@ (800b8ec <__b2d+0x90>)
 800b880:	dc15      	bgt.n	800b8ae <__b2d+0x52>
 800b882:	f1c0 0c0b 	rsb	ip, r0, #11
 800b886:	fa22 f30c 	lsr.w	r3, r2, ip
 800b88a:	45b8      	cmp	r8, r7
 800b88c:	ea43 0501 	orr.w	r5, r3, r1
 800b890:	bf34      	ite	cc
 800b892:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b896:	2300      	movcs	r3, #0
 800b898:	3015      	adds	r0, #21
 800b89a:	fa02 f000 	lsl.w	r0, r2, r0
 800b89e:	fa23 f30c 	lsr.w	r3, r3, ip
 800b8a2:	4303      	orrs	r3, r0
 800b8a4:	461c      	mov	r4, r3
 800b8a6:	ec45 4b10 	vmov	d0, r4, r5
 800b8aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8ae:	45b8      	cmp	r8, r7
 800b8b0:	bf3a      	itte	cc
 800b8b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b8b6:	f1a6 0708 	subcc.w	r7, r6, #8
 800b8ba:	2300      	movcs	r3, #0
 800b8bc:	380b      	subs	r0, #11
 800b8be:	d012      	beq.n	800b8e6 <__b2d+0x8a>
 800b8c0:	f1c0 0120 	rsb	r1, r0, #32
 800b8c4:	fa23 f401 	lsr.w	r4, r3, r1
 800b8c8:	4082      	lsls	r2, r0
 800b8ca:	4322      	orrs	r2, r4
 800b8cc:	4547      	cmp	r7, r8
 800b8ce:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b8d2:	bf8c      	ite	hi
 800b8d4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b8d8:	2200      	movls	r2, #0
 800b8da:	4083      	lsls	r3, r0
 800b8dc:	40ca      	lsrs	r2, r1
 800b8de:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	e7de      	b.n	800b8a4 <__b2d+0x48>
 800b8e6:	ea42 0501 	orr.w	r5, r2, r1
 800b8ea:	e7db      	b.n	800b8a4 <__b2d+0x48>
 800b8ec:	3ff00000 	.word	0x3ff00000

0800b8f0 <__d2b>:
 800b8f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b8f4:	460f      	mov	r7, r1
 800b8f6:	2101      	movs	r1, #1
 800b8f8:	ec59 8b10 	vmov	r8, r9, d0
 800b8fc:	4616      	mov	r6, r2
 800b8fe:	f7ff fc13 	bl	800b128 <_Balloc>
 800b902:	4604      	mov	r4, r0
 800b904:	b930      	cbnz	r0, 800b914 <__d2b+0x24>
 800b906:	4602      	mov	r2, r0
 800b908:	4b23      	ldr	r3, [pc, #140]	@ (800b998 <__d2b+0xa8>)
 800b90a:	4824      	ldr	r0, [pc, #144]	@ (800b99c <__d2b+0xac>)
 800b90c:	f240 310f 	movw	r1, #783	@ 0x30f
 800b910:	f7fe f952 	bl	8009bb8 <__assert_func>
 800b914:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b918:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b91c:	b10d      	cbz	r5, 800b922 <__d2b+0x32>
 800b91e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b922:	9301      	str	r3, [sp, #4]
 800b924:	f1b8 0300 	subs.w	r3, r8, #0
 800b928:	d023      	beq.n	800b972 <__d2b+0x82>
 800b92a:	4668      	mov	r0, sp
 800b92c:	9300      	str	r3, [sp, #0]
 800b92e:	f7ff fd0c 	bl	800b34a <__lo0bits>
 800b932:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b936:	b1d0      	cbz	r0, 800b96e <__d2b+0x7e>
 800b938:	f1c0 0320 	rsb	r3, r0, #32
 800b93c:	fa02 f303 	lsl.w	r3, r2, r3
 800b940:	430b      	orrs	r3, r1
 800b942:	40c2      	lsrs	r2, r0
 800b944:	6163      	str	r3, [r4, #20]
 800b946:	9201      	str	r2, [sp, #4]
 800b948:	9b01      	ldr	r3, [sp, #4]
 800b94a:	61a3      	str	r3, [r4, #24]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	bf0c      	ite	eq
 800b950:	2201      	moveq	r2, #1
 800b952:	2202      	movne	r2, #2
 800b954:	6122      	str	r2, [r4, #16]
 800b956:	b1a5      	cbz	r5, 800b982 <__d2b+0x92>
 800b958:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b95c:	4405      	add	r5, r0
 800b95e:	603d      	str	r5, [r7, #0]
 800b960:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b964:	6030      	str	r0, [r6, #0]
 800b966:	4620      	mov	r0, r4
 800b968:	b003      	add	sp, #12
 800b96a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b96e:	6161      	str	r1, [r4, #20]
 800b970:	e7ea      	b.n	800b948 <__d2b+0x58>
 800b972:	a801      	add	r0, sp, #4
 800b974:	f7ff fce9 	bl	800b34a <__lo0bits>
 800b978:	9b01      	ldr	r3, [sp, #4]
 800b97a:	6163      	str	r3, [r4, #20]
 800b97c:	3020      	adds	r0, #32
 800b97e:	2201      	movs	r2, #1
 800b980:	e7e8      	b.n	800b954 <__d2b+0x64>
 800b982:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b986:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b98a:	6038      	str	r0, [r7, #0]
 800b98c:	6918      	ldr	r0, [r3, #16]
 800b98e:	f7ff fcbd 	bl	800b30c <__hi0bits>
 800b992:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b996:	e7e5      	b.n	800b964 <__d2b+0x74>
 800b998:	0800c7a7 	.word	0x0800c7a7
 800b99c:	0800c818 	.word	0x0800c818

0800b9a0 <__ratio>:
 800b9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a4:	b085      	sub	sp, #20
 800b9a6:	e9cd 1000 	strd	r1, r0, [sp]
 800b9aa:	a902      	add	r1, sp, #8
 800b9ac:	f7ff ff56 	bl	800b85c <__b2d>
 800b9b0:	9800      	ldr	r0, [sp, #0]
 800b9b2:	a903      	add	r1, sp, #12
 800b9b4:	ec55 4b10 	vmov	r4, r5, d0
 800b9b8:	f7ff ff50 	bl	800b85c <__b2d>
 800b9bc:	9b01      	ldr	r3, [sp, #4]
 800b9be:	6919      	ldr	r1, [r3, #16]
 800b9c0:	9b00      	ldr	r3, [sp, #0]
 800b9c2:	691b      	ldr	r3, [r3, #16]
 800b9c4:	1ac9      	subs	r1, r1, r3
 800b9c6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b9ca:	1a9b      	subs	r3, r3, r2
 800b9cc:	ec5b ab10 	vmov	sl, fp, d0
 800b9d0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	bfce      	itee	gt
 800b9d8:	462a      	movgt	r2, r5
 800b9da:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b9de:	465a      	movle	r2, fp
 800b9e0:	462f      	mov	r7, r5
 800b9e2:	46d9      	mov	r9, fp
 800b9e4:	bfcc      	ite	gt
 800b9e6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b9ea:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b9ee:	464b      	mov	r3, r9
 800b9f0:	4652      	mov	r2, sl
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	4639      	mov	r1, r7
 800b9f6:	f7f4 ff49 	bl	800088c <__aeabi_ddiv>
 800b9fa:	ec41 0b10 	vmov	d0, r0, r1
 800b9fe:	b005      	add	sp, #20
 800ba00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba04 <__copybits>:
 800ba04:	3901      	subs	r1, #1
 800ba06:	b570      	push	{r4, r5, r6, lr}
 800ba08:	1149      	asrs	r1, r1, #5
 800ba0a:	6914      	ldr	r4, [r2, #16]
 800ba0c:	3101      	adds	r1, #1
 800ba0e:	f102 0314 	add.w	r3, r2, #20
 800ba12:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ba16:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ba1a:	1f05      	subs	r5, r0, #4
 800ba1c:	42a3      	cmp	r3, r4
 800ba1e:	d30c      	bcc.n	800ba3a <__copybits+0x36>
 800ba20:	1aa3      	subs	r3, r4, r2
 800ba22:	3b11      	subs	r3, #17
 800ba24:	f023 0303 	bic.w	r3, r3, #3
 800ba28:	3211      	adds	r2, #17
 800ba2a:	42a2      	cmp	r2, r4
 800ba2c:	bf88      	it	hi
 800ba2e:	2300      	movhi	r3, #0
 800ba30:	4418      	add	r0, r3
 800ba32:	2300      	movs	r3, #0
 800ba34:	4288      	cmp	r0, r1
 800ba36:	d305      	bcc.n	800ba44 <__copybits+0x40>
 800ba38:	bd70      	pop	{r4, r5, r6, pc}
 800ba3a:	f853 6b04 	ldr.w	r6, [r3], #4
 800ba3e:	f845 6f04 	str.w	r6, [r5, #4]!
 800ba42:	e7eb      	b.n	800ba1c <__copybits+0x18>
 800ba44:	f840 3b04 	str.w	r3, [r0], #4
 800ba48:	e7f4      	b.n	800ba34 <__copybits+0x30>

0800ba4a <__any_on>:
 800ba4a:	f100 0214 	add.w	r2, r0, #20
 800ba4e:	6900      	ldr	r0, [r0, #16]
 800ba50:	114b      	asrs	r3, r1, #5
 800ba52:	4298      	cmp	r0, r3
 800ba54:	b510      	push	{r4, lr}
 800ba56:	db11      	blt.n	800ba7c <__any_on+0x32>
 800ba58:	dd0a      	ble.n	800ba70 <__any_on+0x26>
 800ba5a:	f011 011f 	ands.w	r1, r1, #31
 800ba5e:	d007      	beq.n	800ba70 <__any_on+0x26>
 800ba60:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ba64:	fa24 f001 	lsr.w	r0, r4, r1
 800ba68:	fa00 f101 	lsl.w	r1, r0, r1
 800ba6c:	428c      	cmp	r4, r1
 800ba6e:	d10b      	bne.n	800ba88 <__any_on+0x3e>
 800ba70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d803      	bhi.n	800ba80 <__any_on+0x36>
 800ba78:	2000      	movs	r0, #0
 800ba7a:	bd10      	pop	{r4, pc}
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	e7f7      	b.n	800ba70 <__any_on+0x26>
 800ba80:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba84:	2900      	cmp	r1, #0
 800ba86:	d0f5      	beq.n	800ba74 <__any_on+0x2a>
 800ba88:	2001      	movs	r0, #1
 800ba8a:	e7f6      	b.n	800ba7a <__any_on+0x30>

0800ba8c <__ascii_wctomb>:
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	4608      	mov	r0, r1
 800ba90:	b141      	cbz	r1, 800baa4 <__ascii_wctomb+0x18>
 800ba92:	2aff      	cmp	r2, #255	@ 0xff
 800ba94:	d904      	bls.n	800baa0 <__ascii_wctomb+0x14>
 800ba96:	228a      	movs	r2, #138	@ 0x8a
 800ba98:	601a      	str	r2, [r3, #0]
 800ba9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba9e:	4770      	bx	lr
 800baa0:	700a      	strb	r2, [r1, #0]
 800baa2:	2001      	movs	r0, #1
 800baa4:	4770      	bx	lr
	...

0800baa8 <__sflush_r>:
 800baa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800baac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bab0:	0716      	lsls	r6, r2, #28
 800bab2:	4605      	mov	r5, r0
 800bab4:	460c      	mov	r4, r1
 800bab6:	d454      	bmi.n	800bb62 <__sflush_r+0xba>
 800bab8:	684b      	ldr	r3, [r1, #4]
 800baba:	2b00      	cmp	r3, #0
 800babc:	dc02      	bgt.n	800bac4 <__sflush_r+0x1c>
 800babe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	dd48      	ble.n	800bb56 <__sflush_r+0xae>
 800bac4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bac6:	2e00      	cmp	r6, #0
 800bac8:	d045      	beq.n	800bb56 <__sflush_r+0xae>
 800baca:	2300      	movs	r3, #0
 800bacc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bad0:	682f      	ldr	r7, [r5, #0]
 800bad2:	6a21      	ldr	r1, [r4, #32]
 800bad4:	602b      	str	r3, [r5, #0]
 800bad6:	d030      	beq.n	800bb3a <__sflush_r+0x92>
 800bad8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bada:	89a3      	ldrh	r3, [r4, #12]
 800badc:	0759      	lsls	r1, r3, #29
 800bade:	d505      	bpl.n	800baec <__sflush_r+0x44>
 800bae0:	6863      	ldr	r3, [r4, #4]
 800bae2:	1ad2      	subs	r2, r2, r3
 800bae4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bae6:	b10b      	cbz	r3, 800baec <__sflush_r+0x44>
 800bae8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800baea:	1ad2      	subs	r2, r2, r3
 800baec:	2300      	movs	r3, #0
 800baee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800baf0:	6a21      	ldr	r1, [r4, #32]
 800baf2:	4628      	mov	r0, r5
 800baf4:	47b0      	blx	r6
 800baf6:	1c43      	adds	r3, r0, #1
 800baf8:	89a3      	ldrh	r3, [r4, #12]
 800bafa:	d106      	bne.n	800bb0a <__sflush_r+0x62>
 800bafc:	6829      	ldr	r1, [r5, #0]
 800bafe:	291d      	cmp	r1, #29
 800bb00:	d82b      	bhi.n	800bb5a <__sflush_r+0xb2>
 800bb02:	4a2a      	ldr	r2, [pc, #168]	@ (800bbac <__sflush_r+0x104>)
 800bb04:	410a      	asrs	r2, r1
 800bb06:	07d6      	lsls	r6, r2, #31
 800bb08:	d427      	bmi.n	800bb5a <__sflush_r+0xb2>
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	6062      	str	r2, [r4, #4]
 800bb0e:	04d9      	lsls	r1, r3, #19
 800bb10:	6922      	ldr	r2, [r4, #16]
 800bb12:	6022      	str	r2, [r4, #0]
 800bb14:	d504      	bpl.n	800bb20 <__sflush_r+0x78>
 800bb16:	1c42      	adds	r2, r0, #1
 800bb18:	d101      	bne.n	800bb1e <__sflush_r+0x76>
 800bb1a:	682b      	ldr	r3, [r5, #0]
 800bb1c:	b903      	cbnz	r3, 800bb20 <__sflush_r+0x78>
 800bb1e:	6560      	str	r0, [r4, #84]	@ 0x54
 800bb20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb22:	602f      	str	r7, [r5, #0]
 800bb24:	b1b9      	cbz	r1, 800bb56 <__sflush_r+0xae>
 800bb26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb2a:	4299      	cmp	r1, r3
 800bb2c:	d002      	beq.n	800bb34 <__sflush_r+0x8c>
 800bb2e:	4628      	mov	r0, r5
 800bb30:	f7fe feae 	bl	800a890 <_free_r>
 800bb34:	2300      	movs	r3, #0
 800bb36:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb38:	e00d      	b.n	800bb56 <__sflush_r+0xae>
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	4628      	mov	r0, r5
 800bb3e:	47b0      	blx	r6
 800bb40:	4602      	mov	r2, r0
 800bb42:	1c50      	adds	r0, r2, #1
 800bb44:	d1c9      	bne.n	800bada <__sflush_r+0x32>
 800bb46:	682b      	ldr	r3, [r5, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d0c6      	beq.n	800bada <__sflush_r+0x32>
 800bb4c:	2b1d      	cmp	r3, #29
 800bb4e:	d001      	beq.n	800bb54 <__sflush_r+0xac>
 800bb50:	2b16      	cmp	r3, #22
 800bb52:	d11e      	bne.n	800bb92 <__sflush_r+0xea>
 800bb54:	602f      	str	r7, [r5, #0]
 800bb56:	2000      	movs	r0, #0
 800bb58:	e022      	b.n	800bba0 <__sflush_r+0xf8>
 800bb5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb5e:	b21b      	sxth	r3, r3
 800bb60:	e01b      	b.n	800bb9a <__sflush_r+0xf2>
 800bb62:	690f      	ldr	r7, [r1, #16]
 800bb64:	2f00      	cmp	r7, #0
 800bb66:	d0f6      	beq.n	800bb56 <__sflush_r+0xae>
 800bb68:	0793      	lsls	r3, r2, #30
 800bb6a:	680e      	ldr	r6, [r1, #0]
 800bb6c:	bf08      	it	eq
 800bb6e:	694b      	ldreq	r3, [r1, #20]
 800bb70:	600f      	str	r7, [r1, #0]
 800bb72:	bf18      	it	ne
 800bb74:	2300      	movne	r3, #0
 800bb76:	eba6 0807 	sub.w	r8, r6, r7
 800bb7a:	608b      	str	r3, [r1, #8]
 800bb7c:	f1b8 0f00 	cmp.w	r8, #0
 800bb80:	dde9      	ble.n	800bb56 <__sflush_r+0xae>
 800bb82:	6a21      	ldr	r1, [r4, #32]
 800bb84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bb86:	4643      	mov	r3, r8
 800bb88:	463a      	mov	r2, r7
 800bb8a:	4628      	mov	r0, r5
 800bb8c:	47b0      	blx	r6
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	dc08      	bgt.n	800bba4 <__sflush_r+0xfc>
 800bb92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb9a:	81a3      	strh	r3, [r4, #12]
 800bb9c:	f04f 30ff 	mov.w	r0, #4294967295
 800bba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bba4:	4407      	add	r7, r0
 800bba6:	eba8 0800 	sub.w	r8, r8, r0
 800bbaa:	e7e7      	b.n	800bb7c <__sflush_r+0xd4>
 800bbac:	dfbffffe 	.word	0xdfbffffe

0800bbb0 <_fflush_r>:
 800bbb0:	b538      	push	{r3, r4, r5, lr}
 800bbb2:	690b      	ldr	r3, [r1, #16]
 800bbb4:	4605      	mov	r5, r0
 800bbb6:	460c      	mov	r4, r1
 800bbb8:	b913      	cbnz	r3, 800bbc0 <_fflush_r+0x10>
 800bbba:	2500      	movs	r5, #0
 800bbbc:	4628      	mov	r0, r5
 800bbbe:	bd38      	pop	{r3, r4, r5, pc}
 800bbc0:	b118      	cbz	r0, 800bbca <_fflush_r+0x1a>
 800bbc2:	6a03      	ldr	r3, [r0, #32]
 800bbc4:	b90b      	cbnz	r3, 800bbca <_fflush_r+0x1a>
 800bbc6:	f7fd fe77 	bl	80098b8 <__sinit>
 800bbca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d0f3      	beq.n	800bbba <_fflush_r+0xa>
 800bbd2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bbd4:	07d0      	lsls	r0, r2, #31
 800bbd6:	d404      	bmi.n	800bbe2 <_fflush_r+0x32>
 800bbd8:	0599      	lsls	r1, r3, #22
 800bbda:	d402      	bmi.n	800bbe2 <_fflush_r+0x32>
 800bbdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbde:	f7fd ffd0 	bl	8009b82 <__retarget_lock_acquire_recursive>
 800bbe2:	4628      	mov	r0, r5
 800bbe4:	4621      	mov	r1, r4
 800bbe6:	f7ff ff5f 	bl	800baa8 <__sflush_r>
 800bbea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bbec:	07da      	lsls	r2, r3, #31
 800bbee:	4605      	mov	r5, r0
 800bbf0:	d4e4      	bmi.n	800bbbc <_fflush_r+0xc>
 800bbf2:	89a3      	ldrh	r3, [r4, #12]
 800bbf4:	059b      	lsls	r3, r3, #22
 800bbf6:	d4e1      	bmi.n	800bbbc <_fflush_r+0xc>
 800bbf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbfa:	f7fd ffc3 	bl	8009b84 <__retarget_lock_release_recursive>
 800bbfe:	e7dd      	b.n	800bbbc <_fflush_r+0xc>

0800bc00 <fiprintf>:
 800bc00:	b40e      	push	{r1, r2, r3}
 800bc02:	b503      	push	{r0, r1, lr}
 800bc04:	4601      	mov	r1, r0
 800bc06:	ab03      	add	r3, sp, #12
 800bc08:	4805      	ldr	r0, [pc, #20]	@ (800bc20 <fiprintf+0x20>)
 800bc0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc0e:	6800      	ldr	r0, [r0, #0]
 800bc10:	9301      	str	r3, [sp, #4]
 800bc12:	f000 f85b 	bl	800bccc <_vfiprintf_r>
 800bc16:	b002      	add	sp, #8
 800bc18:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc1c:	b003      	add	sp, #12
 800bc1e:	4770      	bx	lr
 800bc20:	200001c4 	.word	0x200001c4

0800bc24 <_sbrk_r>:
 800bc24:	b538      	push	{r3, r4, r5, lr}
 800bc26:	4d06      	ldr	r5, [pc, #24]	@ (800bc40 <_sbrk_r+0x1c>)
 800bc28:	2300      	movs	r3, #0
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	4608      	mov	r0, r1
 800bc2e:	602b      	str	r3, [r5, #0]
 800bc30:	f7f7 fd04 	bl	800363c <_sbrk>
 800bc34:	1c43      	adds	r3, r0, #1
 800bc36:	d102      	bne.n	800bc3e <_sbrk_r+0x1a>
 800bc38:	682b      	ldr	r3, [r5, #0]
 800bc3a:	b103      	cbz	r3, 800bc3e <_sbrk_r+0x1a>
 800bc3c:	6023      	str	r3, [r4, #0]
 800bc3e:	bd38      	pop	{r3, r4, r5, pc}
 800bc40:	20000e5c 	.word	0x20000e5c

0800bc44 <abort>:
 800bc44:	b508      	push	{r3, lr}
 800bc46:	2006      	movs	r0, #6
 800bc48:	f000 fa14 	bl	800c074 <raise>
 800bc4c:	2001      	movs	r0, #1
 800bc4e:	f7f7 fc7d 	bl	800354c <_exit>

0800bc52 <_calloc_r>:
 800bc52:	b570      	push	{r4, r5, r6, lr}
 800bc54:	fba1 5402 	umull	r5, r4, r1, r2
 800bc58:	b93c      	cbnz	r4, 800bc6a <_calloc_r+0x18>
 800bc5a:	4629      	mov	r1, r5
 800bc5c:	f7ff f9c6 	bl	800afec <_malloc_r>
 800bc60:	4606      	mov	r6, r0
 800bc62:	b928      	cbnz	r0, 800bc70 <_calloc_r+0x1e>
 800bc64:	2600      	movs	r6, #0
 800bc66:	4630      	mov	r0, r6
 800bc68:	bd70      	pop	{r4, r5, r6, pc}
 800bc6a:	220c      	movs	r2, #12
 800bc6c:	6002      	str	r2, [r0, #0]
 800bc6e:	e7f9      	b.n	800bc64 <_calloc_r+0x12>
 800bc70:	462a      	mov	r2, r5
 800bc72:	4621      	mov	r1, r4
 800bc74:	f7fd fe99 	bl	80099aa <memset>
 800bc78:	e7f5      	b.n	800bc66 <_calloc_r+0x14>

0800bc7a <__sfputc_r>:
 800bc7a:	6893      	ldr	r3, [r2, #8]
 800bc7c:	3b01      	subs	r3, #1
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	b410      	push	{r4}
 800bc82:	6093      	str	r3, [r2, #8]
 800bc84:	da08      	bge.n	800bc98 <__sfputc_r+0x1e>
 800bc86:	6994      	ldr	r4, [r2, #24]
 800bc88:	42a3      	cmp	r3, r4
 800bc8a:	db01      	blt.n	800bc90 <__sfputc_r+0x16>
 800bc8c:	290a      	cmp	r1, #10
 800bc8e:	d103      	bne.n	800bc98 <__sfputc_r+0x1e>
 800bc90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc94:	f000 b932 	b.w	800befc <__swbuf_r>
 800bc98:	6813      	ldr	r3, [r2, #0]
 800bc9a:	1c58      	adds	r0, r3, #1
 800bc9c:	6010      	str	r0, [r2, #0]
 800bc9e:	7019      	strb	r1, [r3, #0]
 800bca0:	4608      	mov	r0, r1
 800bca2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bca6:	4770      	bx	lr

0800bca8 <__sfputs_r>:
 800bca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcaa:	4606      	mov	r6, r0
 800bcac:	460f      	mov	r7, r1
 800bcae:	4614      	mov	r4, r2
 800bcb0:	18d5      	adds	r5, r2, r3
 800bcb2:	42ac      	cmp	r4, r5
 800bcb4:	d101      	bne.n	800bcba <__sfputs_r+0x12>
 800bcb6:	2000      	movs	r0, #0
 800bcb8:	e007      	b.n	800bcca <__sfputs_r+0x22>
 800bcba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcbe:	463a      	mov	r2, r7
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	f7ff ffda 	bl	800bc7a <__sfputc_r>
 800bcc6:	1c43      	adds	r3, r0, #1
 800bcc8:	d1f3      	bne.n	800bcb2 <__sfputs_r+0xa>
 800bcca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bccc <_vfiprintf_r>:
 800bccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd0:	460d      	mov	r5, r1
 800bcd2:	b09d      	sub	sp, #116	@ 0x74
 800bcd4:	4614      	mov	r4, r2
 800bcd6:	4698      	mov	r8, r3
 800bcd8:	4606      	mov	r6, r0
 800bcda:	b118      	cbz	r0, 800bce4 <_vfiprintf_r+0x18>
 800bcdc:	6a03      	ldr	r3, [r0, #32]
 800bcde:	b90b      	cbnz	r3, 800bce4 <_vfiprintf_r+0x18>
 800bce0:	f7fd fdea 	bl	80098b8 <__sinit>
 800bce4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bce6:	07d9      	lsls	r1, r3, #31
 800bce8:	d405      	bmi.n	800bcf6 <_vfiprintf_r+0x2a>
 800bcea:	89ab      	ldrh	r3, [r5, #12]
 800bcec:	059a      	lsls	r2, r3, #22
 800bcee:	d402      	bmi.n	800bcf6 <_vfiprintf_r+0x2a>
 800bcf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcf2:	f7fd ff46 	bl	8009b82 <__retarget_lock_acquire_recursive>
 800bcf6:	89ab      	ldrh	r3, [r5, #12]
 800bcf8:	071b      	lsls	r3, r3, #28
 800bcfa:	d501      	bpl.n	800bd00 <_vfiprintf_r+0x34>
 800bcfc:	692b      	ldr	r3, [r5, #16]
 800bcfe:	b99b      	cbnz	r3, 800bd28 <_vfiprintf_r+0x5c>
 800bd00:	4629      	mov	r1, r5
 800bd02:	4630      	mov	r0, r6
 800bd04:	f000 f938 	bl	800bf78 <__swsetup_r>
 800bd08:	b170      	cbz	r0, 800bd28 <_vfiprintf_r+0x5c>
 800bd0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd0c:	07dc      	lsls	r4, r3, #31
 800bd0e:	d504      	bpl.n	800bd1a <_vfiprintf_r+0x4e>
 800bd10:	f04f 30ff 	mov.w	r0, #4294967295
 800bd14:	b01d      	add	sp, #116	@ 0x74
 800bd16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd1a:	89ab      	ldrh	r3, [r5, #12]
 800bd1c:	0598      	lsls	r0, r3, #22
 800bd1e:	d4f7      	bmi.n	800bd10 <_vfiprintf_r+0x44>
 800bd20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd22:	f7fd ff2f 	bl	8009b84 <__retarget_lock_release_recursive>
 800bd26:	e7f3      	b.n	800bd10 <_vfiprintf_r+0x44>
 800bd28:	2300      	movs	r3, #0
 800bd2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd2c:	2320      	movs	r3, #32
 800bd2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd32:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd36:	2330      	movs	r3, #48	@ 0x30
 800bd38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bee8 <_vfiprintf_r+0x21c>
 800bd3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd40:	f04f 0901 	mov.w	r9, #1
 800bd44:	4623      	mov	r3, r4
 800bd46:	469a      	mov	sl, r3
 800bd48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd4c:	b10a      	cbz	r2, 800bd52 <_vfiprintf_r+0x86>
 800bd4e:	2a25      	cmp	r2, #37	@ 0x25
 800bd50:	d1f9      	bne.n	800bd46 <_vfiprintf_r+0x7a>
 800bd52:	ebba 0b04 	subs.w	fp, sl, r4
 800bd56:	d00b      	beq.n	800bd70 <_vfiprintf_r+0xa4>
 800bd58:	465b      	mov	r3, fp
 800bd5a:	4622      	mov	r2, r4
 800bd5c:	4629      	mov	r1, r5
 800bd5e:	4630      	mov	r0, r6
 800bd60:	f7ff ffa2 	bl	800bca8 <__sfputs_r>
 800bd64:	3001      	adds	r0, #1
 800bd66:	f000 80a7 	beq.w	800beb8 <_vfiprintf_r+0x1ec>
 800bd6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd6c:	445a      	add	r2, fp
 800bd6e:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd70:	f89a 3000 	ldrb.w	r3, [sl]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	f000 809f 	beq.w	800beb8 <_vfiprintf_r+0x1ec>
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd84:	f10a 0a01 	add.w	sl, sl, #1
 800bd88:	9304      	str	r3, [sp, #16]
 800bd8a:	9307      	str	r3, [sp, #28]
 800bd8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd90:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd92:	4654      	mov	r4, sl
 800bd94:	2205      	movs	r2, #5
 800bd96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd9a:	4853      	ldr	r0, [pc, #332]	@ (800bee8 <_vfiprintf_r+0x21c>)
 800bd9c:	f7f4 fa38 	bl	8000210 <memchr>
 800bda0:	9a04      	ldr	r2, [sp, #16]
 800bda2:	b9d8      	cbnz	r0, 800bddc <_vfiprintf_r+0x110>
 800bda4:	06d1      	lsls	r1, r2, #27
 800bda6:	bf44      	itt	mi
 800bda8:	2320      	movmi	r3, #32
 800bdaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdae:	0713      	lsls	r3, r2, #28
 800bdb0:	bf44      	itt	mi
 800bdb2:	232b      	movmi	r3, #43	@ 0x2b
 800bdb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdb8:	f89a 3000 	ldrb.w	r3, [sl]
 800bdbc:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdbe:	d015      	beq.n	800bdec <_vfiprintf_r+0x120>
 800bdc0:	9a07      	ldr	r2, [sp, #28]
 800bdc2:	4654      	mov	r4, sl
 800bdc4:	2000      	movs	r0, #0
 800bdc6:	f04f 0c0a 	mov.w	ip, #10
 800bdca:	4621      	mov	r1, r4
 800bdcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdd0:	3b30      	subs	r3, #48	@ 0x30
 800bdd2:	2b09      	cmp	r3, #9
 800bdd4:	d94b      	bls.n	800be6e <_vfiprintf_r+0x1a2>
 800bdd6:	b1b0      	cbz	r0, 800be06 <_vfiprintf_r+0x13a>
 800bdd8:	9207      	str	r2, [sp, #28]
 800bdda:	e014      	b.n	800be06 <_vfiprintf_r+0x13a>
 800bddc:	eba0 0308 	sub.w	r3, r0, r8
 800bde0:	fa09 f303 	lsl.w	r3, r9, r3
 800bde4:	4313      	orrs	r3, r2
 800bde6:	9304      	str	r3, [sp, #16]
 800bde8:	46a2      	mov	sl, r4
 800bdea:	e7d2      	b.n	800bd92 <_vfiprintf_r+0xc6>
 800bdec:	9b03      	ldr	r3, [sp, #12]
 800bdee:	1d19      	adds	r1, r3, #4
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	9103      	str	r1, [sp, #12]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	bfbb      	ittet	lt
 800bdf8:	425b      	neglt	r3, r3
 800bdfa:	f042 0202 	orrlt.w	r2, r2, #2
 800bdfe:	9307      	strge	r3, [sp, #28]
 800be00:	9307      	strlt	r3, [sp, #28]
 800be02:	bfb8      	it	lt
 800be04:	9204      	strlt	r2, [sp, #16]
 800be06:	7823      	ldrb	r3, [r4, #0]
 800be08:	2b2e      	cmp	r3, #46	@ 0x2e
 800be0a:	d10a      	bne.n	800be22 <_vfiprintf_r+0x156>
 800be0c:	7863      	ldrb	r3, [r4, #1]
 800be0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800be10:	d132      	bne.n	800be78 <_vfiprintf_r+0x1ac>
 800be12:	9b03      	ldr	r3, [sp, #12]
 800be14:	1d1a      	adds	r2, r3, #4
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	9203      	str	r2, [sp, #12]
 800be1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be1e:	3402      	adds	r4, #2
 800be20:	9305      	str	r3, [sp, #20]
 800be22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bef8 <_vfiprintf_r+0x22c>
 800be26:	7821      	ldrb	r1, [r4, #0]
 800be28:	2203      	movs	r2, #3
 800be2a:	4650      	mov	r0, sl
 800be2c:	f7f4 f9f0 	bl	8000210 <memchr>
 800be30:	b138      	cbz	r0, 800be42 <_vfiprintf_r+0x176>
 800be32:	9b04      	ldr	r3, [sp, #16]
 800be34:	eba0 000a 	sub.w	r0, r0, sl
 800be38:	2240      	movs	r2, #64	@ 0x40
 800be3a:	4082      	lsls	r2, r0
 800be3c:	4313      	orrs	r3, r2
 800be3e:	3401      	adds	r4, #1
 800be40:	9304      	str	r3, [sp, #16]
 800be42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be46:	4829      	ldr	r0, [pc, #164]	@ (800beec <_vfiprintf_r+0x220>)
 800be48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be4c:	2206      	movs	r2, #6
 800be4e:	f7f4 f9df 	bl	8000210 <memchr>
 800be52:	2800      	cmp	r0, #0
 800be54:	d03f      	beq.n	800bed6 <_vfiprintf_r+0x20a>
 800be56:	4b26      	ldr	r3, [pc, #152]	@ (800bef0 <_vfiprintf_r+0x224>)
 800be58:	bb1b      	cbnz	r3, 800bea2 <_vfiprintf_r+0x1d6>
 800be5a:	9b03      	ldr	r3, [sp, #12]
 800be5c:	3307      	adds	r3, #7
 800be5e:	f023 0307 	bic.w	r3, r3, #7
 800be62:	3308      	adds	r3, #8
 800be64:	9303      	str	r3, [sp, #12]
 800be66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be68:	443b      	add	r3, r7
 800be6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800be6c:	e76a      	b.n	800bd44 <_vfiprintf_r+0x78>
 800be6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800be72:	460c      	mov	r4, r1
 800be74:	2001      	movs	r0, #1
 800be76:	e7a8      	b.n	800bdca <_vfiprintf_r+0xfe>
 800be78:	2300      	movs	r3, #0
 800be7a:	3401      	adds	r4, #1
 800be7c:	9305      	str	r3, [sp, #20]
 800be7e:	4619      	mov	r1, r3
 800be80:	f04f 0c0a 	mov.w	ip, #10
 800be84:	4620      	mov	r0, r4
 800be86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be8a:	3a30      	subs	r2, #48	@ 0x30
 800be8c:	2a09      	cmp	r2, #9
 800be8e:	d903      	bls.n	800be98 <_vfiprintf_r+0x1cc>
 800be90:	2b00      	cmp	r3, #0
 800be92:	d0c6      	beq.n	800be22 <_vfiprintf_r+0x156>
 800be94:	9105      	str	r1, [sp, #20]
 800be96:	e7c4      	b.n	800be22 <_vfiprintf_r+0x156>
 800be98:	fb0c 2101 	mla	r1, ip, r1, r2
 800be9c:	4604      	mov	r4, r0
 800be9e:	2301      	movs	r3, #1
 800bea0:	e7f0      	b.n	800be84 <_vfiprintf_r+0x1b8>
 800bea2:	ab03      	add	r3, sp, #12
 800bea4:	9300      	str	r3, [sp, #0]
 800bea6:	462a      	mov	r2, r5
 800bea8:	4b12      	ldr	r3, [pc, #72]	@ (800bef4 <_vfiprintf_r+0x228>)
 800beaa:	a904      	add	r1, sp, #16
 800beac:	4630      	mov	r0, r6
 800beae:	f7fd f8bf 	bl	8009030 <_printf_float>
 800beb2:	4607      	mov	r7, r0
 800beb4:	1c78      	adds	r0, r7, #1
 800beb6:	d1d6      	bne.n	800be66 <_vfiprintf_r+0x19a>
 800beb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800beba:	07d9      	lsls	r1, r3, #31
 800bebc:	d405      	bmi.n	800beca <_vfiprintf_r+0x1fe>
 800bebe:	89ab      	ldrh	r3, [r5, #12]
 800bec0:	059a      	lsls	r2, r3, #22
 800bec2:	d402      	bmi.n	800beca <_vfiprintf_r+0x1fe>
 800bec4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bec6:	f7fd fe5d 	bl	8009b84 <__retarget_lock_release_recursive>
 800beca:	89ab      	ldrh	r3, [r5, #12]
 800becc:	065b      	lsls	r3, r3, #25
 800bece:	f53f af1f 	bmi.w	800bd10 <_vfiprintf_r+0x44>
 800bed2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bed4:	e71e      	b.n	800bd14 <_vfiprintf_r+0x48>
 800bed6:	ab03      	add	r3, sp, #12
 800bed8:	9300      	str	r3, [sp, #0]
 800beda:	462a      	mov	r2, r5
 800bedc:	4b05      	ldr	r3, [pc, #20]	@ (800bef4 <_vfiprintf_r+0x228>)
 800bede:	a904      	add	r1, sp, #16
 800bee0:	4630      	mov	r0, r6
 800bee2:	f7fd fb3d 	bl	8009560 <_printf_i>
 800bee6:	e7e4      	b.n	800beb2 <_vfiprintf_r+0x1e6>
 800bee8:	0800c970 	.word	0x0800c970
 800beec:	0800c97a 	.word	0x0800c97a
 800bef0:	08009031 	.word	0x08009031
 800bef4:	0800bca9 	.word	0x0800bca9
 800bef8:	0800c976 	.word	0x0800c976

0800befc <__swbuf_r>:
 800befc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800befe:	460e      	mov	r6, r1
 800bf00:	4614      	mov	r4, r2
 800bf02:	4605      	mov	r5, r0
 800bf04:	b118      	cbz	r0, 800bf0e <__swbuf_r+0x12>
 800bf06:	6a03      	ldr	r3, [r0, #32]
 800bf08:	b90b      	cbnz	r3, 800bf0e <__swbuf_r+0x12>
 800bf0a:	f7fd fcd5 	bl	80098b8 <__sinit>
 800bf0e:	69a3      	ldr	r3, [r4, #24]
 800bf10:	60a3      	str	r3, [r4, #8]
 800bf12:	89a3      	ldrh	r3, [r4, #12]
 800bf14:	071a      	lsls	r2, r3, #28
 800bf16:	d501      	bpl.n	800bf1c <__swbuf_r+0x20>
 800bf18:	6923      	ldr	r3, [r4, #16]
 800bf1a:	b943      	cbnz	r3, 800bf2e <__swbuf_r+0x32>
 800bf1c:	4621      	mov	r1, r4
 800bf1e:	4628      	mov	r0, r5
 800bf20:	f000 f82a 	bl	800bf78 <__swsetup_r>
 800bf24:	b118      	cbz	r0, 800bf2e <__swbuf_r+0x32>
 800bf26:	f04f 37ff 	mov.w	r7, #4294967295
 800bf2a:	4638      	mov	r0, r7
 800bf2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf2e:	6823      	ldr	r3, [r4, #0]
 800bf30:	6922      	ldr	r2, [r4, #16]
 800bf32:	1a98      	subs	r0, r3, r2
 800bf34:	6963      	ldr	r3, [r4, #20]
 800bf36:	b2f6      	uxtb	r6, r6
 800bf38:	4283      	cmp	r3, r0
 800bf3a:	4637      	mov	r7, r6
 800bf3c:	dc05      	bgt.n	800bf4a <__swbuf_r+0x4e>
 800bf3e:	4621      	mov	r1, r4
 800bf40:	4628      	mov	r0, r5
 800bf42:	f7ff fe35 	bl	800bbb0 <_fflush_r>
 800bf46:	2800      	cmp	r0, #0
 800bf48:	d1ed      	bne.n	800bf26 <__swbuf_r+0x2a>
 800bf4a:	68a3      	ldr	r3, [r4, #8]
 800bf4c:	3b01      	subs	r3, #1
 800bf4e:	60a3      	str	r3, [r4, #8]
 800bf50:	6823      	ldr	r3, [r4, #0]
 800bf52:	1c5a      	adds	r2, r3, #1
 800bf54:	6022      	str	r2, [r4, #0]
 800bf56:	701e      	strb	r6, [r3, #0]
 800bf58:	6962      	ldr	r2, [r4, #20]
 800bf5a:	1c43      	adds	r3, r0, #1
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	d004      	beq.n	800bf6a <__swbuf_r+0x6e>
 800bf60:	89a3      	ldrh	r3, [r4, #12]
 800bf62:	07db      	lsls	r3, r3, #31
 800bf64:	d5e1      	bpl.n	800bf2a <__swbuf_r+0x2e>
 800bf66:	2e0a      	cmp	r6, #10
 800bf68:	d1df      	bne.n	800bf2a <__swbuf_r+0x2e>
 800bf6a:	4621      	mov	r1, r4
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	f7ff fe1f 	bl	800bbb0 <_fflush_r>
 800bf72:	2800      	cmp	r0, #0
 800bf74:	d0d9      	beq.n	800bf2a <__swbuf_r+0x2e>
 800bf76:	e7d6      	b.n	800bf26 <__swbuf_r+0x2a>

0800bf78 <__swsetup_r>:
 800bf78:	b538      	push	{r3, r4, r5, lr}
 800bf7a:	4b29      	ldr	r3, [pc, #164]	@ (800c020 <__swsetup_r+0xa8>)
 800bf7c:	4605      	mov	r5, r0
 800bf7e:	6818      	ldr	r0, [r3, #0]
 800bf80:	460c      	mov	r4, r1
 800bf82:	b118      	cbz	r0, 800bf8c <__swsetup_r+0x14>
 800bf84:	6a03      	ldr	r3, [r0, #32]
 800bf86:	b90b      	cbnz	r3, 800bf8c <__swsetup_r+0x14>
 800bf88:	f7fd fc96 	bl	80098b8 <__sinit>
 800bf8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf90:	0719      	lsls	r1, r3, #28
 800bf92:	d422      	bmi.n	800bfda <__swsetup_r+0x62>
 800bf94:	06da      	lsls	r2, r3, #27
 800bf96:	d407      	bmi.n	800bfa8 <__swsetup_r+0x30>
 800bf98:	2209      	movs	r2, #9
 800bf9a:	602a      	str	r2, [r5, #0]
 800bf9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfa0:	81a3      	strh	r3, [r4, #12]
 800bfa2:	f04f 30ff 	mov.w	r0, #4294967295
 800bfa6:	e033      	b.n	800c010 <__swsetup_r+0x98>
 800bfa8:	0758      	lsls	r0, r3, #29
 800bfaa:	d512      	bpl.n	800bfd2 <__swsetup_r+0x5a>
 800bfac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bfae:	b141      	cbz	r1, 800bfc2 <__swsetup_r+0x4a>
 800bfb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bfb4:	4299      	cmp	r1, r3
 800bfb6:	d002      	beq.n	800bfbe <__swsetup_r+0x46>
 800bfb8:	4628      	mov	r0, r5
 800bfba:	f7fe fc69 	bl	800a890 <_free_r>
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	6363      	str	r3, [r4, #52]	@ 0x34
 800bfc2:	89a3      	ldrh	r3, [r4, #12]
 800bfc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bfc8:	81a3      	strh	r3, [r4, #12]
 800bfca:	2300      	movs	r3, #0
 800bfcc:	6063      	str	r3, [r4, #4]
 800bfce:	6923      	ldr	r3, [r4, #16]
 800bfd0:	6023      	str	r3, [r4, #0]
 800bfd2:	89a3      	ldrh	r3, [r4, #12]
 800bfd4:	f043 0308 	orr.w	r3, r3, #8
 800bfd8:	81a3      	strh	r3, [r4, #12]
 800bfda:	6923      	ldr	r3, [r4, #16]
 800bfdc:	b94b      	cbnz	r3, 800bff2 <__swsetup_r+0x7a>
 800bfde:	89a3      	ldrh	r3, [r4, #12]
 800bfe0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bfe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bfe8:	d003      	beq.n	800bff2 <__swsetup_r+0x7a>
 800bfea:	4621      	mov	r1, r4
 800bfec:	4628      	mov	r0, r5
 800bfee:	f000 f883 	bl	800c0f8 <__smakebuf_r>
 800bff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bff6:	f013 0201 	ands.w	r2, r3, #1
 800bffa:	d00a      	beq.n	800c012 <__swsetup_r+0x9a>
 800bffc:	2200      	movs	r2, #0
 800bffe:	60a2      	str	r2, [r4, #8]
 800c000:	6962      	ldr	r2, [r4, #20]
 800c002:	4252      	negs	r2, r2
 800c004:	61a2      	str	r2, [r4, #24]
 800c006:	6922      	ldr	r2, [r4, #16]
 800c008:	b942      	cbnz	r2, 800c01c <__swsetup_r+0xa4>
 800c00a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c00e:	d1c5      	bne.n	800bf9c <__swsetup_r+0x24>
 800c010:	bd38      	pop	{r3, r4, r5, pc}
 800c012:	0799      	lsls	r1, r3, #30
 800c014:	bf58      	it	pl
 800c016:	6962      	ldrpl	r2, [r4, #20]
 800c018:	60a2      	str	r2, [r4, #8]
 800c01a:	e7f4      	b.n	800c006 <__swsetup_r+0x8e>
 800c01c:	2000      	movs	r0, #0
 800c01e:	e7f7      	b.n	800c010 <__swsetup_r+0x98>
 800c020:	200001c4 	.word	0x200001c4

0800c024 <_raise_r>:
 800c024:	291f      	cmp	r1, #31
 800c026:	b538      	push	{r3, r4, r5, lr}
 800c028:	4605      	mov	r5, r0
 800c02a:	460c      	mov	r4, r1
 800c02c:	d904      	bls.n	800c038 <_raise_r+0x14>
 800c02e:	2316      	movs	r3, #22
 800c030:	6003      	str	r3, [r0, #0]
 800c032:	f04f 30ff 	mov.w	r0, #4294967295
 800c036:	bd38      	pop	{r3, r4, r5, pc}
 800c038:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c03a:	b112      	cbz	r2, 800c042 <_raise_r+0x1e>
 800c03c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c040:	b94b      	cbnz	r3, 800c056 <_raise_r+0x32>
 800c042:	4628      	mov	r0, r5
 800c044:	f000 f830 	bl	800c0a8 <_getpid_r>
 800c048:	4622      	mov	r2, r4
 800c04a:	4601      	mov	r1, r0
 800c04c:	4628      	mov	r0, r5
 800c04e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c052:	f000 b817 	b.w	800c084 <_kill_r>
 800c056:	2b01      	cmp	r3, #1
 800c058:	d00a      	beq.n	800c070 <_raise_r+0x4c>
 800c05a:	1c59      	adds	r1, r3, #1
 800c05c:	d103      	bne.n	800c066 <_raise_r+0x42>
 800c05e:	2316      	movs	r3, #22
 800c060:	6003      	str	r3, [r0, #0]
 800c062:	2001      	movs	r0, #1
 800c064:	e7e7      	b.n	800c036 <_raise_r+0x12>
 800c066:	2100      	movs	r1, #0
 800c068:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c06c:	4620      	mov	r0, r4
 800c06e:	4798      	blx	r3
 800c070:	2000      	movs	r0, #0
 800c072:	e7e0      	b.n	800c036 <_raise_r+0x12>

0800c074 <raise>:
 800c074:	4b02      	ldr	r3, [pc, #8]	@ (800c080 <raise+0xc>)
 800c076:	4601      	mov	r1, r0
 800c078:	6818      	ldr	r0, [r3, #0]
 800c07a:	f7ff bfd3 	b.w	800c024 <_raise_r>
 800c07e:	bf00      	nop
 800c080:	200001c4 	.word	0x200001c4

0800c084 <_kill_r>:
 800c084:	b538      	push	{r3, r4, r5, lr}
 800c086:	4d07      	ldr	r5, [pc, #28]	@ (800c0a4 <_kill_r+0x20>)
 800c088:	2300      	movs	r3, #0
 800c08a:	4604      	mov	r4, r0
 800c08c:	4608      	mov	r0, r1
 800c08e:	4611      	mov	r1, r2
 800c090:	602b      	str	r3, [r5, #0]
 800c092:	f7f7 fa4b 	bl	800352c <_kill>
 800c096:	1c43      	adds	r3, r0, #1
 800c098:	d102      	bne.n	800c0a0 <_kill_r+0x1c>
 800c09a:	682b      	ldr	r3, [r5, #0]
 800c09c:	b103      	cbz	r3, 800c0a0 <_kill_r+0x1c>
 800c09e:	6023      	str	r3, [r4, #0]
 800c0a0:	bd38      	pop	{r3, r4, r5, pc}
 800c0a2:	bf00      	nop
 800c0a4:	20000e5c 	.word	0x20000e5c

0800c0a8 <_getpid_r>:
 800c0a8:	f7f7 ba38 	b.w	800351c <_getpid>

0800c0ac <__swhatbuf_r>:
 800c0ac:	b570      	push	{r4, r5, r6, lr}
 800c0ae:	460c      	mov	r4, r1
 800c0b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0b4:	2900      	cmp	r1, #0
 800c0b6:	b096      	sub	sp, #88	@ 0x58
 800c0b8:	4615      	mov	r5, r2
 800c0ba:	461e      	mov	r6, r3
 800c0bc:	da0d      	bge.n	800c0da <__swhatbuf_r+0x2e>
 800c0be:	89a3      	ldrh	r3, [r4, #12]
 800c0c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c0c4:	f04f 0100 	mov.w	r1, #0
 800c0c8:	bf14      	ite	ne
 800c0ca:	2340      	movne	r3, #64	@ 0x40
 800c0cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c0d0:	2000      	movs	r0, #0
 800c0d2:	6031      	str	r1, [r6, #0]
 800c0d4:	602b      	str	r3, [r5, #0]
 800c0d6:	b016      	add	sp, #88	@ 0x58
 800c0d8:	bd70      	pop	{r4, r5, r6, pc}
 800c0da:	466a      	mov	r2, sp
 800c0dc:	f000 f848 	bl	800c170 <_fstat_r>
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	dbec      	blt.n	800c0be <__swhatbuf_r+0x12>
 800c0e4:	9901      	ldr	r1, [sp, #4]
 800c0e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c0ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c0ee:	4259      	negs	r1, r3
 800c0f0:	4159      	adcs	r1, r3
 800c0f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c0f6:	e7eb      	b.n	800c0d0 <__swhatbuf_r+0x24>

0800c0f8 <__smakebuf_r>:
 800c0f8:	898b      	ldrh	r3, [r1, #12]
 800c0fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0fc:	079d      	lsls	r5, r3, #30
 800c0fe:	4606      	mov	r6, r0
 800c100:	460c      	mov	r4, r1
 800c102:	d507      	bpl.n	800c114 <__smakebuf_r+0x1c>
 800c104:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c108:	6023      	str	r3, [r4, #0]
 800c10a:	6123      	str	r3, [r4, #16]
 800c10c:	2301      	movs	r3, #1
 800c10e:	6163      	str	r3, [r4, #20]
 800c110:	b003      	add	sp, #12
 800c112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c114:	ab01      	add	r3, sp, #4
 800c116:	466a      	mov	r2, sp
 800c118:	f7ff ffc8 	bl	800c0ac <__swhatbuf_r>
 800c11c:	9f00      	ldr	r7, [sp, #0]
 800c11e:	4605      	mov	r5, r0
 800c120:	4639      	mov	r1, r7
 800c122:	4630      	mov	r0, r6
 800c124:	f7fe ff62 	bl	800afec <_malloc_r>
 800c128:	b948      	cbnz	r0, 800c13e <__smakebuf_r+0x46>
 800c12a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c12e:	059a      	lsls	r2, r3, #22
 800c130:	d4ee      	bmi.n	800c110 <__smakebuf_r+0x18>
 800c132:	f023 0303 	bic.w	r3, r3, #3
 800c136:	f043 0302 	orr.w	r3, r3, #2
 800c13a:	81a3      	strh	r3, [r4, #12]
 800c13c:	e7e2      	b.n	800c104 <__smakebuf_r+0xc>
 800c13e:	89a3      	ldrh	r3, [r4, #12]
 800c140:	6020      	str	r0, [r4, #0]
 800c142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c146:	81a3      	strh	r3, [r4, #12]
 800c148:	9b01      	ldr	r3, [sp, #4]
 800c14a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c14e:	b15b      	cbz	r3, 800c168 <__smakebuf_r+0x70>
 800c150:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c154:	4630      	mov	r0, r6
 800c156:	f000 f81d 	bl	800c194 <_isatty_r>
 800c15a:	b128      	cbz	r0, 800c168 <__smakebuf_r+0x70>
 800c15c:	89a3      	ldrh	r3, [r4, #12]
 800c15e:	f023 0303 	bic.w	r3, r3, #3
 800c162:	f043 0301 	orr.w	r3, r3, #1
 800c166:	81a3      	strh	r3, [r4, #12]
 800c168:	89a3      	ldrh	r3, [r4, #12]
 800c16a:	431d      	orrs	r5, r3
 800c16c:	81a5      	strh	r5, [r4, #12]
 800c16e:	e7cf      	b.n	800c110 <__smakebuf_r+0x18>

0800c170 <_fstat_r>:
 800c170:	b538      	push	{r3, r4, r5, lr}
 800c172:	4d07      	ldr	r5, [pc, #28]	@ (800c190 <_fstat_r+0x20>)
 800c174:	2300      	movs	r3, #0
 800c176:	4604      	mov	r4, r0
 800c178:	4608      	mov	r0, r1
 800c17a:	4611      	mov	r1, r2
 800c17c:	602b      	str	r3, [r5, #0]
 800c17e:	f7f7 fa35 	bl	80035ec <_fstat>
 800c182:	1c43      	adds	r3, r0, #1
 800c184:	d102      	bne.n	800c18c <_fstat_r+0x1c>
 800c186:	682b      	ldr	r3, [r5, #0]
 800c188:	b103      	cbz	r3, 800c18c <_fstat_r+0x1c>
 800c18a:	6023      	str	r3, [r4, #0]
 800c18c:	bd38      	pop	{r3, r4, r5, pc}
 800c18e:	bf00      	nop
 800c190:	20000e5c 	.word	0x20000e5c

0800c194 <_isatty_r>:
 800c194:	b538      	push	{r3, r4, r5, lr}
 800c196:	4d06      	ldr	r5, [pc, #24]	@ (800c1b0 <_isatty_r+0x1c>)
 800c198:	2300      	movs	r3, #0
 800c19a:	4604      	mov	r4, r0
 800c19c:	4608      	mov	r0, r1
 800c19e:	602b      	str	r3, [r5, #0]
 800c1a0:	f7f7 fa34 	bl	800360c <_isatty>
 800c1a4:	1c43      	adds	r3, r0, #1
 800c1a6:	d102      	bne.n	800c1ae <_isatty_r+0x1a>
 800c1a8:	682b      	ldr	r3, [r5, #0]
 800c1aa:	b103      	cbz	r3, 800c1ae <_isatty_r+0x1a>
 800c1ac:	6023      	str	r3, [r4, #0]
 800c1ae:	bd38      	pop	{r3, r4, r5, pc}
 800c1b0:	20000e5c 	.word	0x20000e5c

0800c1b4 <sqrt>:
 800c1b4:	b538      	push	{r3, r4, r5, lr}
 800c1b6:	ed2d 8b02 	vpush	{d8}
 800c1ba:	ec55 4b10 	vmov	r4, r5, d0
 800c1be:	f000 f879 	bl	800c2b4 <__ieee754_sqrt>
 800c1c2:	4622      	mov	r2, r4
 800c1c4:	462b      	mov	r3, r5
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	4629      	mov	r1, r5
 800c1ca:	eeb0 8a40 	vmov.f32	s16, s0
 800c1ce:	eef0 8a60 	vmov.f32	s17, s1
 800c1d2:	f7f4 fccb 	bl	8000b6c <__aeabi_dcmpun>
 800c1d6:	b990      	cbnz	r0, 800c1fe <sqrt+0x4a>
 800c1d8:	2200      	movs	r2, #0
 800c1da:	2300      	movs	r3, #0
 800c1dc:	4620      	mov	r0, r4
 800c1de:	4629      	mov	r1, r5
 800c1e0:	f7f4 fc9c 	bl	8000b1c <__aeabi_dcmplt>
 800c1e4:	b158      	cbz	r0, 800c1fe <sqrt+0x4a>
 800c1e6:	f7fd fca1 	bl	8009b2c <__errno>
 800c1ea:	2321      	movs	r3, #33	@ 0x21
 800c1ec:	6003      	str	r3, [r0, #0]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	4610      	mov	r0, r2
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	f7f4 fb49 	bl	800088c <__aeabi_ddiv>
 800c1fa:	ec41 0b18 	vmov	d8, r0, r1
 800c1fe:	eeb0 0a48 	vmov.f32	s0, s16
 800c202:	eef0 0a68 	vmov.f32	s1, s17
 800c206:	ecbd 8b02 	vpop	{d8}
 800c20a:	bd38      	pop	{r3, r4, r5, pc}

0800c20c <fmax>:
 800c20c:	b508      	push	{r3, lr}
 800c20e:	ed2d 8b04 	vpush	{d8-d9}
 800c212:	eeb0 8a40 	vmov.f32	s16, s0
 800c216:	eef0 8a60 	vmov.f32	s17, s1
 800c21a:	eeb0 9a41 	vmov.f32	s18, s2
 800c21e:	eef0 9a61 	vmov.f32	s19, s3
 800c222:	f000 f81d 	bl	800c260 <__fpclassifyd>
 800c226:	b950      	cbnz	r0, 800c23e <fmax+0x32>
 800c228:	eeb0 8a49 	vmov.f32	s16, s18
 800c22c:	eef0 8a69 	vmov.f32	s17, s19
 800c230:	eeb0 0a48 	vmov.f32	s0, s16
 800c234:	eef0 0a68 	vmov.f32	s1, s17
 800c238:	ecbd 8b04 	vpop	{d8-d9}
 800c23c:	bd08      	pop	{r3, pc}
 800c23e:	eeb0 0a49 	vmov.f32	s0, s18
 800c242:	eef0 0a69 	vmov.f32	s1, s19
 800c246:	f000 f80b 	bl	800c260 <__fpclassifyd>
 800c24a:	2800      	cmp	r0, #0
 800c24c:	d0f0      	beq.n	800c230 <fmax+0x24>
 800c24e:	ec53 2b19 	vmov	r2, r3, d9
 800c252:	ec51 0b18 	vmov	r0, r1, d8
 800c256:	f7f4 fc7f 	bl	8000b58 <__aeabi_dcmpgt>
 800c25a:	2800      	cmp	r0, #0
 800c25c:	d0e4      	beq.n	800c228 <fmax+0x1c>
 800c25e:	e7e7      	b.n	800c230 <fmax+0x24>

0800c260 <__fpclassifyd>:
 800c260:	ec51 0b10 	vmov	r0, r1, d0
 800c264:	b510      	push	{r4, lr}
 800c266:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800c26a:	460b      	mov	r3, r1
 800c26c:	d019      	beq.n	800c2a2 <__fpclassifyd+0x42>
 800c26e:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800c272:	490e      	ldr	r1, [pc, #56]	@ (800c2ac <__fpclassifyd+0x4c>)
 800c274:	428a      	cmp	r2, r1
 800c276:	d90e      	bls.n	800c296 <__fpclassifyd+0x36>
 800c278:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800c27c:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 800c280:	428a      	cmp	r2, r1
 800c282:	d908      	bls.n	800c296 <__fpclassifyd+0x36>
 800c284:	4a0a      	ldr	r2, [pc, #40]	@ (800c2b0 <__fpclassifyd+0x50>)
 800c286:	4213      	tst	r3, r2
 800c288:	d007      	beq.n	800c29a <__fpclassifyd+0x3a>
 800c28a:	4294      	cmp	r4, r2
 800c28c:	d107      	bne.n	800c29e <__fpclassifyd+0x3e>
 800c28e:	fab0 f080 	clz	r0, r0
 800c292:	0940      	lsrs	r0, r0, #5
 800c294:	bd10      	pop	{r4, pc}
 800c296:	2004      	movs	r0, #4
 800c298:	e7fc      	b.n	800c294 <__fpclassifyd+0x34>
 800c29a:	2003      	movs	r0, #3
 800c29c:	e7fa      	b.n	800c294 <__fpclassifyd+0x34>
 800c29e:	2000      	movs	r0, #0
 800c2a0:	e7f8      	b.n	800c294 <__fpclassifyd+0x34>
 800c2a2:	2800      	cmp	r0, #0
 800c2a4:	d1ee      	bne.n	800c284 <__fpclassifyd+0x24>
 800c2a6:	2002      	movs	r0, #2
 800c2a8:	e7f4      	b.n	800c294 <__fpclassifyd+0x34>
 800c2aa:	bf00      	nop
 800c2ac:	7fdfffff 	.word	0x7fdfffff
 800c2b0:	7ff00000 	.word	0x7ff00000

0800c2b4 <__ieee754_sqrt>:
 800c2b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b8:	4a68      	ldr	r2, [pc, #416]	@ (800c45c <__ieee754_sqrt+0x1a8>)
 800c2ba:	ec55 4b10 	vmov	r4, r5, d0
 800c2be:	43aa      	bics	r2, r5
 800c2c0:	462b      	mov	r3, r5
 800c2c2:	4621      	mov	r1, r4
 800c2c4:	d110      	bne.n	800c2e8 <__ieee754_sqrt+0x34>
 800c2c6:	4622      	mov	r2, r4
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	4629      	mov	r1, r5
 800c2cc:	f7f4 f9b4 	bl	8000638 <__aeabi_dmul>
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	460b      	mov	r3, r1
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	4629      	mov	r1, r5
 800c2d8:	f7f3 fff8 	bl	80002cc <__adddf3>
 800c2dc:	4604      	mov	r4, r0
 800c2de:	460d      	mov	r5, r1
 800c2e0:	ec45 4b10 	vmov	d0, r4, r5
 800c2e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2e8:	2d00      	cmp	r5, #0
 800c2ea:	dc0e      	bgt.n	800c30a <__ieee754_sqrt+0x56>
 800c2ec:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c2f0:	4322      	orrs	r2, r4
 800c2f2:	d0f5      	beq.n	800c2e0 <__ieee754_sqrt+0x2c>
 800c2f4:	b19d      	cbz	r5, 800c31e <__ieee754_sqrt+0x6a>
 800c2f6:	4622      	mov	r2, r4
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	4629      	mov	r1, r5
 800c2fc:	f7f3 ffe4 	bl	80002c8 <__aeabi_dsub>
 800c300:	4602      	mov	r2, r0
 800c302:	460b      	mov	r3, r1
 800c304:	f7f4 fac2 	bl	800088c <__aeabi_ddiv>
 800c308:	e7e8      	b.n	800c2dc <__ieee754_sqrt+0x28>
 800c30a:	152a      	asrs	r2, r5, #20
 800c30c:	d115      	bne.n	800c33a <__ieee754_sqrt+0x86>
 800c30e:	2000      	movs	r0, #0
 800c310:	e009      	b.n	800c326 <__ieee754_sqrt+0x72>
 800c312:	0acb      	lsrs	r3, r1, #11
 800c314:	3a15      	subs	r2, #21
 800c316:	0549      	lsls	r1, r1, #21
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d0fa      	beq.n	800c312 <__ieee754_sqrt+0x5e>
 800c31c:	e7f7      	b.n	800c30e <__ieee754_sqrt+0x5a>
 800c31e:	462a      	mov	r2, r5
 800c320:	e7fa      	b.n	800c318 <__ieee754_sqrt+0x64>
 800c322:	005b      	lsls	r3, r3, #1
 800c324:	3001      	adds	r0, #1
 800c326:	02dc      	lsls	r4, r3, #11
 800c328:	d5fb      	bpl.n	800c322 <__ieee754_sqrt+0x6e>
 800c32a:	1e44      	subs	r4, r0, #1
 800c32c:	1b12      	subs	r2, r2, r4
 800c32e:	f1c0 0420 	rsb	r4, r0, #32
 800c332:	fa21 f404 	lsr.w	r4, r1, r4
 800c336:	4323      	orrs	r3, r4
 800c338:	4081      	lsls	r1, r0
 800c33a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c33e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c342:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c346:	07d2      	lsls	r2, r2, #31
 800c348:	bf5c      	itt	pl
 800c34a:	005b      	lslpl	r3, r3, #1
 800c34c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c350:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c354:	bf58      	it	pl
 800c356:	0049      	lslpl	r1, r1, #1
 800c358:	2600      	movs	r6, #0
 800c35a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c35e:	106d      	asrs	r5, r5, #1
 800c360:	0049      	lsls	r1, r1, #1
 800c362:	2016      	movs	r0, #22
 800c364:	4632      	mov	r2, r6
 800c366:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c36a:	1917      	adds	r7, r2, r4
 800c36c:	429f      	cmp	r7, r3
 800c36e:	bfde      	ittt	le
 800c370:	193a      	addle	r2, r7, r4
 800c372:	1bdb      	suble	r3, r3, r7
 800c374:	1936      	addle	r6, r6, r4
 800c376:	0fcf      	lsrs	r7, r1, #31
 800c378:	3801      	subs	r0, #1
 800c37a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c37e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c382:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c386:	d1f0      	bne.n	800c36a <__ieee754_sqrt+0xb6>
 800c388:	4604      	mov	r4, r0
 800c38a:	2720      	movs	r7, #32
 800c38c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c390:	429a      	cmp	r2, r3
 800c392:	eb00 0e0c 	add.w	lr, r0, ip
 800c396:	db02      	blt.n	800c39e <__ieee754_sqrt+0xea>
 800c398:	d113      	bne.n	800c3c2 <__ieee754_sqrt+0x10e>
 800c39a:	458e      	cmp	lr, r1
 800c39c:	d811      	bhi.n	800c3c2 <__ieee754_sqrt+0x10e>
 800c39e:	f1be 0f00 	cmp.w	lr, #0
 800c3a2:	eb0e 000c 	add.w	r0, lr, ip
 800c3a6:	da42      	bge.n	800c42e <__ieee754_sqrt+0x17a>
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	db40      	blt.n	800c42e <__ieee754_sqrt+0x17a>
 800c3ac:	f102 0801 	add.w	r8, r2, #1
 800c3b0:	1a9b      	subs	r3, r3, r2
 800c3b2:	458e      	cmp	lr, r1
 800c3b4:	bf88      	it	hi
 800c3b6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c3ba:	eba1 010e 	sub.w	r1, r1, lr
 800c3be:	4464      	add	r4, ip
 800c3c0:	4642      	mov	r2, r8
 800c3c2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c3c6:	3f01      	subs	r7, #1
 800c3c8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c3cc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c3d0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c3d4:	d1dc      	bne.n	800c390 <__ieee754_sqrt+0xdc>
 800c3d6:	4319      	orrs	r1, r3
 800c3d8:	d01b      	beq.n	800c412 <__ieee754_sqrt+0x15e>
 800c3da:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c460 <__ieee754_sqrt+0x1ac>
 800c3de:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c464 <__ieee754_sqrt+0x1b0>
 800c3e2:	e9da 0100 	ldrd	r0, r1, [sl]
 800c3e6:	e9db 2300 	ldrd	r2, r3, [fp]
 800c3ea:	f7f3 ff6d 	bl	80002c8 <__aeabi_dsub>
 800c3ee:	e9da 8900 	ldrd	r8, r9, [sl]
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	4640      	mov	r0, r8
 800c3f8:	4649      	mov	r1, r9
 800c3fa:	f7f4 fb99 	bl	8000b30 <__aeabi_dcmple>
 800c3fe:	b140      	cbz	r0, 800c412 <__ieee754_sqrt+0x15e>
 800c400:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c404:	e9da 0100 	ldrd	r0, r1, [sl]
 800c408:	e9db 2300 	ldrd	r2, r3, [fp]
 800c40c:	d111      	bne.n	800c432 <__ieee754_sqrt+0x17e>
 800c40e:	3601      	adds	r6, #1
 800c410:	463c      	mov	r4, r7
 800c412:	1072      	asrs	r2, r6, #1
 800c414:	0863      	lsrs	r3, r4, #1
 800c416:	07f1      	lsls	r1, r6, #31
 800c418:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c41c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c420:	bf48      	it	mi
 800c422:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c426:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c42a:	4618      	mov	r0, r3
 800c42c:	e756      	b.n	800c2dc <__ieee754_sqrt+0x28>
 800c42e:	4690      	mov	r8, r2
 800c430:	e7be      	b.n	800c3b0 <__ieee754_sqrt+0xfc>
 800c432:	f7f3 ff4b 	bl	80002cc <__adddf3>
 800c436:	e9da 8900 	ldrd	r8, r9, [sl]
 800c43a:	4602      	mov	r2, r0
 800c43c:	460b      	mov	r3, r1
 800c43e:	4640      	mov	r0, r8
 800c440:	4649      	mov	r1, r9
 800c442:	f7f4 fb6b 	bl	8000b1c <__aeabi_dcmplt>
 800c446:	b120      	cbz	r0, 800c452 <__ieee754_sqrt+0x19e>
 800c448:	1ca0      	adds	r0, r4, #2
 800c44a:	bf08      	it	eq
 800c44c:	3601      	addeq	r6, #1
 800c44e:	3402      	adds	r4, #2
 800c450:	e7df      	b.n	800c412 <__ieee754_sqrt+0x15e>
 800c452:	1c63      	adds	r3, r4, #1
 800c454:	f023 0401 	bic.w	r4, r3, #1
 800c458:	e7db      	b.n	800c412 <__ieee754_sqrt+0x15e>
 800c45a:	bf00      	nop
 800c45c:	7ff00000 	.word	0x7ff00000
 800c460:	20000220 	.word	0x20000220
 800c464:	20000218 	.word	0x20000218

0800c468 <roundf>:
 800c468:	ee10 0a10 	vmov	r0, s0
 800c46c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800c470:	3a7f      	subs	r2, #127	@ 0x7f
 800c472:	2a16      	cmp	r2, #22
 800c474:	dc15      	bgt.n	800c4a2 <roundf+0x3a>
 800c476:	2a00      	cmp	r2, #0
 800c478:	da08      	bge.n	800c48c <roundf+0x24>
 800c47a:	3201      	adds	r2, #1
 800c47c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800c480:	d101      	bne.n	800c486 <roundf+0x1e>
 800c482:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800c486:	ee00 3a10 	vmov	s0, r3
 800c48a:	4770      	bx	lr
 800c48c:	4907      	ldr	r1, [pc, #28]	@ (800c4ac <roundf+0x44>)
 800c48e:	4111      	asrs	r1, r2
 800c490:	4201      	tst	r1, r0
 800c492:	d0fa      	beq.n	800c48a <roundf+0x22>
 800c494:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c498:	4113      	asrs	r3, r2
 800c49a:	4403      	add	r3, r0
 800c49c:	ea23 0301 	bic.w	r3, r3, r1
 800c4a0:	e7f1      	b.n	800c486 <roundf+0x1e>
 800c4a2:	2a80      	cmp	r2, #128	@ 0x80
 800c4a4:	d1f1      	bne.n	800c48a <roundf+0x22>
 800c4a6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c4aa:	4770      	bx	lr
 800c4ac:	007fffff 	.word	0x007fffff

0800c4b0 <_init>:
 800c4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4b2:	bf00      	nop
 800c4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4b6:	bc08      	pop	{r3}
 800c4b8:	469e      	mov	lr, r3
 800c4ba:	4770      	bx	lr

0800c4bc <_fini>:
 800c4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4be:	bf00      	nop
 800c4c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4c2:	bc08      	pop	{r3}
 800c4c4:	469e      	mov	lr, r3
 800c4c6:	4770      	bx	lr
