
comanda_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d34c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  0800d520  0800d520  0000e520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da34  0800da34  0000f1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800da34  0800da34  0000ea34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da3c  0800da3c  0000f1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da3c  0800da3c  0000ea3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da40  0800da40  0000ea40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800da44  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d54  200001e8  0800dc2c  0000f1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000f3c  0800dc2c  0000ff3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154f5  00000000  00000000  0000f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d52  00000000  00000000  0002470d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  00027460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd6  00000000  00000000  000288a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021adf  00000000  00000000  00029876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ce7  00000000  00000000  0004b355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9f96  00000000  00000000  0006303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012cfd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006da4  00000000  00000000  0012d018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00133dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d504 	.word	0x0800d504

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800d504 	.word	0x0800d504

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a0 	b.w	8001040 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	460c      	mov	r4, r1
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d14e      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d90:	4694      	mov	ip, r2
 8000d92:	458c      	cmp	ip, r1
 8000d94:	4686      	mov	lr, r0
 8000d96:	fab2 f282 	clz	r2, r2
 8000d9a:	d962      	bls.n	8000e62 <__udivmoddi4+0xde>
 8000d9c:	b14a      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000d9e:	f1c2 0320 	rsb	r3, r2, #32
 8000da2:	4091      	lsls	r1, r2
 8000da4:	fa20 f303 	lsr.w	r3, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	4319      	orrs	r1, r3
 8000dae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f f68c 	uxth.w	r6, ip
 8000dba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb04 f106 	mul.w	r1, r4, r6
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dda:	f080 8112 	bcs.w	8001002 <__udivmoddi4+0x27e>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 810f 	bls.w	8001002 <__udivmoddi4+0x27e>
 8000de4:	3c02      	subs	r4, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a59      	subs	r1, r3, r1
 8000dea:	fa1f f38e 	uxth.w	r3, lr
 8000dee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df2:	fb07 1110 	mls	r1, r7, r0, r1
 8000df6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dfa:	fb00 f606 	mul.w	r6, r0, r6
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	d90a      	bls.n	8000e18 <__udivmoddi4+0x94>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e0a:	f080 80fc 	bcs.w	8001006 <__udivmoddi4+0x282>
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	f240 80f9 	bls.w	8001006 <__udivmoddi4+0x282>
 8000e14:	4463      	add	r3, ip
 8000e16:	3802      	subs	r0, #2
 8000e18:	1b9b      	subs	r3, r3, r6
 8000e1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e1e:	2100      	movs	r1, #0
 8000e20:	b11d      	cbz	r5, 8000e2a <__udivmoddi4+0xa6>
 8000e22:	40d3      	lsrs	r3, r2
 8000e24:	2200      	movs	r2, #0
 8000e26:	e9c5 3200 	strd	r3, r2, [r5]
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d905      	bls.n	8000e3e <__udivmoddi4+0xba>
 8000e32:	b10d      	cbz	r5, 8000e38 <__udivmoddi4+0xb4>
 8000e34:	e9c5 0100 	strd	r0, r1, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e7f5      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e3e:	fab3 f183 	clz	r1, r3
 8000e42:	2900      	cmp	r1, #0
 8000e44:	d146      	bne.n	8000ed4 <__udivmoddi4+0x150>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d302      	bcc.n	8000e50 <__udivmoddi4+0xcc>
 8000e4a:	4290      	cmp	r0, r2
 8000e4c:	f0c0 80f0 	bcc.w	8001030 <__udivmoddi4+0x2ac>
 8000e50:	1a86      	subs	r6, r0, r2
 8000e52:	eb64 0303 	sbc.w	r3, r4, r3
 8000e56:	2001      	movs	r0, #1
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d0e6      	beq.n	8000e2a <__udivmoddi4+0xa6>
 8000e5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e60:	e7e3      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	f040 8090 	bne.w	8000f88 <__udivmoddi4+0x204>
 8000e68:	eba1 040c 	sub.w	r4, r1, ip
 8000e6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e70:	fa1f f78c 	uxth.w	r7, ip
 8000e74:	2101      	movs	r1, #1
 8000e76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e86:	fb07 f006 	mul.w	r0, r7, r6
 8000e8a:	4298      	cmp	r0, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x11c>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x11a>
 8000e98:	4298      	cmp	r0, r3
 8000e9a:	f200 80cd 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e9e:	4626      	mov	r6, r4
 8000ea0:	1a1c      	subs	r4, r3, r0
 8000ea2:	fa1f f38e 	uxth.w	r3, lr
 8000ea6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eaa:	fb08 4410 	mls	r4, r8, r0, r4
 8000eae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000eb2:	fb00 f707 	mul.w	r7, r0, r7
 8000eb6:	429f      	cmp	r7, r3
 8000eb8:	d908      	bls.n	8000ecc <__udivmoddi4+0x148>
 8000eba:	eb1c 0303 	adds.w	r3, ip, r3
 8000ebe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec2:	d202      	bcs.n	8000eca <__udivmoddi4+0x146>
 8000ec4:	429f      	cmp	r7, r3
 8000ec6:	f200 80b0 	bhi.w	800102a <__udivmoddi4+0x2a6>
 8000eca:	4620      	mov	r0, r4
 8000ecc:	1bdb      	subs	r3, r3, r7
 8000ece:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ed2:	e7a5      	b.n	8000e20 <__udivmoddi4+0x9c>
 8000ed4:	f1c1 0620 	rsb	r6, r1, #32
 8000ed8:	408b      	lsls	r3, r1
 8000eda:	fa22 f706 	lsr.w	r7, r2, r6
 8000ede:	431f      	orrs	r7, r3
 8000ee0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ee4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ee8:	ea43 030c 	orr.w	r3, r3, ip
 8000eec:	40f4      	lsrs	r4, r6
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	0c38      	lsrs	r0, r7, #16
 8000ef4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ef8:	fbb4 fef0 	udiv	lr, r4, r0
 8000efc:	fa1f fc87 	uxth.w	ip, r7
 8000f00:	fb00 441e 	mls	r4, r0, lr, r4
 8000f04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f08:	fb0e f90c 	mul.w	r9, lr, ip
 8000f0c:	45a1      	cmp	r9, r4
 8000f0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f12:	d90a      	bls.n	8000f2a <__udivmoddi4+0x1a6>
 8000f14:	193c      	adds	r4, r7, r4
 8000f16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f1a:	f080 8084 	bcs.w	8001026 <__udivmoddi4+0x2a2>
 8000f1e:	45a1      	cmp	r9, r4
 8000f20:	f240 8081 	bls.w	8001026 <__udivmoddi4+0x2a2>
 8000f24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	eba4 0409 	sub.w	r4, r4, r9
 8000f2e:	fa1f f983 	uxth.w	r9, r3
 8000f32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f36:	fb00 4413 	mls	r4, r0, r3, r4
 8000f3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f42:	45a4      	cmp	ip, r4
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x1d2>
 8000f46:	193c      	adds	r4, r7, r4
 8000f48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f4c:	d267      	bcs.n	800101e <__udivmoddi4+0x29a>
 8000f4e:	45a4      	cmp	ip, r4
 8000f50:	d965      	bls.n	800101e <__udivmoddi4+0x29a>
 8000f52:	3b02      	subs	r3, #2
 8000f54:	443c      	add	r4, r7
 8000f56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f5e:	eba4 040c 	sub.w	r4, r4, ip
 8000f62:	429c      	cmp	r4, r3
 8000f64:	46ce      	mov	lr, r9
 8000f66:	469c      	mov	ip, r3
 8000f68:	d351      	bcc.n	800100e <__udivmoddi4+0x28a>
 8000f6a:	d04e      	beq.n	800100a <__udivmoddi4+0x286>
 8000f6c:	b155      	cbz	r5, 8000f84 <__udivmoddi4+0x200>
 8000f6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f72:	eb64 040c 	sbc.w	r4, r4, ip
 8000f76:	fa04 f606 	lsl.w	r6, r4, r6
 8000f7a:	40cb      	lsrs	r3, r1
 8000f7c:	431e      	orrs	r6, r3
 8000f7e:	40cc      	lsrs	r4, r1
 8000f80:	e9c5 6400 	strd	r6, r4, [r5]
 8000f84:	2100      	movs	r1, #0
 8000f86:	e750      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f94:	fa24 f303 	lsr.w	r3, r4, r3
 8000f98:	4094      	lsls	r4, r2
 8000f9a:	430c      	orrs	r4, r1
 8000f9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fa0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fa4:	fa1f f78c 	uxth.w	r7, ip
 8000fa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fac:	fb08 3110 	mls	r1, r8, r0, r3
 8000fb0:	0c23      	lsrs	r3, r4, #16
 8000fb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb6:	fb00 f107 	mul.w	r1, r0, r7
 8000fba:	4299      	cmp	r1, r3
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x24c>
 8000fbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fc6:	d22c      	bcs.n	8001022 <__udivmoddi4+0x29e>
 8000fc8:	4299      	cmp	r1, r3
 8000fca:	d92a      	bls.n	8001022 <__udivmoddi4+0x29e>
 8000fcc:	3802      	subs	r0, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	1a5b      	subs	r3, r3, r1
 8000fd2:	b2a4      	uxth	r4, r4
 8000fd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fe0:	fb01 f307 	mul.w	r3, r1, r7
 8000fe4:	42a3      	cmp	r3, r4
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x276>
 8000fe8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ff0:	d213      	bcs.n	800101a <__udivmoddi4+0x296>
 8000ff2:	42a3      	cmp	r3, r4
 8000ff4:	d911      	bls.n	800101a <__udivmoddi4+0x296>
 8000ff6:	3902      	subs	r1, #2
 8000ff8:	4464      	add	r4, ip
 8000ffa:	1ae4      	subs	r4, r4, r3
 8000ffc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001000:	e739      	b.n	8000e76 <__udivmoddi4+0xf2>
 8001002:	4604      	mov	r4, r0
 8001004:	e6f0      	b.n	8000de8 <__udivmoddi4+0x64>
 8001006:	4608      	mov	r0, r1
 8001008:	e706      	b.n	8000e18 <__udivmoddi4+0x94>
 800100a:	45c8      	cmp	r8, r9
 800100c:	d2ae      	bcs.n	8000f6c <__udivmoddi4+0x1e8>
 800100e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001012:	eb63 0c07 	sbc.w	ip, r3, r7
 8001016:	3801      	subs	r0, #1
 8001018:	e7a8      	b.n	8000f6c <__udivmoddi4+0x1e8>
 800101a:	4631      	mov	r1, r6
 800101c:	e7ed      	b.n	8000ffa <__udivmoddi4+0x276>
 800101e:	4603      	mov	r3, r0
 8001020:	e799      	b.n	8000f56 <__udivmoddi4+0x1d2>
 8001022:	4630      	mov	r0, r6
 8001024:	e7d4      	b.n	8000fd0 <__udivmoddi4+0x24c>
 8001026:	46d6      	mov	lr, sl
 8001028:	e77f      	b.n	8000f2a <__udivmoddi4+0x1a6>
 800102a:	4463      	add	r3, ip
 800102c:	3802      	subs	r0, #2
 800102e:	e74d      	b.n	8000ecc <__udivmoddi4+0x148>
 8001030:	4606      	mov	r6, r0
 8001032:	4623      	mov	r3, r4
 8001034:	4608      	mov	r0, r1
 8001036:	e70f      	b.n	8000e58 <__udivmoddi4+0xd4>
 8001038:	3e02      	subs	r6, #2
 800103a:	4463      	add	r3, ip
 800103c:	e730      	b.n	8000ea0 <__udivmoddi4+0x11c>
 800103e:	bf00      	nop

08001040 <__aeabi_idiv0>:
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <MOTOR_Init>:
	int32_t position, old_position;
	int32_t speed;
	double speed_rpm, speed_rad;
} MOTOR;

void MOTOR_Init(MOTOR *motor) {
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	motor->position = 0;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
	motor->old_position = 0;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	605a      	str	r2, [r3, #4]
	motor->speed = 0;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
	motor->speed_rpm = 0;
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	e9c1 2304 	strd	r2, r3, [r1, #16]
	motor->speed_rad = 0;
 800106c:	6879      	ldr	r1, [r7, #4]
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	f04f 0300 	mov.w	r3, #0
 8001076:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <Controller_Init>:
//CONTROLLER STRUCT
typedef struct {
	int w, y, x;
} Controller;

void Controller_Init(Controller *ps4) {
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
	ps4->w = 0;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
	ps4->y = 0;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	605a      	str	r2, [r3, #4]
	ps4->x = 0;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <Wheels_Init>:
//WHEELS STRUCT
typedef struct {
	double fdr, fst, sdr, sst, max_speed, scale_factor;
} WHEELS;

void Wheels_Init(WHEELS *wheels) {
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	wheels->fdr = 0;
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	f04f 0300 	mov.w	r3, #0
 80010be:	e9c1 2300 	strd	r2, r3, [r1]
	wheels->fst = 0;
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	e9c1 2302 	strd	r2, r3, [r1, #8]
	wheels->sdr = 0;
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	f04f 0300 	mov.w	r3, #0
 80010da:	e9c1 2304 	strd	r2, r3, [r1, #16]
	wheels->sst = 0;
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	f04f 0300 	mov.w	r3, #0
 80010e8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	wheels->max_speed = 0;
 80010ec:	6879      	ldr	r1, [r7, #4]
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	f04f 0300 	mov.w	r3, #0
 80010f6:	e9c1 2308 	strd	r2, r3, [r1, #32]
	wheels->scale_factor = 0;
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	f04f 0300 	mov.w	r3, #0
 8001104:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <LIVE_FOLLOWER_Init>:
	bool in_teleop_mode;
	bool in_live_mode;
	bool is_stopped;
} LIVE_FOLLOWER;

void LIVE_FOLLOWER_Init(LIVE_FOLLOWER *live_follower) {
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	live_follower->target_x = 0;
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	f04f 0300 	mov.w	r3, #0
 8001126:	e9c1 2300 	strd	r2, r3, [r1]
	live_follower->target_y = 0;
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	f04f 0300 	mov.w	r3, #0
 8001134:	e9c1 2302 	strd	r2, r3, [r1, #8]
	live_follower->last_target_x = 0;
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	f04f 0300 	mov.w	r3, #0
 8001142:	e9c1 2304 	strd	r2, r3, [r1, #16]
	live_follower->last_target_y = 0;
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	f04f 0300 	mov.w	r3, #0
 8001150:	e9c1 2306 	strd	r2, r3, [r1, #24]
	live_follower->in_teleop_mode = false;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2020 	strb.w	r2, [r3, #32]
	live_follower->in_live_mode = false;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	live_follower->is_stopped = false;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <ODO_Init>:
//COORDINATES STRUCT
typedef struct {
	double current_x, current_y, current_h;
} ODO;

void ODO_Init(ODO *odometer) {
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	odometer->current_x = 0;
 8001180:	6879      	ldr	r1, [r7, #4]
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	f04f 0300 	mov.w	r3, #0
 800118a:	e9c1 2300 	strd	r2, r3, [r1]
	odometer->current_y = 0;
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	f04f 0300 	mov.w	r3, #0
 8001198:	e9c1 2302 	strd	r2, r3, [r1, #8]
	odometer->current_h = 0;
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	f04f 0300 	mov.w	r3, #0
 80011a6:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <PID_Init>:
	float prevError;
	float integral;
	float maxIntegral;
} PID;

void PID_Init(PID *pid, float kp, float ki, float kd) {
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80011c4:	edc7 0a01 	vstr	s1, [r7, #4]
 80011c8:	ed87 1a00 	vstr	s2, [r7]
	pid->Kp = kp;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	601a      	str	r2, [r3, #0]
	pid->Ki = ki;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	605a      	str	r2, [r3, #4]
	pid->Kd = kd;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	609a      	str	r2, [r3, #8]
	pid->integral = 0;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
	pid->prevError = 0;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
	pid->maxIntegral = 65535;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4a03      	ldr	r2, [pc, #12]	@ (8001200 <PID_Init+0x48>)
 80011f2:	615a      	str	r2, [r3, #20]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	477fff00 	.word	0x477fff00

08001204 <map>:

/***************************************
 ********* HELPER FUNCTIONS ************
 ***************************************/
char msg[400];
double map(long x, long in_min, long in_max, long out_min, long out_max) {
 8001204:	b5b0      	push	{r4, r5, r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	603b      	str	r3, [r7, #0]
	return (double) (x - in_min) * (out_max - out_min) / (in_max - in_min)
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff f9b3 	bl	8000584 <__aeabi_i2d>
 800121e:	4604      	mov	r4, r0
 8001220:	460d      	mov	r5, r1
 8001222:	6a3a      	ldr	r2, [r7, #32]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f9ab 	bl	8000584 <__aeabi_i2d>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4620      	mov	r0, r4
 8001234:	4629      	mov	r1, r5
 8001236:	f7ff fa0f 	bl	8000658 <__aeabi_dmul>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4614      	mov	r4, r2
 8001240:	461d      	mov	r5, r3
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f99b 	bl	8000584 <__aeabi_i2d>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4620      	mov	r0, r4
 8001254:	4629      	mov	r1, r5
 8001256:	f7ff fb29 	bl	80008ac <__aeabi_ddiv>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4614      	mov	r4, r2
 8001260:	461d      	mov	r5, r3
			+ out_min;
 8001262:	6838      	ldr	r0, [r7, #0]
 8001264:	f7ff f98e 	bl	8000584 <__aeabi_i2d>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4620      	mov	r0, r4
 800126e:	4629      	mov	r1, r5
 8001270:	f7ff f83c 	bl	80002ec <__adddf3>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	ec43 2b17 	vmov	d7, r2, r3
}
 800127c:	eeb0 0a47 	vmov.f32	s0, s14
 8001280:	eef0 0a67 	vmov.f32	s1, s15
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800128c <percent2pwm>:
int32_t percent2pwm(int x) {
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	return (x - 0) * (65535 - 0) / (100 - 0) + 0;
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	4613      	mov	r3, r2
 8001298:	041b      	lsls	r3, r3, #16
 800129a:	1a9b      	subs	r3, r3, r2
 800129c:	4a05      	ldr	r2, [pc, #20]	@ (80012b4 <percent2pwm+0x28>)
 800129e:	fb82 1203 	smull	r1, r2, r2, r3
 80012a2:	1152      	asrs	r2, r2, #5
 80012a4:	17db      	asrs	r3, r3, #31
 80012a6:	1ad3      	subs	r3, r2, r3
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	51eb851f 	.word	0x51eb851f

080012b8 <rpm2pwm>:
int32_t rpm2pwm(int x) {
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	return (x - 0) * (65535 - 0) / (160 - 0) + 0;
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	4613      	mov	r3, r2
 80012c4:	041b      	lsls	r3, r3, #16
 80012c6:	1a9b      	subs	r3, r3, r2
 80012c8:	4a05      	ldr	r2, [pc, #20]	@ (80012e0 <rpm2pwm+0x28>)
 80012ca:	fb82 1203 	smull	r1, r2, r2, r3
 80012ce:	1192      	asrs	r2, r2, #6
 80012d0:	17db      	asrs	r3, r3, #31
 80012d2:	1ad3      	subs	r3, r2, r3
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	66666667 	.word	0x66666667
 80012e4:	00000000 	.word	0x00000000

080012e8 <rad2rpm>:
double rad2deg(double rad) {
	return (rad * (180.0 / M_PI)) - ((int) (rad * (180.0 / M_PI) / 360) * 360);
}
float rad2rpm(float rad) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	ed87 0a01 	vstr	s0, [r7, #4]
	return roundf((rad * 60) / (2 * M_PI));
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001340 <rad2rpm+0x58>
 80012fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012fe:	ee17 0a90 	vmov	r0, s15
 8001302:	f7ff f951 	bl	80005a8 <__aeabi_f2d>
 8001306:	a30c      	add	r3, pc, #48	@ (adr r3, 8001338 <rad2rpm+0x50>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff face 	bl	80008ac <__aeabi_ddiv>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f7ff fc96 	bl	8000c48 <__aeabi_d2f>
 800131c:	4603      	mov	r3, r0
 800131e:	ee00 3a10 	vmov	s0, r3
 8001322:	f00c f8cb 	bl	800d4bc <roundf>
 8001326:	eef0 7a40 	vmov.f32	s15, s0
}
 800132a:	eeb0 0a67 	vmov.f32	s0, s15
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	f3af 8000 	nop.w
 8001338:	54442d18 	.word	0x54442d18
 800133c:	401921fb 	.word	0x401921fb
 8001340:	42700000 	.word	0x42700000

08001344 <process_data>:

int chars_written = 0;
void process_data() {
 8001344:	b5b0      	push	{r4, r5, r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af06      	add	r7, sp, #24
	chars_written = snprintf(tx_buffer, MAX_BUFFER_SIZE, "%+.2f,%+.2f,%+.2f\n", odometer.current_x, odometer.current_y, odometer.current_h);
 800134a:	4b1a      	ldr	r3, [pc, #104]	@ (80013b4 <process_data+0x70>)
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	4918      	ldr	r1, [pc, #96]	@ (80013b4 <process_data+0x70>)
 8001352:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8001356:	4c17      	ldr	r4, [pc, #92]	@ (80013b4 <process_data+0x70>)
 8001358:	e9d4 4504 	ldrd	r4, r5, [r4, #16]
 800135c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001360:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001364:	e9cd 2300 	strd	r2, r3, [sp]
 8001368:	4a13      	ldr	r2, [pc, #76]	@ (80013b8 <process_data+0x74>)
 800136a:	2119      	movs	r1, #25
 800136c:	4813      	ldr	r0, [pc, #76]	@ (80013bc <process_data+0x78>)
 800136e:	f009 f929 	bl	800a5c4 <sniprintf>
 8001372:	4603      	mov	r3, r0
 8001374:	4a12      	ldr	r2, [pc, #72]	@ (80013c0 <process_data+0x7c>)
 8001376:	6013      	str	r3, [r2, #0]
	if (chars_written < 0 || chars_written > MAX_BUFFER_SIZE) {
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <process_data+0x7c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	db12      	blt.n	80013a6 <process_data+0x62>
 8001380:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <process_data+0x7c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b19      	cmp	r3, #25
 8001386:	dc0e      	bgt.n	80013a6 <process_data+0x62>
		/*TODO: handle error*/
	} else {
		for (int i = chars_written; i < MAX_BUFFER_SIZE; i++) {
 8001388:	4b0d      	ldr	r3, [pc, #52]	@ (80013c0 <process_data+0x7c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	e007      	b.n	80013a0 <process_data+0x5c>
			tx_buffer[i] = '\n';
 8001390:	4a0a      	ldr	r2, [pc, #40]	@ (80013bc <process_data+0x78>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	220a      	movs	r2, #10
 8001398:	701a      	strb	r2, [r3, #0]
		for (int i = chars_written; i < MAX_BUFFER_SIZE; i++) {
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3301      	adds	r3, #1
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b18      	cmp	r3, #24
 80013a4:	ddf4      	ble.n	8001390 <process_data+0x4c>
		}
	}
	tx_buffer[MAX_BUFFER_SIZE - 1] = '\0';
 80013a6:	4b05      	ldr	r3, [pc, #20]	@ (80013bc <process_data+0x78>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	761a      	strb	r2, [r3, #24]
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bdb0      	pop	{r4, r5, r7, pc}
 80013b4:	20000d58 	.word	0x20000d58
 80013b8:	0800d520 	.word	0x0800d520
 80013bc:	20000db0 	.word	0x20000db0
 80013c0:	20000dcc 	.word	0x20000dcc

080013c4 <computeCommand>:

int32_t computeCommand(PID *pid, float setPoint, int speed) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80013d0:	6079      	str	r1, [r7, #4]
	int32_t output = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
	//calculam eroarea
	float error = abs(setPoint) - speed;
 80013d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80013da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013de:	ee17 3a90 	vmov	r3, s15
 80013e2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80013e6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	ee07 3a90 	vmov	s15, r3
 80013f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f6:	edc7 7a04 	vstr	s15, [r7, #16]
	//calculam integrala
	pid->integral += error;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	ed93 7a04 	vldr	s14, [r3, #16]
 8001400:	edd7 7a04 	vldr	s15, [r7, #16]
 8001404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	edc3 7a04 	vstr	s15, [r3, #16]
	//anti windup
	if (pid->integral > pid->maxIntegral) {
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	ed93 7a04 	vldr	s14, [r3, #16]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	edd3 7a05 	vldr	s15, [r3, #20]
 800141a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800141e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001422:	dd04      	ble.n	800142e <computeCommand+0x6a>
		pid->integral = pid->maxIntegral;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	695a      	ldr	r2, [r3, #20]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	611a      	str	r2, [r3, #16]
 800142c:	e014      	b.n	8001458 <computeCommand+0x94>
	} else if (pid->integral < -pid->maxIntegral) {
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	ed93 7a04 	vldr	s14, [r3, #16]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	edd3 7a05 	vldr	s15, [r3, #20]
 800143a:	eef1 7a67 	vneg.f32	s15, s15
 800143e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001446:	d507      	bpl.n	8001458 <computeCommand+0x94>
		pid->integral = -pid->maxIntegral;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	edd3 7a05 	vldr	s15, [r3, #20]
 800144e:	eef1 7a67 	vneg.f32	s15, s15
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	edc3 7a04 	vstr	s15, [r3, #16]
	}

	//calculam comanda
	output = pid->Kp * error + pid->Ki * pid->integral;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	ed93 7a00 	vldr	s14, [r3]
 800145e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001462:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	edd3 6a01 	vldr	s13, [r3, #4]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001472:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800147e:	ee17 3a90 	vmov	r3, s15
 8001482:	617b      	str	r3, [r7, #20]
	if (output > 65535)
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800148a:	db02      	blt.n	8001492 <computeCommand+0xce>
		output = 65535;
 800148c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001490:	617b      	str	r3, [r7, #20]
	HAL_Delay(100);
 8001492:	2064      	movs	r0, #100	@ 0x64
 8001494:	f002 ff30 	bl	80042f8 <HAL_Delay>

	if (setPoint < 0) {
 8001498:	edd7 7a02 	vldr	s15, [r7, #8]
 800149c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a4:	d503      	bpl.n	80014ae <computeCommand+0xea>
		output *= -1;
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	425b      	negs	r3, r3
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	e005      	b.n	80014ba <computeCommand+0xf6>
	} else if (setPoint > 0) {
 80014ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80014b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		output *= 1;
	}
	return output;
 80014ba:	697b      	ldr	r3, [r7, #20]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	0000      	movs	r0, r0
	...

080014c8 <HAL_TIM_PeriodElapsedCallback>:

/***************************************
 ********* CALLBACK FUNCTIONS **********
 ***************************************/
double time = 0.0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	if (htim == &htim9) {
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a93      	ldr	r2, [pc, #588]	@ (8001720 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	f040 811a 	bne.w	800170e <HAL_TIM_PeriodElapsedCallback+0x246>
		//fdr
		fdr.position = __HAL_TIM_GET_COUNTER(&htim1);
 80014da:	4b92      	ldr	r3, [pc, #584]	@ (8001724 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b91      	ldr	r3, [pc, #580]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80014e4:	601a      	str	r2, [r3, #0]
		fdr.speed = fdr.position - fdr.old_position;
 80014e6:	4b90      	ldr	r3, [pc, #576]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4b8f      	ldr	r3, [pc, #572]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	4a8d      	ldr	r2, [pc, #564]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80014f2:	6093      	str	r3, [r2, #8]
		fdr.speed_rpm = (double)((fdr.speed * 60.0) / 1120.0);
 80014f4:	4b8c      	ldr	r3, [pc, #560]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff f843 	bl	8000584 <__aeabi_i2d>
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	4b8a      	ldr	r3, [pc, #552]	@ (800172c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001504:	f7ff f8a8 	bl	8000658 <__aeabi_dmul>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	4b86      	ldr	r3, [pc, #536]	@ (8001730 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001516:	f7ff f9c9 	bl	80008ac <__aeabi_ddiv>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4982      	ldr	r1, [pc, #520]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001520:	e9c1 2304 	strd	r2, r3, [r1, #16]
		fdr.speed_rad = (fdr.speed_rpm / 60) * 2 * M_PI;
 8001524:	4b80      	ldr	r3, [pc, #512]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001526:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b7f      	ldr	r3, [pc, #508]	@ (800172c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001530:	f7ff f9bc 	bl	80008ac <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	f7fe fed4 	bl	80002ec <__adddf3>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	a372      	add	r3, pc, #456	@ (adr r3, 8001718 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	f7ff f881 	bl	8000658 <__aeabi_dmul>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4973      	ldr	r1, [pc, #460]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800155c:	e9c1 2306 	strd	r2, r3, [r1, #24]
		fdr.old_position = fdr.position;
 8001560:	4b71      	ldr	r3, [pc, #452]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a70      	ldr	r2, [pc, #448]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001566:	6053      	str	r3, [r2, #4]

		//fst
		fst.position = __HAL_TIM_GET_COUNTER(&htim2);
 8001568:	4b72      	ldr	r3, [pc, #456]	@ (8001734 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156e:	461a      	mov	r2, r3
 8001570:	4b71      	ldr	r3, [pc, #452]	@ (8001738 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001572:	601a      	str	r2, [r3, #0]
		fst.speed = fst.position - fst.old_position;
 8001574:	4b70      	ldr	r3, [pc, #448]	@ (8001738 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b6f      	ldr	r3, [pc, #444]	@ (8001738 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	4a6e      	ldr	r2, [pc, #440]	@ (8001738 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001580:	6093      	str	r3, [r2, #8]
		fst.speed_rpm = (fst.speed * 60) / TICKS_PER_REVOLUTION;
 8001582:	4b6d      	ldr	r3, [pc, #436]	@ (8001738 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	4613      	mov	r3, r2
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	1a9b      	subs	r3, r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4a6b      	ldr	r2, [pc, #428]	@ (800173c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001590:	fb82 1203 	smull	r1, r2, r2, r3
 8001594:	441a      	add	r2, r3
 8001596:	1292      	asrs	r2, r2, #10
 8001598:	17db      	asrs	r3, r3, #31
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe fff1 	bl	8000584 <__aeabi_i2d>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4964      	ldr	r1, [pc, #400]	@ (8001738 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80015a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
		fst.speed_rad = (fst.speed_rpm / 60) * 2 * M_PI;
 80015ac:	4b62      	ldr	r3, [pc, #392]	@ (8001738 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80015ae:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	4b5d      	ldr	r3, [pc, #372]	@ (800172c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80015b8:	f7ff f978 	bl	80008ac <__aeabi_ddiv>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4610      	mov	r0, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	f7fe fe90 	bl	80002ec <__adddf3>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4610      	mov	r0, r2
 80015d2:	4619      	mov	r1, r3
 80015d4:	a350      	add	r3, pc, #320	@ (adr r3, 8001718 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	f7ff f83d 	bl	8000658 <__aeabi_dmul>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4955      	ldr	r1, [pc, #340]	@ (8001738 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80015e4:	e9c1 2306 	strd	r2, r3, [r1, #24]
		fst.old_position = fst.position;
 80015e8:	4b53      	ldr	r3, [pc, #332]	@ (8001738 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a52      	ldr	r2, [pc, #328]	@ (8001738 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80015ee:	6053      	str	r3, [r2, #4]

		//sdr
		sdr.position = __HAL_TIM_GET_COUNTER(&htim3);
 80015f0:	4b53      	ldr	r3, [pc, #332]	@ (8001740 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b52      	ldr	r3, [pc, #328]	@ (8001744 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80015fa:	601a      	str	r2, [r3, #0]
		sdr.speed = sdr.position - sdr.old_position;
 80015fc:	4b51      	ldr	r3, [pc, #324]	@ (8001744 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b50      	ldr	r3, [pc, #320]	@ (8001744 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	4a4f      	ldr	r2, [pc, #316]	@ (8001744 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001608:	6093      	str	r3, [r2, #8]
		sdr.speed_rpm = (sdr.speed * 60) / TICKS_PER_REVOLUTION;
 800160a:	4b4e      	ldr	r3, [pc, #312]	@ (8001744 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	4613      	mov	r3, r2
 8001610:	011b      	lsls	r3, r3, #4
 8001612:	1a9b      	subs	r3, r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4a49      	ldr	r2, [pc, #292]	@ (800173c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001618:	fb82 1203 	smull	r1, r2, r2, r3
 800161c:	441a      	add	r2, r3
 800161e:	1292      	asrs	r2, r2, #10
 8001620:	17db      	asrs	r3, r3, #31
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ffad 	bl	8000584 <__aeabi_i2d>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4945      	ldr	r1, [pc, #276]	@ (8001744 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001630:	e9c1 2304 	strd	r2, r3, [r1, #16]
		sdr.speed_rad = (sdr.speed_rpm / 60) * 2 * M_PI;
 8001634:	4b43      	ldr	r3, [pc, #268]	@ (8001744 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001636:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	4b3b      	ldr	r3, [pc, #236]	@ (800172c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001640:	f7ff f934 	bl	80008ac <__aeabi_ddiv>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4610      	mov	r0, r2
 800164a:	4619      	mov	r1, r3
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	f7fe fe4c 	bl	80002ec <__adddf3>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	a32e      	add	r3, pc, #184	@ (adr r3, 8001718 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001662:	f7fe fff9 	bl	8000658 <__aeabi_dmul>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4936      	ldr	r1, [pc, #216]	@ (8001744 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800166c:	e9c1 2306 	strd	r2, r3, [r1, #24]
		sdr.old_position = sdr.position;
 8001670:	4b34      	ldr	r3, [pc, #208]	@ (8001744 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a33      	ldr	r2, [pc, #204]	@ (8001744 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001676:	6053      	str	r3, [r2, #4]

		//sst
		sst.position = __HAL_TIM_GET_COUNTER(&htim5);
 8001678:	4b33      	ldr	r3, [pc, #204]	@ (8001748 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167e:	461a      	mov	r2, r3
 8001680:	4b32      	ldr	r3, [pc, #200]	@ (800174c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001682:	601a      	str	r2, [r3, #0]
		sst.speed = sst.position - sst.old_position;
 8001684:	4b31      	ldr	r3, [pc, #196]	@ (800174c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b30      	ldr	r3, [pc, #192]	@ (800174c <HAL_TIM_PeriodElapsedCallback+0x284>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	4a2f      	ldr	r2, [pc, #188]	@ (800174c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001690:	6093      	str	r3, [r2, #8]
		sst.speed_rpm = (sst.speed * 60) / TICKS_PER_REVOLUTION;
 8001692:	4b2e      	ldr	r3, [pc, #184]	@ (800174c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	4613      	mov	r3, r2
 8001698:	011b      	lsls	r3, r3, #4
 800169a:	1a9b      	subs	r3, r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4a27      	ldr	r2, [pc, #156]	@ (800173c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80016a0:	fb82 1203 	smull	r1, r2, r2, r3
 80016a4:	441a      	add	r2, r3
 80016a6:	1292      	asrs	r2, r2, #10
 80016a8:	17db      	asrs	r3, r3, #31
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe ff69 	bl	8000584 <__aeabi_i2d>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4925      	ldr	r1, [pc, #148]	@ (800174c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80016b8:	e9c1 2304 	strd	r2, r3, [r1, #16]
		sst.speed_rad = (sst.speed_rpm / 60) * 2 * M_PI;
 80016bc:	4b23      	ldr	r3, [pc, #140]	@ (800174c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80016be:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	4b19      	ldr	r3, [pc, #100]	@ (800172c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80016c8:	f7ff f8f0 	bl	80008ac <__aeabi_ddiv>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4610      	mov	r0, r2
 80016d2:	4619      	mov	r1, r3
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	f7fe fe08 	bl	80002ec <__adddf3>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	a30c      	add	r3, pc, #48	@ (adr r3, 8001718 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe ffb5 	bl	8000658 <__aeabi_dmul>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4916      	ldr	r1, [pc, #88]	@ (800174c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80016f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
		sst.old_position = sst.position;
 80016f8:	4b14      	ldr	r3, [pc, #80]	@ (800174c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a13      	ldr	r2, [pc, #76]	@ (800174c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80016fe:	6053      	str	r3, [r2, #4]

		process_data();
 8001700:	f7ff fe20 	bl	8001344 <process_data>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*) tx_buffer, 25);
 8001704:	2219      	movs	r2, #25
 8001706:	4912      	ldr	r1, [pc, #72]	@ (8001750 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001708:	4812      	ldr	r0, [pc, #72]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800170a:	f005 ff2f 	bl	800756c <HAL_UART_Transmit_DMA>

	}
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	54442d18 	.word	0x54442d18
 800171c:	400921fb 	.word	0x400921fb
 8001720:	2000040c 	.word	0x2000040c
 8001724:	2000025c 	.word	0x2000025c
 8001728:	20000c80 	.word	0x20000c80
 800172c:	404e0000 	.word	0x404e0000
 8001730:	40918000 	.word	0x40918000
 8001734:	200002a4 	.word	0x200002a4
 8001738:	20000ca0 	.word	0x20000ca0
 800173c:	ea0ea0eb 	.word	0xea0ea0eb
 8001740:	200002ec 	.word	0x200002ec
 8001744:	20000cc0 	.word	0x20000cc0
 8001748:	2000037c 	.word	0x2000037c
 800174c:	20000ce0 	.word	0x20000ce0
 8001750:	20000db0 	.word	0x20000db0
 8001754:	2000052c 	.word	0x2000052c

08001758 <HAL_UART_TxCpltCallback>:

/** UART CALLBACKS */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	if (huart == &huart3) {
//		process_data();
//		HAL_UART_Transmit_DMA(&huart3, (uint8_t *) tx_buffer, 25);
	}
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b099      	sub	sp, #100	@ 0x64
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) { //ESP32
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a99      	ldr	r2, [pc, #612]	@ (80019dc <HAL_UART_RxCpltCallback+0x270>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d12c      	bne.n	80017d6 <HAL_UART_RxCpltCallback+0x6a>
		HAL_UART_Receive_DMA(&huart2, controller_buffer, MAX_CONTROLLER_SIZE);
 800177c:	220f      	movs	r2, #15
 800177e:	4998      	ldr	r1, [pc, #608]	@ (80019e0 <HAL_UART_RxCpltCallback+0x274>)
 8001780:	4896      	ldr	r0, [pc, #600]	@ (80019dc <HAL_UART_RxCpltCallback+0x270>)
 8001782:	f005 ff63 	bl	800764c <HAL_UART_Receive_DMA>
		int joystick_values[3];
		int index = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	65fb      	str	r3, [r7, #92]	@ 0x5c
		char *token;

		token = strtok((char*) controller_buffer, ",");
 800178a:	4996      	ldr	r1, [pc, #600]	@ (80019e4 <HAL_UART_RxCpltCallback+0x278>)
 800178c:	4894      	ldr	r0, [pc, #592]	@ (80019e0 <HAL_UART_RxCpltCallback+0x274>)
 800178e:	f008 ffab 	bl	800a6e8 <strtok>
 8001792:	65b8      	str	r0, [r7, #88]	@ 0x58
		while (token != NULL && index < 3) {
 8001794:	e010      	b.n	80017b8 <HAL_UART_RxCpltCallback+0x4c>
			joystick_values[index++] = atoi(token);
 8001796:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8001798:	1c63      	adds	r3, r4, #1
 800179a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800179c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800179e:	f007 fb5e 	bl	8008e5e <atoi>
 80017a2:	4602      	mov	r2, r0
 80017a4:	00a3      	lsls	r3, r4, #2
 80017a6:	3360      	adds	r3, #96	@ 0x60
 80017a8:	443b      	add	r3, r7
 80017aa:	f843 2c24 	str.w	r2, [r3, #-36]
			token = strtok(NULL, ",");
 80017ae:	498d      	ldr	r1, [pc, #564]	@ (80019e4 <HAL_UART_RxCpltCallback+0x278>)
 80017b0:	2000      	movs	r0, #0
 80017b2:	f008 ff99 	bl	800a6e8 <strtok>
 80017b6:	65b8      	str	r0, [r7, #88]	@ 0x58
		while (token != NULL && index < 3) {
 80017b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d002      	beq.n	80017c4 <HAL_UART_RxCpltCallback+0x58>
 80017be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	dde8      	ble.n	8001796 <HAL_UART_RxCpltCallback+0x2a>
		}
		ps4.w = joystick_values[0]; //lx - w
 80017c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017c6:	4a88      	ldr	r2, [pc, #544]	@ (80019e8 <HAL_UART_RxCpltCallback+0x27c>)
 80017c8:	6013      	str	r3, [r2, #0]
		ps4.y = joystick_values[1]; //rx - y
 80017ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017cc:	4a86      	ldr	r2, [pc, #536]	@ (80019e8 <HAL_UART_RxCpltCallback+0x27c>)
 80017ce:	6053      	str	r3, [r2, #4]
		ps4.x = joystick_values[2]; //ry - x
 80017d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017d2:	4a85      	ldr	r2, [pc, #532]	@ (80019e8 <HAL_UART_RxCpltCallback+0x27c>)
 80017d4:	6093      	str	r3, [r2, #8]
	}
	if (huart == &huart6) { //BLUEPILL
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a84      	ldr	r2, [pc, #528]	@ (80019ec <HAL_UART_RxCpltCallback+0x280>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d179      	bne.n	80018d2 <HAL_UART_RxCpltCallback+0x166>
		HAL_UART_Receive_DMA(&huart6, odometry_buffer, MAX_ODOMETRY_SIZE);
 80017de:	2219      	movs	r2, #25
 80017e0:	4983      	ldr	r1, [pc, #524]	@ (80019f0 <HAL_UART_RxCpltCallback+0x284>)
 80017e2:	4882      	ldr	r0, [pc, #520]	@ (80019ec <HAL_UART_RxCpltCallback+0x280>)
 80017e4:	f005 ff32 	bl	800764c <HAL_UART_Receive_DMA>
		double coordinates[3];
		int index = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	657b      	str	r3, [r7, #84]	@ 0x54
		char *token;

		token = strtok((char*) odometry_buffer, ",");
 80017ec:	497d      	ldr	r1, [pc, #500]	@ (80019e4 <HAL_UART_RxCpltCallback+0x278>)
 80017ee:	4880      	ldr	r0, [pc, #512]	@ (80019f0 <HAL_UART_RxCpltCallback+0x284>)
 80017f0:	f008 ff7a 	bl	800a6e8 <strtok>
 80017f4:	6538      	str	r0, [r7, #80]	@ 0x50
		while (token != NULL && index < 3) {
 80017f6:	e015      	b.n	8001824 <HAL_UART_RxCpltCallback+0xb8>
			coordinates[index++] = strtod(token, NULL);
 80017f8:	6d7c      	ldr	r4, [r7, #84]	@ 0x54
 80017fa:	1c63      	adds	r3, r4, #1
 80017fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80017fe:	2100      	movs	r1, #0
 8001800:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001802:	f008 f935 	bl	8009a70 <strtod>
 8001806:	eeb0 7a40 	vmov.f32	s14, s0
 800180a:	eef0 7a60 	vmov.f32	s15, s1
 800180e:	00e3      	lsls	r3, r4, #3
 8001810:	3360      	adds	r3, #96	@ 0x60
 8001812:	443b      	add	r3, r7
 8001814:	3b40      	subs	r3, #64	@ 0x40
 8001816:	ed83 7b00 	vstr	d7, [r3]
			token = strtok(NULL, ",");
 800181a:	4972      	ldr	r1, [pc, #456]	@ (80019e4 <HAL_UART_RxCpltCallback+0x278>)
 800181c:	2000      	movs	r0, #0
 800181e:	f008 ff63 	bl	800a6e8 <strtok>
 8001822:	6538      	str	r0, [r7, #80]	@ 0x50
		while (token != NULL && index < 3) {
 8001824:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001826:	2b00      	cmp	r3, #0
 8001828:	d002      	beq.n	8001830 <HAL_UART_RxCpltCallback+0xc4>
 800182a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800182c:	2b02      	cmp	r3, #2
 800182e:	dde3      	ble.n	80017f8 <HAL_UART_RxCpltCallback+0x8c>
		}
		odometer.current_x = (double) ((int) (coordinates[0] * 100)) / 100;
 8001830:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	4b6e      	ldr	r3, [pc, #440]	@ (80019f4 <HAL_UART_RxCpltCallback+0x288>)
 800183a:	f7fe ff0d 	bl	8000658 <__aeabi_dmul>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	f7ff f9b7 	bl	8000bb8 <__aeabi_d2iz>
 800184a:	4603      	mov	r3, r0
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe99 	bl	8000584 <__aeabi_i2d>
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	4b67      	ldr	r3, [pc, #412]	@ (80019f4 <HAL_UART_RxCpltCallback+0x288>)
 8001858:	f7ff f828 	bl	80008ac <__aeabi_ddiv>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4965      	ldr	r1, [pc, #404]	@ (80019f8 <HAL_UART_RxCpltCallback+0x28c>)
 8001862:	e9c1 2300 	strd	r2, r3, [r1]
		odometer.current_y = (double) ((int) (coordinates[1] * 100)) / 100;
 8001866:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	4b61      	ldr	r3, [pc, #388]	@ (80019f4 <HAL_UART_RxCpltCallback+0x288>)
 8001870:	f7fe fef2 	bl	8000658 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	f7ff f99c 	bl	8000bb8 <__aeabi_d2iz>
 8001880:	4603      	mov	r3, r0
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fe7e 	bl	8000584 <__aeabi_i2d>
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	4b59      	ldr	r3, [pc, #356]	@ (80019f4 <HAL_UART_RxCpltCallback+0x288>)
 800188e:	f7ff f80d 	bl	80008ac <__aeabi_ddiv>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4958      	ldr	r1, [pc, #352]	@ (80019f8 <HAL_UART_RxCpltCallback+0x28c>)
 8001898:	e9c1 2302 	strd	r2, r3, [r1, #8]
		odometer.current_h = (double) ((int) (coordinates[2] * 100)) / 100;
 800189c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	4b53      	ldr	r3, [pc, #332]	@ (80019f4 <HAL_UART_RxCpltCallback+0x288>)
 80018a6:	f7fe fed7 	bl	8000658 <__aeabi_dmul>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7ff f981 	bl	8000bb8 <__aeabi_d2iz>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe63 	bl	8000584 <__aeabi_i2d>
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	4b4c      	ldr	r3, [pc, #304]	@ (80019f4 <HAL_UART_RxCpltCallback+0x288>)
 80018c4:	f7fe fff2 	bl	80008ac <__aeabi_ddiv>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	494a      	ldr	r1, [pc, #296]	@ (80019f8 <HAL_UART_RxCpltCallback+0x28c>)
 80018ce:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
	if (huart == &huart3) { //HC-05
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a49      	ldr	r2, [pc, #292]	@ (80019fc <HAL_UART_RxCpltCallback+0x290>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d17b      	bne.n	80019d2 <HAL_UART_RxCpltCallback+0x266>
		HAL_UART_Receive_DMA(&huart3, trajectory_buffer, MAX_TRAJECTORY_SIZE);
 80018da:	2208      	movs	r2, #8
 80018dc:	4948      	ldr	r1, [pc, #288]	@ (8001a00 <HAL_UART_RxCpltCallback+0x294>)
 80018de:	4847      	ldr	r0, [pc, #284]	@ (80019fc <HAL_UART_RxCpltCallback+0x290>)
 80018e0:	f005 feb4 	bl	800764c <HAL_UART_Receive_DMA>
		double trajectory[3];
		int index = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		char *token;

		token = strtok((char*) trajectory_buffer, ",");
 80018e8:	493e      	ldr	r1, [pc, #248]	@ (80019e4 <HAL_UART_RxCpltCallback+0x278>)
 80018ea:	4845      	ldr	r0, [pc, #276]	@ (8001a00 <HAL_UART_RxCpltCallback+0x294>)
 80018ec:	f008 fefc 	bl	800a6e8 <strtok>
 80018f0:	64b8      	str	r0, [r7, #72]	@ 0x48
		if (strcmp(token, "L") == 0) {
 80018f2:	4944      	ldr	r1, [pc, #272]	@ (8001a04 <HAL_UART_RxCpltCallback+0x298>)
 80018f4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80018f6:	f7fe fc8b 	bl	8000210 <strcmp>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10c      	bne.n	800191a <HAL_UART_RxCpltCallback+0x1ae>
			//ne pregatim sa primim date pentru live follower
			live_follower.in_teleop_mode = false;
 8001900:	4b41      	ldr	r3, [pc, #260]	@ (8001a08 <HAL_UART_RxCpltCallback+0x29c>)
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2020 	strb.w	r2, [r3, #32]
			live_follower.in_live_mode = true;
 8001908:	4b3f      	ldr	r3, [pc, #252]	@ (8001a08 <HAL_UART_RxCpltCallback+0x29c>)
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			live_follower.is_stopped = false;
 8001910:	4b3d      	ldr	r3, [pc, #244]	@ (8001a08 <HAL_UART_RxCpltCallback+0x29c>)
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001918:	e026      	b.n	8001968 <HAL_UART_RxCpltCallback+0x1fc>
		} else if (strcmp(token, "T") == 0) {
 800191a:	493c      	ldr	r1, [pc, #240]	@ (8001a0c <HAL_UART_RxCpltCallback+0x2a0>)
 800191c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800191e:	f7fe fc77 	bl	8000210 <strcmp>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10c      	bne.n	8001942 <HAL_UART_RxCpltCallback+0x1d6>
			//ne pregatim sa primim date pentru teleop
			live_follower.in_teleop_mode = true;
 8001928:	4b37      	ldr	r3, [pc, #220]	@ (8001a08 <HAL_UART_RxCpltCallback+0x29c>)
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2020 	strb.w	r2, [r3, #32]
			live_follower.in_live_mode = false;
 8001930:	4b35      	ldr	r3, [pc, #212]	@ (8001a08 <HAL_UART_RxCpltCallback+0x29c>)
 8001932:	2200      	movs	r2, #0
 8001934:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			live_follower.is_stopped = false;
 8001938:	4b33      	ldr	r3, [pc, #204]	@ (8001a08 <HAL_UART_RxCpltCallback+0x29c>)
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001940:	e012      	b.n	8001968 <HAL_UART_RxCpltCallback+0x1fc>
		} else if (strcmp(token, "S") == 0) {
 8001942:	4933      	ldr	r1, [pc, #204]	@ (8001a10 <HAL_UART_RxCpltCallback+0x2a4>)
 8001944:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001946:	f7fe fc63 	bl	8000210 <strcmp>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d10b      	bne.n	8001968 <HAL_UART_RxCpltCallback+0x1fc>
			//ne pregatim sa primim date pentru stop
			live_follower.in_teleop_mode = false;
 8001950:	4b2d      	ldr	r3, [pc, #180]	@ (8001a08 <HAL_UART_RxCpltCallback+0x29c>)
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2020 	strb.w	r2, [r3, #32]
			live_follower.in_live_mode = false;
 8001958:	4b2b      	ldr	r3, [pc, #172]	@ (8001a08 <HAL_UART_RxCpltCallback+0x29c>)
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			live_follower.is_stopped = true;
 8001960:	4b29      	ldr	r3, [pc, #164]	@ (8001a08 <HAL_UART_RxCpltCallback+0x29c>)
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		}

		if (strcmp(token, "L") != 0 && strcmp(token, "T") != 0) {
 8001968:	4926      	ldr	r1, [pc, #152]	@ (8001a04 <HAL_UART_RxCpltCallback+0x298>)
 800196a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800196c:	f7fe fc50 	bl	8000210 <strcmp>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d02d      	beq.n	80019d2 <HAL_UART_RxCpltCallback+0x266>
 8001976:	4925      	ldr	r1, [pc, #148]	@ (8001a0c <HAL_UART_RxCpltCallback+0x2a0>)
 8001978:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800197a:	f7fe fc49 	bl	8000210 <strcmp>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d026      	beq.n	80019d2 <HAL_UART_RxCpltCallback+0x266>
			while (token != NULL && index < 3) {
 8001984:	e015      	b.n	80019b2 <HAL_UART_RxCpltCallback+0x246>
				trajectory[index++] = strtod(token, NULL);
 8001986:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8001988:	1c63      	adds	r3, r4, #1
 800198a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800198c:	2100      	movs	r1, #0
 800198e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001990:	f008 f86e 	bl	8009a70 <strtod>
 8001994:	eeb0 7a40 	vmov.f32	s14, s0
 8001998:	eef0 7a60 	vmov.f32	s15, s1
 800199c:	00e3      	lsls	r3, r4, #3
 800199e:	3360      	adds	r3, #96	@ 0x60
 80019a0:	443b      	add	r3, r7
 80019a2:	3b58      	subs	r3, #88	@ 0x58
 80019a4:	ed83 7b00 	vstr	d7, [r3]
				token = strtok(NULL, ",");
 80019a8:	490e      	ldr	r1, [pc, #56]	@ (80019e4 <HAL_UART_RxCpltCallback+0x278>)
 80019aa:	2000      	movs	r0, #0
 80019ac:	f008 fe9c 	bl	800a6e8 <strtok>
 80019b0:	64b8      	str	r0, [r7, #72]	@ 0x48
			while (token != NULL && index < 3) {
 80019b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d002      	beq.n	80019be <HAL_UART_RxCpltCallback+0x252>
 80019b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	dde3      	ble.n	8001986 <HAL_UART_RxCpltCallback+0x21a>
			}
			live_follower.target_x = trajectory[0];
 80019be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019c2:	4911      	ldr	r1, [pc, #68]	@ (8001a08 <HAL_UART_RxCpltCallback+0x29c>)
 80019c4:	e9c1 2300 	strd	r2, r3, [r1]
			live_follower.target_y = trajectory[1];
 80019c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019cc:	490e      	ldr	r1, [pc, #56]	@ (8001a08 <HAL_UART_RxCpltCallback+0x29c>)
 80019ce:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}
	}
}
 80019d2:	bf00      	nop
 80019d4:	3764      	adds	r7, #100	@ 0x64
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd90      	pop	{r4, r7, pc}
 80019da:	bf00      	nop
 80019dc:	200004e4 	.word	0x200004e4
 80019e0:	20000d84 	.word	0x20000d84
 80019e4:	0800d534 	.word	0x0800d534
 80019e8:	20000d70 	.word	0x20000d70
 80019ec:	20000574 	.word	0x20000574
 80019f0:	20000d94 	.word	0x20000d94
 80019f4:	40590000 	.word	0x40590000
 80019f8:	20000d58 	.word	0x20000d58
 80019fc:	2000052c 	.word	0x2000052c
 8001a00:	20000d7c 	.word	0x20000d7c
 8001a04:	0800d538 	.word	0x0800d538
 8001a08:	20000d30 	.word	0x20000d30
 8001a0c:	0800d53c 	.word	0x0800d53c
 8001a10:	0800d540 	.word	0x0800d540

08001a14 <fdr_set_pwm>:
/***************************************
 ********* MOVEMENT FUNCTIONS **********
 ***************************************/

void fdr_set_pwm(int32_t pwm_value) {
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	if (pwm_value > 0) {
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	dd06      	ble.n	8001a30 <fdr_set_pwm+0x1c>
		TIM4->CCR3 = 0; // L
 8001a22:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <fdr_set_pwm+0x50>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM4->CCR4 = pwm_value; // R
 8001a28:	4a0e      	ldr	r2, [pc, #56]	@ (8001a64 <fdr_set_pwm+0x50>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM4->CCR3 = pwm_value * -1; // L
	} else if (pwm_value == 0) {
		TIM4->CCR4 = 0; // R
		TIM4->CCR3 = 0; // L
	}
}
 8001a2e:	e013      	b.n	8001a58 <fdr_set_pwm+0x44>
	} else if (pwm_value < 0) {
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	da07      	bge.n	8001a46 <fdr_set_pwm+0x32>
		TIM4->CCR4 = 0; // R
 8001a36:	4b0b      	ldr	r3, [pc, #44]	@ (8001a64 <fdr_set_pwm+0x50>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM4->CCR3 = pwm_value * -1; // L
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	425a      	negs	r2, r3
 8001a40:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <fdr_set_pwm+0x50>)
 8001a42:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001a44:	e008      	b.n	8001a58 <fdr_set_pwm+0x44>
	} else if (pwm_value == 0) {
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d105      	bne.n	8001a58 <fdr_set_pwm+0x44>
		TIM4->CCR4 = 0; // R
 8001a4c:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <fdr_set_pwm+0x50>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM4->CCR3 = 0; // L
 8001a52:	4b04      	ldr	r3, [pc, #16]	@ (8001a64 <fdr_set_pwm+0x50>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	40000800 	.word	0x40000800

08001a68 <fst_set_pwm>:
void fst_set_pwm(int32_t pwm_value) {
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	if (pwm_value > 0) {
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	dd06      	ble.n	8001a84 <fst_set_pwm+0x1c>
		TIM4->CCR2 = 0; // L
 8001a76:	4b10      	ldr	r3, [pc, #64]	@ (8001ab8 <fst_set_pwm+0x50>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM4->CCR1 = pwm_value; // R
 8001a7c:	4a0e      	ldr	r2, [pc, #56]	@ (8001ab8 <fst_set_pwm+0x50>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM4->CCR2 = pwm_value * -1; // L
	} else if (pwm_value == 0) {
		TIM4->CCR1 = 0; // R
		TIM4->CCR2 = 0; // L
	}
}
 8001a82:	e013      	b.n	8001aac <fst_set_pwm+0x44>
	} else if (pwm_value < 0) {
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	da07      	bge.n	8001a9a <fst_set_pwm+0x32>
		TIM4->CCR1 = 0; // R
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab8 <fst_set_pwm+0x50>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM4->CCR2 = pwm_value * -1; // L
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	425a      	negs	r2, r3
 8001a94:	4b08      	ldr	r3, [pc, #32]	@ (8001ab8 <fst_set_pwm+0x50>)
 8001a96:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001a98:	e008      	b.n	8001aac <fst_set_pwm+0x44>
	} else if (pwm_value == 0) {
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d105      	bne.n	8001aac <fst_set_pwm+0x44>
		TIM4->CCR1 = 0; // R
 8001aa0:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <fst_set_pwm+0x50>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM4->CCR2 = 0; // L
 8001aa6:	4b04      	ldr	r3, [pc, #16]	@ (8001ab8 <fst_set_pwm+0x50>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	40000800 	.word	0x40000800

08001abc <sdr_set_pwm>:
void sdr_set_pwm(int32_t pwm_value) {
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	if (pwm_value > 0) {
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	dd06      	ble.n	8001ad8 <sdr_set_pwm+0x1c>
		TIM8->CCR3 = 0; // R
 8001aca:	4b10      	ldr	r3, [pc, #64]	@ (8001b0c <sdr_set_pwm+0x50>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM8->CCR4 = pwm_value; // L
 8001ad0:	4a0e      	ldr	r2, [pc, #56]	@ (8001b0c <sdr_set_pwm+0x50>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM8->CCR3 = pwm_value * -1; // R
	} else if (pwm_value == 0) {
		TIM8->CCR4 = 0; // R
		TIM8->CCR3 = 0; // L
	}
}
 8001ad6:	e013      	b.n	8001b00 <sdr_set_pwm+0x44>
	} else if (pwm_value < 0) {
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	da07      	bge.n	8001aee <sdr_set_pwm+0x32>
		TIM8->CCR4 = 0; // L
 8001ade:	4b0b      	ldr	r3, [pc, #44]	@ (8001b0c <sdr_set_pwm+0x50>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM8->CCR3 = pwm_value * -1; // R
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	425a      	negs	r2, r3
 8001ae8:	4b08      	ldr	r3, [pc, #32]	@ (8001b0c <sdr_set_pwm+0x50>)
 8001aea:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001aec:	e008      	b.n	8001b00 <sdr_set_pwm+0x44>
	} else if (pwm_value == 0) {
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d105      	bne.n	8001b00 <sdr_set_pwm+0x44>
		TIM8->CCR4 = 0; // R
 8001af4:	4b05      	ldr	r3, [pc, #20]	@ (8001b0c <sdr_set_pwm+0x50>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM8->CCR3 = 0; // L
 8001afa:	4b04      	ldr	r3, [pc, #16]	@ (8001b0c <sdr_set_pwm+0x50>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	40010400 	.word	0x40010400

08001b10 <sst_set_pwm>:
void sst_set_pwm(int32_t pwm_value) {
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	if (pwm_value > 0) {
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	dd06      	ble.n	8001b2c <sst_set_pwm+0x1c>
		TIM8->CCR2 = 0; // L
 8001b1e:	4b10      	ldr	r3, [pc, #64]	@ (8001b60 <sst_set_pwm+0x50>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM8->CCR1 = pwm_value; // R
 8001b24:	4a0e      	ldr	r2, [pc, #56]	@ (8001b60 <sst_set_pwm+0x50>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM8->CCR2 = pwm_value * -1; // L
	} else if (pwm_value == 0) {
		TIM8->CCR1 = 0; // R
		TIM8->CCR2 = 0; // L
	}
}
 8001b2a:	e013      	b.n	8001b54 <sst_set_pwm+0x44>
	} else if (pwm_value < 0) {
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	da07      	bge.n	8001b42 <sst_set_pwm+0x32>
		TIM8->CCR1 = 0; // R
 8001b32:	4b0b      	ldr	r3, [pc, #44]	@ (8001b60 <sst_set_pwm+0x50>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM8->CCR2 = pwm_value * -1; // L
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	425a      	negs	r2, r3
 8001b3c:	4b08      	ldr	r3, [pc, #32]	@ (8001b60 <sst_set_pwm+0x50>)
 8001b3e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001b40:	e008      	b.n	8001b54 <sst_set_pwm+0x44>
	} else if (pwm_value == 0) {
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d105      	bne.n	8001b54 <sst_set_pwm+0x44>
		TIM8->CCR1 = 0; // R
 8001b48:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <sst_set_pwm+0x50>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM8->CCR2 = 0; // L
 8001b4e:	4b04      	ldr	r3, [pc, #16]	@ (8001b60 <sst_set_pwm+0x50>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	40010400 	.word	0x40010400

08001b64 <run_motors>:
void run_motors(double fdr_rpm_ref, double sdr_rpm_ref, double fst_rpm_ref, double sst_rpm_ref) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	ed87 0b06 	vstr	d0, [r7, #24]
 8001b6e:	ed87 1b04 	vstr	d1, [r7, #16]
 8001b72:	ed87 2b02 	vstr	d2, [r7, #8]
 8001b76:	ed87 3b00 	vstr	d3, [r7]
	fdr_set_pwm(computeCommand(&fdr_controller, rpm2pwm(fdr_rpm_ref), fdr.speed));
 8001b7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b7e:	f7ff f81b 	bl	8000bb8 <__aeabi_d2iz>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fb97 	bl	80012b8 <rpm2pwm>
 8001b8a:	ee07 0a90 	vmov	s15, r0
 8001b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b92:	4b2c      	ldr	r3, [pc, #176]	@ (8001c44 <run_motors+0xe0>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	4619      	mov	r1, r3
 8001b98:	eeb0 0a67 	vmov.f32	s0, s15
 8001b9c:	482a      	ldr	r0, [pc, #168]	@ (8001c48 <run_motors+0xe4>)
 8001b9e:	f7ff fc11 	bl	80013c4 <computeCommand>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff35 	bl	8001a14 <fdr_set_pwm>
	sdr_set_pwm(computeCommand(&sdr_controller, rpm2pwm(sdr_rpm_ref), sdr.speed));
 8001baa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bae:	f7ff f803 	bl	8000bb8 <__aeabi_d2iz>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fb7f 	bl	80012b8 <rpm2pwm>
 8001bba:	ee07 0a90 	vmov	s15, r0
 8001bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bc2:	4b22      	ldr	r3, [pc, #136]	@ (8001c4c <run_motors+0xe8>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bcc:	4820      	ldr	r0, [pc, #128]	@ (8001c50 <run_motors+0xec>)
 8001bce:	f7ff fbf9 	bl	80013c4 <computeCommand>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff71 	bl	8001abc <sdr_set_pwm>
	fst_set_pwm(computeCommand(&fst_controller, rpm2pwm(fst_rpm_ref), fst.speed));
 8001bda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bde:	f7fe ffeb 	bl	8000bb8 <__aeabi_d2iz>
 8001be2:	4603      	mov	r3, r0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fb67 	bl	80012b8 <rpm2pwm>
 8001bea:	ee07 0a90 	vmov	s15, r0
 8001bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf2:	4b18      	ldr	r3, [pc, #96]	@ (8001c54 <run_motors+0xf0>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bfc:	4816      	ldr	r0, [pc, #88]	@ (8001c58 <run_motors+0xf4>)
 8001bfe:	f7ff fbe1 	bl	80013c4 <computeCommand>
 8001c02:	4603      	mov	r3, r0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff2f 	bl	8001a68 <fst_set_pwm>
	sst_set_pwm(computeCommand(&sst_controller, rpm2pwm(sst_rpm_ref), sst.speed));
 8001c0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c0e:	f7fe ffd3 	bl	8000bb8 <__aeabi_d2iz>
 8001c12:	4603      	mov	r3, r0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fb4f 	bl	80012b8 <rpm2pwm>
 8001c1a:	ee07 0a90 	vmov	s15, r0
 8001c1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c22:	4b0e      	ldr	r3, [pc, #56]	@ (8001c5c <run_motors+0xf8>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	4619      	mov	r1, r3
 8001c28:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2c:	480c      	ldr	r0, [pc, #48]	@ (8001c60 <run_motors+0xfc>)
 8001c2e:	f7ff fbc9 	bl	80013c4 <computeCommand>
 8001c32:	4603      	mov	r3, r0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff6b 	bl	8001b10 <sst_set_pwm>
}
 8001c3a:	bf00      	nop
 8001c3c:	3720      	adds	r7, #32
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000c80 	.word	0x20000c80
 8001c48:	20000c20 	.word	0x20000c20
 8001c4c:	20000cc0 	.word	0x20000cc0
 8001c50:	20000c50 	.word	0x20000c50
 8001c54:	20000ca0 	.word	0x20000ca0
 8001c58:	20000c38 	.word	0x20000c38
 8001c5c:	20000ce0 	.word	0x20000ce0
 8001c60:	20000c68 	.word	0x20000c68

08001c64 <stop_motors>:
void stop_motors() {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
	fdr_set_pwm(0);
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f7ff fed3 	bl	8001a14 <fdr_set_pwm>
	sdr_set_pwm(0);
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f7ff ff24 	bl	8001abc <sdr_set_pwm>
	fst_set_pwm(0);
 8001c74:	2000      	movs	r0, #0
 8001c76:	f7ff fef7 	bl	8001a68 <fst_set_pwm>
	sst_set_pwm(0);
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f7ff ff48 	bl	8001b10 <sst_set_pwm>
}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	0000      	movs	r0, r0
	...

08001c88 <compute_wheel_speeds>:

void compute_wheel_speeds(double Vx, double Vy, double Wz) {
 8001c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c8c:	ed2d 8b02 	vpush	{d8}
 8001c90:	b08e      	sub	sp, #56	@ 0x38
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8001c98:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8001c9c:	ed87 2b08 	vstr	d2, [r7, #32]
	//pentru directia rotilor ne luam dupa asta https://www.itm-conferences.org/articles/itmconf/pdf/2020/05/itmconf_itee2020_04001.pdf
	wheels.fst = ((1 / R) * (Vx - Vy - ((LX + LY) * Wz))) / 40;
 8001ca0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ca4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001ca8:	f7fe fb1e 	bl	80002e8 <__aeabi_dsub>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4614      	mov	r4, r2
 8001cb2:	461d      	mov	r5, r3
 8001cb4:	a3a4      	add	r3, pc, #656	@ (adr r3, 8001f48 <compute_wheel_speeds+0x2c0>)
 8001cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cbe:	f7fe fccb 	bl	8000658 <__aeabi_dmul>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	4629      	mov	r1, r5
 8001cca:	f7fe fb0d 	bl	80002e8 <__aeabi_dsub>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	4b9d      	ldr	r3, [pc, #628]	@ (8001f50 <compute_wheel_speeds+0x2c8>)
 8001cdc:	f7fe fcbc 	bl	8000658 <__aeabi_dmul>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	4b99      	ldr	r3, [pc, #612]	@ (8001f54 <compute_wheel_speeds+0x2cc>)
 8001cee:	f7fe fddd 	bl	80008ac <__aeabi_ddiv>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4b97      	ldr	r3, [pc, #604]	@ (8001f58 <compute_wheel_speeds+0x2d0>)
 8001cfc:	e9c3 0102 	strd	r0, r1, [r3, #8]
	wheels.fdr = ((1 / R) * (Vx + Vy + ((LX + LY) * Wz))) / 40;
 8001d00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d04:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001d08:	f7fe faf0 	bl	80002ec <__adddf3>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4614      	mov	r4, r2
 8001d12:	461d      	mov	r5, r3
 8001d14:	a38c      	add	r3, pc, #560	@ (adr r3, 8001f48 <compute_wheel_speeds+0x2c0>)
 8001d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d1e:	f7fe fc9b 	bl	8000658 <__aeabi_dmul>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4620      	mov	r0, r4
 8001d28:	4629      	mov	r1, r5
 8001d2a:	f7fe fadf 	bl	80002ec <__adddf3>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	4b85      	ldr	r3, [pc, #532]	@ (8001f50 <compute_wheel_speeds+0x2c8>)
 8001d3c:	f7fe fc8c 	bl	8000658 <__aeabi_dmul>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4610      	mov	r0, r2
 8001d46:	4619      	mov	r1, r3
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	4b81      	ldr	r3, [pc, #516]	@ (8001f54 <compute_wheel_speeds+0x2cc>)
 8001d4e:	f7fe fdad 	bl	80008ac <__aeabi_ddiv>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4610      	mov	r0, r2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4b7f      	ldr	r3, [pc, #508]	@ (8001f58 <compute_wheel_speeds+0x2d0>)
 8001d5c:	e9c3 0100 	strd	r0, r1, [r3]
	wheels.sst = ((1 / R) * (Vx + Vy - ((LX + LY) * Wz))) / 40;
 8001d60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d64:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001d68:	f7fe fac0 	bl	80002ec <__adddf3>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4614      	mov	r4, r2
 8001d72:	461d      	mov	r5, r3
 8001d74:	a374      	add	r3, pc, #464	@ (adr r3, 8001f48 <compute_wheel_speeds+0x2c0>)
 8001d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d7e:	f7fe fc6b 	bl	8000658 <__aeabi_dmul>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4620      	mov	r0, r4
 8001d88:	4629      	mov	r1, r5
 8001d8a:	f7fe faad 	bl	80002e8 <__aeabi_dsub>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	4b6d      	ldr	r3, [pc, #436]	@ (8001f50 <compute_wheel_speeds+0x2c8>)
 8001d9c:	f7fe fc5c 	bl	8000658 <__aeabi_dmul>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	4b69      	ldr	r3, [pc, #420]	@ (8001f54 <compute_wheel_speeds+0x2cc>)
 8001dae:	f7fe fd7d 	bl	80008ac <__aeabi_ddiv>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4610      	mov	r0, r2
 8001db8:	4619      	mov	r1, r3
 8001dba:	4b67      	ldr	r3, [pc, #412]	@ (8001f58 <compute_wheel_speeds+0x2d0>)
 8001dbc:	e9c3 0106 	strd	r0, r1, [r3, #24]
	wheels.sdr = ((1 / R) * (Vx - Vy + ((LX + LY) * Wz))) / 40;
 8001dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001dc4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001dc8:	f7fe fa8e 	bl	80002e8 <__aeabi_dsub>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4614      	mov	r4, r2
 8001dd2:	461d      	mov	r5, r3
 8001dd4:	a35c      	add	r3, pc, #368	@ (adr r3, 8001f48 <compute_wheel_speeds+0x2c0>)
 8001dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dda:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001dde:	f7fe fc3b 	bl	8000658 <__aeabi_dmul>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4620      	mov	r0, r4
 8001de8:	4629      	mov	r1, r5
 8001dea:	f7fe fa7f 	bl	80002ec <__adddf3>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4610      	mov	r0, r2
 8001df4:	4619      	mov	r1, r3
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	4b55      	ldr	r3, [pc, #340]	@ (8001f50 <compute_wheel_speeds+0x2c8>)
 8001dfc:	f7fe fc2c 	bl	8000658 <__aeabi_dmul>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4610      	mov	r0, r2
 8001e06:	4619      	mov	r1, r3
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	4b51      	ldr	r3, [pc, #324]	@ (8001f54 <compute_wheel_speeds+0x2cc>)
 8001e0e:	f7fe fd4d 	bl	80008ac <__aeabi_ddiv>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4610      	mov	r0, r2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4b4f      	ldr	r3, [pc, #316]	@ (8001f58 <compute_wheel_speeds+0x2d0>)
 8001e1c:	e9c3 0104 	strd	r0, r1, [r3, #16]

	wheels.max_speed = fmax(fmax(fabs(wheels.fst), fabs(wheels.fdr)),
 8001e20:	4b4d      	ldr	r3, [pc, #308]	@ (8001f58 <compute_wheel_speeds+0x2d0>)
 8001e22:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e26:	61ba      	str	r2, [r7, #24]
 8001e28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e2c:	61fb      	str	r3, [r7, #28]
 8001e2e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f58 <compute_wheel_speeds+0x2d0>)
 8001e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e34:	613a      	str	r2, [r7, #16]
 8001e36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	ed97 1b04 	vldr	d1, [r7, #16]
 8001e40:	ed97 0b06 	vldr	d0, [r7, #24]
 8001e44:	f00b fa0c 	bl	800d260 <fmax>
 8001e48:	eeb0 8a40 	vmov.f32	s16, s0
 8001e4c:	eef0 8a60 	vmov.f32	s17, s1
			fmax(fabs(wheels.sst), fabs(wheels.sdr)));
 8001e50:	4b41      	ldr	r3, [pc, #260]	@ (8001f58 <compute_wheel_speeds+0x2d0>)
 8001e52:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	wheels.max_speed = fmax(fmax(fabs(wheels.fst), fabs(wheels.fdr)),
 8001e56:	60ba      	str	r2, [r7, #8]
 8001e58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e5c:	60fb      	str	r3, [r7, #12]
			fmax(fabs(wheels.sst), fabs(wheels.sdr)));
 8001e5e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f58 <compute_wheel_speeds+0x2d0>)
 8001e60:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	wheels.max_speed = fmax(fmax(fabs(wheels.fst), fabs(wheels.fdr)),
 8001e64:	603a      	str	r2, [r7, #0]
 8001e66:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	ed97 1b00 	vldr	d1, [r7]
 8001e70:	ed97 0b02 	vldr	d0, [r7, #8]
 8001e74:	f00b f9f4 	bl	800d260 <fmax>
 8001e78:	eeb0 7a40 	vmov.f32	s14, s0
 8001e7c:	eef0 7a60 	vmov.f32	s15, s1
 8001e80:	eeb0 1a47 	vmov.f32	s2, s14
 8001e84:	eef0 1a67 	vmov.f32	s3, s15
 8001e88:	eeb0 0a48 	vmov.f32	s0, s16
 8001e8c:	eef0 0a68 	vmov.f32	s1, s17
 8001e90:	f00b f9e6 	bl	800d260 <fmax>
 8001e94:	eeb0 7a40 	vmov.f32	s14, s0
 8001e98:	eef0 7a60 	vmov.f32	s15, s1
 8001e9c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f58 <compute_wheel_speeds+0x2d0>)
 8001e9e:	ed83 7b08 	vstr	d7, [r3, #32]

	if (wheels.max_speed > MAX_SPEED) {
 8001ea2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f58 <compute_wheel_speeds+0x2d0>)
 8001ea4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	4b2b      	ldr	r3, [pc, #172]	@ (8001f5c <compute_wheel_speeds+0x2d4>)
 8001eae:	f7fe fe63 	bl	8000b78 <__aeabi_dcmpgt>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d053      	beq.n	8001f60 <compute_wheel_speeds+0x2d8>
		wheels.scale_factor = fabs(MAX_SPEED / wheels.max_speed);
 8001eb8:	4b27      	ldr	r3, [pc, #156]	@ (8001f58 <compute_wheel_speeds+0x2d0>)
 8001eba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001ebe:	f04f 0000 	mov.w	r0, #0
 8001ec2:	4926      	ldr	r1, [pc, #152]	@ (8001f5c <compute_wheel_speeds+0x2d4>)
 8001ec4:	f7fe fcf2 	bl	80008ac <__aeabi_ddiv>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4692      	mov	sl, r2
 8001ece:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8001ed2:	4b21      	ldr	r3, [pc, #132]	@ (8001f58 <compute_wheel_speeds+0x2d0>)
 8001ed4:	e9c3 ab0a 	strd	sl, fp, [r3, #40]	@ 0x28
		wheels.fst *= wheels.scale_factor;
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f58 <compute_wheel_speeds+0x2d0>)
 8001eda:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ede:	4b1e      	ldr	r3, [pc, #120]	@ (8001f58 <compute_wheel_speeds+0x2d0>)
 8001ee0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001ee4:	f7fe fbb8 	bl	8000658 <__aeabi_dmul>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	491a      	ldr	r1, [pc, #104]	@ (8001f58 <compute_wheel_speeds+0x2d0>)
 8001eee:	e9c1 2302 	strd	r2, r3, [r1, #8]
		wheels.fdr *= wheels.scale_factor;
 8001ef2:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <compute_wheel_speeds+0x2d0>)
 8001ef4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ef8:	4b17      	ldr	r3, [pc, #92]	@ (8001f58 <compute_wheel_speeds+0x2d0>)
 8001efa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001efe:	f7fe fbab 	bl	8000658 <__aeabi_dmul>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4914      	ldr	r1, [pc, #80]	@ (8001f58 <compute_wheel_speeds+0x2d0>)
 8001f08:	e9c1 2300 	strd	r2, r3, [r1]
		wheels.sst *= wheels.scale_factor;
 8001f0c:	4b12      	ldr	r3, [pc, #72]	@ (8001f58 <compute_wheel_speeds+0x2d0>)
 8001f0e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001f12:	4b11      	ldr	r3, [pc, #68]	@ (8001f58 <compute_wheel_speeds+0x2d0>)
 8001f14:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001f18:	f7fe fb9e 	bl	8000658 <__aeabi_dmul>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	490d      	ldr	r1, [pc, #52]	@ (8001f58 <compute_wheel_speeds+0x2d0>)
 8001f22:	e9c1 2306 	strd	r2, r3, [r1, #24]
		wheels.sdr *= wheels.scale_factor;
 8001f26:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <compute_wheel_speeds+0x2d0>)
 8001f28:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <compute_wheel_speeds+0x2d0>)
 8001f2e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001f32:	f7fe fb91 	bl	8000658 <__aeabi_dmul>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4907      	ldr	r1, [pc, #28]	@ (8001f58 <compute_wheel_speeds+0x2d0>)
 8001f3c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001f40:	e05d      	b.n	8001ffe <compute_wheel_speeds+0x376>
 8001f42:	bf00      	nop
 8001f44:	f3af 8000 	nop.w
 8001f48:	c28f5c29 	.word	0xc28f5c29
 8001f4c:	3fcc28f5 	.word	0x3fcc28f5
 8001f50:	40340000 	.word	0x40340000
 8001f54:	40440000 	.word	0x40440000
 8001f58:	20000d00 	.word	0x20000d00
 8001f5c:	40290000 	.word	0x40290000

	} else if (wheels.max_speed < MIN_SPEED) {
 8001f60:	4b56      	ldr	r3, [pc, #344]	@ (80020bc <compute_wheel_speeds+0x434>)
 8001f62:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	4b55      	ldr	r3, [pc, #340]	@ (80020c0 <compute_wheel_speeds+0x438>)
 8001f6c:	f7fe fde6 	bl	8000b3c <__aeabi_dcmplt>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d043      	beq.n	8001ffe <compute_wheel_speeds+0x376>
		wheels.scale_factor = fabs(MIN_SPEED / wheels.max_speed);
 8001f76:	4b51      	ldr	r3, [pc, #324]	@ (80020bc <compute_wheel_speeds+0x434>)
 8001f78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001f7c:	f04f 0000 	mov.w	r0, #0
 8001f80:	494f      	ldr	r1, [pc, #316]	@ (80020c0 <compute_wheel_speeds+0x438>)
 8001f82:	f7fe fc93 	bl	80008ac <__aeabi_ddiv>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4690      	mov	r8, r2
 8001f8c:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001f90:	4b4a      	ldr	r3, [pc, #296]	@ (80020bc <compute_wheel_speeds+0x434>)
 8001f92:	e9c3 890a 	strd	r8, r9, [r3, #40]	@ 0x28
		wheels.fst *= wheels.scale_factor;
 8001f96:	4b49      	ldr	r3, [pc, #292]	@ (80020bc <compute_wheel_speeds+0x434>)
 8001f98:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f9c:	4b47      	ldr	r3, [pc, #284]	@ (80020bc <compute_wheel_speeds+0x434>)
 8001f9e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001fa2:	f7fe fb59 	bl	8000658 <__aeabi_dmul>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4944      	ldr	r1, [pc, #272]	@ (80020bc <compute_wheel_speeds+0x434>)
 8001fac:	e9c1 2302 	strd	r2, r3, [r1, #8]
		wheels.fdr *= wheels.scale_factor;
 8001fb0:	4b42      	ldr	r3, [pc, #264]	@ (80020bc <compute_wheel_speeds+0x434>)
 8001fb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fb6:	4b41      	ldr	r3, [pc, #260]	@ (80020bc <compute_wheel_speeds+0x434>)
 8001fb8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001fbc:	f7fe fb4c 	bl	8000658 <__aeabi_dmul>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	493d      	ldr	r1, [pc, #244]	@ (80020bc <compute_wheel_speeds+0x434>)
 8001fc6:	e9c1 2300 	strd	r2, r3, [r1]
		wheels.sst *= wheels.scale_factor;
 8001fca:	4b3c      	ldr	r3, [pc, #240]	@ (80020bc <compute_wheel_speeds+0x434>)
 8001fcc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001fd0:	4b3a      	ldr	r3, [pc, #232]	@ (80020bc <compute_wheel_speeds+0x434>)
 8001fd2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001fd6:	f7fe fb3f 	bl	8000658 <__aeabi_dmul>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4937      	ldr	r1, [pc, #220]	@ (80020bc <compute_wheel_speeds+0x434>)
 8001fe0:	e9c1 2306 	strd	r2, r3, [r1, #24]
		wheels.sdr *= wheels.scale_factor;
 8001fe4:	4b35      	ldr	r3, [pc, #212]	@ (80020bc <compute_wheel_speeds+0x434>)
 8001fe6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001fea:	4b34      	ldr	r3, [pc, #208]	@ (80020bc <compute_wheel_speeds+0x434>)
 8001fec:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001ff0:	f7fe fb32 	bl	8000658 <__aeabi_dmul>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4930      	ldr	r1, [pc, #192]	@ (80020bc <compute_wheel_speeds+0x434>)
 8001ffa:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}

	wheels.fst = rad2rpm(wheels.fst);
 8001ffe:	4b2f      	ldr	r3, [pc, #188]	@ (80020bc <compute_wheel_speeds+0x434>)
 8002000:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002004:	4610      	mov	r0, r2
 8002006:	4619      	mov	r1, r3
 8002008:	f7fe fe1e 	bl	8000c48 <__aeabi_d2f>
 800200c:	4603      	mov	r3, r0
 800200e:	ee00 3a10 	vmov	s0, r3
 8002012:	f7ff f969 	bl	80012e8 <rad2rpm>
 8002016:	ee10 3a10 	vmov	r3, s0
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fac4 	bl	80005a8 <__aeabi_f2d>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4925      	ldr	r1, [pc, #148]	@ (80020bc <compute_wheel_speeds+0x434>)
 8002026:	e9c1 2302 	strd	r2, r3, [r1, #8]
	wheels.fdr = rad2rpm(wheels.fdr);
 800202a:	4b24      	ldr	r3, [pc, #144]	@ (80020bc <compute_wheel_speeds+0x434>)
 800202c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	f7fe fe08 	bl	8000c48 <__aeabi_d2f>
 8002038:	4603      	mov	r3, r0
 800203a:	ee00 3a10 	vmov	s0, r3
 800203e:	f7ff f953 	bl	80012e8 <rad2rpm>
 8002042:	ee10 3a10 	vmov	r3, s0
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe faae 	bl	80005a8 <__aeabi_f2d>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	491a      	ldr	r1, [pc, #104]	@ (80020bc <compute_wheel_speeds+0x434>)
 8002052:	e9c1 2300 	strd	r2, r3, [r1]
	wheels.sst = rad2rpm(wheels.sst);
 8002056:	4b19      	ldr	r3, [pc, #100]	@ (80020bc <compute_wheel_speeds+0x434>)
 8002058:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	f7fe fdf2 	bl	8000c48 <__aeabi_d2f>
 8002064:	4603      	mov	r3, r0
 8002066:	ee00 3a10 	vmov	s0, r3
 800206a:	f7ff f93d 	bl	80012e8 <rad2rpm>
 800206e:	ee10 3a10 	vmov	r3, s0
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe fa98 	bl	80005a8 <__aeabi_f2d>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	490f      	ldr	r1, [pc, #60]	@ (80020bc <compute_wheel_speeds+0x434>)
 800207e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	wheels.sdr = rad2rpm(wheels.sdr);
 8002082:	4b0e      	ldr	r3, [pc, #56]	@ (80020bc <compute_wheel_speeds+0x434>)
 8002084:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002088:	4610      	mov	r0, r2
 800208a:	4619      	mov	r1, r3
 800208c:	f7fe fddc 	bl	8000c48 <__aeabi_d2f>
 8002090:	4603      	mov	r3, r0
 8002092:	ee00 3a10 	vmov	s0, r3
 8002096:	f7ff f927 	bl	80012e8 <rad2rpm>
 800209a:	ee10 3a10 	vmov	r3, s0
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fa82 	bl	80005a8 <__aeabi_f2d>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4904      	ldr	r1, [pc, #16]	@ (80020bc <compute_wheel_speeds+0x434>)
 80020aa:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80020ae:	bf00      	nop
 80020b0:	3738      	adds	r7, #56	@ 0x38
 80020b2:	46bd      	mov	sp, r7
 80020b4:	ecbd 8b02 	vpop	{d8}
 80020b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020bc:	20000d00 	.word	0x20000d00
 80020c0:	40200000 	.word	0x40200000

080020c4 <go_to_target_point>:

double Vx = 0, Vy = 0, W = 0;
void go_to_target_point(double final_x, double final_y, double angular_velocity) {
 80020c4:	b5b0      	push	{r4, r5, r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	ed87 0b04 	vstr	d0, [r7, #16]
 80020ce:	ed87 1b02 	vstr	d1, [r7, #8]
 80020d2:	ed87 2b00 	vstr	d2, [r7]
	HAL_UART_Receive_DMA(&huart6, odometry_buffer, MAX_ODOMETRY_SIZE);
 80020d6:	2219      	movs	r2, #25
 80020d8:	494b      	ldr	r1, [pc, #300]	@ (8002208 <go_to_target_point+0x144>)
 80020da:	484c      	ldr	r0, [pc, #304]	@ (800220c <go_to_target_point+0x148>)
 80020dc:	f005 fab6 	bl	800764c <HAL_UART_Receive_DMA>
	while (true) {
		//To know when to exit the loop
		HAL_UART_Receive_DMA(&huart3, trajectory_buffer, MAX_TRAJECTORY_SIZE);
 80020e0:	2208      	movs	r2, #8
 80020e2:	494b      	ldr	r1, [pc, #300]	@ (8002210 <go_to_target_point+0x14c>)
 80020e4:	484b      	ldr	r0, [pc, #300]	@ (8002214 <go_to_target_point+0x150>)
 80020e6:	f005 fab1 	bl	800764c <HAL_UART_Receive_DMA>

		Vx = final_x - odometer.current_x;
 80020ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002218 <go_to_target_point+0x154>)
 80020ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020f4:	f7fe f8f8 	bl	80002e8 <__aeabi_dsub>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4947      	ldr	r1, [pc, #284]	@ (800221c <go_to_target_point+0x158>)
 80020fe:	e9c1 2300 	strd	r2, r3, [r1]
		Vy = final_y - odometer.current_y;
 8002102:	4b45      	ldr	r3, [pc, #276]	@ (8002218 <go_to_target_point+0x154>)
 8002104:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002108:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800210c:	f7fe f8ec 	bl	80002e8 <__aeabi_dsub>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4942      	ldr	r1, [pc, #264]	@ (8002220 <go_to_target_point+0x15c>)
 8002116:	e9c1 2300 	strd	r2, r3, [r1]
		W = angular_velocity;
 800211a:	4942      	ldr	r1, [pc, #264]	@ (8002224 <go_to_target_point+0x160>)
 800211c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002120:	e9c1 2300 	strd	r2, r3, [r1]
		double distance_to_target = sqrt(Vx * Vx + Vy * Vy);
 8002124:	4b3d      	ldr	r3, [pc, #244]	@ (800221c <go_to_target_point+0x158>)
 8002126:	e9d3 0100 	ldrd	r0, r1, [r3]
 800212a:	4b3c      	ldr	r3, [pc, #240]	@ (800221c <go_to_target_point+0x158>)
 800212c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002130:	f7fe fa92 	bl	8000658 <__aeabi_dmul>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4614      	mov	r4, r2
 800213a:	461d      	mov	r5, r3
 800213c:	4b38      	ldr	r3, [pc, #224]	@ (8002220 <go_to_target_point+0x15c>)
 800213e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002142:	4b37      	ldr	r3, [pc, #220]	@ (8002220 <go_to_target_point+0x15c>)
 8002144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002148:	f7fe fa86 	bl	8000658 <__aeabi_dmul>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4620      	mov	r0, r4
 8002152:	4629      	mov	r1, r5
 8002154:	f7fe f8ca 	bl	80002ec <__adddf3>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	ec43 2b17 	vmov	d7, r2, r3
 8002160:	eeb0 0a47 	vmov.f32	s0, s14
 8002164:	eef0 0a67 	vmov.f32	s1, s15
 8002168:	f00b f84e 	bl	800d208 <sqrt>
 800216c:	ed87 0b06 	vstr	d0, [r7, #24]

		if (distance_to_target < DISTANCE_THRESHOLD
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	4b2c      	ldr	r3, [pc, #176]	@ (8002228 <go_to_target_point+0x164>)
 8002176:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800217a:	f7fe fcdf 	bl	8000b3c <__aeabi_dcmplt>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d13a      	bne.n	80021fa <go_to_target_point+0x136>
				|| live_follower.is_stopped) {
 8002184:	4b29      	ldr	r3, [pc, #164]	@ (800222c <go_to_target_point+0x168>)
 8002186:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800218a:	2b00      	cmp	r3, #0
 800218c:	d135      	bne.n	80021fa <go_to_target_point+0x136>
			break;
		}

		compute_wheel_speeds(Vx, Vy, W);
 800218e:	4b23      	ldr	r3, [pc, #140]	@ (800221c <go_to_target_point+0x158>)
 8002190:	ed93 7b00 	vldr	d7, [r3]
 8002194:	4b22      	ldr	r3, [pc, #136]	@ (8002220 <go_to_target_point+0x15c>)
 8002196:	ed93 6b00 	vldr	d6, [r3]
 800219a:	4b22      	ldr	r3, [pc, #136]	@ (8002224 <go_to_target_point+0x160>)
 800219c:	ed93 5b00 	vldr	d5, [r3]
 80021a0:	eeb0 2a45 	vmov.f32	s4, s10
 80021a4:	eef0 2a65 	vmov.f32	s5, s11
 80021a8:	eeb0 1a46 	vmov.f32	s2, s12
 80021ac:	eef0 1a66 	vmov.f32	s3, s13
 80021b0:	eeb0 0a47 	vmov.f32	s0, s14
 80021b4:	eef0 0a67 	vmov.f32	s1, s15
 80021b8:	f7ff fd66 	bl	8001c88 <compute_wheel_speeds>
		run_motors(wheels.fdr, wheels.sdr, wheels.fst, wheels.sst);
 80021bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002230 <go_to_target_point+0x16c>)
 80021be:	ed93 7b00 	vldr	d7, [r3]
 80021c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002230 <go_to_target_point+0x16c>)
 80021c4:	ed93 6b04 	vldr	d6, [r3, #16]
 80021c8:	4b19      	ldr	r3, [pc, #100]	@ (8002230 <go_to_target_point+0x16c>)
 80021ca:	ed93 5b02 	vldr	d5, [r3, #8]
 80021ce:	4b18      	ldr	r3, [pc, #96]	@ (8002230 <go_to_target_point+0x16c>)
 80021d0:	ed93 4b06 	vldr	d4, [r3, #24]
 80021d4:	eeb0 3a44 	vmov.f32	s6, s8
 80021d8:	eef0 3a64 	vmov.f32	s7, s9
 80021dc:	eeb0 2a45 	vmov.f32	s4, s10
 80021e0:	eef0 2a65 	vmov.f32	s5, s11
 80021e4:	eeb0 1a46 	vmov.f32	s2, s12
 80021e8:	eef0 1a66 	vmov.f32	s3, s13
 80021ec:	eeb0 0a47 	vmov.f32	s0, s14
 80021f0:	eef0 0a67 	vmov.f32	s1, s15
 80021f4:	f7ff fcb6 	bl	8001b64 <run_motors>
	while (true) {
 80021f8:	e772      	b.n	80020e0 <go_to_target_point+0x1c>
	}
	stop_motors();
 80021fa:	f7ff fd33 	bl	8001c64 <stop_motors>
}
 80021fe:	bf00      	nop
 8002200:	3720      	adds	r7, #32
 8002202:	46bd      	mov	sp, r7
 8002204:	bdb0      	pop	{r4, r5, r7, pc}
 8002206:	bf00      	nop
 8002208:	20000d94 	.word	0x20000d94
 800220c:	20000574 	.word	0x20000574
 8002210:	20000d7c 	.word	0x20000d7c
 8002214:	2000052c 	.word	0x2000052c
 8002218:	20000d58 	.word	0x20000d58
 800221c:	20000dd0 	.word	0x20000dd0
 8002220:	20000dd8 	.word	0x20000dd8
 8002224:	20000de0 	.word	0x20000de0
 8002228:	3ff00000 	.word	0x3ff00000
 800222c:	20000d30 	.word	0x20000d30
 8002230:	20000d00 	.word	0x20000d00
 8002234:	00000000 	.word	0x00000000

08002238 <live_op_mode>:
		}
	}
}


void live_op_mode() {
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart3, trajectory_buffer, MAX_TRAJECTORY_SIZE);
 800223c:	2208      	movs	r2, #8
 800223e:	4934      	ldr	r1, [pc, #208]	@ (8002310 <live_op_mode+0xd8>)
 8002240:	4834      	ldr	r0, [pc, #208]	@ (8002314 <live_op_mode+0xdc>)
 8002242:	f005 fa03 	bl	800764c <HAL_UART_Receive_DMA>
	live_follower.last_target_x = 0;
 8002246:	4934      	ldr	r1, [pc, #208]	@ (8002318 <live_op_mode+0xe0>)
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	e9c1 2304 	strd	r2, r3, [r1, #16]
	live_follower.last_target_y = 0;
 8002254:	4930      	ldr	r1, [pc, #192]	@ (8002318 <live_op_mode+0xe0>)
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	f04f 0300 	mov.w	r3, #0
 800225e:	e9c1 2306 	strd	r2, r3, [r1, #24]

	while (live_follower.in_live_mode || !live_follower.is_stopped) {
 8002262:	e038      	b.n	80022d6 <live_op_mode+0x9e>
		//To know when to exit the live op mode
		HAL_UART_Receive_DMA(&huart3, trajectory_buffer, MAX_TRAJECTORY_SIZE);
 8002264:	2208      	movs	r2, #8
 8002266:	492a      	ldr	r1, [pc, #168]	@ (8002310 <live_op_mode+0xd8>)
 8002268:	482a      	ldr	r0, [pc, #168]	@ (8002314 <live_op_mode+0xdc>)
 800226a:	f005 f9ef 	bl	800764c <HAL_UART_Receive_DMA>

		if (live_follower.target_x != live_follower.last_target_x
 800226e:	4b2a      	ldr	r3, [pc, #168]	@ (8002318 <live_op_mode+0xe0>)
 8002270:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002274:	4b28      	ldr	r3, [pc, #160]	@ (8002318 <live_op_mode+0xe0>)
 8002276:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800227a:	f7fe fc55 	bl	8000b28 <__aeabi_dcmpeq>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00a      	beq.n	800229a <live_op_mode+0x62>
				|| live_follower.target_y != live_follower.last_target_y)
 8002284:	4b24      	ldr	r3, [pc, #144]	@ (8002318 <live_op_mode+0xe0>)
 8002286:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800228a:	4b23      	ldr	r3, [pc, #140]	@ (8002318 <live_op_mode+0xe0>)
 800228c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002290:	f7fe fc4a 	bl	8000b28 <__aeabi_dcmpeq>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d111      	bne.n	80022be <live_op_mode+0x86>
			go_to_target_point(live_follower.target_x, live_follower.target_y,
 800229a:	4b1f      	ldr	r3, [pc, #124]	@ (8002318 <live_op_mode+0xe0>)
 800229c:	ed93 7b00 	vldr	d7, [r3]
 80022a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002318 <live_op_mode+0xe0>)
 80022a2:	ed93 6b02 	vldr	d6, [r3, #8]
 80022a6:	ed9f 2b18 	vldr	d2, [pc, #96]	@ 8002308 <live_op_mode+0xd0>
 80022aa:	eeb0 1a46 	vmov.f32	s2, s12
 80022ae:	eef0 1a66 	vmov.f32	s3, s13
 80022b2:	eeb0 0a47 	vmov.f32	s0, s14
 80022b6:	eef0 0a67 	vmov.f32	s1, s15
 80022ba:	f7ff ff03 	bl	80020c4 <go_to_target_point>
					0);

		live_follower.last_target_x = live_follower.target_x;
 80022be:	4b16      	ldr	r3, [pc, #88]	@ (8002318 <live_op_mode+0xe0>)
 80022c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c4:	4914      	ldr	r1, [pc, #80]	@ (8002318 <live_op_mode+0xe0>)
 80022c6:	e9c1 2304 	strd	r2, r3, [r1, #16]
		live_follower.last_target_y = live_follower.target_y;
 80022ca:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <live_op_mode+0xe0>)
 80022cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022d0:	4911      	ldr	r1, [pc, #68]	@ (8002318 <live_op_mode+0xe0>)
 80022d2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	while (live_follower.in_live_mode || !live_follower.is_stopped) {
 80022d6:	4b10      	ldr	r3, [pc, #64]	@ (8002318 <live_op_mode+0xe0>)
 80022d8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1c1      	bne.n	8002264 <live_op_mode+0x2c>
 80022e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002318 <live_op_mode+0xe0>)
 80022e2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80022e6:	f083 0301 	eor.w	r3, r3, #1
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1b9      	bne.n	8002264 <live_op_mode+0x2c>
	}

	if (live_follower.is_stopped) {
 80022f0:	4b09      	ldr	r3, [pc, #36]	@ (8002318 <live_op_mode+0xe0>)
 80022f2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <live_op_mode+0xc6>
		stop_motors();
 80022fa:	f7ff fcb3 	bl	8001c64 <stop_motors>
	}
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	f3af 8000 	nop.w
	...
 8002310:	20000d7c 	.word	0x20000d7c
 8002314:	2000052c 	.word	0x2000052c
 8002318:	20000d30 	.word	0x20000d30

0800231c <tele_op_mode>:
void tele_op_mode() {
 800231c:	b5b0      	push	{r4, r5, r7, lr}
 800231e:	b08e      	sub	sp, #56	@ 0x38
 8002320:	af02      	add	r7, sp, #8
	int32_t fdr_pwm = 0, sdr_pwm = 0, fst_pwm = 0, sst_pwm = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002326:	2300      	movs	r3, #0
 8002328:	62bb      	str	r3, [r7, #40]	@ 0x28
 800232a:	2300      	movs	r3, #0
 800232c:	627b      	str	r3, [r7, #36]	@ 0x24
 800232e:	2300      	movs	r3, #0
 8002330:	623b      	str	r3, [r7, #32]
	double fdr_ref = 0, sdr_ref = 0, fst_ref = 0, sst_ref = 0;
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	f04f 0300 	mov.w	r3, #0
 8002346:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	f04f 0300 	mov.w	r3, #0
 800235e:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_UART_Receive_DMA(&huart2, controller_buffer, MAX_CONTROLLER_SIZE);
 8002362:	220f      	movs	r2, #15
 8002364:	49b7      	ldr	r1, [pc, #732]	@ (8002644 <tele_op_mode+0x328>)
 8002366:	48b8      	ldr	r0, [pc, #736]	@ (8002648 <tele_op_mode+0x32c>)
 8002368:	f005 f970 	bl	800764c <HAL_UART_Receive_DMA>
	//lx - ps4.w
	//rx - ps4.y
	//ry - ps4.x
	while (live_follower.in_teleop_mode || !live_follower.is_stopped) {
 800236c:	e1bf      	b.n	80026ee <tele_op_mode+0x3d2>
		//To know when to exit the teleop mode
		HAL_UART_Receive_DMA(&huart3, trajectory_buffer, MAX_TRAJECTORY_SIZE);
 800236e:	2208      	movs	r2, #8
 8002370:	49b6      	ldr	r1, [pc, #728]	@ (800264c <tele_op_mode+0x330>)
 8002372:	48b7      	ldr	r0, [pc, #732]	@ (8002650 <tele_op_mode+0x334>)
 8002374:	f005 f96a 	bl	800764c <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&huart2, controller_buffer, MAX_CONTROLLER_SIZE);
 8002378:	220f      	movs	r2, #15
 800237a:	49b2      	ldr	r1, [pc, #712]	@ (8002644 <tele_op_mode+0x328>)
 800237c:	48b2      	ldr	r0, [pc, #712]	@ (8002648 <tele_op_mode+0x32c>)
 800237e:	f005 f965 	bl	800764c <HAL_UART_Receive_DMA>
		fdr_ref = map(-ps4.x, -512, 512, -1, 1) + map(-ps4.y, -512, 512, -1, 1)
 8002382:	4bb4      	ldr	r3, [pc, #720]	@ (8002654 <tele_op_mode+0x338>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	4258      	negs	r0, r3
 8002388:	2301      	movs	r3, #1
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	f04f 33ff 	mov.w	r3, #4294967295
 8002390:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002394:	49b0      	ldr	r1, [pc, #704]	@ (8002658 <tele_op_mode+0x33c>)
 8002396:	f7fe ff35 	bl	8001204 <map>
 800239a:	ec55 4b10 	vmov	r4, r5, d0
 800239e:	4bad      	ldr	r3, [pc, #692]	@ (8002654 <tele_op_mode+0x338>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	4258      	negs	r0, r3
 80023a4:	2301      	movs	r3, #1
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	f04f 33ff 	mov.w	r3, #4294967295
 80023ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023b0:	49a9      	ldr	r1, [pc, #676]	@ (8002658 <tele_op_mode+0x33c>)
 80023b2:	f7fe ff27 	bl	8001204 <map>
 80023b6:	ec53 2b10 	vmov	r2, r3, d0
 80023ba:	4620      	mov	r0, r4
 80023bc:	4629      	mov	r1, r5
 80023be:	f7fd ff95 	bl	80002ec <__adddf3>
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	4614      	mov	r4, r2
 80023c8:	461d      	mov	r5, r3
				+ map(-ps4.w, -512, 512, -1, 1);
 80023ca:	4ba2      	ldr	r3, [pc, #648]	@ (8002654 <tele_op_mode+0x338>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4258      	negs	r0, r3
 80023d0:	2301      	movs	r3, #1
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	f04f 33ff 	mov.w	r3, #4294967295
 80023d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023dc:	499e      	ldr	r1, [pc, #632]	@ (8002658 <tele_op_mode+0x33c>)
 80023de:	f7fe ff11 	bl	8001204 <map>
 80023e2:	ec53 2b10 	vmov	r2, r3, d0
		fdr_ref = map(-ps4.x, -512, 512, -1, 1) + map(-ps4.y, -512, 512, -1, 1)
 80023e6:	4620      	mov	r0, r4
 80023e8:	4629      	mov	r1, r5
 80023ea:	f7fd ff7f 	bl	80002ec <__adddf3>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
		sdr_ref = map(-ps4.x, -512, 512, -1, 1) - map(-ps4.y, -512, 512, -1, 1)
 80023f6:	4b97      	ldr	r3, [pc, #604]	@ (8002654 <tele_op_mode+0x338>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	4258      	negs	r0, r3
 80023fc:	2301      	movs	r3, #1
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	f04f 33ff 	mov.w	r3, #4294967295
 8002404:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002408:	4993      	ldr	r1, [pc, #588]	@ (8002658 <tele_op_mode+0x33c>)
 800240a:	f7fe fefb 	bl	8001204 <map>
 800240e:	ec55 4b10 	vmov	r4, r5, d0
 8002412:	4b90      	ldr	r3, [pc, #576]	@ (8002654 <tele_op_mode+0x338>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	4258      	negs	r0, r3
 8002418:	2301      	movs	r3, #1
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	f04f 33ff 	mov.w	r3, #4294967295
 8002420:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002424:	498c      	ldr	r1, [pc, #560]	@ (8002658 <tele_op_mode+0x33c>)
 8002426:	f7fe feed 	bl	8001204 <map>
 800242a:	ec53 2b10 	vmov	r2, r3, d0
 800242e:	4620      	mov	r0, r4
 8002430:	4629      	mov	r1, r5
 8002432:	f7fd ff59 	bl	80002e8 <__aeabi_dsub>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4614      	mov	r4, r2
 800243c:	461d      	mov	r5, r3
				+ map(-ps4.w, -512, 512, -1, 1);
 800243e:	4b85      	ldr	r3, [pc, #532]	@ (8002654 <tele_op_mode+0x338>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4258      	negs	r0, r3
 8002444:	2301      	movs	r3, #1
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	f04f 33ff 	mov.w	r3, #4294967295
 800244c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002450:	4981      	ldr	r1, [pc, #516]	@ (8002658 <tele_op_mode+0x33c>)
 8002452:	f7fe fed7 	bl	8001204 <map>
 8002456:	ec53 2b10 	vmov	r2, r3, d0
		sdr_ref = map(-ps4.x, -512, 512, -1, 1) - map(-ps4.y, -512, 512, -1, 1)
 800245a:	4620      	mov	r0, r4
 800245c:	4629      	mov	r1, r5
 800245e:	f7fd ff45 	bl	80002ec <__adddf3>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	e9c7 2304 	strd	r2, r3, [r7, #16]
		fst_ref = map(-ps4.x, -512, 512, -1, 1) - map(-ps4.y, -512, 512, -1, 1)
 800246a:	4b7a      	ldr	r3, [pc, #488]	@ (8002654 <tele_op_mode+0x338>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	4258      	negs	r0, r3
 8002470:	2301      	movs	r3, #1
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	f04f 33ff 	mov.w	r3, #4294967295
 8002478:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800247c:	4976      	ldr	r1, [pc, #472]	@ (8002658 <tele_op_mode+0x33c>)
 800247e:	f7fe fec1 	bl	8001204 <map>
 8002482:	ec55 4b10 	vmov	r4, r5, d0
 8002486:	4b73      	ldr	r3, [pc, #460]	@ (8002654 <tele_op_mode+0x338>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	4258      	negs	r0, r3
 800248c:	2301      	movs	r3, #1
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	f04f 33ff 	mov.w	r3, #4294967295
 8002494:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002498:	496f      	ldr	r1, [pc, #444]	@ (8002658 <tele_op_mode+0x33c>)
 800249a:	f7fe feb3 	bl	8001204 <map>
 800249e:	ec53 2b10 	vmov	r2, r3, d0
 80024a2:	4620      	mov	r0, r4
 80024a4:	4629      	mov	r1, r5
 80024a6:	f7fd ff1f 	bl	80002e8 <__aeabi_dsub>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4614      	mov	r4, r2
 80024b0:	461d      	mov	r5, r3
				- map(-ps4.w, -512, 512, -1, 1);
 80024b2:	4b68      	ldr	r3, [pc, #416]	@ (8002654 <tele_op_mode+0x338>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4258      	negs	r0, r3
 80024b8:	2301      	movs	r3, #1
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	f04f 33ff 	mov.w	r3, #4294967295
 80024c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024c4:	4964      	ldr	r1, [pc, #400]	@ (8002658 <tele_op_mode+0x33c>)
 80024c6:	f7fe fe9d 	bl	8001204 <map>
 80024ca:	ec53 2b10 	vmov	r2, r3, d0
		fst_ref = map(-ps4.x, -512, 512, -1, 1) - map(-ps4.y, -512, 512, -1, 1)
 80024ce:	4620      	mov	r0, r4
 80024d0:	4629      	mov	r1, r5
 80024d2:	f7fd ff09 	bl	80002e8 <__aeabi_dsub>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	e9c7 2302 	strd	r2, r3, [r7, #8]
		sst_ref = map(-ps4.x, -512, 512, -1, 1) + map(-ps4.y, -512, 512, -1, 1)
 80024de:	4b5d      	ldr	r3, [pc, #372]	@ (8002654 <tele_op_mode+0x338>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	4258      	negs	r0, r3
 80024e4:	2301      	movs	r3, #1
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	f04f 33ff 	mov.w	r3, #4294967295
 80024ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024f0:	4959      	ldr	r1, [pc, #356]	@ (8002658 <tele_op_mode+0x33c>)
 80024f2:	f7fe fe87 	bl	8001204 <map>
 80024f6:	ec55 4b10 	vmov	r4, r5, d0
 80024fa:	4b56      	ldr	r3, [pc, #344]	@ (8002654 <tele_op_mode+0x338>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	4258      	negs	r0, r3
 8002500:	2301      	movs	r3, #1
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	f04f 33ff 	mov.w	r3, #4294967295
 8002508:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800250c:	4952      	ldr	r1, [pc, #328]	@ (8002658 <tele_op_mode+0x33c>)
 800250e:	f7fe fe79 	bl	8001204 <map>
 8002512:	ec53 2b10 	vmov	r2, r3, d0
 8002516:	4620      	mov	r0, r4
 8002518:	4629      	mov	r1, r5
 800251a:	f7fd fee7 	bl	80002ec <__adddf3>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	4614      	mov	r4, r2
 8002524:	461d      	mov	r5, r3
				- map(-ps4.w, -512, 512, -1, 1);
 8002526:	4b4b      	ldr	r3, [pc, #300]	@ (8002654 <tele_op_mode+0x338>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4258      	negs	r0, r3
 800252c:	2301      	movs	r3, #1
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	f04f 33ff 	mov.w	r3, #4294967295
 8002534:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002538:	4947      	ldr	r1, [pc, #284]	@ (8002658 <tele_op_mode+0x33c>)
 800253a:	f7fe fe63 	bl	8001204 <map>
 800253e:	ec53 2b10 	vmov	r2, r3, d0
		sst_ref = map(-ps4.x, -512, 512, -1, 1) + map(-ps4.y, -512, 512, -1, 1)
 8002542:	4620      	mov	r0, r4
 8002544:	4629      	mov	r1, r5
 8002546:	f7fd fecf 	bl	80002e8 <__aeabi_dsub>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	e9c7 2300 	strd	r2, r3, [r7]

		fdr_pwm = percent2pwm(fdr_ref * 100);
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	4b41      	ldr	r3, [pc, #260]	@ (800265c <tele_op_mode+0x340>)
 8002558:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800255c:	f7fe f87c 	bl	8000658 <__aeabi_dmul>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4610      	mov	r0, r2
 8002566:	4619      	mov	r1, r3
 8002568:	f7fe fb26 	bl	8000bb8 <__aeabi_d2iz>
 800256c:	4603      	mov	r3, r0
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe fe8c 	bl	800128c <percent2pwm>
 8002574:	62f8      	str	r0, [r7, #44]	@ 0x2c
		sdr_pwm = percent2pwm(sdr_ref * 100);
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	4b38      	ldr	r3, [pc, #224]	@ (800265c <tele_op_mode+0x340>)
 800257c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002580:	f7fe f86a 	bl	8000658 <__aeabi_dmul>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	f7fe fb14 	bl	8000bb8 <__aeabi_d2iz>
 8002590:	4603      	mov	r3, r0
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe fe7a 	bl	800128c <percent2pwm>
 8002598:	62b8      	str	r0, [r7, #40]	@ 0x28
		fst_pwm = percent2pwm(fst_ref * 100);
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	4b2f      	ldr	r3, [pc, #188]	@ (800265c <tele_op_mode+0x340>)
 80025a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025a4:	f7fe f858 	bl	8000658 <__aeabi_dmul>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4610      	mov	r0, r2
 80025ae:	4619      	mov	r1, r3
 80025b0:	f7fe fb02 	bl	8000bb8 <__aeabi_d2iz>
 80025b4:	4603      	mov	r3, r0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fe68 	bl	800128c <percent2pwm>
 80025bc:	6278      	str	r0, [r7, #36]	@ 0x24
		sst_pwm = percent2pwm(sst_ref * 100);
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	4b26      	ldr	r3, [pc, #152]	@ (800265c <tele_op_mode+0x340>)
 80025c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025c8:	f7fe f846 	bl	8000658 <__aeabi_dmul>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4610      	mov	r0, r2
 80025d2:	4619      	mov	r1, r3
 80025d4:	f7fe faf0 	bl	8000bb8 <__aeabi_d2iz>
 80025d8:	4603      	mov	r3, r0
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe fe56 	bl	800128c <percent2pwm>
 80025e0:	6238      	str	r0, [r7, #32]

		fdr_pwm =
				(fdr_pwm > PWM_UPPER_LIMIT) ? PWM_UPPER_LIMIT :
 80025e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025e8:	da12      	bge.n	8002610 <tele_op_mode+0x2f4>
				(fdr_pwm < -PWM_UPPER_LIMIT) ? -PWM_UPPER_LIMIT :
 80025ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025f0:	dd0c      	ble.n	800260c <tele_op_mode+0x2f0>
				(fdr_pwm > -PWM_LOWER_LIMIT && fdr_pwm < PWM_LOWER_LIMIT) ?
						0 : fdr_pwm;
 80025f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002660 <tele_op_mode+0x344>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	db04      	blt.n	8002604 <tele_op_mode+0x2e8>
				(fdr_pwm > -PWM_LOWER_LIMIT && fdr_pwm < PWM_LOWER_LIMIT) ?
 80025fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025fc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002600:	4293      	cmp	r3, r2
 8002602:	dd01      	ble.n	8002608 <tele_op_mode+0x2ec>
						0 : fdr_pwm;
 8002604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002606:	e005      	b.n	8002614 <tele_op_mode+0x2f8>
 8002608:	2300      	movs	r3, #0
 800260a:	e003      	b.n	8002614 <tele_op_mode+0x2f8>
				(fdr_pwm < -PWM_UPPER_LIMIT) ? -PWM_UPPER_LIMIT :
 800260c:	4b15      	ldr	r3, [pc, #84]	@ (8002664 <tele_op_mode+0x348>)
 800260e:	e001      	b.n	8002614 <tele_op_mode+0x2f8>
				(fdr_pwm > PWM_UPPER_LIMIT) ? PWM_UPPER_LIMIT :
 8002610:	f64f 73ff 	movw	r3, #65535	@ 0xffff
		fdr_pwm =
 8002614:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sdr_pwm =
				(sdr_pwm > PWM_UPPER_LIMIT) ? PWM_UPPER_LIMIT :
 8002616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800261c:	da24      	bge.n	8002668 <tele_op_mode+0x34c>
				(sdr_pwm < -PWM_UPPER_LIMIT) ? -PWM_UPPER_LIMIT :
 800261e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002620:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002624:	dd0c      	ble.n	8002640 <tele_op_mode+0x324>
				(sdr_pwm > -PWM_LOWER_LIMIT && sdr_pwm < PWM_LOWER_LIMIT) ?
						0 : sdr_pwm;
 8002626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002628:	4a0d      	ldr	r2, [pc, #52]	@ (8002660 <tele_op_mode+0x344>)
 800262a:	4293      	cmp	r3, r2
 800262c:	db04      	blt.n	8002638 <tele_op_mode+0x31c>
				(sdr_pwm > -PWM_LOWER_LIMIT && sdr_pwm < PWM_LOWER_LIMIT) ?
 800262e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002630:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002634:	4293      	cmp	r3, r2
 8002636:	dd01      	ble.n	800263c <tele_op_mode+0x320>
						0 : sdr_pwm;
 8002638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800263a:	e017      	b.n	800266c <tele_op_mode+0x350>
 800263c:	2300      	movs	r3, #0
 800263e:	e015      	b.n	800266c <tele_op_mode+0x350>
				(sdr_pwm < -PWM_UPPER_LIMIT) ? -PWM_UPPER_LIMIT :
 8002640:	4b08      	ldr	r3, [pc, #32]	@ (8002664 <tele_op_mode+0x348>)
 8002642:	e013      	b.n	800266c <tele_op_mode+0x350>
 8002644:	20000d84 	.word	0x20000d84
 8002648:	200004e4 	.word	0x200004e4
 800264c:	20000d7c 	.word	0x20000d7c
 8002650:	2000052c 	.word	0x2000052c
 8002654:	20000d70 	.word	0x20000d70
 8002658:	fffffe00 	.word	0xfffffe00
 800265c:	40590000 	.word	0x40590000
 8002660:	ffffd8f1 	.word	0xffffd8f1
 8002664:	ffff0001 	.word	0xffff0001
				(sdr_pwm > PWM_UPPER_LIMIT) ? PWM_UPPER_LIMIT :
 8002668:	f64f 73ff 	movw	r3, #65535	@ 0xffff
		sdr_pwm =
 800266c:	62bb      	str	r3, [r7, #40]	@ 0x28
		fst_pwm =
				(fst_pwm > PWM_UPPER_LIMIT) ? PWM_UPPER_LIMIT :
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002674:	da12      	bge.n	800269c <tele_op_mode+0x380>
				(fst_pwm < -PWM_UPPER_LIMIT) ? -PWM_UPPER_LIMIT :
 8002676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002678:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800267c:	dd0c      	ble.n	8002698 <tele_op_mode+0x37c>
				(fst_pwm > -PWM_LOWER_LIMIT && fst_pwm < PWM_LOWER_LIMIT) ?
						0 : fst_pwm;
 800267e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002680:	4a28      	ldr	r2, [pc, #160]	@ (8002724 <tele_op_mode+0x408>)
 8002682:	4293      	cmp	r3, r2
 8002684:	db04      	blt.n	8002690 <tele_op_mode+0x374>
				(fst_pwm > -PWM_LOWER_LIMIT && fst_pwm < PWM_LOWER_LIMIT) ?
 8002686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002688:	f242 720f 	movw	r2, #9999	@ 0x270f
 800268c:	4293      	cmp	r3, r2
 800268e:	dd01      	ble.n	8002694 <tele_op_mode+0x378>
						0 : fst_pwm;
 8002690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002692:	e005      	b.n	80026a0 <tele_op_mode+0x384>
 8002694:	2300      	movs	r3, #0
 8002696:	e003      	b.n	80026a0 <tele_op_mode+0x384>
				(fst_pwm < -PWM_UPPER_LIMIT) ? -PWM_UPPER_LIMIT :
 8002698:	4b23      	ldr	r3, [pc, #140]	@ (8002728 <tele_op_mode+0x40c>)
 800269a:	e001      	b.n	80026a0 <tele_op_mode+0x384>
				(fst_pwm > PWM_UPPER_LIMIT) ? PWM_UPPER_LIMIT :
 800269c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
		fst_pwm =
 80026a0:	627b      	str	r3, [r7, #36]	@ 0x24
		sst_pwm =
				(sst_pwm > PWM_UPPER_LIMIT) ? PWM_UPPER_LIMIT :
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026a8:	da12      	bge.n	80026d0 <tele_op_mode+0x3b4>
				(sst_pwm < -PWM_UPPER_LIMIT) ? -PWM_UPPER_LIMIT :
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026b0:	dd0c      	ble.n	80026cc <tele_op_mode+0x3b0>
				(sst_pwm > -PWM_LOWER_LIMIT && sst_pwm < PWM_LOWER_LIMIT) ?
						0 : sst_pwm;
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002724 <tele_op_mode+0x408>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	db04      	blt.n	80026c4 <tele_op_mode+0x3a8>
				(sst_pwm > -PWM_LOWER_LIMIT && sst_pwm < PWM_LOWER_LIMIT) ?
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80026c0:	4293      	cmp	r3, r2
 80026c2:	dd01      	ble.n	80026c8 <tele_op_mode+0x3ac>
						0 : sst_pwm;
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	e005      	b.n	80026d4 <tele_op_mode+0x3b8>
 80026c8:	2300      	movs	r3, #0
 80026ca:	e003      	b.n	80026d4 <tele_op_mode+0x3b8>
				(sst_pwm < -PWM_UPPER_LIMIT) ? -PWM_UPPER_LIMIT :
 80026cc:	4b16      	ldr	r3, [pc, #88]	@ (8002728 <tele_op_mode+0x40c>)
 80026ce:	e001      	b.n	80026d4 <tele_op_mode+0x3b8>
				(sst_pwm > PWM_UPPER_LIMIT) ? PWM_UPPER_LIMIT :
 80026d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
		sst_pwm =
 80026d4:	623b      	str	r3, [r7, #32]

		fdr_set_pwm(fdr_pwm);
 80026d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80026d8:	f7ff f99c 	bl	8001a14 <fdr_set_pwm>
		sdr_set_pwm(sdr_pwm);
 80026dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026de:	f7ff f9ed 	bl	8001abc <sdr_set_pwm>
		fst_set_pwm(fst_pwm);
 80026e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80026e4:	f7ff f9c0 	bl	8001a68 <fst_set_pwm>
		sst_set_pwm(sst_pwm);
 80026e8:	6a38      	ldr	r0, [r7, #32]
 80026ea:	f7ff fa11 	bl	8001b10 <sst_set_pwm>
	while (live_follower.in_teleop_mode || !live_follower.is_stopped) {
 80026ee:	4b0f      	ldr	r3, [pc, #60]	@ (800272c <tele_op_mode+0x410>)
 80026f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f47f ae3a 	bne.w	800236e <tele_op_mode+0x52>
 80026fa:	4b0c      	ldr	r3, [pc, #48]	@ (800272c <tele_op_mode+0x410>)
 80026fc:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002700:	f083 0301 	eor.w	r3, r3, #1
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	f47f ae31 	bne.w	800236e <tele_op_mode+0x52>
	}
	if (live_follower.is_stopped) {
 800270c:	4b07      	ldr	r3, [pc, #28]	@ (800272c <tele_op_mode+0x410>)
 800270e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <tele_op_mode+0x3fe>
		stop_motors();
 8002716:	f7ff faa5 	bl	8001c64 <stop_motors>
	}
}
 800271a:	bf00      	nop
 800271c:	3730      	adds	r7, #48	@ 0x30
 800271e:	46bd      	mov	sp, r7
 8002720:	bdb0      	pop	{r4, r5, r7, pc}
 8002722:	bf00      	nop
 8002724:	ffffd8f1 	.word	0xffffd8f1
 8002728:	ffff0001 	.word	0xffff0001
 800272c:	20000d30 	.word	0x20000d30

08002730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002734:	f001 fd6e 	bl	8004214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002738:	f000 f8e2 	bl	8002900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800273c:	f000 fdb0 	bl	80032a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002740:	f000 fd68 	bl	8003214 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8002744:	f000 fce2 	bl	800310c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002748:	f000 fd34 	bl	80031b4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 800274c:	f000 fa84 	bl	8002c58 <MX_TIM4_Init>
  MX_TIM1_Init();
 8002750:	f000 f976 	bl	8002a40 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002754:	f000 f9d0 	bl	8002af8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002758:	f000 fa26 	bl	8002ba8 <MX_TIM3_Init>
  MX_TIM5_Init();
 800275c:	f000 fb14 	bl	8002d88 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002760:	f000 fb6a 	bl	8002e38 <MX_TIM8_Init>
  MX_TIM9_Init();
 8002764:	f000 fc10 	bl	8002f88 <MX_TIM9_Init>
  MX_USART2_UART_Init();
 8002768:	f000 fca6 	bl	80030b8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800276c:	f000 fcf8 	bl	8003160 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8002770:	f000 f932 	bl	80029d8 <MX_SPI2_Init>
  MX_TIM10_Init();
 8002774:	f000 fc42 	bl	8002ffc <MX_TIM10_Init>
  MX_TIM12_Init();
 8002778:	f000 fc64 	bl	8003044 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800277c:	2100      	movs	r1, #0
 800277e:	484b      	ldr	r0, [pc, #300]	@ (80028ac <main+0x17c>)
 8002780:	f003 fe08 	bl	8006394 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002784:	2104      	movs	r1, #4
 8002786:	4849      	ldr	r0, [pc, #292]	@ (80028ac <main+0x17c>)
 8002788:	f003 fe04 	bl	8006394 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800278c:	2108      	movs	r1, #8
 800278e:	4847      	ldr	r0, [pc, #284]	@ (80028ac <main+0x17c>)
 8002790:	f003 fe00 	bl	8006394 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002794:	210c      	movs	r1, #12
 8002796:	4845      	ldr	r0, [pc, #276]	@ (80028ac <main+0x17c>)
 8002798:	f003 fdfc 	bl	8006394 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800279c:	2100      	movs	r1, #0
 800279e:	4844      	ldr	r0, [pc, #272]	@ (80028b0 <main+0x180>)
 80027a0:	f003 fdf8 	bl	8006394 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80027a4:	2104      	movs	r1, #4
 80027a6:	4842      	ldr	r0, [pc, #264]	@ (80028b0 <main+0x180>)
 80027a8:	f003 fdf4 	bl	8006394 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80027ac:	2108      	movs	r1, #8
 80027ae:	4840      	ldr	r0, [pc, #256]	@ (80028b0 <main+0x180>)
 80027b0:	f003 fdf0 	bl	8006394 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80027b4:	210c      	movs	r1, #12
 80027b6:	483e      	ldr	r0, [pc, #248]	@ (80028b0 <main+0x180>)
 80027b8:	f003 fdec 	bl	8006394 <HAL_TIM_PWM_Start>

	HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80027bc:	2018      	movs	r0, #24
 80027be:	f001 feb6 	bl	800452e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80027c2:	2019      	movs	r0, #25
 80027c4:	f001 feb3 	bl	800452e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80027c8:	202b      	movs	r0, #43	@ 0x2b
 80027ca:	f001 feb0 	bl	800452e <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim9);
 80027ce:	4839      	ldr	r0, [pc, #228]	@ (80028b4 <main+0x184>)
 80027d0:	f003 fd20 	bl	8006214 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim12);
 80027d4:	4838      	ldr	r0, [pc, #224]	@ (80028b8 <main+0x188>)
 80027d6:	f003 fd1d 	bl	8006214 <HAL_TIM_Base_Start_IT>

	MOTOR_Init(&fdr);
 80027da:	4838      	ldr	r0, [pc, #224]	@ (80028bc <main+0x18c>)
 80027dc:	f7fe fc32 	bl	8001044 <MOTOR_Init>
	MOTOR_Init(&fst);
 80027e0:	4837      	ldr	r0, [pc, #220]	@ (80028c0 <main+0x190>)
 80027e2:	f7fe fc2f 	bl	8001044 <MOTOR_Init>
	MOTOR_Init(&sdr);
 80027e6:	4837      	ldr	r0, [pc, #220]	@ (80028c4 <main+0x194>)
 80027e8:	f7fe fc2c 	bl	8001044 <MOTOR_Init>
	MOTOR_Init(&sst);
 80027ec:	4836      	ldr	r0, [pc, #216]	@ (80028c8 <main+0x198>)
 80027ee:	f7fe fc29 	bl	8001044 <MOTOR_Init>
	Controller_Init(&ps4);
 80027f2:	4836      	ldr	r0, [pc, #216]	@ (80028cc <main+0x19c>)
 80027f4:	f7fe fc47 	bl	8001086 <Controller_Init>
	Wheels_Init(&wheels);
 80027f8:	4835      	ldr	r0, [pc, #212]	@ (80028d0 <main+0x1a0>)
 80027fa:	f7fe fc57 	bl	80010ac <Wheels_Init>
	LIVE_FOLLOWER_Init(&live_follower);
 80027fe:	4835      	ldr	r0, [pc, #212]	@ (80028d4 <main+0x1a4>)
 8002800:	f7fe fc88 	bl	8001114 <LIVE_FOLLOWER_Init>
	ODO_Init(&odometer);
 8002804:	4834      	ldr	r0, [pc, #208]	@ (80028d8 <main+0x1a8>)
 8002806:	f7fe fcb7 	bl	8001178 <ODO_Init>

	//RECEIVE DATA FROM BLUEPILL
	HAL_UART_Receive_DMA(&huart6, odometry_buffer, 25);
 800280a:	2219      	movs	r2, #25
 800280c:	4933      	ldr	r1, [pc, #204]	@ (80028dc <main+0x1ac>)
 800280e:	4834      	ldr	r0, [pc, #208]	@ (80028e0 <main+0x1b0>)
 8002810:	f004 ff1c 	bl	800764c <HAL_UART_Receive_DMA>

	//RECEIVE DATA FROM HC-05 merge
	HAL_UART_Receive_DMA(&huart3, trajectory_buffer, MAX_TRAJECTORY_SIZE);
 8002814:	2208      	movs	r2, #8
 8002816:	4933      	ldr	r1, [pc, #204]	@ (80028e4 <main+0x1b4>)
 8002818:	4833      	ldr	r0, [pc, #204]	@ (80028e8 <main+0x1b8>)
 800281a:	f004 ff17 	bl	800764c <HAL_UART_Receive_DMA>

	//TRANSMIT DATA TO HC-05
	process_data();
 800281e:	f7fe fd91 	bl	8001344 <process_data>

	PID_Init(&fdr_controller, 1, 1, 0);
 8002822:	ed9f 1a32 	vldr	s2, [pc, #200]	@ 80028ec <main+0x1bc>
 8002826:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800282a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800282e:	4830      	ldr	r0, [pc, #192]	@ (80028f0 <main+0x1c0>)
 8002830:	f7fe fcc2 	bl	80011b8 <PID_Init>
	PID_Init(&fst_controller, 1, 1, 0);
 8002834:	ed9f 1a2d 	vldr	s2, [pc, #180]	@ 80028ec <main+0x1bc>
 8002838:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800283c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002840:	482c      	ldr	r0, [pc, #176]	@ (80028f4 <main+0x1c4>)
 8002842:	f7fe fcb9 	bl	80011b8 <PID_Init>
	PID_Init(&sdr_controller, 1, 1, 0);
 8002846:	ed9f 1a29 	vldr	s2, [pc, #164]	@ 80028ec <main+0x1bc>
 800284a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800284e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002852:	4829      	ldr	r0, [pc, #164]	@ (80028f8 <main+0x1c8>)
 8002854:	f7fe fcb0 	bl	80011b8 <PID_Init>
	PID_Init(&sst_controller, 1, 1, 0);
 8002858:	ed9f 1a24 	vldr	s2, [pc, #144]	@ 80028ec <main+0x1bc>
 800285c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002860:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002864:	4825      	ldr	r0, [pc, #148]	@ (80028fc <main+0x1cc>)
 8002866:	f7fe fca7 	bl	80011b8 <PID_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		//RECEIVE DATA FROM HC-05 merge
		HAL_UART_Receive_DMA(&huart3, trajectory_buffer, MAX_TRAJECTORY_SIZE);
 800286a:	2208      	movs	r2, #8
 800286c:	491d      	ldr	r1, [pc, #116]	@ (80028e4 <main+0x1b4>)
 800286e:	481e      	ldr	r0, [pc, #120]	@ (80028e8 <main+0x1b8>)
 8002870:	f004 feec 	bl	800764c <HAL_UART_Receive_DMA>

		if (live_follower.is_stopped) {
 8002874:	4b17      	ldr	r3, [pc, #92]	@ (80028d4 <main+0x1a4>)
 8002876:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <main+0x154>
			stop_motors();
 800287e:	f7ff f9f1 	bl	8001c64 <stop_motors>
 8002882:	e7f2      	b.n	800286a <main+0x13a>

		} else if (live_follower.in_teleop_mode) {
 8002884:	4b13      	ldr	r3, [pc, #76]	@ (80028d4 <main+0x1a4>)
 8002886:	f893 3020 	ldrb.w	r3, [r3, #32]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <main+0x164>
			//TELEOP
			tele_op_mode();
 800288e:	f7ff fd45 	bl	800231c <tele_op_mode>
 8002892:	e7ea      	b.n	800286a <main+0x13a>

		} else if (!live_follower.in_teleop_mode) {
 8002894:	4b0f      	ldr	r3, [pc, #60]	@ (80028d4 <main+0x1a4>)
 8002896:	f893 3020 	ldrb.w	r3, [r3, #32]
 800289a:	f083 0301 	eor.w	r3, r3, #1
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0e2      	beq.n	800286a <main+0x13a>
			//AUTO OP MODE
			live_op_mode();
 80028a4:	f7ff fcc8 	bl	8002238 <live_op_mode>
		HAL_UART_Receive_DMA(&huart3, trajectory_buffer, MAX_TRAJECTORY_SIZE);
 80028a8:	e7df      	b.n	800286a <main+0x13a>
 80028aa:	bf00      	nop
 80028ac:	20000334 	.word	0x20000334
 80028b0:	200003c4 	.word	0x200003c4
 80028b4:	2000040c 	.word	0x2000040c
 80028b8:	2000049c 	.word	0x2000049c
 80028bc:	20000c80 	.word	0x20000c80
 80028c0:	20000ca0 	.word	0x20000ca0
 80028c4:	20000cc0 	.word	0x20000cc0
 80028c8:	20000ce0 	.word	0x20000ce0
 80028cc:	20000d70 	.word	0x20000d70
 80028d0:	20000d00 	.word	0x20000d00
 80028d4:	20000d30 	.word	0x20000d30
 80028d8:	20000d58 	.word	0x20000d58
 80028dc:	20000d94 	.word	0x20000d94
 80028e0:	20000574 	.word	0x20000574
 80028e4:	20000d7c 	.word	0x20000d7c
 80028e8:	2000052c 	.word	0x2000052c
 80028ec:	00000000 	.word	0x00000000
 80028f0:	20000c20 	.word	0x20000c20
 80028f4:	20000c38 	.word	0x20000c38
 80028f8:	20000c50 	.word	0x20000c50
 80028fc:	20000c68 	.word	0x20000c68

08002900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b094      	sub	sp, #80	@ 0x50
 8002904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002906:	f107 031c 	add.w	r3, r7, #28
 800290a:	2234      	movs	r2, #52	@ 0x34
 800290c:	2100      	movs	r1, #0
 800290e:	4618      	mov	r0, r3
 8002910:	f007 fecf 	bl	800a6b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002914:	f107 0308 	add.w	r3, r7, #8
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002924:	2300      	movs	r3, #0
 8002926:	607b      	str	r3, [r7, #4]
 8002928:	4b29      	ldr	r3, [pc, #164]	@ (80029d0 <SystemClock_Config+0xd0>)
 800292a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292c:	4a28      	ldr	r2, [pc, #160]	@ (80029d0 <SystemClock_Config+0xd0>)
 800292e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002932:	6413      	str	r3, [r2, #64]	@ 0x40
 8002934:	4b26      	ldr	r3, [pc, #152]	@ (80029d0 <SystemClock_Config+0xd0>)
 8002936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002938:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002940:	2300      	movs	r3, #0
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	4b23      	ldr	r3, [pc, #140]	@ (80029d4 <SystemClock_Config+0xd4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a22      	ldr	r2, [pc, #136]	@ (80029d4 <SystemClock_Config+0xd4>)
 800294a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800294e:	6013      	str	r3, [r2, #0]
 8002950:	4b20      	ldr	r3, [pc, #128]	@ (80029d4 <SystemClock_Config+0xd4>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002958:	603b      	str	r3, [r7, #0]
 800295a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800295c:	2301      	movs	r3, #1
 800295e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002960:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002964:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002966:	2302      	movs	r3, #2
 8002968:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800296a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800296e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002970:	2308      	movs	r3, #8
 8002972:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8002974:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002978:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800297a:	2304      	movs	r3, #4
 800297c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800297e:	2308      	movs	r3, #8
 8002980:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002982:	2302      	movs	r3, #2
 8002984:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002986:	f107 031c 	add.w	r3, r7, #28
 800298a:	4618      	mov	r0, r3
 800298c:	f003 f8e6 	bl	8005b5c <HAL_RCC_OscConfig>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002996:	f000 fdbb 	bl	8003510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800299a:	230f      	movs	r3, #15
 800299c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800299e:	2302      	movs	r3, #2
 80029a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80029b0:	f107 0308 	add.w	r3, r7, #8
 80029b4:	2103      	movs	r1, #3
 80029b6:	4618      	mov	r0, r3
 80029b8:	f002 fce2 	bl	8005380 <HAL_RCC_ClockConfig>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80029c2:	f000 fda5 	bl	8003510 <Error_Handler>
  }
}
 80029c6:	bf00      	nop
 80029c8:	3750      	adds	r7, #80	@ 0x50
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40007000 	.word	0x40007000

080029d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80029dc:	4b16      	ldr	r3, [pc, #88]	@ (8002a38 <MX_SPI2_Init+0x60>)
 80029de:	4a17      	ldr	r2, [pc, #92]	@ (8002a3c <MX_SPI2_Init+0x64>)
 80029e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80029e2:	4b15      	ldr	r3, [pc, #84]	@ (8002a38 <MX_SPI2_Init+0x60>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80029e8:	4b13      	ldr	r3, [pc, #76]	@ (8002a38 <MX_SPI2_Init+0x60>)
 80029ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80029f0:	4b11      	ldr	r3, [pc, #68]	@ (8002a38 <MX_SPI2_Init+0x60>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029f6:	4b10      	ldr	r3, [pc, #64]	@ (8002a38 <MX_SPI2_Init+0x60>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002a38 <MX_SPI2_Init+0x60>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002a02:	4b0d      	ldr	r3, [pc, #52]	@ (8002a38 <MX_SPI2_Init+0x60>)
 8002a04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a08:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a38 <MX_SPI2_Init+0x60>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a10:	4b09      	ldr	r3, [pc, #36]	@ (8002a38 <MX_SPI2_Init+0x60>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a16:	4b08      	ldr	r3, [pc, #32]	@ (8002a38 <MX_SPI2_Init+0x60>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002a1c:	4b06      	ldr	r3, [pc, #24]	@ (8002a38 <MX_SPI2_Init+0x60>)
 8002a1e:	220a      	movs	r2, #10
 8002a20:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002a22:	4805      	ldr	r0, [pc, #20]	@ (8002a38 <MX_SPI2_Init+0x60>)
 8002a24:	f003 fb1e 	bl	8006064 <HAL_SPI_Init>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_SPI2_Init+0x5a>
  {
    Error_Handler();
 8002a2e:	f000 fd6f 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000204 	.word	0x20000204
 8002a3c:	40003800 	.word	0x40003800

08002a40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08c      	sub	sp, #48	@ 0x30
 8002a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a46:	f107 030c 	add.w	r3, r7, #12
 8002a4a:	2224      	movs	r2, #36	@ 0x24
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f007 fe2f 	bl	800a6b2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a54:	1d3b      	adds	r3, r7, #4
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a5c:	4b24      	ldr	r3, [pc, #144]	@ (8002af0 <MX_TIM1_Init+0xb0>)
 8002a5e:	4a25      	ldr	r2, [pc, #148]	@ (8002af4 <MX_TIM1_Init+0xb4>)
 8002a60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002a62:	4b23      	ldr	r3, [pc, #140]	@ (8002af0 <MX_TIM1_Init+0xb0>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a68:	4b21      	ldr	r3, [pc, #132]	@ (8002af0 <MX_TIM1_Init+0xb0>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002a6e:	4b20      	ldr	r3, [pc, #128]	@ (8002af0 <MX_TIM1_Init+0xb0>)
 8002a70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a76:	4b1e      	ldr	r3, [pc, #120]	@ (8002af0 <MX_TIM1_Init+0xb0>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002af0 <MX_TIM1_Init+0xb0>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a82:	4b1b      	ldr	r3, [pc, #108]	@ (8002af0 <MX_TIM1_Init+0xb0>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a90:	2301      	movs	r3, #1
 8002a92:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002aac:	f107 030c 	add.w	r3, r7, #12
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	480f      	ldr	r0, [pc, #60]	@ (8002af0 <MX_TIM1_Init+0xb0>)
 8002ab4:	f003 fd36 	bl	8006524 <HAL_TIM_Encoder_Init>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002abe:	f000 fd27 	bl	8003510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	4619      	mov	r1, r3
 8002ace:	4808      	ldr	r0, [pc, #32]	@ (8002af0 <MX_TIM1_Init+0xb0>)
 8002ad0:	f004 fc1a 	bl	8007308 <HAL_TIMEx_MasterConfigSynchronization>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002ada:	f000 fd19 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002ade:	213c      	movs	r1, #60	@ 0x3c
 8002ae0:	4803      	ldr	r0, [pc, #12]	@ (8002af0 <MX_TIM1_Init+0xb0>)
 8002ae2:	f003 fdc5 	bl	8006670 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM1_Init 2 */

}
 8002ae6:	bf00      	nop
 8002ae8:	3730      	adds	r7, #48	@ 0x30
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	2000025c 	.word	0x2000025c
 8002af4:	40010000 	.word	0x40010000

08002af8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08c      	sub	sp, #48	@ 0x30
 8002afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002afe:	f107 030c 	add.w	r3, r7, #12
 8002b02:	2224      	movs	r2, #36	@ 0x24
 8002b04:	2100      	movs	r1, #0
 8002b06:	4618      	mov	r0, r3
 8002b08:	f007 fdd3 	bl	800a6b2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b0c:	1d3b      	adds	r3, r7, #4
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b14:	4b23      	ldr	r3, [pc, #140]	@ (8002ba4 <MX_TIM2_Init+0xac>)
 8002b16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002b1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002b1c:	4b21      	ldr	r3, [pc, #132]	@ (8002ba4 <MX_TIM2_Init+0xac>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b22:	4b20      	ldr	r3, [pc, #128]	@ (8002ba4 <MX_TIM2_Init+0xac>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002b28:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba4 <MX_TIM2_Init+0xac>)
 8002b2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b30:	4b1c      	ldr	r3, [pc, #112]	@ (8002ba4 <MX_TIM2_Init+0xac>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b36:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba4 <MX_TIM2_Init+0xac>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b40:	2300      	movs	r3, #0
 8002b42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b44:	2301      	movs	r3, #1
 8002b46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b50:	2300      	movs	r3, #0
 8002b52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b54:	2301      	movs	r3, #1
 8002b56:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002b60:	f107 030c 	add.w	r3, r7, #12
 8002b64:	4619      	mov	r1, r3
 8002b66:	480f      	ldr	r0, [pc, #60]	@ (8002ba4 <MX_TIM2_Init+0xac>)
 8002b68:	f003 fcdc 	bl	8006524 <HAL_TIM_Encoder_Init>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002b72:	f000 fccd 	bl	8003510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b76:	2300      	movs	r3, #0
 8002b78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b7e:	1d3b      	adds	r3, r7, #4
 8002b80:	4619      	mov	r1, r3
 8002b82:	4808      	ldr	r0, [pc, #32]	@ (8002ba4 <MX_TIM2_Init+0xac>)
 8002b84:	f004 fbc0 	bl	8007308 <HAL_TIMEx_MasterConfigSynchronization>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002b8e:	f000 fcbf 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002b92:	213c      	movs	r1, #60	@ 0x3c
 8002b94:	4803      	ldr	r0, [pc, #12]	@ (8002ba4 <MX_TIM2_Init+0xac>)
 8002b96:	f003 fd6b 	bl	8006670 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM2_Init 2 */

}
 8002b9a:	bf00      	nop
 8002b9c:	3730      	adds	r7, #48	@ 0x30
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	200002a4 	.word	0x200002a4

08002ba8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08c      	sub	sp, #48	@ 0x30
 8002bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002bae:	f107 030c 	add.w	r3, r7, #12
 8002bb2:	2224      	movs	r2, #36	@ 0x24
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f007 fd7b 	bl	800a6b2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bbc:	1d3b      	adds	r3, r7, #4
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bc4:	4b22      	ldr	r3, [pc, #136]	@ (8002c50 <MX_TIM3_Init+0xa8>)
 8002bc6:	4a23      	ldr	r2, [pc, #140]	@ (8002c54 <MX_TIM3_Init+0xac>)
 8002bc8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002bca:	4b21      	ldr	r3, [pc, #132]	@ (8002c50 <MX_TIM3_Init+0xa8>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c50 <MX_TIM3_Init+0xa8>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c50 <MX_TIM3_Init+0xa8>)
 8002bd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bdc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bde:	4b1c      	ldr	r3, [pc, #112]	@ (8002c50 <MX_TIM3_Init+0xa8>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002be4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c50 <MX_TIM3_Init+0xa8>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002bea:	2303      	movs	r3, #3
 8002bec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c02:	2301      	movs	r3, #1
 8002c04:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c06:	2300      	movs	r3, #0
 8002c08:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002c0e:	f107 030c 	add.w	r3, r7, #12
 8002c12:	4619      	mov	r1, r3
 8002c14:	480e      	ldr	r0, [pc, #56]	@ (8002c50 <MX_TIM3_Init+0xa8>)
 8002c16:	f003 fc85 	bl	8006524 <HAL_TIM_Encoder_Init>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002c20:	f000 fc76 	bl	8003510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c24:	2300      	movs	r3, #0
 8002c26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c2c:	1d3b      	adds	r3, r7, #4
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4807      	ldr	r0, [pc, #28]	@ (8002c50 <MX_TIM3_Init+0xa8>)
 8002c32:	f004 fb69 	bl	8007308 <HAL_TIMEx_MasterConfigSynchronization>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002c3c:	f000 fc68 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002c40:	213c      	movs	r1, #60	@ 0x3c
 8002c42:	4803      	ldr	r0, [pc, #12]	@ (8002c50 <MX_TIM3_Init+0xa8>)
 8002c44:	f003 fd14 	bl	8006670 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM3_Init 2 */

}
 8002c48:	bf00      	nop
 8002c4a:	3730      	adds	r7, #48	@ 0x30
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	200002ec 	.word	0x200002ec
 8002c54:	40000400 	.word	0x40000400

08002c58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08e      	sub	sp, #56	@ 0x38
 8002c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	605a      	str	r2, [r3, #4]
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c6c:	f107 0320 	add.w	r3, r7, #32
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c76:	1d3b      	adds	r3, r7, #4
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	60da      	str	r2, [r3, #12]
 8002c82:	611a      	str	r2, [r3, #16]
 8002c84:	615a      	str	r2, [r3, #20]
 8002c86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c88:	4b3d      	ldr	r3, [pc, #244]	@ (8002d80 <MX_TIM4_Init+0x128>)
 8002c8a:	4a3e      	ldr	r2, [pc, #248]	@ (8002d84 <MX_TIM4_Init+0x12c>)
 8002c8c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002c8e:	4b3c      	ldr	r3, [pc, #240]	@ (8002d80 <MX_TIM4_Init+0x128>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c94:	4b3a      	ldr	r3, [pc, #232]	@ (8002d80 <MX_TIM4_Init+0x128>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002c9a:	4b39      	ldr	r3, [pc, #228]	@ (8002d80 <MX_TIM4_Init+0x128>)
 8002c9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ca0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ca2:	4b37      	ldr	r3, [pc, #220]	@ (8002d80 <MX_TIM4_Init+0x128>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ca8:	4b35      	ldr	r3, [pc, #212]	@ (8002d80 <MX_TIM4_Init+0x128>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002cae:	4834      	ldr	r0, [pc, #208]	@ (8002d80 <MX_TIM4_Init+0x128>)
 8002cb0:	f003 fa61 	bl	8006176 <HAL_TIM_Base_Init>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002cba:	f000 fc29 	bl	8003510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002cc4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002cc8:	4619      	mov	r1, r3
 8002cca:	482d      	ldr	r0, [pc, #180]	@ (8002d80 <MX_TIM4_Init+0x128>)
 8002ccc:	f003 ff10 	bl	8006af0 <HAL_TIM_ConfigClockSource>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002cd6:	f000 fc1b 	bl	8003510 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002cda:	4829      	ldr	r0, [pc, #164]	@ (8002d80 <MX_TIM4_Init+0x128>)
 8002cdc:	f003 fb0a 	bl	80062f4 <HAL_TIM_PWM_Init>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002ce6:	f000 fc13 	bl	8003510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cea:	2300      	movs	r3, #0
 8002cec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002cf2:	f107 0320 	add.w	r3, r7, #32
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4821      	ldr	r0, [pc, #132]	@ (8002d80 <MX_TIM4_Init+0x128>)
 8002cfa:	f004 fb05 	bl	8007308 <HAL_TIMEx_MasterConfigSynchronization>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002d04:	f000 fc04 	bl	8003510 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d08:	2360      	movs	r3, #96	@ 0x60
 8002d0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d18:	1d3b      	adds	r3, r7, #4
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4818      	ldr	r0, [pc, #96]	@ (8002d80 <MX_TIM4_Init+0x128>)
 8002d20:	f003 fe24 	bl	800696c <HAL_TIM_PWM_ConfigChannel>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002d2a:	f000 fbf1 	bl	8003510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d2e:	1d3b      	adds	r3, r7, #4
 8002d30:	2204      	movs	r2, #4
 8002d32:	4619      	mov	r1, r3
 8002d34:	4812      	ldr	r0, [pc, #72]	@ (8002d80 <MX_TIM4_Init+0x128>)
 8002d36:	f003 fe19 	bl	800696c <HAL_TIM_PWM_ConfigChannel>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8002d40:	f000 fbe6 	bl	8003510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d44:	1d3b      	adds	r3, r7, #4
 8002d46:	2208      	movs	r2, #8
 8002d48:	4619      	mov	r1, r3
 8002d4a:	480d      	ldr	r0, [pc, #52]	@ (8002d80 <MX_TIM4_Init+0x128>)
 8002d4c:	f003 fe0e 	bl	800696c <HAL_TIM_PWM_ConfigChannel>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8002d56:	f000 fbdb 	bl	8003510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d5a:	1d3b      	adds	r3, r7, #4
 8002d5c:	220c      	movs	r2, #12
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4807      	ldr	r0, [pc, #28]	@ (8002d80 <MX_TIM4_Init+0x128>)
 8002d62:	f003 fe03 	bl	800696c <HAL_TIM_PWM_ConfigChannel>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8002d6c:	f000 fbd0 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002d70:	4803      	ldr	r0, [pc, #12]	@ (8002d80 <MX_TIM4_Init+0x128>)
 8002d72:	f000 fe1b 	bl	80039ac <HAL_TIM_MspPostInit>

}
 8002d76:	bf00      	nop
 8002d78:	3738      	adds	r7, #56	@ 0x38
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000334 	.word	0x20000334
 8002d84:	40000800 	.word	0x40000800

08002d88 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08c      	sub	sp, #48	@ 0x30
 8002d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d8e:	f107 030c 	add.w	r3, r7, #12
 8002d92:	2224      	movs	r2, #36	@ 0x24
 8002d94:	2100      	movs	r1, #0
 8002d96:	4618      	mov	r0, r3
 8002d98:	f007 fc8b 	bl	800a6b2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d9c:	1d3b      	adds	r3, r7, #4
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002da4:	4b22      	ldr	r3, [pc, #136]	@ (8002e30 <MX_TIM5_Init+0xa8>)
 8002da6:	4a23      	ldr	r2, [pc, #140]	@ (8002e34 <MX_TIM5_Init+0xac>)
 8002da8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002daa:	4b21      	ldr	r3, [pc, #132]	@ (8002e30 <MX_TIM5_Init+0xa8>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002db0:	4b1f      	ldr	r3, [pc, #124]	@ (8002e30 <MX_TIM5_Init+0xa8>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002db6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e30 <MX_TIM5_Init+0xa8>)
 8002db8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002dbc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8002e30 <MX_TIM5_Init+0xa8>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e30 <MX_TIM5_Init+0xa8>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002dde:	2300      	movs	r3, #0
 8002de0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002de2:	2301      	movs	r3, #1
 8002de4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002de6:	2300      	movs	r3, #0
 8002de8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002dea:	2300      	movs	r3, #0
 8002dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002dee:	f107 030c 	add.w	r3, r7, #12
 8002df2:	4619      	mov	r1, r3
 8002df4:	480e      	ldr	r0, [pc, #56]	@ (8002e30 <MX_TIM5_Init+0xa8>)
 8002df6:	f003 fb95 	bl	8006524 <HAL_TIM_Encoder_Init>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002e00:	f000 fb86 	bl	8003510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e04:	2300      	movs	r3, #0
 8002e06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e0c:	1d3b      	adds	r3, r7, #4
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4807      	ldr	r0, [pc, #28]	@ (8002e30 <MX_TIM5_Init+0xa8>)
 8002e12:	f004 fa79 	bl	8007308 <HAL_TIMEx_MasterConfigSynchronization>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002e1c:	f000 fb78 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8002e20:	213c      	movs	r1, #60	@ 0x3c
 8002e22:	4803      	ldr	r0, [pc, #12]	@ (8002e30 <MX_TIM5_Init+0xa8>)
 8002e24:	f003 fc24 	bl	8006670 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM5_Init 2 */

}
 8002e28:	bf00      	nop
 8002e2a:	3730      	adds	r7, #48	@ 0x30
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	2000037c 	.word	0x2000037c
 8002e34:	40000c00 	.word	0x40000c00

08002e38 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b092      	sub	sp, #72	@ 0x48
 8002e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e3e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	605a      	str	r2, [r3, #4]
 8002e52:	609a      	str	r2, [r3, #8]
 8002e54:	60da      	str	r2, [r3, #12]
 8002e56:	611a      	str	r2, [r3, #16]
 8002e58:	615a      	str	r2, [r3, #20]
 8002e5a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e5c:	1d3b      	adds	r3, r7, #4
 8002e5e:	2220      	movs	r2, #32
 8002e60:	2100      	movs	r1, #0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f007 fc25 	bl	800a6b2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002e68:	4b45      	ldr	r3, [pc, #276]	@ (8002f80 <MX_TIM8_Init+0x148>)
 8002e6a:	4a46      	ldr	r2, [pc, #280]	@ (8002f84 <MX_TIM8_Init+0x14c>)
 8002e6c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002e6e:	4b44      	ldr	r3, [pc, #272]	@ (8002f80 <MX_TIM8_Init+0x148>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e74:	4b42      	ldr	r3, [pc, #264]	@ (8002f80 <MX_TIM8_Init+0x148>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002e7a:	4b41      	ldr	r3, [pc, #260]	@ (8002f80 <MX_TIM8_Init+0x148>)
 8002e7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e80:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e82:	4b3f      	ldr	r3, [pc, #252]	@ (8002f80 <MX_TIM8_Init+0x148>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002e88:	4b3d      	ldr	r3, [pc, #244]	@ (8002f80 <MX_TIM8_Init+0x148>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e8e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f80 <MX_TIM8_Init+0x148>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002e94:	483a      	ldr	r0, [pc, #232]	@ (8002f80 <MX_TIM8_Init+0x148>)
 8002e96:	f003 fa2d 	bl	80062f4 <HAL_TIM_PWM_Init>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002ea0:	f000 fb36 	bl	8003510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002eac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4833      	ldr	r0, [pc, #204]	@ (8002f80 <MX_TIM8_Init+0x148>)
 8002eb4:	f004 fa28 	bl	8007308 <HAL_TIMEx_MasterConfigSynchronization>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002ebe:	f000 fb27 	bl	8003510 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ec2:	2360      	movs	r3, #96	@ 0x60
 8002ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002eda:	2300      	movs	r3, #0
 8002edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ede:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4826      	ldr	r0, [pc, #152]	@ (8002f80 <MX_TIM8_Init+0x148>)
 8002ee8:	f003 fd40 	bl	800696c <HAL_TIM_PWM_ConfigChannel>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002ef2:	f000 fb0d 	bl	8003510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ef6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002efa:	2204      	movs	r2, #4
 8002efc:	4619      	mov	r1, r3
 8002efe:	4820      	ldr	r0, [pc, #128]	@ (8002f80 <MX_TIM8_Init+0x148>)
 8002f00:	f003 fd34 	bl	800696c <HAL_TIM_PWM_ConfigChannel>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8002f0a:	f000 fb01 	bl	8003510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f12:	2208      	movs	r2, #8
 8002f14:	4619      	mov	r1, r3
 8002f16:	481a      	ldr	r0, [pc, #104]	@ (8002f80 <MX_TIM8_Init+0x148>)
 8002f18:	f003 fd28 	bl	800696c <HAL_TIM_PWM_ConfigChannel>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8002f22:	f000 faf5 	bl	8003510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f2a:	220c      	movs	r2, #12
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4814      	ldr	r0, [pc, #80]	@ (8002f80 <MX_TIM8_Init+0x148>)
 8002f30:	f003 fd1c 	bl	800696c <HAL_TIM_PWM_ConfigChannel>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8002f3a:	f000 fae9 	bl	8003510 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002f5c:	1d3b      	adds	r3, r7, #4
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4807      	ldr	r0, [pc, #28]	@ (8002f80 <MX_TIM8_Init+0x148>)
 8002f62:	f004 fa4d 	bl	8007400 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 8002f6c:	f000 fad0 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002f70:	4803      	ldr	r0, [pc, #12]	@ (8002f80 <MX_TIM8_Init+0x148>)
 8002f72:	f000 fd1b 	bl	80039ac <HAL_TIM_MspPostInit>

}
 8002f76:	bf00      	nop
 8002f78:	3748      	adds	r7, #72	@ 0x48
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	200003c4 	.word	0x200003c4
 8002f84:	40010400 	.word	0x40010400

08002f88 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f8e:	463b      	mov	r3, r7
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002f9a:	4b16      	ldr	r3, [pc, #88]	@ (8002ff4 <MX_TIM9_Init+0x6c>)
 8002f9c:	4a16      	ldr	r2, [pc, #88]	@ (8002ff8 <MX_TIM9_Init+0x70>)
 8002f9e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 999;
 8002fa0:	4b14      	ldr	r3, [pc, #80]	@ (8002ff4 <MX_TIM9_Init+0x6c>)
 8002fa2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002fa6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fa8:	4b12      	ldr	r3, [pc, #72]	@ (8002ff4 <MX_TIM9_Init+0x6c>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9599;
 8002fae:	4b11      	ldr	r3, [pc, #68]	@ (8002ff4 <MX_TIM9_Init+0x6c>)
 8002fb0:	f242 527f 	movw	r2, #9599	@ 0x257f
 8002fb4:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8002ff4 <MX_TIM9_Init+0x6c>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff4 <MX_TIM9_Init+0x6c>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002fc2:	480c      	ldr	r0, [pc, #48]	@ (8002ff4 <MX_TIM9_Init+0x6c>)
 8002fc4:	f003 f8d7 	bl	8006176 <HAL_TIM_Base_Init>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8002fce:	f000 fa9f 	bl	8003510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fd6:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002fd8:	463b      	mov	r3, r7
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4805      	ldr	r0, [pc, #20]	@ (8002ff4 <MX_TIM9_Init+0x6c>)
 8002fde:	f003 fd87 	bl	8006af0 <HAL_TIM_ConfigClockSource>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8002fe8:	f000 fa92 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002fec:	bf00      	nop
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	2000040c 	.word	0x2000040c
 8002ff8:	40014000 	.word	0x40014000

08002ffc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003000:	4b0e      	ldr	r3, [pc, #56]	@ (800303c <MX_TIM10_Init+0x40>)
 8003002:	4a0f      	ldr	r2, [pc, #60]	@ (8003040 <MX_TIM10_Init+0x44>)
 8003004:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1500;
 8003006:	4b0d      	ldr	r3, [pc, #52]	@ (800303c <MX_TIM10_Init+0x40>)
 8003008:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800300c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800300e:	4b0b      	ldr	r3, [pc, #44]	@ (800303c <MX_TIM10_Init+0x40>)
 8003010:	2200      	movs	r2, #0
 8003012:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8003014:	4b09      	ldr	r3, [pc, #36]	@ (800303c <MX_TIM10_Init+0x40>)
 8003016:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800301a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800301c:	4b07      	ldr	r3, [pc, #28]	@ (800303c <MX_TIM10_Init+0x40>)
 800301e:	2200      	movs	r2, #0
 8003020:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003022:	4b06      	ldr	r3, [pc, #24]	@ (800303c <MX_TIM10_Init+0x40>)
 8003024:	2200      	movs	r2, #0
 8003026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003028:	4804      	ldr	r0, [pc, #16]	@ (800303c <MX_TIM10_Init+0x40>)
 800302a:	f003 f8a4 	bl	8006176 <HAL_TIM_Base_Init>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8003034:	f000 fa6c 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003038:	bf00      	nop
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20000454 	.word	0x20000454
 8003040:	40014400 	.word	0x40014400

08003044 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800304a:	463b      	mov	r3, r7
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003056:	4b16      	ldr	r3, [pc, #88]	@ (80030b0 <MX_TIM12_Init+0x6c>)
 8003058:	4a16      	ldr	r2, [pc, #88]	@ (80030b4 <MX_TIM12_Init+0x70>)
 800305a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1500;
 800305c:	4b14      	ldr	r3, [pc, #80]	@ (80030b0 <MX_TIM12_Init+0x6c>)
 800305e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003062:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003064:	4b12      	ldr	r3, [pc, #72]	@ (80030b0 <MX_TIM12_Init+0x6c>)
 8003066:	2200      	movs	r2, #0
 8003068:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800306a:	4b11      	ldr	r3, [pc, #68]	@ (80030b0 <MX_TIM12_Init+0x6c>)
 800306c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003070:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003072:	4b0f      	ldr	r3, [pc, #60]	@ (80030b0 <MX_TIM12_Init+0x6c>)
 8003074:	2200      	movs	r2, #0
 8003076:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003078:	4b0d      	ldr	r3, [pc, #52]	@ (80030b0 <MX_TIM12_Init+0x6c>)
 800307a:	2200      	movs	r2, #0
 800307c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800307e:	480c      	ldr	r0, [pc, #48]	@ (80030b0 <MX_TIM12_Init+0x6c>)
 8003080:	f003 f879 	bl	8006176 <HAL_TIM_Base_Init>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 800308a:	f000 fa41 	bl	8003510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800308e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003092:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8003094:	463b      	mov	r3, r7
 8003096:	4619      	mov	r1, r3
 8003098:	4805      	ldr	r0, [pc, #20]	@ (80030b0 <MX_TIM12_Init+0x6c>)
 800309a:	f003 fd29 	bl	8006af0 <HAL_TIM_ConfigClockSource>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 80030a4:	f000 fa34 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80030a8:	bf00      	nop
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	2000049c 	.word	0x2000049c
 80030b4:	40001800 	.word	0x40001800

080030b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030bc:	4b11      	ldr	r3, [pc, #68]	@ (8003104 <MX_USART2_UART_Init+0x4c>)
 80030be:	4a12      	ldr	r2, [pc, #72]	@ (8003108 <MX_USART2_UART_Init+0x50>)
 80030c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80030c2:	4b10      	ldr	r3, [pc, #64]	@ (8003104 <MX_USART2_UART_Init+0x4c>)
 80030c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80030c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003104 <MX_USART2_UART_Init+0x4c>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003104 <MX_USART2_UART_Init+0x4c>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003104 <MX_USART2_UART_Init+0x4c>)
 80030d8:	2200      	movs	r2, #0
 80030da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030dc:	4b09      	ldr	r3, [pc, #36]	@ (8003104 <MX_USART2_UART_Init+0x4c>)
 80030de:	220c      	movs	r2, #12
 80030e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030e2:	4b08      	ldr	r3, [pc, #32]	@ (8003104 <MX_USART2_UART_Init+0x4c>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030e8:	4b06      	ldr	r3, [pc, #24]	@ (8003104 <MX_USART2_UART_Init+0x4c>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030ee:	4805      	ldr	r0, [pc, #20]	@ (8003104 <MX_USART2_UART_Init+0x4c>)
 80030f0:	f004 f9ec 	bl	80074cc <HAL_UART_Init>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80030fa:	f000 fa09 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	200004e4 	.word	0x200004e4
 8003108:	40004400 	.word	0x40004400

0800310c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003110:	4b11      	ldr	r3, [pc, #68]	@ (8003158 <MX_USART3_UART_Init+0x4c>)
 8003112:	4a12      	ldr	r2, [pc, #72]	@ (800315c <MX_USART3_UART_Init+0x50>)
 8003114:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003116:	4b10      	ldr	r3, [pc, #64]	@ (8003158 <MX_USART3_UART_Init+0x4c>)
 8003118:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800311c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800311e:	4b0e      	ldr	r3, [pc, #56]	@ (8003158 <MX_USART3_UART_Init+0x4c>)
 8003120:	2200      	movs	r2, #0
 8003122:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003124:	4b0c      	ldr	r3, [pc, #48]	@ (8003158 <MX_USART3_UART_Init+0x4c>)
 8003126:	2200      	movs	r2, #0
 8003128:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800312a:	4b0b      	ldr	r3, [pc, #44]	@ (8003158 <MX_USART3_UART_Init+0x4c>)
 800312c:	2200      	movs	r2, #0
 800312e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003130:	4b09      	ldr	r3, [pc, #36]	@ (8003158 <MX_USART3_UART_Init+0x4c>)
 8003132:	220c      	movs	r2, #12
 8003134:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003136:	4b08      	ldr	r3, [pc, #32]	@ (8003158 <MX_USART3_UART_Init+0x4c>)
 8003138:	2200      	movs	r2, #0
 800313a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800313c:	4b06      	ldr	r3, [pc, #24]	@ (8003158 <MX_USART3_UART_Init+0x4c>)
 800313e:	2200      	movs	r2, #0
 8003140:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003142:	4805      	ldr	r0, [pc, #20]	@ (8003158 <MX_USART3_UART_Init+0x4c>)
 8003144:	f004 f9c2 	bl	80074cc <HAL_UART_Init>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800314e:	f000 f9df 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	2000052c 	.word	0x2000052c
 800315c:	40004800 	.word	0x40004800

08003160 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003164:	4b11      	ldr	r3, [pc, #68]	@ (80031ac <MX_USART6_UART_Init+0x4c>)
 8003166:	4a12      	ldr	r2, [pc, #72]	@ (80031b0 <MX_USART6_UART_Init+0x50>)
 8003168:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800316a:	4b10      	ldr	r3, [pc, #64]	@ (80031ac <MX_USART6_UART_Init+0x4c>)
 800316c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003170:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003172:	4b0e      	ldr	r3, [pc, #56]	@ (80031ac <MX_USART6_UART_Init+0x4c>)
 8003174:	2200      	movs	r2, #0
 8003176:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003178:	4b0c      	ldr	r3, [pc, #48]	@ (80031ac <MX_USART6_UART_Init+0x4c>)
 800317a:	2200      	movs	r2, #0
 800317c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800317e:	4b0b      	ldr	r3, [pc, #44]	@ (80031ac <MX_USART6_UART_Init+0x4c>)
 8003180:	2200      	movs	r2, #0
 8003182:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003184:	4b09      	ldr	r3, [pc, #36]	@ (80031ac <MX_USART6_UART_Init+0x4c>)
 8003186:	220c      	movs	r2, #12
 8003188:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800318a:	4b08      	ldr	r3, [pc, #32]	@ (80031ac <MX_USART6_UART_Init+0x4c>)
 800318c:	2200      	movs	r2, #0
 800318e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003190:	4b06      	ldr	r3, [pc, #24]	@ (80031ac <MX_USART6_UART_Init+0x4c>)
 8003192:	2200      	movs	r2, #0
 8003194:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003196:	4805      	ldr	r0, [pc, #20]	@ (80031ac <MX_USART6_UART_Init+0x4c>)
 8003198:	f004 f998 	bl	80074cc <HAL_UART_Init>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80031a2:	f000 f9b5 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20000574 	.word	0x20000574
 80031b0:	40011400 	.word	0x40011400

080031b4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80031b8:	4b15      	ldr	r3, [pc, #84]	@ (8003210 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80031ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80031be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80031c0:	4b13      	ldr	r3, [pc, #76]	@ (8003210 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80031c2:	2206      	movs	r2, #6
 80031c4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80031c6:	4b12      	ldr	r3, [pc, #72]	@ (8003210 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80031c8:	2202      	movs	r2, #2
 80031ca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80031cc:	4b10      	ldr	r3, [pc, #64]	@ (8003210 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80031d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003210 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80031d4:	2202      	movs	r2, #2
 80031d6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80031d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003210 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80031da:	2201      	movs	r2, #1
 80031dc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80031de:	4b0c      	ldr	r3, [pc, #48]	@ (8003210 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80031e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003210 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80031ea:	4b09      	ldr	r3, [pc, #36]	@ (8003210 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80031f0:	4b07      	ldr	r3, [pc, #28]	@ (8003210 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80031f6:	4b06      	ldr	r3, [pc, #24]	@ (8003210 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80031fc:	4804      	ldr	r0, [pc, #16]	@ (8003210 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80031fe:	f001 ff84 	bl	800510a <HAL_PCD_Init>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8003208:	f000 f982 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800320c:	bf00      	nop
 800320e:	bd80      	pop	{r7, pc}
 8003210:	2000073c 	.word	0x2000073c

08003214 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	4b1f      	ldr	r3, [pc, #124]	@ (800329c <MX_DMA_Init+0x88>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003222:	4a1e      	ldr	r2, [pc, #120]	@ (800329c <MX_DMA_Init+0x88>)
 8003224:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003228:	6313      	str	r3, [r2, #48]	@ 0x30
 800322a:	4b1c      	ldr	r3, [pc, #112]	@ (800329c <MX_DMA_Init+0x88>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003232:	607b      	str	r3, [r7, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003236:	2300      	movs	r3, #0
 8003238:	603b      	str	r3, [r7, #0]
 800323a:	4b18      	ldr	r3, [pc, #96]	@ (800329c <MX_DMA_Init+0x88>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323e:	4a17      	ldr	r2, [pc, #92]	@ (800329c <MX_DMA_Init+0x88>)
 8003240:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003244:	6313      	str	r3, [r2, #48]	@ 0x30
 8003246:	4b15      	ldr	r3, [pc, #84]	@ (800329c <MX_DMA_Init+0x88>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800324e:	603b      	str	r3, [r7, #0]
 8003250:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003252:	2200      	movs	r2, #0
 8003254:	2100      	movs	r1, #0
 8003256:	200c      	movs	r0, #12
 8003258:	f001 f94d 	bl	80044f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800325c:	200c      	movs	r0, #12
 800325e:	f001 f966 	bl	800452e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003262:	2200      	movs	r2, #0
 8003264:	2100      	movs	r1, #0
 8003266:	200e      	movs	r0, #14
 8003268:	f001 f945 	bl	80044f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800326c:	200e      	movs	r0, #14
 800326e:	f001 f95e 	bl	800452e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003272:	2200      	movs	r2, #0
 8003274:	2100      	movs	r1, #0
 8003276:	2010      	movs	r0, #16
 8003278:	f001 f93d 	bl	80044f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800327c:	2010      	movs	r0, #16
 800327e:	f001 f956 	bl	800452e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8003282:	2200      	movs	r2, #0
 8003284:	2100      	movs	r1, #0
 8003286:	2039      	movs	r0, #57	@ 0x39
 8003288:	f001 f935 	bl	80044f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800328c:	2039      	movs	r0, #57	@ 0x39
 800328e:	f001 f94e 	bl	800452e <HAL_NVIC_EnableIRQ>

}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40023800 	.word	0x40023800

080032a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08e      	sub	sp, #56	@ 0x38
 80032a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	605a      	str	r2, [r3, #4]
 80032b0:	609a      	str	r2, [r3, #8]
 80032b2:	60da      	str	r2, [r3, #12]
 80032b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	623b      	str	r3, [r7, #32]
 80032ba:	4b8e      	ldr	r3, [pc, #568]	@ (80034f4 <MX_GPIO_Init+0x254>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032be:	4a8d      	ldr	r2, [pc, #564]	@ (80034f4 <MX_GPIO_Init+0x254>)
 80032c0:	f043 0304 	orr.w	r3, r3, #4
 80032c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032c6:	4b8b      	ldr	r3, [pc, #556]	@ (80034f4 <MX_GPIO_Init+0x254>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	623b      	str	r3, [r7, #32]
 80032d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
 80032d6:	4b87      	ldr	r3, [pc, #540]	@ (80034f4 <MX_GPIO_Init+0x254>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032da:	4a86      	ldr	r2, [pc, #536]	@ (80034f4 <MX_GPIO_Init+0x254>)
 80032dc:	f043 0320 	orr.w	r3, r3, #32
 80032e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032e2:	4b84      	ldr	r3, [pc, #528]	@ (80034f4 <MX_GPIO_Init+0x254>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e6:	f003 0320 	and.w	r3, r3, #32
 80032ea:	61fb      	str	r3, [r7, #28]
 80032ec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	61bb      	str	r3, [r7, #24]
 80032f2:	4b80      	ldr	r3, [pc, #512]	@ (80034f4 <MX_GPIO_Init+0x254>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f6:	4a7f      	ldr	r2, [pc, #508]	@ (80034f4 <MX_GPIO_Init+0x254>)
 80032f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032fe:	4b7d      	ldr	r3, [pc, #500]	@ (80034f4 <MX_GPIO_Init+0x254>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003306:	61bb      	str	r3, [r7, #24]
 8003308:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	4b79      	ldr	r3, [pc, #484]	@ (80034f4 <MX_GPIO_Init+0x254>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003312:	4a78      	ldr	r2, [pc, #480]	@ (80034f4 <MX_GPIO_Init+0x254>)
 8003314:	f043 0301 	orr.w	r3, r3, #1
 8003318:	6313      	str	r3, [r2, #48]	@ 0x30
 800331a:	4b76      	ldr	r3, [pc, #472]	@ (80034f4 <MX_GPIO_Init+0x254>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	4b72      	ldr	r3, [pc, #456]	@ (80034f4 <MX_GPIO_Init+0x254>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332e:	4a71      	ldr	r2, [pc, #452]	@ (80034f4 <MX_GPIO_Init+0x254>)
 8003330:	f043 0310 	orr.w	r3, r3, #16
 8003334:	6313      	str	r3, [r2, #48]	@ 0x30
 8003336:	4b6f      	ldr	r3, [pc, #444]	@ (80034f4 <MX_GPIO_Init+0x254>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	4b6b      	ldr	r3, [pc, #428]	@ (80034f4 <MX_GPIO_Init+0x254>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	4a6a      	ldr	r2, [pc, #424]	@ (80034f4 <MX_GPIO_Init+0x254>)
 800334c:	f043 0302 	orr.w	r3, r3, #2
 8003350:	6313      	str	r3, [r2, #48]	@ 0x30
 8003352:	4b68      	ldr	r3, [pc, #416]	@ (80034f4 <MX_GPIO_Init+0x254>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	4b64      	ldr	r3, [pc, #400]	@ (80034f4 <MX_GPIO_Init+0x254>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003366:	4a63      	ldr	r2, [pc, #396]	@ (80034f4 <MX_GPIO_Init+0x254>)
 8003368:	f043 0308 	orr.w	r3, r3, #8
 800336c:	6313      	str	r3, [r2, #48]	@ 0x30
 800336e:	4b61      	ldr	r3, [pc, #388]	@ (80034f4 <MX_GPIO_Init+0x254>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	607b      	str	r3, [r7, #4]
 800337e:	4b5d      	ldr	r3, [pc, #372]	@ (80034f4 <MX_GPIO_Init+0x254>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	4a5c      	ldr	r2, [pc, #368]	@ (80034f4 <MX_GPIO_Init+0x254>)
 8003384:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003388:	6313      	str	r3, [r2, #48]	@ 0x30
 800338a:	4b5a      	ldr	r3, [pc, #360]	@ (80034f4 <MX_GPIO_Init+0x254>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003392:	607b      	str	r3, [r7, #4]
 8003394:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8003396:	2200      	movs	r2, #0
 8003398:	2180      	movs	r1, #128	@ 0x80
 800339a:	4857      	ldr	r0, [pc, #348]	@ (80034f8 <MX_GPIO_Init+0x258>)
 800339c:	f001 fe78 	bl	8005090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80033a0:	2200      	movs	r2, #0
 80033a2:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80033a6:	4855      	ldr	r0, [pc, #340]	@ (80034fc <MX_GPIO_Init+0x25c>)
 80033a8:	f001 fe72 	bl	8005090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80033ac:	2200      	movs	r2, #0
 80033ae:	2140      	movs	r1, #64	@ 0x40
 80033b0:	4853      	ldr	r0, [pc, #332]	@ (8003500 <MX_GPIO_Init+0x260>)
 80033b2:	f001 fe6d 	bl	8005090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80033b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80033ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033bc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80033c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80033c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033ca:	4619      	mov	r1, r3
 80033cc:	484d      	ldr	r0, [pc, #308]	@ (8003504 <MX_GPIO_Init+0x264>)
 80033ce:	f001 fccb 	bl	8004d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80033d2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80033d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033d8:	2300      	movs	r3, #0
 80033da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80033e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033e4:	4619      	mov	r1, r3
 80033e6:	4848      	ldr	r0, [pc, #288]	@ (8003508 <MX_GPIO_Init+0x268>)
 80033e8:	f001 fcbe 	bl	8004d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80033ec:	2380      	movs	r3, #128	@ 0x80
 80033ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033f0:	2301      	movs	r3, #1
 80033f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f8:	2300      	movs	r3, #0
 80033fa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003400:	4619      	mov	r1, r3
 8003402:	483d      	ldr	r0, [pc, #244]	@ (80034f8 <MX_GPIO_Init+0x258>)
 8003404:	f001 fcb0 	bl	8004d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8003408:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800340c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800340e:	2301      	movs	r3, #1
 8003410:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003412:	2300      	movs	r3, #0
 8003414:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003416:	2300      	movs	r3, #0
 8003418:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800341a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800341e:	4619      	mov	r1, r3
 8003420:	4836      	ldr	r0, [pc, #216]	@ (80034fc <MX_GPIO_Init+0x25c>)
 8003422:	f001 fca1 	bl	8004d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003426:	230c      	movs	r3, #12
 8003428:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800342a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800342e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003430:	2300      	movs	r3, #0
 8003432:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003434:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003438:	4619      	mov	r1, r3
 800343a:	4831      	ldr	r0, [pc, #196]	@ (8003500 <MX_GPIO_Init+0x260>)
 800343c:	f001 fc94 	bl	8004d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003440:	2340      	movs	r3, #64	@ 0x40
 8003442:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003444:	2301      	movs	r3, #1
 8003446:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003448:	2300      	movs	r3, #0
 800344a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344c:	2300      	movs	r3, #0
 800344e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003450:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003454:	4619      	mov	r1, r3
 8003456:	482a      	ldr	r0, [pc, #168]	@ (8003500 <MX_GPIO_Init+0x260>)
 8003458:	f001 fc86 	bl	8004d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800345c:	2380      	movs	r3, #128	@ 0x80
 800345e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003460:	2300      	movs	r3, #0
 8003462:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003464:	2300      	movs	r3, #0
 8003466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003468:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800346c:	4619      	mov	r1, r3
 800346e:	4824      	ldr	r0, [pc, #144]	@ (8003500 <MX_GPIO_Init+0x260>)
 8003470:	f001 fc7a 	bl	8004d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003474:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003478:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800347a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800347e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003480:	2300      	movs	r3, #0
 8003482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003484:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003488:	4619      	mov	r1, r3
 800348a:	481e      	ldr	r0, [pc, #120]	@ (8003504 <MX_GPIO_Init+0x264>)
 800348c:	f001 fc6c 	bl	8004d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003490:	23c0      	movs	r3, #192	@ 0xc0
 8003492:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003494:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003498:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349a:	2300      	movs	r3, #0
 800349c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800349e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034a2:	4619      	mov	r1, r3
 80034a4:	4819      	ldr	r0, [pc, #100]	@ (800350c <MX_GPIO_Init+0x26c>)
 80034a6:	f001 fc5f 	bl	8004d68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80034aa:	2200      	movs	r2, #0
 80034ac:	2100      	movs	r1, #0
 80034ae:	2008      	movs	r0, #8
 80034b0:	f001 f821 	bl	80044f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80034b4:	2008      	movs	r0, #8
 80034b6:	f001 f83a 	bl	800452e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80034ba:	2200      	movs	r2, #0
 80034bc:	2100      	movs	r1, #0
 80034be:	2009      	movs	r0, #9
 80034c0:	f001 f819 	bl	80044f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80034c4:	2009      	movs	r0, #9
 80034c6:	f001 f832 	bl	800452e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80034ca:	2200      	movs	r2, #0
 80034cc:	2100      	movs	r1, #0
 80034ce:	2017      	movs	r0, #23
 80034d0:	f001 f811 	bl	80044f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80034d4:	2017      	movs	r0, #23
 80034d6:	f001 f82a 	bl	800452e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80034da:	2200      	movs	r2, #0
 80034dc:	2100      	movs	r1, #0
 80034de:	2028      	movs	r0, #40	@ 0x28
 80034e0:	f001 f809 	bl	80044f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80034e4:	2028      	movs	r0, #40	@ 0x28
 80034e6:	f001 f822 	bl	800452e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80034ea:	bf00      	nop
 80034ec:	3738      	adds	r7, #56	@ 0x38
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40023800 	.word	0x40023800
 80034f8:	40021000 	.word	0x40021000
 80034fc:	40020400 	.word	0x40020400
 8003500:	40021800 	.word	0x40021800
 8003504:	40020800 	.word	0x40020800
 8003508:	40021400 	.word	0x40021400
 800350c:	40020c00 	.word	0x40020c00

08003510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003514:	b672      	cpsid	i
}
 8003516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003518:	bf00      	nop
 800351a:	e7fd      	b.n	8003518 <Error_Handler+0x8>

0800351c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	607b      	str	r3, [r7, #4]
 8003526:	4b10      	ldr	r3, [pc, #64]	@ (8003568 <HAL_MspInit+0x4c>)
 8003528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800352a:	4a0f      	ldr	r2, [pc, #60]	@ (8003568 <HAL_MspInit+0x4c>)
 800352c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003530:	6453      	str	r3, [r2, #68]	@ 0x44
 8003532:	4b0d      	ldr	r3, [pc, #52]	@ (8003568 <HAL_MspInit+0x4c>)
 8003534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003536:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800353a:	607b      	str	r3, [r7, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	603b      	str	r3, [r7, #0]
 8003542:	4b09      	ldr	r3, [pc, #36]	@ (8003568 <HAL_MspInit+0x4c>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003546:	4a08      	ldr	r2, [pc, #32]	@ (8003568 <HAL_MspInit+0x4c>)
 8003548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800354c:	6413      	str	r3, [r2, #64]	@ 0x40
 800354e:	4b06      	ldr	r3, [pc, #24]	@ (8003568 <HAL_MspInit+0x4c>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40023800 	.word	0x40023800

0800356c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08a      	sub	sp, #40	@ 0x28
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003574:	f107 0314 	add.w	r3, r7, #20
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	605a      	str	r2, [r3, #4]
 800357e:	609a      	str	r2, [r3, #8]
 8003580:	60da      	str	r2, [r3, #12]
 8003582:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a28      	ldr	r2, [pc, #160]	@ (800362c <HAL_SPI_MspInit+0xc0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d14a      	bne.n	8003624 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	4b27      	ldr	r3, [pc, #156]	@ (8003630 <HAL_SPI_MspInit+0xc4>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003596:	4a26      	ldr	r2, [pc, #152]	@ (8003630 <HAL_SPI_MspInit+0xc4>)
 8003598:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800359c:	6413      	str	r3, [r2, #64]	@ 0x40
 800359e:	4b24      	ldr	r3, [pc, #144]	@ (8003630 <HAL_SPI_MspInit+0xc4>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	4b20      	ldr	r3, [pc, #128]	@ (8003630 <HAL_SPI_MspInit+0xc4>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b2:	4a1f      	ldr	r2, [pc, #124]	@ (8003630 <HAL_SPI_MspInit+0xc4>)
 80035b4:	f043 0304 	orr.w	r3, r3, #4
 80035b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003630 <HAL_SPI_MspInit+0xc4>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	4b19      	ldr	r3, [pc, #100]	@ (8003630 <HAL_SPI_MspInit+0xc4>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ce:	4a18      	ldr	r2, [pc, #96]	@ (8003630 <HAL_SPI_MspInit+0xc4>)
 80035d0:	f043 0302 	orr.w	r3, r3, #2
 80035d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035d6:	4b16      	ldr	r3, [pc, #88]	@ (8003630 <HAL_SPI_MspInit+0xc4>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	60bb      	str	r3, [r7, #8]
 80035e0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80035e2:	2308      	movs	r3, #8
 80035e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e6:	2302      	movs	r3, #2
 80035e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ee:	2303      	movs	r3, #3
 80035f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80035f2:	2305      	movs	r3, #5
 80035f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035f6:	f107 0314 	add.w	r3, r7, #20
 80035fa:	4619      	mov	r1, r3
 80035fc:	480d      	ldr	r0, [pc, #52]	@ (8003634 <HAL_SPI_MspInit+0xc8>)
 80035fe:	f001 fbb3 	bl	8004d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003602:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003608:	2302      	movs	r3, #2
 800360a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360c:	2300      	movs	r3, #0
 800360e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003610:	2303      	movs	r3, #3
 8003612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003614:	2305      	movs	r3, #5
 8003616:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003618:	f107 0314 	add.w	r3, r7, #20
 800361c:	4619      	mov	r1, r3
 800361e:	4806      	ldr	r0, [pc, #24]	@ (8003638 <HAL_SPI_MspInit+0xcc>)
 8003620:	f001 fba2 	bl	8004d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003624:	bf00      	nop
 8003626:	3728      	adds	r7, #40	@ 0x28
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40003800 	.word	0x40003800
 8003630:	40023800 	.word	0x40023800
 8003634:	40020800 	.word	0x40020800
 8003638:	40020400 	.word	0x40020400

0800363c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b090      	sub	sp, #64	@ 0x40
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003644:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	605a      	str	r2, [r3, #4]
 800364e:	609a      	str	r2, [r3, #8]
 8003650:	60da      	str	r2, [r3, #12]
 8003652:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a7b      	ldr	r2, [pc, #492]	@ (8003848 <HAL_TIM_Encoder_MspInit+0x20c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d13d      	bne.n	80036da <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003662:	4b7a      	ldr	r3, [pc, #488]	@ (800384c <HAL_TIM_Encoder_MspInit+0x210>)
 8003664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003666:	4a79      	ldr	r2, [pc, #484]	@ (800384c <HAL_TIM_Encoder_MspInit+0x210>)
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	6453      	str	r3, [r2, #68]	@ 0x44
 800366e:	4b77      	ldr	r3, [pc, #476]	@ (800384c <HAL_TIM_Encoder_MspInit+0x210>)
 8003670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003678:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	627b      	str	r3, [r7, #36]	@ 0x24
 800367e:	4b73      	ldr	r3, [pc, #460]	@ (800384c <HAL_TIM_Encoder_MspInit+0x210>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003682:	4a72      	ldr	r2, [pc, #456]	@ (800384c <HAL_TIM_Encoder_MspInit+0x210>)
 8003684:	f043 0310 	orr.w	r3, r3, #16
 8003688:	6313      	str	r3, [r2, #48]	@ 0x30
 800368a:	4b70      	ldr	r3, [pc, #448]	@ (800384c <HAL_TIM_Encoder_MspInit+0x210>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368e:	f003 0310 	and.w	r3, r3, #16
 8003692:	627b      	str	r3, [r7, #36]	@ 0x24
 8003694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8003696:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800369a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369c:	2302      	movs	r3, #2
 800369e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a4:	2300      	movs	r3, #0
 80036a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036a8:	2301      	movs	r3, #1
 80036aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036b0:	4619      	mov	r1, r3
 80036b2:	4867      	ldr	r0, [pc, #412]	@ (8003850 <HAL_TIM_Encoder_MspInit+0x214>)
 80036b4:	f001 fb58 	bl	8004d68 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80036b8:	2200      	movs	r2, #0
 80036ba:	2100      	movs	r1, #0
 80036bc:	2018      	movs	r0, #24
 80036be:	f000 ff1a 	bl	80044f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80036c2:	2018      	movs	r0, #24
 80036c4:	f000 ff33 	bl	800452e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80036c8:	2200      	movs	r2, #0
 80036ca:	2100      	movs	r1, #0
 80036cc:	2019      	movs	r0, #25
 80036ce:	f000 ff12 	bl	80044f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80036d2:	2019      	movs	r0, #25
 80036d4:	f000 ff2b 	bl	800452e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80036d8:	e0b2      	b.n	8003840 <HAL_TIM_Encoder_MspInit+0x204>
  else if(htim_encoder->Instance==TIM2)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036e2:	d12c      	bne.n	800373e <HAL_TIM_Encoder_MspInit+0x102>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036e4:	2300      	movs	r3, #0
 80036e6:	623b      	str	r3, [r7, #32]
 80036e8:	4b58      	ldr	r3, [pc, #352]	@ (800384c <HAL_TIM_Encoder_MspInit+0x210>)
 80036ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ec:	4a57      	ldr	r2, [pc, #348]	@ (800384c <HAL_TIM_Encoder_MspInit+0x210>)
 80036ee:	f043 0301 	orr.w	r3, r3, #1
 80036f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80036f4:	4b55      	ldr	r3, [pc, #340]	@ (800384c <HAL_TIM_Encoder_MspInit+0x210>)
 80036f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	623b      	str	r3, [r7, #32]
 80036fe:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003700:	2300      	movs	r3, #0
 8003702:	61fb      	str	r3, [r7, #28]
 8003704:	4b51      	ldr	r3, [pc, #324]	@ (800384c <HAL_TIM_Encoder_MspInit+0x210>)
 8003706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003708:	4a50      	ldr	r2, [pc, #320]	@ (800384c <HAL_TIM_Encoder_MspInit+0x210>)
 800370a:	f043 0301 	orr.w	r3, r3, #1
 800370e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003710:	4b4e      	ldr	r3, [pc, #312]	@ (800384c <HAL_TIM_Encoder_MspInit+0x210>)
 8003712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	61fb      	str	r3, [r7, #28]
 800371a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800371c:	2303      	movs	r3, #3
 800371e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003720:	2302      	movs	r3, #2
 8003722:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003724:	2300      	movs	r3, #0
 8003726:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003728:	2300      	movs	r3, #0
 800372a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800372c:	2301      	movs	r3, #1
 800372e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003730:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003734:	4619      	mov	r1, r3
 8003736:	4847      	ldr	r0, [pc, #284]	@ (8003854 <HAL_TIM_Encoder_MspInit+0x218>)
 8003738:	f001 fb16 	bl	8004d68 <HAL_GPIO_Init>
}
 800373c:	e080      	b.n	8003840 <HAL_TIM_Encoder_MspInit+0x204>
  else if(htim_encoder->Instance==TIM3)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a45      	ldr	r2, [pc, #276]	@ (8003858 <HAL_TIM_Encoder_MspInit+0x21c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d14a      	bne.n	80037de <HAL_TIM_Encoder_MspInit+0x1a2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003748:	2300      	movs	r3, #0
 800374a:	61bb      	str	r3, [r7, #24]
 800374c:	4b3f      	ldr	r3, [pc, #252]	@ (800384c <HAL_TIM_Encoder_MspInit+0x210>)
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	4a3e      	ldr	r2, [pc, #248]	@ (800384c <HAL_TIM_Encoder_MspInit+0x210>)
 8003752:	f043 0302 	orr.w	r3, r3, #2
 8003756:	6413      	str	r3, [r2, #64]	@ 0x40
 8003758:	4b3c      	ldr	r3, [pc, #240]	@ (800384c <HAL_TIM_Encoder_MspInit+0x210>)
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	61bb      	str	r3, [r7, #24]
 8003762:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	4b38      	ldr	r3, [pc, #224]	@ (800384c <HAL_TIM_Encoder_MspInit+0x210>)
 800376a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376c:	4a37      	ldr	r2, [pc, #220]	@ (800384c <HAL_TIM_Encoder_MspInit+0x210>)
 800376e:	f043 0301 	orr.w	r3, r3, #1
 8003772:	6313      	str	r3, [r2, #48]	@ 0x30
 8003774:	4b35      	ldr	r3, [pc, #212]	@ (800384c <HAL_TIM_Encoder_MspInit+0x210>)
 8003776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003780:	2300      	movs	r3, #0
 8003782:	613b      	str	r3, [r7, #16]
 8003784:	4b31      	ldr	r3, [pc, #196]	@ (800384c <HAL_TIM_Encoder_MspInit+0x210>)
 8003786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003788:	4a30      	ldr	r2, [pc, #192]	@ (800384c <HAL_TIM_Encoder_MspInit+0x210>)
 800378a:	f043 0302 	orr.w	r3, r3, #2
 800378e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003790:	4b2e      	ldr	r3, [pc, #184]	@ (800384c <HAL_TIM_Encoder_MspInit+0x210>)
 8003792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	613b      	str	r3, [r7, #16]
 800379a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800379c:	2340      	movs	r3, #64	@ 0x40
 800379e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a0:	2302      	movs	r3, #2
 80037a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a8:	2300      	movs	r3, #0
 80037aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037ac:	2302      	movs	r3, #2
 80037ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037b4:	4619      	mov	r1, r3
 80037b6:	4827      	ldr	r0, [pc, #156]	@ (8003854 <HAL_TIM_Encoder_MspInit+0x218>)
 80037b8:	f001 fad6 	bl	8004d68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80037bc:	2320      	movs	r3, #32
 80037be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c0:	2302      	movs	r3, #2
 80037c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c8:	2300      	movs	r3, #0
 80037ca:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037cc:	2302      	movs	r3, #2
 80037ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037d4:	4619      	mov	r1, r3
 80037d6:	4821      	ldr	r0, [pc, #132]	@ (800385c <HAL_TIM_Encoder_MspInit+0x220>)
 80037d8:	f001 fac6 	bl	8004d68 <HAL_GPIO_Init>
}
 80037dc:	e030      	b.n	8003840 <HAL_TIM_Encoder_MspInit+0x204>
  else if(htim_encoder->Instance==TIM5)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003860 <HAL_TIM_Encoder_MspInit+0x224>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d12b      	bne.n	8003840 <HAL_TIM_Encoder_MspInit+0x204>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80037e8:	2300      	movs	r3, #0
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	4b17      	ldr	r3, [pc, #92]	@ (800384c <HAL_TIM_Encoder_MspInit+0x210>)
 80037ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f0:	4a16      	ldr	r2, [pc, #88]	@ (800384c <HAL_TIM_Encoder_MspInit+0x210>)
 80037f2:	f043 0308 	orr.w	r3, r3, #8
 80037f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80037f8:	4b14      	ldr	r3, [pc, #80]	@ (800384c <HAL_TIM_Encoder_MspInit+0x210>)
 80037fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003804:	2300      	movs	r3, #0
 8003806:	60bb      	str	r3, [r7, #8]
 8003808:	4b10      	ldr	r3, [pc, #64]	@ (800384c <HAL_TIM_Encoder_MspInit+0x210>)
 800380a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380c:	4a0f      	ldr	r2, [pc, #60]	@ (800384c <HAL_TIM_Encoder_MspInit+0x210>)
 800380e:	f043 0320 	orr.w	r3, r3, #32
 8003812:	6313      	str	r3, [r2, #48]	@ 0x30
 8003814:	4b0d      	ldr	r3, [pc, #52]	@ (800384c <HAL_TIM_Encoder_MspInit+0x210>)
 8003816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003818:	f003 0320 	and.w	r3, r3, #32
 800381c:	60bb      	str	r3, [r7, #8]
 800381e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003820:	2318      	movs	r3, #24
 8003822:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003824:	2302      	movs	r3, #2
 8003826:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003828:	2300      	movs	r3, #0
 800382a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800382c:	2300      	movs	r3, #0
 800382e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003830:	2302      	movs	r3, #2
 8003832:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003834:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003838:	4619      	mov	r1, r3
 800383a:	480a      	ldr	r0, [pc, #40]	@ (8003864 <HAL_TIM_Encoder_MspInit+0x228>)
 800383c:	f001 fa94 	bl	8004d68 <HAL_GPIO_Init>
}
 8003840:	bf00      	nop
 8003842:	3740      	adds	r7, #64	@ 0x40
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40010000 	.word	0x40010000
 800384c:	40023800 	.word	0x40023800
 8003850:	40021000 	.word	0x40021000
 8003854:	40020000 	.word	0x40020000
 8003858:	40000400 	.word	0x40000400
 800385c:	40020400 	.word	0x40020400
 8003860:	40000c00 	.word	0x40000c00
 8003864:	40021400 	.word	0x40021400

08003868 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a34      	ldr	r2, [pc, #208]	@ (8003948 <HAL_TIM_Base_MspInit+0xe0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d10e      	bne.n	8003898 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	4b33      	ldr	r3, [pc, #204]	@ (800394c <HAL_TIM_Base_MspInit+0xe4>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003882:	4a32      	ldr	r2, [pc, #200]	@ (800394c <HAL_TIM_Base_MspInit+0xe4>)
 8003884:	f043 0304 	orr.w	r3, r3, #4
 8003888:	6413      	str	r3, [r2, #64]	@ 0x40
 800388a:	4b30      	ldr	r3, [pc, #192]	@ (800394c <HAL_TIM_Base_MspInit+0xe4>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003896:	e052      	b.n	800393e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM9)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a2c      	ldr	r2, [pc, #176]	@ (8003950 <HAL_TIM_Base_MspInit+0xe8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d116      	bne.n	80038d0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	4b29      	ldr	r3, [pc, #164]	@ (800394c <HAL_TIM_Base_MspInit+0xe4>)
 80038a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038aa:	4a28      	ldr	r2, [pc, #160]	@ (800394c <HAL_TIM_Base_MspInit+0xe4>)
 80038ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80038b2:	4b26      	ldr	r3, [pc, #152]	@ (800394c <HAL_TIM_Base_MspInit+0xe4>)
 80038b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80038be:	2200      	movs	r2, #0
 80038c0:	2100      	movs	r1, #0
 80038c2:	2018      	movs	r0, #24
 80038c4:	f000 fe17 	bl	80044f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80038c8:	2018      	movs	r0, #24
 80038ca:	f000 fe30 	bl	800452e <HAL_NVIC_EnableIRQ>
}
 80038ce:	e036      	b.n	800393e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM10)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003954 <HAL_TIM_Base_MspInit+0xec>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d116      	bne.n	8003908 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	4b1b      	ldr	r3, [pc, #108]	@ (800394c <HAL_TIM_Base_MspInit+0xe4>)
 80038e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e2:	4a1a      	ldr	r2, [pc, #104]	@ (800394c <HAL_TIM_Base_MspInit+0xe4>)
 80038e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80038ea:	4b18      	ldr	r3, [pc, #96]	@ (800394c <HAL_TIM_Base_MspInit+0xe4>)
 80038ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80038f6:	2200      	movs	r2, #0
 80038f8:	2100      	movs	r1, #0
 80038fa:	2019      	movs	r0, #25
 80038fc:	f000 fdfb 	bl	80044f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003900:	2019      	movs	r0, #25
 8003902:	f000 fe14 	bl	800452e <HAL_NVIC_EnableIRQ>
}
 8003906:	e01a      	b.n	800393e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM12)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a12      	ldr	r2, [pc, #72]	@ (8003958 <HAL_TIM_Base_MspInit+0xf0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d115      	bne.n	800393e <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003912:	2300      	movs	r3, #0
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	4b0d      	ldr	r3, [pc, #52]	@ (800394c <HAL_TIM_Base_MspInit+0xe4>)
 8003918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391a:	4a0c      	ldr	r2, [pc, #48]	@ (800394c <HAL_TIM_Base_MspInit+0xe4>)
 800391c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003920:	6413      	str	r3, [r2, #64]	@ 0x40
 8003922:	4b0a      	ldr	r3, [pc, #40]	@ (800394c <HAL_TIM_Base_MspInit+0xe4>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800392a:	60bb      	str	r3, [r7, #8]
 800392c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800392e:	2200      	movs	r2, #0
 8003930:	2100      	movs	r1, #0
 8003932:	202b      	movs	r0, #43	@ 0x2b
 8003934:	f000 fddf 	bl	80044f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003938:	202b      	movs	r0, #43	@ 0x2b
 800393a:	f000 fdf8 	bl	800452e <HAL_NVIC_EnableIRQ>
}
 800393e:	bf00      	nop
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40000800 	.word	0x40000800
 800394c:	40023800 	.word	0x40023800
 8003950:	40014000 	.word	0x40014000
 8003954:	40014400 	.word	0x40014400
 8003958:	40001800 	.word	0x40001800

0800395c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a0e      	ldr	r2, [pc, #56]	@ (80039a4 <HAL_TIM_PWM_MspInit+0x48>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d115      	bne.n	800399a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	4b0d      	ldr	r3, [pc, #52]	@ (80039a8 <HAL_TIM_PWM_MspInit+0x4c>)
 8003974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003976:	4a0c      	ldr	r2, [pc, #48]	@ (80039a8 <HAL_TIM_PWM_MspInit+0x4c>)
 8003978:	f043 0302 	orr.w	r3, r3, #2
 800397c:	6453      	str	r3, [r2, #68]	@ 0x44
 800397e:	4b0a      	ldr	r3, [pc, #40]	@ (80039a8 <HAL_TIM_PWM_MspInit+0x4c>)
 8003980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800398a:	2200      	movs	r2, #0
 800398c:	2100      	movs	r1, #0
 800398e:	202b      	movs	r0, #43	@ 0x2b
 8003990:	f000 fdb1 	bl	80044f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003994:	202b      	movs	r0, #43	@ 0x2b
 8003996:	f000 fdca 	bl	800452e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800399a:	bf00      	nop
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40010400 	.word	0x40010400
 80039a8:	40023800 	.word	0x40023800

080039ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08a      	sub	sp, #40	@ 0x28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b4:	f107 0314 	add.w	r3, r7, #20
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	605a      	str	r2, [r3, #4]
 80039be:	609a      	str	r2, [r3, #8]
 80039c0:	60da      	str	r2, [r3, #12]
 80039c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a25      	ldr	r2, [pc, #148]	@ (8003a60 <HAL_TIM_MspPostInit+0xb4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d11f      	bne.n	8003a0e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039ce:	2300      	movs	r3, #0
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	4b24      	ldr	r3, [pc, #144]	@ (8003a64 <HAL_TIM_MspPostInit+0xb8>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d6:	4a23      	ldr	r2, [pc, #140]	@ (8003a64 <HAL_TIM_MspPostInit+0xb8>)
 80039d8:	f043 0308 	orr.w	r3, r3, #8
 80039dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80039de:	4b21      	ldr	r3, [pc, #132]	@ (8003a64 <HAL_TIM_MspPostInit+0xb8>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	613b      	str	r3, [r7, #16]
 80039e8:	693b      	ldr	r3, [r7, #16]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80039ea:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80039ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f0:	2302      	movs	r3, #2
 80039f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f4:	2300      	movs	r3, #0
 80039f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f8:	2300      	movs	r3, #0
 80039fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80039fc:	2302      	movs	r3, #2
 80039fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a00:	f107 0314 	add.w	r3, r7, #20
 8003a04:	4619      	mov	r1, r3
 8003a06:	4818      	ldr	r0, [pc, #96]	@ (8003a68 <HAL_TIM_MspPostInit+0xbc>)
 8003a08:	f001 f9ae 	bl	8004d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003a0c:	e023      	b.n	8003a56 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a16      	ldr	r2, [pc, #88]	@ (8003a6c <HAL_TIM_MspPostInit+0xc0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d11e      	bne.n	8003a56 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	4b11      	ldr	r3, [pc, #68]	@ (8003a64 <HAL_TIM_MspPostInit+0xb8>)
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a20:	4a10      	ldr	r2, [pc, #64]	@ (8003a64 <HAL_TIM_MspPostInit+0xb8>)
 8003a22:	f043 0304 	orr.w	r3, r3, #4
 8003a26:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a28:	4b0e      	ldr	r3, [pc, #56]	@ (8003a64 <HAL_TIM_MspPostInit+0xb8>)
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003a34:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a42:	2300      	movs	r3, #0
 8003a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003a46:	2303      	movs	r3, #3
 8003a48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a4a:	f107 0314 	add.w	r3, r7, #20
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4807      	ldr	r0, [pc, #28]	@ (8003a70 <HAL_TIM_MspPostInit+0xc4>)
 8003a52:	f001 f989 	bl	8004d68 <HAL_GPIO_Init>
}
 8003a56:	bf00      	nop
 8003a58:	3728      	adds	r7, #40	@ 0x28
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40000800 	.word	0x40000800
 8003a64:	40023800 	.word	0x40023800
 8003a68:	40020c00 	.word	0x40020c00
 8003a6c:	40010400 	.word	0x40010400
 8003a70:	40020800 	.word	0x40020800

08003a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08e      	sub	sp, #56	@ 0x38
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	605a      	str	r2, [r3, #4]
 8003a86:	609a      	str	r2, [r3, #8]
 8003a88:	60da      	str	r2, [r3, #12]
 8003a8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a7e      	ldr	r2, [pc, #504]	@ (8003c8c <HAL_UART_MspInit+0x218>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d162      	bne.n	8003b5c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a96:	2300      	movs	r3, #0
 8003a98:	623b      	str	r3, [r7, #32]
 8003a9a:	4b7d      	ldr	r3, [pc, #500]	@ (8003c90 <HAL_UART_MspInit+0x21c>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	4a7c      	ldr	r2, [pc, #496]	@ (8003c90 <HAL_UART_MspInit+0x21c>)
 8003aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aa6:	4b7a      	ldr	r3, [pc, #488]	@ (8003c90 <HAL_UART_MspInit+0x21c>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aae:	623b      	str	r3, [r7, #32]
 8003ab0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61fb      	str	r3, [r7, #28]
 8003ab6:	4b76      	ldr	r3, [pc, #472]	@ (8003c90 <HAL_UART_MspInit+0x21c>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aba:	4a75      	ldr	r2, [pc, #468]	@ (8003c90 <HAL_UART_MspInit+0x21c>)
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ac2:	4b73      	ldr	r3, [pc, #460]	@ (8003c90 <HAL_UART_MspInit+0x21c>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	61fb      	str	r3, [r7, #28]
 8003acc:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003ace:	230c      	movs	r3, #12
 8003ad0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ada:	2303      	movs	r3, #3
 8003adc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ade:	2307      	movs	r3, #7
 8003ae0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	486a      	ldr	r0, [pc, #424]	@ (8003c94 <HAL_UART_MspInit+0x220>)
 8003aea:	f001 f93d 	bl	8004d68 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003aee:	4b6a      	ldr	r3, [pc, #424]	@ (8003c98 <HAL_UART_MspInit+0x224>)
 8003af0:	4a6a      	ldr	r2, [pc, #424]	@ (8003c9c <HAL_UART_MspInit+0x228>)
 8003af2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003af4:	4b68      	ldr	r3, [pc, #416]	@ (8003c98 <HAL_UART_MspInit+0x224>)
 8003af6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003afa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003afc:	4b66      	ldr	r3, [pc, #408]	@ (8003c98 <HAL_UART_MspInit+0x224>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b02:	4b65      	ldr	r3, [pc, #404]	@ (8003c98 <HAL_UART_MspInit+0x224>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b08:	4b63      	ldr	r3, [pc, #396]	@ (8003c98 <HAL_UART_MspInit+0x224>)
 8003b0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b0e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b10:	4b61      	ldr	r3, [pc, #388]	@ (8003c98 <HAL_UART_MspInit+0x224>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b16:	4b60      	ldr	r3, [pc, #384]	@ (8003c98 <HAL_UART_MspInit+0x224>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003b1c:	4b5e      	ldr	r3, [pc, #376]	@ (8003c98 <HAL_UART_MspInit+0x224>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b22:	4b5d      	ldr	r3, [pc, #372]	@ (8003c98 <HAL_UART_MspInit+0x224>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b28:	4b5b      	ldr	r3, [pc, #364]	@ (8003c98 <HAL_UART_MspInit+0x224>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003b2e:	485a      	ldr	r0, [pc, #360]	@ (8003c98 <HAL_UART_MspInit+0x224>)
 8003b30:	f000 fd18 	bl	8004564 <HAL_DMA_Init>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8003b3a:	f7ff fce9 	bl	8003510 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a55      	ldr	r2, [pc, #340]	@ (8003c98 <HAL_UART_MspInit+0x224>)
 8003b42:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003b44:	4a54      	ldr	r2, [pc, #336]	@ (8003c98 <HAL_UART_MspInit+0x224>)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	2026      	movs	r0, #38	@ 0x26
 8003b50:	f000 fcd1 	bl	80044f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b54:	2026      	movs	r0, #38	@ 0x26
 8003b56:	f000 fcea 	bl	800452e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003b5a:	e115      	b.n	8003d88 <HAL_UART_MspInit+0x314>
  else if(huart->Instance==USART3)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a4f      	ldr	r2, [pc, #316]	@ (8003ca0 <HAL_UART_MspInit+0x22c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	f040 80a8 	bne.w	8003cb8 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b68:	2300      	movs	r3, #0
 8003b6a:	61bb      	str	r3, [r7, #24]
 8003b6c:	4b48      	ldr	r3, [pc, #288]	@ (8003c90 <HAL_UART_MspInit+0x21c>)
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b70:	4a47      	ldr	r2, [pc, #284]	@ (8003c90 <HAL_UART_MspInit+0x21c>)
 8003b72:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b76:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b78:	4b45      	ldr	r3, [pc, #276]	@ (8003c90 <HAL_UART_MspInit+0x21c>)
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b80:	61bb      	str	r3, [r7, #24]
 8003b82:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b84:	2300      	movs	r3, #0
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	4b41      	ldr	r3, [pc, #260]	@ (8003c90 <HAL_UART_MspInit+0x21c>)
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8c:	4a40      	ldr	r2, [pc, #256]	@ (8003c90 <HAL_UART_MspInit+0x21c>)
 8003b8e:	f043 0308 	orr.w	r3, r3, #8
 8003b92:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b94:	4b3e      	ldr	r3, [pc, #248]	@ (8003c90 <HAL_UART_MspInit+0x21c>)
 8003b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003ba0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003ba4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003baa:	2300      	movs	r3, #0
 8003bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003bb2:	2307      	movs	r3, #7
 8003bb4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4839      	ldr	r0, [pc, #228]	@ (8003ca4 <HAL_UART_MspInit+0x230>)
 8003bbe:	f001 f8d3 	bl	8004d68 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003bc2:	4b39      	ldr	r3, [pc, #228]	@ (8003ca8 <HAL_UART_MspInit+0x234>)
 8003bc4:	4a39      	ldr	r2, [pc, #228]	@ (8003cac <HAL_UART_MspInit+0x238>)
 8003bc6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003bc8:	4b37      	ldr	r3, [pc, #220]	@ (8003ca8 <HAL_UART_MspInit+0x234>)
 8003bca:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003bce:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bd0:	4b35      	ldr	r3, [pc, #212]	@ (8003ca8 <HAL_UART_MspInit+0x234>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bd6:	4b34      	ldr	r3, [pc, #208]	@ (8003ca8 <HAL_UART_MspInit+0x234>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003bdc:	4b32      	ldr	r3, [pc, #200]	@ (8003ca8 <HAL_UART_MspInit+0x234>)
 8003bde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003be2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003be4:	4b30      	ldr	r3, [pc, #192]	@ (8003ca8 <HAL_UART_MspInit+0x234>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bea:	4b2f      	ldr	r3, [pc, #188]	@ (8003ca8 <HAL_UART_MspInit+0x234>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003bf0:	4b2d      	ldr	r3, [pc, #180]	@ (8003ca8 <HAL_UART_MspInit+0x234>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8003ca8 <HAL_UART_MspInit+0x234>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8003ca8 <HAL_UART_MspInit+0x234>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003c02:	4829      	ldr	r0, [pc, #164]	@ (8003ca8 <HAL_UART_MspInit+0x234>)
 8003c04:	f000 fcae 	bl	8004564 <HAL_DMA_Init>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8003c0e:	f7ff fc7f 	bl	8003510 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a24      	ldr	r2, [pc, #144]	@ (8003ca8 <HAL_UART_MspInit+0x234>)
 8003c16:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003c18:	4a23      	ldr	r2, [pc, #140]	@ (8003ca8 <HAL_UART_MspInit+0x234>)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003c1e:	4b24      	ldr	r3, [pc, #144]	@ (8003cb0 <HAL_UART_MspInit+0x23c>)
 8003c20:	4a24      	ldr	r2, [pc, #144]	@ (8003cb4 <HAL_UART_MspInit+0x240>)
 8003c22:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003c24:	4b22      	ldr	r3, [pc, #136]	@ (8003cb0 <HAL_UART_MspInit+0x23c>)
 8003c26:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003c2a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c2c:	4b20      	ldr	r3, [pc, #128]	@ (8003cb0 <HAL_UART_MspInit+0x23c>)
 8003c2e:	2240      	movs	r2, #64	@ 0x40
 8003c30:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c32:	4b1f      	ldr	r3, [pc, #124]	@ (8003cb0 <HAL_UART_MspInit+0x23c>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c38:	4b1d      	ldr	r3, [pc, #116]	@ (8003cb0 <HAL_UART_MspInit+0x23c>)
 8003c3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c3e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c40:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb0 <HAL_UART_MspInit+0x23c>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c46:	4b1a      	ldr	r3, [pc, #104]	@ (8003cb0 <HAL_UART_MspInit+0x23c>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003c4c:	4b18      	ldr	r3, [pc, #96]	@ (8003cb0 <HAL_UART_MspInit+0x23c>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c52:	4b17      	ldr	r3, [pc, #92]	@ (8003cb0 <HAL_UART_MspInit+0x23c>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c58:	4b15      	ldr	r3, [pc, #84]	@ (8003cb0 <HAL_UART_MspInit+0x23c>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003c5e:	4814      	ldr	r0, [pc, #80]	@ (8003cb0 <HAL_UART_MspInit+0x23c>)
 8003c60:	f000 fc80 	bl	8004564 <HAL_DMA_Init>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 8003c6a:	f7ff fc51 	bl	8003510 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a0f      	ldr	r2, [pc, #60]	@ (8003cb0 <HAL_UART_MspInit+0x23c>)
 8003c72:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c74:	4a0e      	ldr	r2, [pc, #56]	@ (8003cb0 <HAL_UART_MspInit+0x23c>)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	2027      	movs	r0, #39	@ 0x27
 8003c80:	f000 fc39 	bl	80044f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003c84:	2027      	movs	r0, #39	@ 0x27
 8003c86:	f000 fc52 	bl	800452e <HAL_NVIC_EnableIRQ>
}
 8003c8a:	e07d      	b.n	8003d88 <HAL_UART_MspInit+0x314>
 8003c8c:	40004400 	.word	0x40004400
 8003c90:	40023800 	.word	0x40023800
 8003c94:	40020000 	.word	0x40020000
 8003c98:	200005bc 	.word	0x200005bc
 8003c9c:	40026088 	.word	0x40026088
 8003ca0:	40004800 	.word	0x40004800
 8003ca4:	40020c00 	.word	0x40020c00
 8003ca8:	2000061c 	.word	0x2000061c
 8003cac:	40026028 	.word	0x40026028
 8003cb0:	2000067c 	.word	0x2000067c
 8003cb4:	40026058 	.word	0x40026058
  else if(huart->Instance==USART6)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a34      	ldr	r2, [pc, #208]	@ (8003d90 <HAL_UART_MspInit+0x31c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d162      	bne.n	8003d88 <HAL_UART_MspInit+0x314>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	613b      	str	r3, [r7, #16]
 8003cc6:	4b33      	ldr	r3, [pc, #204]	@ (8003d94 <HAL_UART_MspInit+0x320>)
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cca:	4a32      	ldr	r2, [pc, #200]	@ (8003d94 <HAL_UART_MspInit+0x320>)
 8003ccc:	f043 0320 	orr.w	r3, r3, #32
 8003cd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cd2:	4b30      	ldr	r3, [pc, #192]	@ (8003d94 <HAL_UART_MspInit+0x320>)
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	613b      	str	r3, [r7, #16]
 8003cdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	4b2c      	ldr	r3, [pc, #176]	@ (8003d94 <HAL_UART_MspInit+0x320>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	4a2b      	ldr	r2, [pc, #172]	@ (8003d94 <HAL_UART_MspInit+0x320>)
 8003ce8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cee:	4b29      	ldr	r3, [pc, #164]	@ (8003d94 <HAL_UART_MspInit+0x320>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8003cfa:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8003cfe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d00:	2302      	movs	r3, #2
 8003d02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d04:	2300      	movs	r3, #0
 8003d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003d0c:	2308      	movs	r3, #8
 8003d0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003d10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d14:	4619      	mov	r1, r3
 8003d16:	4820      	ldr	r0, [pc, #128]	@ (8003d98 <HAL_UART_MspInit+0x324>)
 8003d18:	f001 f826 	bl	8004d68 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003d1c:	4b1f      	ldr	r3, [pc, #124]	@ (8003d9c <HAL_UART_MspInit+0x328>)
 8003d1e:	4a20      	ldr	r2, [pc, #128]	@ (8003da0 <HAL_UART_MspInit+0x32c>)
 8003d20:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003d22:	4b1e      	ldr	r3, [pc, #120]	@ (8003d9c <HAL_UART_MspInit+0x328>)
 8003d24:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003d28:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8003d9c <HAL_UART_MspInit+0x328>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d30:	4b1a      	ldr	r3, [pc, #104]	@ (8003d9c <HAL_UART_MspInit+0x328>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d36:	4b19      	ldr	r3, [pc, #100]	@ (8003d9c <HAL_UART_MspInit+0x328>)
 8003d38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d3c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d3e:	4b17      	ldr	r3, [pc, #92]	@ (8003d9c <HAL_UART_MspInit+0x328>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d44:	4b15      	ldr	r3, [pc, #84]	@ (8003d9c <HAL_UART_MspInit+0x328>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003d4a:	4b14      	ldr	r3, [pc, #80]	@ (8003d9c <HAL_UART_MspInit+0x328>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d50:	4b12      	ldr	r3, [pc, #72]	@ (8003d9c <HAL_UART_MspInit+0x328>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d56:	4b11      	ldr	r3, [pc, #68]	@ (8003d9c <HAL_UART_MspInit+0x328>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003d5c:	480f      	ldr	r0, [pc, #60]	@ (8003d9c <HAL_UART_MspInit+0x328>)
 8003d5e:	f000 fc01 	bl	8004564 <HAL_DMA_Init>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_UART_MspInit+0x2f8>
      Error_Handler();
 8003d68:	f7ff fbd2 	bl	8003510 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a0b      	ldr	r2, [pc, #44]	@ (8003d9c <HAL_UART_MspInit+0x328>)
 8003d70:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003d72:	4a0a      	ldr	r2, [pc, #40]	@ (8003d9c <HAL_UART_MspInit+0x328>)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	2047      	movs	r0, #71	@ 0x47
 8003d7e:	f000 fbba 	bl	80044f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003d82:	2047      	movs	r0, #71	@ 0x47
 8003d84:	f000 fbd3 	bl	800452e <HAL_NVIC_EnableIRQ>
}
 8003d88:	bf00      	nop
 8003d8a:	3738      	adds	r7, #56	@ 0x38
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40011400 	.word	0x40011400
 8003d94:	40023800 	.word	0x40023800
 8003d98:	40021800 	.word	0x40021800
 8003d9c:	200006dc 	.word	0x200006dc
 8003da0:	40026428 	.word	0x40026428

08003da4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b098      	sub	sp, #96	@ 0x60
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dac:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	609a      	str	r2, [r3, #8]
 8003db8:	60da      	str	r2, [r3, #12]
 8003dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003dbc:	f107 0310 	add.w	r3, r7, #16
 8003dc0:	223c      	movs	r2, #60	@ 0x3c
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f006 fc74 	bl	800a6b2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dd2:	d14d      	bne.n	8003e70 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003dd4:	2320      	movs	r3, #32
 8003dd6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ddc:	f107 0310 	add.w	r3, r7, #16
 8003de0:	4618      	mov	r0, r3
 8003de2:	f001 fced 	bl	80057c0 <HAL_RCCEx_PeriphCLKConfig>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8003dec:	f7ff fb90 	bl	8003510 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003df0:	2300      	movs	r3, #0
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	4b20      	ldr	r3, [pc, #128]	@ (8003e78 <HAL_PCD_MspInit+0xd4>)
 8003df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df8:	4a1f      	ldr	r2, [pc, #124]	@ (8003e78 <HAL_PCD_MspInit+0xd4>)
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e00:	4b1d      	ldr	r3, [pc, #116]	@ (8003e78 <HAL_PCD_MspInit+0xd4>)
 8003e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003e0c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8003e10:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e12:	2302      	movs	r3, #2
 8003e14:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003e1e:	230a      	movs	r3, #10
 8003e20:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e22:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003e26:	4619      	mov	r1, r3
 8003e28:	4814      	ldr	r0, [pc, #80]	@ (8003e7c <HAL_PCD_MspInit+0xd8>)
 8003e2a:	f000 ff9d 	bl	8004d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003e2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e34:	2300      	movs	r3, #0
 8003e36:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003e3c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003e40:	4619      	mov	r1, r3
 8003e42:	480e      	ldr	r0, [pc, #56]	@ (8003e7c <HAL_PCD_MspInit+0xd8>)
 8003e44:	f000 ff90 	bl	8004d68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003e48:	4b0b      	ldr	r3, [pc, #44]	@ (8003e78 <HAL_PCD_MspInit+0xd4>)
 8003e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8003e78 <HAL_PCD_MspInit+0xd4>)
 8003e4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e52:	6353      	str	r3, [r2, #52]	@ 0x34
 8003e54:	2300      	movs	r3, #0
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	4b07      	ldr	r3, [pc, #28]	@ (8003e78 <HAL_PCD_MspInit+0xd4>)
 8003e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5c:	4a06      	ldr	r2, [pc, #24]	@ (8003e78 <HAL_PCD_MspInit+0xd4>)
 8003e5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e62:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e64:	4b04      	ldr	r3, [pc, #16]	@ (8003e78 <HAL_PCD_MspInit+0xd4>)
 8003e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003e70:	bf00      	nop
 8003e72:	3760      	adds	r7, #96	@ 0x60
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	40020000 	.word	0x40020000

08003e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e84:	bf00      	nop
 8003e86:	e7fd      	b.n	8003e84 <NMI_Handler+0x4>

08003e88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e8c:	bf00      	nop
 8003e8e:	e7fd      	b.n	8003e8c <HardFault_Handler+0x4>

08003e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e94:	bf00      	nop
 8003e96:	e7fd      	b.n	8003e94 <MemManage_Handler+0x4>

08003e98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e9c:	bf00      	nop
 8003e9e:	e7fd      	b.n	8003e9c <BusFault_Handler+0x4>

08003ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ea4:	bf00      	nop
 8003ea6:	e7fd      	b.n	8003ea4 <UsageFault_Handler+0x4>

08003ea8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003eac:	bf00      	nop
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003eba:	bf00      	nop
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ec8:	bf00      	nop
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ed6:	f000 f9ef 	bl	80042b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003eda:	bf00      	nop
 8003edc:	bd80      	pop	{r7, pc}

08003ede <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003ee2:	2004      	movs	r0, #4
 8003ee4:	f001 f8ee 	bl	80050c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003ee8:	bf00      	nop
 8003eea:	bd80      	pop	{r7, pc}

08003eec <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003ef0:	2008      	movs	r0, #8
 8003ef2:	f001 f8e7 	bl	80050c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003ef6:	bf00      	nop
 8003ef8:	bd80      	pop	{r7, pc}
	...

08003efc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003f00:	4802      	ldr	r0, [pc, #8]	@ (8003f0c <DMA1_Stream1_IRQHandler+0x10>)
 8003f02:	f000 fcc7 	bl	8004894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003f06:	bf00      	nop
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	2000061c 	.word	0x2000061c

08003f10 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003f14:	4802      	ldr	r0, [pc, #8]	@ (8003f20 <DMA1_Stream3_IRQHandler+0x10>)
 8003f16:	f000 fcbd 	bl	8004894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003f1a:	bf00      	nop
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	2000067c 	.word	0x2000067c

08003f24 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003f28:	4802      	ldr	r0, [pc, #8]	@ (8003f34 <DMA1_Stream5_IRQHandler+0x10>)
 8003f2a:	f000 fcb3 	bl	8004894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003f2e:	bf00      	nop
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	200005bc 	.word	0x200005bc

08003f38 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003f3c:	2040      	movs	r0, #64	@ 0x40
 8003f3e:	f001 f8c1 	bl	80050c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003f42:	2080      	movs	r0, #128	@ 0x80
 8003f44:	f001 f8be 	bl	80050c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003f48:	bf00      	nop
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f50:	4803      	ldr	r0, [pc, #12]	@ (8003f60 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8003f52:	f002 fc1b 	bl	800678c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8003f56:	4803      	ldr	r0, [pc, #12]	@ (8003f64 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8003f58:	f002 fc18 	bl	800678c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003f5c:	bf00      	nop
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	2000025c 	.word	0x2000025c
 8003f64:	2000040c 	.word	0x2000040c

08003f68 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f6c:	4803      	ldr	r0, [pc, #12]	@ (8003f7c <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003f6e:	f002 fc0d 	bl	800678c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003f72:	4803      	ldr	r0, [pc, #12]	@ (8003f80 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003f74:	f002 fc0a 	bl	800678c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003f78:	bf00      	nop
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	2000025c 	.word	0x2000025c
 8003f80:	20000454 	.word	0x20000454

08003f84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003f88:	4802      	ldr	r0, [pc, #8]	@ (8003f94 <USART2_IRQHandler+0x10>)
 8003f8a:	f003 fb85 	bl	8007698 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003f8e:	bf00      	nop
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	200004e4 	.word	0x200004e4

08003f98 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003f9c:	4802      	ldr	r0, [pc, #8]	@ (8003fa8 <USART3_IRQHandler+0x10>)
 8003f9e:	f003 fb7b 	bl	8007698 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003fa2:	bf00      	nop
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	2000052c 	.word	0x2000052c

08003fac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003fb0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003fb4:	f001 f886 	bl	80050c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003fb8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003fbc:	f001 f882 	bl	80050c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8003fc0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003fc4:	f001 f87e 	bl	80050c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003fc8:	bf00      	nop
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003fd0:	4803      	ldr	r0, [pc, #12]	@ (8003fe0 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8003fd2:	f002 fbdb 	bl	800678c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8003fd6:	4803      	ldr	r0, [pc, #12]	@ (8003fe4 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8003fd8:	f002 fbd8 	bl	800678c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003fdc:	bf00      	nop
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	200003c4 	.word	0x200003c4
 8003fe4:	2000049c 	.word	0x2000049c

08003fe8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003fec:	4802      	ldr	r0, [pc, #8]	@ (8003ff8 <DMA2_Stream1_IRQHandler+0x10>)
 8003fee:	f000 fc51 	bl	8004894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003ff2:	bf00      	nop
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	200006dc 	.word	0x200006dc

08003ffc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004000:	4802      	ldr	r0, [pc, #8]	@ (800400c <USART6_IRQHandler+0x10>)
 8004002:	f003 fb49 	bl	8007698 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004006:	bf00      	nop
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	20000574 	.word	0x20000574

08004010 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  return 1;
 8004014:	2301      	movs	r3, #1
}
 8004016:	4618      	mov	r0, r3
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <_kill>:

int _kill(int pid, int sig)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800402a:	f006 fc03 	bl	800a834 <__errno>
 800402e:	4603      	mov	r3, r0
 8004030:	2216      	movs	r2, #22
 8004032:	601a      	str	r2, [r3, #0]
  return -1;
 8004034:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004038:	4618      	mov	r0, r3
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <_exit>:

void _exit (int status)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004048:	f04f 31ff 	mov.w	r1, #4294967295
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff ffe7 	bl	8004020 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004052:	bf00      	nop
 8004054:	e7fd      	b.n	8004052 <_exit+0x12>

08004056 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b086      	sub	sp, #24
 800405a:	af00      	add	r7, sp, #0
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004062:	2300      	movs	r3, #0
 8004064:	617b      	str	r3, [r7, #20]
 8004066:	e00a      	b.n	800407e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004068:	f3af 8000 	nop.w
 800406c:	4601      	mov	r1, r0
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	60ba      	str	r2, [r7, #8]
 8004074:	b2ca      	uxtb	r2, r1
 8004076:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	3301      	adds	r3, #1
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	429a      	cmp	r2, r3
 8004084:	dbf0      	blt.n	8004068 <_read+0x12>
  }

  return len;
 8004086:	687b      	ldr	r3, [r7, #4]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800409c:	2300      	movs	r3, #0
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	e009      	b.n	80040b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	60ba      	str	r2, [r7, #8]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	3301      	adds	r3, #1
 80040b4:	617b      	str	r3, [r7, #20]
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	dbf1      	blt.n	80040a2 <_write+0x12>
  }
  return len;
 80040be:	687b      	ldr	r3, [r7, #4]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3718      	adds	r7, #24
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <_close>:

int _close(int file)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80040d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80040f0:	605a      	str	r2, [r3, #4]
  return 0;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <_isatty>:

int _isatty(int file)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004108:	2301      	movs	r3, #1
}
 800410a:	4618      	mov	r0, r3
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004116:	b480      	push	{r7}
 8004118:	b085      	sub	sp, #20
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004138:	4a14      	ldr	r2, [pc, #80]	@ (800418c <_sbrk+0x5c>)
 800413a:	4b15      	ldr	r3, [pc, #84]	@ (8004190 <_sbrk+0x60>)
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004144:	4b13      	ldr	r3, [pc, #76]	@ (8004194 <_sbrk+0x64>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d102      	bne.n	8004152 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800414c:	4b11      	ldr	r3, [pc, #68]	@ (8004194 <_sbrk+0x64>)
 800414e:	4a12      	ldr	r2, [pc, #72]	@ (8004198 <_sbrk+0x68>)
 8004150:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004152:	4b10      	ldr	r3, [pc, #64]	@ (8004194 <_sbrk+0x64>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4413      	add	r3, r2
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	429a      	cmp	r2, r3
 800415e:	d207      	bcs.n	8004170 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004160:	f006 fb68 	bl	800a834 <__errno>
 8004164:	4603      	mov	r3, r0
 8004166:	220c      	movs	r2, #12
 8004168:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800416a:	f04f 33ff 	mov.w	r3, #4294967295
 800416e:	e009      	b.n	8004184 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004170:	4b08      	ldr	r3, [pc, #32]	@ (8004194 <_sbrk+0x64>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004176:	4b07      	ldr	r3, [pc, #28]	@ (8004194 <_sbrk+0x64>)
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4413      	add	r3, r2
 800417e:	4a05      	ldr	r2, [pc, #20]	@ (8004194 <_sbrk+0x64>)
 8004180:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004182:	68fb      	ldr	r3, [r7, #12]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	20040000 	.word	0x20040000
 8004190:	00000400 	.word	0x00000400
 8004194:	20000de8 	.word	0x20000de8
 8004198:	20000f40 	.word	0x20000f40

0800419c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041a0:	4b06      	ldr	r3, [pc, #24]	@ (80041bc <SystemInit+0x20>)
 80041a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a6:	4a05      	ldr	r2, [pc, #20]	@ (80041bc <SystemInit+0x20>)
 80041a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80041ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041b0:	bf00      	nop
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	e000ed00 	.word	0xe000ed00

080041c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80041c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80041f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80041c4:	480d      	ldr	r0, [pc, #52]	@ (80041fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80041c6:	490e      	ldr	r1, [pc, #56]	@ (8004200 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80041c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004204 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80041ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041cc:	e002      	b.n	80041d4 <LoopCopyDataInit>

080041ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041d2:	3304      	adds	r3, #4

080041d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041d8:	d3f9      	bcc.n	80041ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041da:	4a0b      	ldr	r2, [pc, #44]	@ (8004208 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80041dc:	4c0b      	ldr	r4, [pc, #44]	@ (800420c <LoopFillZerobss+0x26>)
  movs r3, #0
 80041de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041e0:	e001      	b.n	80041e6 <LoopFillZerobss>

080041e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041e4:	3204      	adds	r2, #4

080041e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041e8:	d3fb      	bcc.n	80041e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80041ea:	f7ff ffd7 	bl	800419c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041ee:	f006 fb27 	bl	800a840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041f2:	f7fe fa9d 	bl	8002730 <main>
  bx  lr    
 80041f6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80041f8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80041fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004200:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8004204:	0800da44 	.word	0x0800da44
  ldr r2, =_sbss
 8004208:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800420c:	20000f3c 	.word	0x20000f3c

08004210 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004210:	e7fe      	b.n	8004210 <ADC_IRQHandler>
	...

08004214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004218:	4b0e      	ldr	r3, [pc, #56]	@ (8004254 <HAL_Init+0x40>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a0d      	ldr	r2, [pc, #52]	@ (8004254 <HAL_Init+0x40>)
 800421e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004222:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004224:	4b0b      	ldr	r3, [pc, #44]	@ (8004254 <HAL_Init+0x40>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a0a      	ldr	r2, [pc, #40]	@ (8004254 <HAL_Init+0x40>)
 800422a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800422e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004230:	4b08      	ldr	r3, [pc, #32]	@ (8004254 <HAL_Init+0x40>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a07      	ldr	r2, [pc, #28]	@ (8004254 <HAL_Init+0x40>)
 8004236:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800423a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800423c:	2003      	movs	r0, #3
 800423e:	f000 f94f 	bl	80044e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004242:	2000      	movs	r0, #0
 8004244:	f000 f808 	bl	8004258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004248:	f7ff f968 	bl	800351c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40023c00 	.word	0x40023c00

08004258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004260:	4b12      	ldr	r3, [pc, #72]	@ (80042ac <HAL_InitTick+0x54>)
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	4b12      	ldr	r3, [pc, #72]	@ (80042b0 <HAL_InitTick+0x58>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	4619      	mov	r1, r3
 800426a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800426e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004272:	fbb2 f3f3 	udiv	r3, r2, r3
 8004276:	4618      	mov	r0, r3
 8004278:	f000 f967 	bl	800454a <HAL_SYSTICK_Config>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e00e      	b.n	80042a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b0f      	cmp	r3, #15
 800428a:	d80a      	bhi.n	80042a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800428c:	2200      	movs	r2, #0
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	f04f 30ff 	mov.w	r0, #4294967295
 8004294:	f000 f92f 	bl	80044f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004298:	4a06      	ldr	r2, [pc, #24]	@ (80042b4 <HAL_InitTick+0x5c>)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	e000      	b.n	80042a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	20000000 	.word	0x20000000
 80042b0:	20000008 	.word	0x20000008
 80042b4:	20000004 	.word	0x20000004

080042b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042bc:	4b06      	ldr	r3, [pc, #24]	@ (80042d8 <HAL_IncTick+0x20>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	461a      	mov	r2, r3
 80042c2:	4b06      	ldr	r3, [pc, #24]	@ (80042dc <HAL_IncTick+0x24>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4413      	add	r3, r2
 80042c8:	4a04      	ldr	r2, [pc, #16]	@ (80042dc <HAL_IncTick+0x24>)
 80042ca:	6013      	str	r3, [r2, #0]
}
 80042cc:	bf00      	nop
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	20000008 	.word	0x20000008
 80042dc:	20000dec 	.word	0x20000dec

080042e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  return uwTick;
 80042e4:	4b03      	ldr	r3, [pc, #12]	@ (80042f4 <HAL_GetTick+0x14>)
 80042e6:	681b      	ldr	r3, [r3, #0]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	20000dec 	.word	0x20000dec

080042f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004300:	f7ff ffee 	bl	80042e0 <HAL_GetTick>
 8004304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004310:	d005      	beq.n	800431e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004312:	4b0a      	ldr	r3, [pc, #40]	@ (800433c <HAL_Delay+0x44>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4413      	add	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800431e:	bf00      	nop
 8004320:	f7ff ffde 	bl	80042e0 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	429a      	cmp	r2, r3
 800432e:	d8f7      	bhi.n	8004320 <HAL_Delay+0x28>
  {
  }
}
 8004330:	bf00      	nop
 8004332:	bf00      	nop
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20000008 	.word	0x20000008

08004340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004350:	4b0c      	ldr	r3, [pc, #48]	@ (8004384 <__NVIC_SetPriorityGrouping+0x44>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800435c:	4013      	ands	r3, r2
 800435e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004368:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800436c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004372:	4a04      	ldr	r2, [pc, #16]	@ (8004384 <__NVIC_SetPriorityGrouping+0x44>)
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	60d3      	str	r3, [r2, #12]
}
 8004378:	bf00      	nop
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	e000ed00 	.word	0xe000ed00

08004388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800438c:	4b04      	ldr	r3, [pc, #16]	@ (80043a0 <__NVIC_GetPriorityGrouping+0x18>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	0a1b      	lsrs	r3, r3, #8
 8004392:	f003 0307 	and.w	r3, r3, #7
}
 8004396:	4618      	mov	r0, r3
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	e000ed00 	.word	0xe000ed00

080043a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	4603      	mov	r3, r0
 80043ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	db0b      	blt.n	80043ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043b6:	79fb      	ldrb	r3, [r7, #7]
 80043b8:	f003 021f 	and.w	r2, r3, #31
 80043bc:	4907      	ldr	r1, [pc, #28]	@ (80043dc <__NVIC_EnableIRQ+0x38>)
 80043be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	2001      	movs	r0, #1
 80043c6:	fa00 f202 	lsl.w	r2, r0, r2
 80043ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	e000e100 	.word	0xe000e100

080043e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	4603      	mov	r3, r0
 80043e8:	6039      	str	r1, [r7, #0]
 80043ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	db0a      	blt.n	800440a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	490c      	ldr	r1, [pc, #48]	@ (800442c <__NVIC_SetPriority+0x4c>)
 80043fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fe:	0112      	lsls	r2, r2, #4
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	440b      	add	r3, r1
 8004404:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004408:	e00a      	b.n	8004420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	b2da      	uxtb	r2, r3
 800440e:	4908      	ldr	r1, [pc, #32]	@ (8004430 <__NVIC_SetPriority+0x50>)
 8004410:	79fb      	ldrb	r3, [r7, #7]
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	3b04      	subs	r3, #4
 8004418:	0112      	lsls	r2, r2, #4
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	440b      	add	r3, r1
 800441e:	761a      	strb	r2, [r3, #24]
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	e000e100 	.word	0xe000e100
 8004430:	e000ed00 	.word	0xe000ed00

08004434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004434:	b480      	push	{r7}
 8004436:	b089      	sub	sp, #36	@ 0x24
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f1c3 0307 	rsb	r3, r3, #7
 800444e:	2b04      	cmp	r3, #4
 8004450:	bf28      	it	cs
 8004452:	2304      	movcs	r3, #4
 8004454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	3304      	adds	r3, #4
 800445a:	2b06      	cmp	r3, #6
 800445c:	d902      	bls.n	8004464 <NVIC_EncodePriority+0x30>
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	3b03      	subs	r3, #3
 8004462:	e000      	b.n	8004466 <NVIC_EncodePriority+0x32>
 8004464:	2300      	movs	r3, #0
 8004466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004468:	f04f 32ff 	mov.w	r2, #4294967295
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	fa02 f303 	lsl.w	r3, r2, r3
 8004472:	43da      	mvns	r2, r3
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	401a      	ands	r2, r3
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800447c:	f04f 31ff 	mov.w	r1, #4294967295
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	fa01 f303 	lsl.w	r3, r1, r3
 8004486:	43d9      	mvns	r1, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800448c:	4313      	orrs	r3, r2
         );
}
 800448e:	4618      	mov	r0, r3
 8004490:	3724      	adds	r7, #36	@ 0x24
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
	...

0800449c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044ac:	d301      	bcc.n	80044b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044ae:	2301      	movs	r3, #1
 80044b0:	e00f      	b.n	80044d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044b2:	4a0a      	ldr	r2, [pc, #40]	@ (80044dc <SysTick_Config+0x40>)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044ba:	210f      	movs	r1, #15
 80044bc:	f04f 30ff 	mov.w	r0, #4294967295
 80044c0:	f7ff ff8e 	bl	80043e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044c4:	4b05      	ldr	r3, [pc, #20]	@ (80044dc <SysTick_Config+0x40>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044ca:	4b04      	ldr	r3, [pc, #16]	@ (80044dc <SysTick_Config+0x40>)
 80044cc:	2207      	movs	r2, #7
 80044ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	e000e010 	.word	0xe000e010

080044e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f7ff ff29 	bl	8004340 <__NVIC_SetPriorityGrouping>
}
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b086      	sub	sp, #24
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	4603      	mov	r3, r0
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	607a      	str	r2, [r7, #4]
 8004502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004504:	2300      	movs	r3, #0
 8004506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004508:	f7ff ff3e 	bl	8004388 <__NVIC_GetPriorityGrouping>
 800450c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	68b9      	ldr	r1, [r7, #8]
 8004512:	6978      	ldr	r0, [r7, #20]
 8004514:	f7ff ff8e 	bl	8004434 <NVIC_EncodePriority>
 8004518:	4602      	mov	r2, r0
 800451a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800451e:	4611      	mov	r1, r2
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff ff5d 	bl	80043e0 <__NVIC_SetPriority>
}
 8004526:	bf00      	nop
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b082      	sub	sp, #8
 8004532:	af00      	add	r7, sp, #0
 8004534:	4603      	mov	r3, r0
 8004536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453c:	4618      	mov	r0, r3
 800453e:	f7ff ff31 	bl	80043a4 <__NVIC_EnableIRQ>
}
 8004542:	bf00      	nop
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b082      	sub	sp, #8
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7ff ffa2 	bl	800449c <SysTick_Config>
 8004558:	4603      	mov	r3, r0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004570:	f7ff feb6 	bl	80042e0 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e099      	b.n	80046b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0201 	bic.w	r2, r2, #1
 800459e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045a0:	e00f      	b.n	80045c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045a2:	f7ff fe9d 	bl	80042e0 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b05      	cmp	r3, #5
 80045ae:	d908      	bls.n	80045c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2220      	movs	r2, #32
 80045b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2203      	movs	r2, #3
 80045ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e078      	b.n	80046b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1e8      	bne.n	80045a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	4b38      	ldr	r3, [pc, #224]	@ (80046bc <HAL_DMA_Init+0x158>)
 80045dc:	4013      	ands	r3, r2
 80045de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004606:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004618:	2b04      	cmp	r3, #4
 800461a:	d107      	bne.n	800462c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004624:	4313      	orrs	r3, r2
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	4313      	orrs	r3, r2
 800462a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f023 0307 	bic.w	r3, r3, #7
 8004642:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	4313      	orrs	r3, r2
 800464c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004652:	2b04      	cmp	r3, #4
 8004654:	d117      	bne.n	8004686 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	4313      	orrs	r3, r2
 800465e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00e      	beq.n	8004686 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 fb01 	bl	8004c70 <DMA_CheckFifoParam>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d008      	beq.n	8004686 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2240      	movs	r2, #64	@ 0x40
 8004678:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004682:	2301      	movs	r3, #1
 8004684:	e016      	b.n	80046b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fab8 	bl	8004c04 <DMA_CalcBaseAndBitshift>
 8004694:	4603      	mov	r3, r0
 8004696:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800469c:	223f      	movs	r2, #63	@ 0x3f
 800469e:	409a      	lsls	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3718      	adds	r7, #24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	f010803f 	.word	0xf010803f

080046c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d101      	bne.n	80046e6 <HAL_DMA_Start_IT+0x26>
 80046e2:	2302      	movs	r3, #2
 80046e4:	e040      	b.n	8004768 <HAL_DMA_Start_IT+0xa8>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d12f      	bne.n	800475a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2202      	movs	r2, #2
 80046fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	68b9      	ldr	r1, [r7, #8]
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 fa4a 	bl	8004ba8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004718:	223f      	movs	r2, #63	@ 0x3f
 800471a:	409a      	lsls	r2, r3
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0216 	orr.w	r2, r2, #22
 800472e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004734:	2b00      	cmp	r3, #0
 8004736:	d007      	beq.n	8004748 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0208 	orr.w	r2, r2, #8
 8004746:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0201 	orr.w	r2, r2, #1
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	e005      	b.n	8004766 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004762:	2302      	movs	r3, #2
 8004764:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004766:	7dfb      	ldrb	r3, [r7, #23]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800477c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800477e:	f7ff fdaf 	bl	80042e0 <HAL_GetTick>
 8004782:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d008      	beq.n	80047a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2280      	movs	r2, #128	@ 0x80
 8004794:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e052      	b.n	8004848 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0216 	bic.w	r2, r2, #22
 80047b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695a      	ldr	r2, [r3, #20]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d103      	bne.n	80047d2 <HAL_DMA_Abort+0x62>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d007      	beq.n	80047e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0208 	bic.w	r2, r2, #8
 80047e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0201 	bic.w	r2, r2, #1
 80047f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047f2:	e013      	b.n	800481c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047f4:	f7ff fd74 	bl	80042e0 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b05      	cmp	r3, #5
 8004800:	d90c      	bls.n	800481c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2220      	movs	r2, #32
 8004806:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2203      	movs	r2, #3
 800480c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e015      	b.n	8004848 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1e4      	bne.n	80047f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800482e:	223f      	movs	r2, #63	@ 0x3f
 8004830:	409a      	lsls	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d004      	beq.n	800486e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2280      	movs	r2, #128	@ 0x80
 8004868:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e00c      	b.n	8004888 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2205      	movs	r2, #5
 8004872:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0201 	bic.w	r2, r2, #1
 8004884:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80048a0:	4b8e      	ldr	r3, [pc, #568]	@ (8004adc <HAL_DMA_IRQHandler+0x248>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a8e      	ldr	r2, [pc, #568]	@ (8004ae0 <HAL_DMA_IRQHandler+0x24c>)
 80048a6:	fba2 2303 	umull	r2, r3, r2, r3
 80048aa:	0a9b      	lsrs	r3, r3, #10
 80048ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048be:	2208      	movs	r2, #8
 80048c0:	409a      	lsls	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4013      	ands	r3, r2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d01a      	beq.n	8004900 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d013      	beq.n	8004900 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0204 	bic.w	r2, r2, #4
 80048e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ec:	2208      	movs	r2, #8
 80048ee:	409a      	lsls	r2, r3
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f8:	f043 0201 	orr.w	r2, r3, #1
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004904:	2201      	movs	r2, #1
 8004906:	409a      	lsls	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4013      	ands	r3, r2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d012      	beq.n	8004936 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00b      	beq.n	8004936 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004922:	2201      	movs	r2, #1
 8004924:	409a      	lsls	r2, r3
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800492e:	f043 0202 	orr.w	r2, r3, #2
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800493a:	2204      	movs	r2, #4
 800493c:	409a      	lsls	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4013      	ands	r3, r2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d012      	beq.n	800496c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00b      	beq.n	800496c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004958:	2204      	movs	r2, #4
 800495a:	409a      	lsls	r2, r3
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004964:	f043 0204 	orr.w	r2, r3, #4
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004970:	2210      	movs	r2, #16
 8004972:	409a      	lsls	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4013      	ands	r3, r2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d043      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b00      	cmp	r3, #0
 8004988:	d03c      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800498e:	2210      	movs	r2, #16
 8004990:	409a      	lsls	r2, r3
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d018      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d108      	bne.n	80049c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d024      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	4798      	blx	r3
 80049c2:	e01f      	b.n	8004a04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01b      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	4798      	blx	r3
 80049d4:	e016      	b.n	8004a04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d107      	bne.n	80049f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0208 	bic.w	r2, r2, #8
 80049f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a08:	2220      	movs	r2, #32
 8004a0a:	409a      	lsls	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 808f 	beq.w	8004b34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0310 	and.w	r3, r3, #16
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 8087 	beq.w	8004b34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	409a      	lsls	r2, r3
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b05      	cmp	r3, #5
 8004a3c:	d136      	bne.n	8004aac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0216 	bic.w	r2, r2, #22
 8004a4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695a      	ldr	r2, [r3, #20]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d103      	bne.n	8004a6e <HAL_DMA_IRQHandler+0x1da>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d007      	beq.n	8004a7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0208 	bic.w	r2, r2, #8
 8004a7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a82:	223f      	movs	r2, #63	@ 0x3f
 8004a84:	409a      	lsls	r2, r3
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d07e      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	4798      	blx	r3
        }
        return;
 8004aaa:	e079      	b.n	8004ba0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d01d      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10d      	bne.n	8004ae4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d031      	beq.n	8004b34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	4798      	blx	r3
 8004ad8:	e02c      	b.n	8004b34 <HAL_DMA_IRQHandler+0x2a0>
 8004ada:	bf00      	nop
 8004adc:	20000000 	.word	0x20000000
 8004ae0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d023      	beq.n	8004b34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	4798      	blx	r3
 8004af4:	e01e      	b.n	8004b34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10f      	bne.n	8004b24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0210 	bic.w	r2, r2, #16
 8004b12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d032      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d022      	beq.n	8004b8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2205      	movs	r2, #5
 8004b4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0201 	bic.w	r2, r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	3301      	adds	r3, #1
 8004b64:	60bb      	str	r3, [r7, #8]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d307      	bcc.n	8004b7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f2      	bne.n	8004b60 <HAL_DMA_IRQHandler+0x2cc>
 8004b7a:	e000      	b.n	8004b7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004b7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	4798      	blx	r3
 8004b9e:	e000      	b.n	8004ba2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ba0:	bf00      	nop
    }
  }
}
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
 8004bb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004bc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	2b40      	cmp	r3, #64	@ 0x40
 8004bd4:	d108      	bne.n	8004be8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004be6:	e007      	b.n	8004bf8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	60da      	str	r2, [r3, #12]
}
 8004bf8:	bf00      	nop
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	3b10      	subs	r3, #16
 8004c14:	4a14      	ldr	r2, [pc, #80]	@ (8004c68 <DMA_CalcBaseAndBitshift+0x64>)
 8004c16:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1a:	091b      	lsrs	r3, r3, #4
 8004c1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c1e:	4a13      	ldr	r2, [pc, #76]	@ (8004c6c <DMA_CalcBaseAndBitshift+0x68>)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4413      	add	r3, r2
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2b03      	cmp	r3, #3
 8004c30:	d909      	bls.n	8004c46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004c3a:	f023 0303 	bic.w	r3, r3, #3
 8004c3e:	1d1a      	adds	r2, r3, #4
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c44:	e007      	b.n	8004c56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004c4e:	f023 0303 	bic.w	r3, r3, #3
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	aaaaaaab 	.word	0xaaaaaaab
 8004c6c:	0800d5ac 	.word	0x0800d5ac

08004c70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d11f      	bne.n	8004cca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b03      	cmp	r3, #3
 8004c8e:	d856      	bhi.n	8004d3e <DMA_CheckFifoParam+0xce>
 8004c90:	a201      	add	r2, pc, #4	@ (adr r2, 8004c98 <DMA_CheckFifoParam+0x28>)
 8004c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c96:	bf00      	nop
 8004c98:	08004ca9 	.word	0x08004ca9
 8004c9c:	08004cbb 	.word	0x08004cbb
 8004ca0:	08004ca9 	.word	0x08004ca9
 8004ca4:	08004d3f 	.word	0x08004d3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d046      	beq.n	8004d42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cb8:	e043      	b.n	8004d42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004cc2:	d140      	bne.n	8004d46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cc8:	e03d      	b.n	8004d46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cd2:	d121      	bne.n	8004d18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	d837      	bhi.n	8004d4a <DMA_CheckFifoParam+0xda>
 8004cda:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce0 <DMA_CheckFifoParam+0x70>)
 8004cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce0:	08004cf1 	.word	0x08004cf1
 8004ce4:	08004cf7 	.word	0x08004cf7
 8004ce8:	08004cf1 	.word	0x08004cf1
 8004cec:	08004d09 	.word	0x08004d09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cf4:	e030      	b.n	8004d58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d025      	beq.n	8004d4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d06:	e022      	b.n	8004d4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d10:	d11f      	bne.n	8004d52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d16:	e01c      	b.n	8004d52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d903      	bls.n	8004d26 <DMA_CheckFifoParam+0xb6>
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2b03      	cmp	r3, #3
 8004d22:	d003      	beq.n	8004d2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d24:	e018      	b.n	8004d58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	73fb      	strb	r3, [r7, #15]
      break;
 8004d2a:	e015      	b.n	8004d58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00e      	beq.n	8004d56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d3c:	e00b      	b.n	8004d56 <DMA_CheckFifoParam+0xe6>
      break;
 8004d3e:	bf00      	nop
 8004d40:	e00a      	b.n	8004d58 <DMA_CheckFifoParam+0xe8>
      break;
 8004d42:	bf00      	nop
 8004d44:	e008      	b.n	8004d58 <DMA_CheckFifoParam+0xe8>
      break;
 8004d46:	bf00      	nop
 8004d48:	e006      	b.n	8004d58 <DMA_CheckFifoParam+0xe8>
      break;
 8004d4a:	bf00      	nop
 8004d4c:	e004      	b.n	8004d58 <DMA_CheckFifoParam+0xe8>
      break;
 8004d4e:	bf00      	nop
 8004d50:	e002      	b.n	8004d58 <DMA_CheckFifoParam+0xe8>
      break;   
 8004d52:	bf00      	nop
 8004d54:	e000      	b.n	8004d58 <DMA_CheckFifoParam+0xe8>
      break;
 8004d56:	bf00      	nop
    }
  } 
  
  return status; 
 8004d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop

08004d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b089      	sub	sp, #36	@ 0x24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61fb      	str	r3, [r7, #28]
 8004d82:	e165      	b.n	8005050 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d84:	2201      	movs	r2, #1
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	4013      	ands	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	f040 8154 	bne.w	800504a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d005      	beq.n	8004dba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d130      	bne.n	8004e1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	2203      	movs	r2, #3
 8004dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dca:	43db      	mvns	r3, r3
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004df0:	2201      	movs	r2, #1
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	091b      	lsrs	r3, r3, #4
 8004e06:	f003 0201 	and.w	r2, r3, #1
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f003 0303 	and.w	r3, r3, #3
 8004e24:	2b03      	cmp	r3, #3
 8004e26:	d017      	beq.n	8004e58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	2203      	movs	r2, #3
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	689a      	ldr	r2, [r3, #8]
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f003 0303 	and.w	r3, r3, #3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d123      	bne.n	8004eac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	08da      	lsrs	r2, r3, #3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3208      	adds	r2, #8
 8004e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	220f      	movs	r2, #15
 8004e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e80:	43db      	mvns	r3, r3
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	4013      	ands	r3, r2
 8004e86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	08da      	lsrs	r2, r3, #3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	3208      	adds	r2, #8
 8004ea6:	69b9      	ldr	r1, [r7, #24]
 8004ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	2203      	movs	r2, #3
 8004eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebc:	43db      	mvns	r3, r3
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f003 0203 	and.w	r2, r3, #3
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 80ae 	beq.w	800504a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	4b5d      	ldr	r3, [pc, #372]	@ (8005068 <HAL_GPIO_Init+0x300>)
 8004ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef6:	4a5c      	ldr	r2, [pc, #368]	@ (8005068 <HAL_GPIO_Init+0x300>)
 8004ef8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004efc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004efe:	4b5a      	ldr	r3, [pc, #360]	@ (8005068 <HAL_GPIO_Init+0x300>)
 8004f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f0a:	4a58      	ldr	r2, [pc, #352]	@ (800506c <HAL_GPIO_Init+0x304>)
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	089b      	lsrs	r3, r3, #2
 8004f10:	3302      	adds	r3, #2
 8004f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	220f      	movs	r2, #15
 8004f22:	fa02 f303 	lsl.w	r3, r2, r3
 8004f26:	43db      	mvns	r3, r3
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a4f      	ldr	r2, [pc, #316]	@ (8005070 <HAL_GPIO_Init+0x308>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d025      	beq.n	8004f82 <HAL_GPIO_Init+0x21a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a4e      	ldr	r2, [pc, #312]	@ (8005074 <HAL_GPIO_Init+0x30c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d01f      	beq.n	8004f7e <HAL_GPIO_Init+0x216>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a4d      	ldr	r2, [pc, #308]	@ (8005078 <HAL_GPIO_Init+0x310>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d019      	beq.n	8004f7a <HAL_GPIO_Init+0x212>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a4c      	ldr	r2, [pc, #304]	@ (800507c <HAL_GPIO_Init+0x314>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d013      	beq.n	8004f76 <HAL_GPIO_Init+0x20e>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a4b      	ldr	r2, [pc, #300]	@ (8005080 <HAL_GPIO_Init+0x318>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d00d      	beq.n	8004f72 <HAL_GPIO_Init+0x20a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a4a      	ldr	r2, [pc, #296]	@ (8005084 <HAL_GPIO_Init+0x31c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d007      	beq.n	8004f6e <HAL_GPIO_Init+0x206>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a49      	ldr	r2, [pc, #292]	@ (8005088 <HAL_GPIO_Init+0x320>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d101      	bne.n	8004f6a <HAL_GPIO_Init+0x202>
 8004f66:	2306      	movs	r3, #6
 8004f68:	e00c      	b.n	8004f84 <HAL_GPIO_Init+0x21c>
 8004f6a:	2307      	movs	r3, #7
 8004f6c:	e00a      	b.n	8004f84 <HAL_GPIO_Init+0x21c>
 8004f6e:	2305      	movs	r3, #5
 8004f70:	e008      	b.n	8004f84 <HAL_GPIO_Init+0x21c>
 8004f72:	2304      	movs	r3, #4
 8004f74:	e006      	b.n	8004f84 <HAL_GPIO_Init+0x21c>
 8004f76:	2303      	movs	r3, #3
 8004f78:	e004      	b.n	8004f84 <HAL_GPIO_Init+0x21c>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	e002      	b.n	8004f84 <HAL_GPIO_Init+0x21c>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e000      	b.n	8004f84 <HAL_GPIO_Init+0x21c>
 8004f82:	2300      	movs	r3, #0
 8004f84:	69fa      	ldr	r2, [r7, #28]
 8004f86:	f002 0203 	and.w	r2, r2, #3
 8004f8a:	0092      	lsls	r2, r2, #2
 8004f8c:	4093      	lsls	r3, r2
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f94:	4935      	ldr	r1, [pc, #212]	@ (800506c <HAL_GPIO_Init+0x304>)
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	089b      	lsrs	r3, r3, #2
 8004f9a:	3302      	adds	r3, #2
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fa2:	4b3a      	ldr	r3, [pc, #232]	@ (800508c <HAL_GPIO_Init+0x324>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	43db      	mvns	r3, r3
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fc6:	4a31      	ldr	r2, [pc, #196]	@ (800508c <HAL_GPIO_Init+0x324>)
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fcc:	4b2f      	ldr	r3, [pc, #188]	@ (800508c <HAL_GPIO_Init+0x324>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	43db      	mvns	r3, r3
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ff0:	4a26      	ldr	r2, [pc, #152]	@ (800508c <HAL_GPIO_Init+0x324>)
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ff6:	4b25      	ldr	r3, [pc, #148]	@ (800508c <HAL_GPIO_Init+0x324>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	43db      	mvns	r3, r3
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	4013      	ands	r3, r2
 8005004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	4313      	orrs	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800501a:	4a1c      	ldr	r2, [pc, #112]	@ (800508c <HAL_GPIO_Init+0x324>)
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005020:	4b1a      	ldr	r3, [pc, #104]	@ (800508c <HAL_GPIO_Init+0x324>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	43db      	mvns	r3, r3
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	4013      	ands	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005044:	4a11      	ldr	r2, [pc, #68]	@ (800508c <HAL_GPIO_Init+0x324>)
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	3301      	adds	r3, #1
 800504e:	61fb      	str	r3, [r7, #28]
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	2b0f      	cmp	r3, #15
 8005054:	f67f ae96 	bls.w	8004d84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005058:	bf00      	nop
 800505a:	bf00      	nop
 800505c:	3724      	adds	r7, #36	@ 0x24
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40023800 	.word	0x40023800
 800506c:	40013800 	.word	0x40013800
 8005070:	40020000 	.word	0x40020000
 8005074:	40020400 	.word	0x40020400
 8005078:	40020800 	.word	0x40020800
 800507c:	40020c00 	.word	0x40020c00
 8005080:	40021000 	.word	0x40021000
 8005084:	40021400 	.word	0x40021400
 8005088:	40021800 	.word	0x40021800
 800508c:	40013c00 	.word	0x40013c00

08005090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	460b      	mov	r3, r1
 800509a:	807b      	strh	r3, [r7, #2]
 800509c:	4613      	mov	r3, r2
 800509e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050a0:	787b      	ldrb	r3, [r7, #1]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050a6:	887a      	ldrh	r2, [r7, #2]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050ac:	e003      	b.n	80050b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050ae:	887b      	ldrh	r3, [r7, #2]
 80050b0:	041a      	lsls	r2, r3, #16
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	619a      	str	r2, [r3, #24]
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
	...

080050c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	4603      	mov	r3, r0
 80050cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80050ce:	4b08      	ldr	r3, [pc, #32]	@ (80050f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050d0:	695a      	ldr	r2, [r3, #20]
 80050d2:	88fb      	ldrh	r3, [r7, #6]
 80050d4:	4013      	ands	r3, r2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d006      	beq.n	80050e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050da:	4a05      	ldr	r2, [pc, #20]	@ (80050f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050dc:	88fb      	ldrh	r3, [r7, #6]
 80050de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050e0:	88fb      	ldrh	r3, [r7, #6]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 f806 	bl	80050f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80050e8:	bf00      	nop
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	40013c00 	.word	0x40013c00

080050f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	4603      	mov	r3, r0
 80050fc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b086      	sub	sp, #24
 800510e:	af02      	add	r7, sp, #8
 8005110:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e108      	b.n	800532e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d106      	bne.n	800513c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fe fe34 	bl	8003da4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2203      	movs	r2, #3
 8005140:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800514a:	d102      	bne.n	8005152 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4618      	mov	r0, r3
 8005158:	f003 fbec 	bl	8008934 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6818      	ldr	r0, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	7c1a      	ldrb	r2, [r3, #16]
 8005164:	f88d 2000 	strb.w	r2, [sp]
 8005168:	3304      	adds	r3, #4
 800516a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800516c:	f003 fb7e 	bl	800886c <USB_CoreInit>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d005      	beq.n	8005182 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2202      	movs	r2, #2
 800517a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e0d5      	b.n	800532e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2100      	movs	r1, #0
 8005188:	4618      	mov	r0, r3
 800518a:	f003 fbe4 	bl	8008956 <USB_SetCurrentMode>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d005      	beq.n	80051a0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e0c6      	b.n	800532e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051a0:	2300      	movs	r3, #0
 80051a2:	73fb      	strb	r3, [r7, #15]
 80051a4:	e04a      	b.n	800523c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80051a6:	7bfa      	ldrb	r2, [r7, #15]
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	4613      	mov	r3, r2
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	4413      	add	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	440b      	add	r3, r1
 80051b4:	3315      	adds	r3, #21
 80051b6:	2201      	movs	r2, #1
 80051b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80051ba:	7bfa      	ldrb	r2, [r7, #15]
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	4613      	mov	r3, r2
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	4413      	add	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	440b      	add	r3, r1
 80051c8:	3314      	adds	r3, #20
 80051ca:	7bfa      	ldrb	r2, [r7, #15]
 80051cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80051ce:	7bfa      	ldrb	r2, [r7, #15]
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
 80051d2:	b298      	uxth	r0, r3
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	4613      	mov	r3, r2
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	4413      	add	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	440b      	add	r3, r1
 80051e0:	332e      	adds	r3, #46	@ 0x2e
 80051e2:	4602      	mov	r2, r0
 80051e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80051e6:	7bfa      	ldrb	r2, [r7, #15]
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	4613      	mov	r3, r2
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	4413      	add	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	440b      	add	r3, r1
 80051f4:	3318      	adds	r3, #24
 80051f6:	2200      	movs	r2, #0
 80051f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80051fa:	7bfa      	ldrb	r2, [r7, #15]
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	4613      	mov	r3, r2
 8005200:	00db      	lsls	r3, r3, #3
 8005202:	4413      	add	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	440b      	add	r3, r1
 8005208:	331c      	adds	r3, #28
 800520a:	2200      	movs	r2, #0
 800520c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800520e:	7bfa      	ldrb	r2, [r7, #15]
 8005210:	6879      	ldr	r1, [r7, #4]
 8005212:	4613      	mov	r3, r2
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	4413      	add	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	440b      	add	r3, r1
 800521c:	3320      	adds	r3, #32
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005222:	7bfa      	ldrb	r2, [r7, #15]
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	4613      	mov	r3, r2
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	3324      	adds	r3, #36	@ 0x24
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005236:	7bfb      	ldrb	r3, [r7, #15]
 8005238:	3301      	adds	r3, #1
 800523a:	73fb      	strb	r3, [r7, #15]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	791b      	ldrb	r3, [r3, #4]
 8005240:	7bfa      	ldrb	r2, [r7, #15]
 8005242:	429a      	cmp	r2, r3
 8005244:	d3af      	bcc.n	80051a6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005246:	2300      	movs	r3, #0
 8005248:	73fb      	strb	r3, [r7, #15]
 800524a:	e044      	b.n	80052d6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800524c:	7bfa      	ldrb	r2, [r7, #15]
 800524e:	6879      	ldr	r1, [r7, #4]
 8005250:	4613      	mov	r3, r2
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	4413      	add	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	440b      	add	r3, r1
 800525a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800525e:	2200      	movs	r2, #0
 8005260:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005262:	7bfa      	ldrb	r2, [r7, #15]
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	4613      	mov	r3, r2
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	4413      	add	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	440b      	add	r3, r1
 8005270:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005274:	7bfa      	ldrb	r2, [r7, #15]
 8005276:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005278:	7bfa      	ldrb	r2, [r7, #15]
 800527a:	6879      	ldr	r1, [r7, #4]
 800527c:	4613      	mov	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	4413      	add	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800528a:	2200      	movs	r2, #0
 800528c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800528e:	7bfa      	ldrb	r2, [r7, #15]
 8005290:	6879      	ldr	r1, [r7, #4]
 8005292:	4613      	mov	r3, r2
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	4413      	add	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	440b      	add	r3, r1
 800529c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80052a4:	7bfa      	ldrb	r2, [r7, #15]
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	4613      	mov	r3, r2
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80052b6:	2200      	movs	r2, #0
 80052b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80052ba:	7bfa      	ldrb	r2, [r7, #15]
 80052bc:	6879      	ldr	r1, [r7, #4]
 80052be:	4613      	mov	r3, r2
 80052c0:	00db      	lsls	r3, r3, #3
 80052c2:	4413      	add	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	440b      	add	r3, r1
 80052c8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
 80052d2:	3301      	adds	r3, #1
 80052d4:	73fb      	strb	r3, [r7, #15]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	791b      	ldrb	r3, [r3, #4]
 80052da:	7bfa      	ldrb	r2, [r7, #15]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d3b5      	bcc.n	800524c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6818      	ldr	r0, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	7c1a      	ldrb	r2, [r3, #16]
 80052e8:	f88d 2000 	strb.w	r2, [sp]
 80052ec:	3304      	adds	r3, #4
 80052ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052f0:	f003 fb7e 	bl	80089f0 <USB_DevInit>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d005      	beq.n	8005306 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2202      	movs	r2, #2
 80052fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e013      	b.n	800532e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	7b1b      	ldrb	r3, [r3, #12]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d102      	bne.n	8005322 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f80a 	bl	8005336 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4618      	mov	r0, r3
 8005328:	f003 fd39 	bl	8008d9e <USB_DevDisconnect>

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005336:	b480      	push	{r7}
 8005338:	b085      	sub	sp, #20
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005364:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005368:	f043 0303 	orr.w	r3, r3, #3
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
	...

08005380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e0cc      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005394:	4b68      	ldr	r3, [pc, #416]	@ (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d90c      	bls.n	80053bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a2:	4b65      	ldr	r3, [pc, #404]	@ (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053aa:	4b63      	ldr	r3, [pc, #396]	@ (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d001      	beq.n	80053bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e0b8      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d020      	beq.n	800540a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d005      	beq.n	80053e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053d4:	4b59      	ldr	r3, [pc, #356]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	4a58      	ldr	r2, [pc, #352]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80053de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0308 	and.w	r3, r3, #8
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053ec:	4b53      	ldr	r3, [pc, #332]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	4a52      	ldr	r2, [pc, #328]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80053f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f8:	4b50      	ldr	r3, [pc, #320]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	494d      	ldr	r1, [pc, #308]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005406:	4313      	orrs	r3, r2
 8005408:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d044      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d107      	bne.n	800542e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800541e:	4b47      	ldr	r3, [pc, #284]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d119      	bne.n	800545e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e07f      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d003      	beq.n	800543e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800543a:	2b03      	cmp	r3, #3
 800543c:	d107      	bne.n	800544e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800543e:	4b3f      	ldr	r3, [pc, #252]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d109      	bne.n	800545e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e06f      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800544e:	4b3b      	ldr	r3, [pc, #236]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e067      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800545e:	4b37      	ldr	r3, [pc, #220]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f023 0203 	bic.w	r2, r3, #3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	4934      	ldr	r1, [pc, #208]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 800546c:	4313      	orrs	r3, r2
 800546e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005470:	f7fe ff36 	bl	80042e0 <HAL_GetTick>
 8005474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005476:	e00a      	b.n	800548e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005478:	f7fe ff32 	bl	80042e0 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005486:	4293      	cmp	r3, r2
 8005488:	d901      	bls.n	800548e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e04f      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800548e:	4b2b      	ldr	r3, [pc, #172]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 020c 	and.w	r2, r3, #12
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	429a      	cmp	r2, r3
 800549e:	d1eb      	bne.n	8005478 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054a0:	4b25      	ldr	r3, [pc, #148]	@ (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d20c      	bcs.n	80054c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ae:	4b22      	ldr	r3, [pc, #136]	@ (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b6:	4b20      	ldr	r3, [pc, #128]	@ (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d001      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e032      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d008      	beq.n	80054e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054d4:	4b19      	ldr	r3, [pc, #100]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4916      	ldr	r1, [pc, #88]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d009      	beq.n	8005506 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054f2:	4b12      	ldr	r3, [pc, #72]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	490e      	ldr	r1, [pc, #56]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005502:	4313      	orrs	r3, r2
 8005504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005506:	f000 f821 	bl	800554c <HAL_RCC_GetSysClockFreq>
 800550a:	4602      	mov	r2, r0
 800550c:	4b0b      	ldr	r3, [pc, #44]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	091b      	lsrs	r3, r3, #4
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	490a      	ldr	r1, [pc, #40]	@ (8005540 <HAL_RCC_ClockConfig+0x1c0>)
 8005518:	5ccb      	ldrb	r3, [r1, r3]
 800551a:	fa22 f303 	lsr.w	r3, r2, r3
 800551e:	4a09      	ldr	r2, [pc, #36]	@ (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 8005520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005522:	4b09      	ldr	r3, [pc, #36]	@ (8005548 <HAL_RCC_ClockConfig+0x1c8>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4618      	mov	r0, r3
 8005528:	f7fe fe96 	bl	8004258 <HAL_InitTick>

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	40023c00 	.word	0x40023c00
 800553c:	40023800 	.word	0x40023800
 8005540:	0800d594 	.word	0x0800d594
 8005544:	20000000 	.word	0x20000000
 8005548:	20000004 	.word	0x20000004

0800554c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800554c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005550:	b094      	sub	sp, #80	@ 0x50
 8005552:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	647b      	str	r3, [r7, #68]	@ 0x44
 8005558:	2300      	movs	r3, #0
 800555a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800555c:	2300      	movs	r3, #0
 800555e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005564:	4b79      	ldr	r3, [pc, #484]	@ (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f003 030c 	and.w	r3, r3, #12
 800556c:	2b08      	cmp	r3, #8
 800556e:	d00d      	beq.n	800558c <HAL_RCC_GetSysClockFreq+0x40>
 8005570:	2b08      	cmp	r3, #8
 8005572:	f200 80e1 	bhi.w	8005738 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <HAL_RCC_GetSysClockFreq+0x34>
 800557a:	2b04      	cmp	r3, #4
 800557c:	d003      	beq.n	8005586 <HAL_RCC_GetSysClockFreq+0x3a>
 800557e:	e0db      	b.n	8005738 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005580:	4b73      	ldr	r3, [pc, #460]	@ (8005750 <HAL_RCC_GetSysClockFreq+0x204>)
 8005582:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005584:	e0db      	b.n	800573e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005586:	4b73      	ldr	r3, [pc, #460]	@ (8005754 <HAL_RCC_GetSysClockFreq+0x208>)
 8005588:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800558a:	e0d8      	b.n	800573e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800558c:	4b6f      	ldr	r3, [pc, #444]	@ (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005594:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005596:	4b6d      	ldr	r3, [pc, #436]	@ (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d063      	beq.n	800566a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055a2:	4b6a      	ldr	r3, [pc, #424]	@ (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	099b      	lsrs	r3, r3, #6
 80055a8:	2200      	movs	r2, #0
 80055aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80055ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80055b6:	2300      	movs	r3, #0
 80055b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80055ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80055be:	4622      	mov	r2, r4
 80055c0:	462b      	mov	r3, r5
 80055c2:	f04f 0000 	mov.w	r0, #0
 80055c6:	f04f 0100 	mov.w	r1, #0
 80055ca:	0159      	lsls	r1, r3, #5
 80055cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055d0:	0150      	lsls	r0, r2, #5
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	4621      	mov	r1, r4
 80055d8:	1a51      	subs	r1, r2, r1
 80055da:	6139      	str	r1, [r7, #16]
 80055dc:	4629      	mov	r1, r5
 80055de:	eb63 0301 	sbc.w	r3, r3, r1
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055f0:	4659      	mov	r1, fp
 80055f2:	018b      	lsls	r3, r1, #6
 80055f4:	4651      	mov	r1, sl
 80055f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055fa:	4651      	mov	r1, sl
 80055fc:	018a      	lsls	r2, r1, #6
 80055fe:	4651      	mov	r1, sl
 8005600:	ebb2 0801 	subs.w	r8, r2, r1
 8005604:	4659      	mov	r1, fp
 8005606:	eb63 0901 	sbc.w	r9, r3, r1
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	f04f 0300 	mov.w	r3, #0
 8005612:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005616:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800561a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800561e:	4690      	mov	r8, r2
 8005620:	4699      	mov	r9, r3
 8005622:	4623      	mov	r3, r4
 8005624:	eb18 0303 	adds.w	r3, r8, r3
 8005628:	60bb      	str	r3, [r7, #8]
 800562a:	462b      	mov	r3, r5
 800562c:	eb49 0303 	adc.w	r3, r9, r3
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	f04f 0200 	mov.w	r2, #0
 8005636:	f04f 0300 	mov.w	r3, #0
 800563a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800563e:	4629      	mov	r1, r5
 8005640:	024b      	lsls	r3, r1, #9
 8005642:	4621      	mov	r1, r4
 8005644:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005648:	4621      	mov	r1, r4
 800564a:	024a      	lsls	r2, r1, #9
 800564c:	4610      	mov	r0, r2
 800564e:	4619      	mov	r1, r3
 8005650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005652:	2200      	movs	r2, #0
 8005654:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005656:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005658:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800565c:	f7fb fb44 	bl	8000ce8 <__aeabi_uldivmod>
 8005660:	4602      	mov	r2, r0
 8005662:	460b      	mov	r3, r1
 8005664:	4613      	mov	r3, r2
 8005666:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005668:	e058      	b.n	800571c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800566a:	4b38      	ldr	r3, [pc, #224]	@ (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	099b      	lsrs	r3, r3, #6
 8005670:	2200      	movs	r2, #0
 8005672:	4618      	mov	r0, r3
 8005674:	4611      	mov	r1, r2
 8005676:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800567a:	623b      	str	r3, [r7, #32]
 800567c:	2300      	movs	r3, #0
 800567e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005680:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005684:	4642      	mov	r2, r8
 8005686:	464b      	mov	r3, r9
 8005688:	f04f 0000 	mov.w	r0, #0
 800568c:	f04f 0100 	mov.w	r1, #0
 8005690:	0159      	lsls	r1, r3, #5
 8005692:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005696:	0150      	lsls	r0, r2, #5
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	4641      	mov	r1, r8
 800569e:	ebb2 0a01 	subs.w	sl, r2, r1
 80056a2:	4649      	mov	r1, r9
 80056a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	f04f 0300 	mov.w	r3, #0
 80056b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80056b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80056b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80056bc:	ebb2 040a 	subs.w	r4, r2, sl
 80056c0:	eb63 050b 	sbc.w	r5, r3, fp
 80056c4:	f04f 0200 	mov.w	r2, #0
 80056c8:	f04f 0300 	mov.w	r3, #0
 80056cc:	00eb      	lsls	r3, r5, #3
 80056ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056d2:	00e2      	lsls	r2, r4, #3
 80056d4:	4614      	mov	r4, r2
 80056d6:	461d      	mov	r5, r3
 80056d8:	4643      	mov	r3, r8
 80056da:	18e3      	adds	r3, r4, r3
 80056dc:	603b      	str	r3, [r7, #0]
 80056de:	464b      	mov	r3, r9
 80056e0:	eb45 0303 	adc.w	r3, r5, r3
 80056e4:	607b      	str	r3, [r7, #4]
 80056e6:	f04f 0200 	mov.w	r2, #0
 80056ea:	f04f 0300 	mov.w	r3, #0
 80056ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056f2:	4629      	mov	r1, r5
 80056f4:	028b      	lsls	r3, r1, #10
 80056f6:	4621      	mov	r1, r4
 80056f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056fc:	4621      	mov	r1, r4
 80056fe:	028a      	lsls	r2, r1, #10
 8005700:	4610      	mov	r0, r2
 8005702:	4619      	mov	r1, r3
 8005704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005706:	2200      	movs	r2, #0
 8005708:	61bb      	str	r3, [r7, #24]
 800570a:	61fa      	str	r2, [r7, #28]
 800570c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005710:	f7fb faea 	bl	8000ce8 <__aeabi_uldivmod>
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	4613      	mov	r3, r2
 800571a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800571c:	4b0b      	ldr	r3, [pc, #44]	@ (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	0c1b      	lsrs	r3, r3, #16
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	3301      	adds	r3, #1
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800572c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800572e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005730:	fbb2 f3f3 	udiv	r3, r2, r3
 8005734:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005736:	e002      	b.n	800573e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005738:	4b05      	ldr	r3, [pc, #20]	@ (8005750 <HAL_RCC_GetSysClockFreq+0x204>)
 800573a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800573c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800573e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005740:	4618      	mov	r0, r3
 8005742:	3750      	adds	r7, #80	@ 0x50
 8005744:	46bd      	mov	sp, r7
 8005746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800574a:	bf00      	nop
 800574c:	40023800 	.word	0x40023800
 8005750:	00f42400 	.word	0x00f42400
 8005754:	007a1200 	.word	0x007a1200

08005758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800575c:	4b03      	ldr	r3, [pc, #12]	@ (800576c <HAL_RCC_GetHCLKFreq+0x14>)
 800575e:	681b      	ldr	r3, [r3, #0]
}
 8005760:	4618      	mov	r0, r3
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	20000000 	.word	0x20000000

08005770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005774:	f7ff fff0 	bl	8005758 <HAL_RCC_GetHCLKFreq>
 8005778:	4602      	mov	r2, r0
 800577a:	4b05      	ldr	r3, [pc, #20]	@ (8005790 <HAL_RCC_GetPCLK1Freq+0x20>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	0a9b      	lsrs	r3, r3, #10
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	4903      	ldr	r1, [pc, #12]	@ (8005794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005786:	5ccb      	ldrb	r3, [r1, r3]
 8005788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800578c:	4618      	mov	r0, r3
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40023800 	.word	0x40023800
 8005794:	0800d5a4 	.word	0x0800d5a4

08005798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800579c:	f7ff ffdc 	bl	8005758 <HAL_RCC_GetHCLKFreq>
 80057a0:	4602      	mov	r2, r0
 80057a2:	4b05      	ldr	r3, [pc, #20]	@ (80057b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	0b5b      	lsrs	r3, r3, #13
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	4903      	ldr	r1, [pc, #12]	@ (80057bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80057ae:	5ccb      	ldrb	r3, [r1, r3]
 80057b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	40023800 	.word	0x40023800
 80057bc:	0800d5a4 	.word	0x0800d5a4

080057c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057c8:	2300      	movs	r3, #0
 80057ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d010      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80057e0:	4b87      	ldr	r3, [pc, #540]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80057e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057e6:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	4984      	ldr	r1, [pc, #528]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 80057fe:	2301      	movs	r3, #1
 8005800:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d010      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800580e:	4b7c      	ldr	r3, [pc, #496]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005810:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005814:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	4978      	ldr	r1, [pc, #480]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800581e:	4313      	orrs	r3, r2
 8005820:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 800582c:	2301      	movs	r3, #1
 800582e:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0308 	and.w	r3, r3, #8
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 8083 	beq.w	8005944 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800583e:	2300      	movs	r3, #0
 8005840:	60bb      	str	r3, [r7, #8]
 8005842:	4b6f      	ldr	r3, [pc, #444]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005846:	4a6e      	ldr	r2, [pc, #440]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800584c:	6413      	str	r3, [r2, #64]	@ 0x40
 800584e:	4b6c      	ldr	r3, [pc, #432]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005856:	60bb      	str	r3, [r7, #8]
 8005858:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800585a:	4b6a      	ldr	r3, [pc, #424]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a69      	ldr	r2, [pc, #420]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005860:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005864:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005866:	f7fe fd3b 	bl	80042e0 <HAL_GetTick>
 800586a:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800586c:	e008      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800586e:	f7fe fd37 	bl	80042e0 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d901      	bls.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e162      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005880:	4b60      	ldr	r3, [pc, #384]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005888:	2b00      	cmp	r3, #0
 800588a:	d0f0      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800588c:	4b5c      	ldr	r3, [pc, #368]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800588e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005890:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005894:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d02f      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d028      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058aa:	4b55      	ldr	r3, [pc, #340]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80058ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058b2:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058b4:	4b54      	ldr	r3, [pc, #336]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80058b6:	2201      	movs	r2, #1
 80058b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058ba:	4b53      	ldr	r3, [pc, #332]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80058bc:	2200      	movs	r2, #0
 80058be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80058c0:	4a4f      	ldr	r2, [pc, #316]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80058c6:	4b4e      	ldr	r3, [pc, #312]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80058c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d114      	bne.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80058d2:	f7fe fd05 	bl	80042e0 <HAL_GetTick>
 80058d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058d8:	e00a      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058da:	f7fe fd01 	bl	80042e0 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d901      	bls.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e12a      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058f0:	4b43      	ldr	r3, [pc, #268]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80058f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0ee      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005904:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005908:	d10d      	bne.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800590a:	4b3d      	ldr	r3, [pc, #244]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800591a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800591e:	4938      	ldr	r1, [pc, #224]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005920:	4313      	orrs	r3, r2
 8005922:	608b      	str	r3, [r1, #8]
 8005924:	e005      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8005926:	4b36      	ldr	r3, [pc, #216]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	4a35      	ldr	r2, [pc, #212]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800592c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005930:	6093      	str	r3, [r2, #8]
 8005932:	4b33      	ldr	r3, [pc, #204]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005934:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800593e:	4930      	ldr	r1, [pc, #192]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005940:	4313      	orrs	r3, r2
 8005942:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	2b00      	cmp	r3, #0
 800594e:	d004      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8005956:	4b2d      	ldr	r3, [pc, #180]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005958:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0310 	and.w	r3, r3, #16
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005966:	4b26      	ldr	r3, [pc, #152]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005968:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800596c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005974:	4922      	ldr	r1, [pc, #136]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005976:	4313      	orrs	r3, r2
 8005978:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0320 	and.w	r3, r3, #32
 8005984:	2b00      	cmp	r3, #0
 8005986:	d011      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005988:	4b1d      	ldr	r3, [pc, #116]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800598a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800598e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005996:	491a      	ldr	r1, [pc, #104]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005998:	4313      	orrs	r3, r2
 800599a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059a6:	d101      	bne.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 80059a8:	2301      	movs	r3, #1
 80059aa:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00a      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80059b8:	4b11      	ldr	r3, [pc, #68]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80059ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059be:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	490e      	ldr	r1, [pc, #56]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d004      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b80      	cmp	r3, #128	@ 0x80
 80059da:	f040 8091 	bne.w	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80059de:	4b0c      	ldr	r3, [pc, #48]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059e4:	f7fe fc7c 	bl	80042e0 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059ea:	e013      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80059ec:	f7fe fc78 	bl	80042e0 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d90c      	bls.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e0a3      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80059fe:	bf00      	nop
 8005a00:	40023800 	.word	0x40023800
 8005a04:	40007000 	.word	0x40007000
 8005a08:	42470e40 	.word	0x42470e40
 8005a0c:	424711e0 	.word	0x424711e0
 8005a10:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a14:	4b4e      	ldr	r3, [pc, #312]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1e5      	bne.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8005a20:	4a4c      	ldr	r2, [pc, #304]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a26:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d003      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d023      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d019      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d004      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a64:	d00e      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d019      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d115      	bne.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a82:	d110      	bne.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	019b      	lsls	r3, r3, #6
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	061b      	lsls	r3, r3, #24
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	071b      	lsls	r3, r3, #28
 8005a9e:	492c      	ldr	r1, [pc, #176]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d010      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	019b      	lsls	r3, r3, #6
 8005abc:	431a      	orrs	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	061b      	lsls	r3, r3, #24
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	071b      	lsls	r3, r3, #28
 8005acc:	4920      	ldr	r1, [pc, #128]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ad4:	4b20      	ldr	r3, [pc, #128]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ada:	f7fe fc01 	bl	80042e0 <HAL_GetTick>
 8005ade:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ae0:	e008      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005ae2:	f7fe fbfd 	bl	80042e0 <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d901      	bls.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e028      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005af4:	4b16      	ldr	r3, [pc, #88]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d0f0      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b0c:	4b10      	ldr	r3, [pc, #64]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b12:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1a:	490d      	ldr	r1, [pc, #52]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005b2e:	4b08      	ldr	r3, [pc, #32]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b34:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b3c:	4904      	ldr	r1, [pc, #16]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	40023800 	.word	0x40023800
 8005b54:	424710d8 	.word	0x424710d8
 8005b58:	42470068 	.word	0x42470068

08005b5c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e273      	b.n	8006056 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d075      	beq.n	8005c66 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005b7a:	4b88      	ldr	r3, [pc, #544]	@ (8005d9c <HAL_RCC_OscConfig+0x240>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f003 030c 	and.w	r3, r3, #12
 8005b82:	2b04      	cmp	r3, #4
 8005b84:	d00c      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b86:	4b85      	ldr	r3, [pc, #532]	@ (8005d9c <HAL_RCC_OscConfig+0x240>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005b8e:	2b08      	cmp	r3, #8
 8005b90:	d112      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b92:	4b82      	ldr	r3, [pc, #520]	@ (8005d9c <HAL_RCC_OscConfig+0x240>)
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b9e:	d10b      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ba0:	4b7e      	ldr	r3, [pc, #504]	@ (8005d9c <HAL_RCC_OscConfig+0x240>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d05b      	beq.n	8005c64 <HAL_RCC_OscConfig+0x108>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d157      	bne.n	8005c64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e24e      	b.n	8006056 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bc0:	d106      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x74>
 8005bc2:	4b76      	ldr	r3, [pc, #472]	@ (8005d9c <HAL_RCC_OscConfig+0x240>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a75      	ldr	r2, [pc, #468]	@ (8005d9c <HAL_RCC_OscConfig+0x240>)
 8005bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bcc:	6013      	str	r3, [r2, #0]
 8005bce:	e01d      	b.n	8005c0c <HAL_RCC_OscConfig+0xb0>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005bd8:	d10c      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x98>
 8005bda:	4b70      	ldr	r3, [pc, #448]	@ (8005d9c <HAL_RCC_OscConfig+0x240>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a6f      	ldr	r2, [pc, #444]	@ (8005d9c <HAL_RCC_OscConfig+0x240>)
 8005be0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005be4:	6013      	str	r3, [r2, #0]
 8005be6:	4b6d      	ldr	r3, [pc, #436]	@ (8005d9c <HAL_RCC_OscConfig+0x240>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a6c      	ldr	r2, [pc, #432]	@ (8005d9c <HAL_RCC_OscConfig+0x240>)
 8005bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bf0:	6013      	str	r3, [r2, #0]
 8005bf2:	e00b      	b.n	8005c0c <HAL_RCC_OscConfig+0xb0>
 8005bf4:	4b69      	ldr	r3, [pc, #420]	@ (8005d9c <HAL_RCC_OscConfig+0x240>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a68      	ldr	r2, [pc, #416]	@ (8005d9c <HAL_RCC_OscConfig+0x240>)
 8005bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bfe:	6013      	str	r3, [r2, #0]
 8005c00:	4b66      	ldr	r3, [pc, #408]	@ (8005d9c <HAL_RCC_OscConfig+0x240>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a65      	ldr	r2, [pc, #404]	@ (8005d9c <HAL_RCC_OscConfig+0x240>)
 8005c06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d013      	beq.n	8005c3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c14:	f7fe fb64 	bl	80042e0 <HAL_GetTick>
 8005c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c1a:	e008      	b.n	8005c2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c1c:	f7fe fb60 	bl	80042e0 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b64      	cmp	r3, #100	@ 0x64
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e213      	b.n	8006056 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c2e:	4b5b      	ldr	r3, [pc, #364]	@ (8005d9c <HAL_RCC_OscConfig+0x240>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0f0      	beq.n	8005c1c <HAL_RCC_OscConfig+0xc0>
 8005c3a:	e014      	b.n	8005c66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c3c:	f7fe fb50 	bl	80042e0 <HAL_GetTick>
 8005c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c42:	e008      	b.n	8005c56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c44:	f7fe fb4c 	bl	80042e0 <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	2b64      	cmp	r3, #100	@ 0x64
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e1ff      	b.n	8006056 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c56:	4b51      	ldr	r3, [pc, #324]	@ (8005d9c <HAL_RCC_OscConfig+0x240>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1f0      	bne.n	8005c44 <HAL_RCC_OscConfig+0xe8>
 8005c62:	e000      	b.n	8005c66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d063      	beq.n	8005d3a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005c72:	4b4a      	ldr	r3, [pc, #296]	@ (8005d9c <HAL_RCC_OscConfig+0x240>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f003 030c 	and.w	r3, r3, #12
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00b      	beq.n	8005c96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c7e:	4b47      	ldr	r3, [pc, #284]	@ (8005d9c <HAL_RCC_OscConfig+0x240>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005c86:	2b08      	cmp	r3, #8
 8005c88:	d11c      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c8a:	4b44      	ldr	r3, [pc, #272]	@ (8005d9c <HAL_RCC_OscConfig+0x240>)
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d116      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c96:	4b41      	ldr	r3, [pc, #260]	@ (8005d9c <HAL_RCC_OscConfig+0x240>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d005      	beq.n	8005cae <HAL_RCC_OscConfig+0x152>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d001      	beq.n	8005cae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e1d3      	b.n	8006056 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cae:	4b3b      	ldr	r3, [pc, #236]	@ (8005d9c <HAL_RCC_OscConfig+0x240>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	4937      	ldr	r1, [pc, #220]	@ (8005d9c <HAL_RCC_OscConfig+0x240>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cc2:	e03a      	b.n	8005d3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d020      	beq.n	8005d0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ccc:	4b34      	ldr	r3, [pc, #208]	@ (8005da0 <HAL_RCC_OscConfig+0x244>)
 8005cce:	2201      	movs	r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd2:	f7fe fb05 	bl	80042e0 <HAL_GetTick>
 8005cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cd8:	e008      	b.n	8005cec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cda:	f7fe fb01 	bl	80042e0 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d901      	bls.n	8005cec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e1b4      	b.n	8006056 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cec:	4b2b      	ldr	r3, [pc, #172]	@ (8005d9c <HAL_RCC_OscConfig+0x240>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d0f0      	beq.n	8005cda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cf8:	4b28      	ldr	r3, [pc, #160]	@ (8005d9c <HAL_RCC_OscConfig+0x240>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	00db      	lsls	r3, r3, #3
 8005d06:	4925      	ldr	r1, [pc, #148]	@ (8005d9c <HAL_RCC_OscConfig+0x240>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	600b      	str	r3, [r1, #0]
 8005d0c:	e015      	b.n	8005d3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d0e:	4b24      	ldr	r3, [pc, #144]	@ (8005da0 <HAL_RCC_OscConfig+0x244>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d14:	f7fe fae4 	bl	80042e0 <HAL_GetTick>
 8005d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d1a:	e008      	b.n	8005d2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d1c:	f7fe fae0 	bl	80042e0 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e193      	b.n	8006056 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8005d9c <HAL_RCC_OscConfig+0x240>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1f0      	bne.n	8005d1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0308 	and.w	r3, r3, #8
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d036      	beq.n	8005db4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d016      	beq.n	8005d7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d4e:	4b15      	ldr	r3, [pc, #84]	@ (8005da4 <HAL_RCC_OscConfig+0x248>)
 8005d50:	2201      	movs	r2, #1
 8005d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d54:	f7fe fac4 	bl	80042e0 <HAL_GetTick>
 8005d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d5a:	e008      	b.n	8005d6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d5c:	f7fe fac0 	bl	80042e0 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d901      	bls.n	8005d6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e173      	b.n	8006056 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d9c <HAL_RCC_OscConfig+0x240>)
 8005d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d0f0      	beq.n	8005d5c <HAL_RCC_OscConfig+0x200>
 8005d7a:	e01b      	b.n	8005db4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d7c:	4b09      	ldr	r3, [pc, #36]	@ (8005da4 <HAL_RCC_OscConfig+0x248>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d82:	f7fe faad 	bl	80042e0 <HAL_GetTick>
 8005d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d88:	e00e      	b.n	8005da8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d8a:	f7fe faa9 	bl	80042e0 <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d907      	bls.n	8005da8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e15c      	b.n	8006056 <HAL_RCC_OscConfig+0x4fa>
 8005d9c:	40023800 	.word	0x40023800
 8005da0:	42470000 	.word	0x42470000
 8005da4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005da8:	4b8a      	ldr	r3, [pc, #552]	@ (8005fd4 <HAL_RCC_OscConfig+0x478>)
 8005daa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1ea      	bne.n	8005d8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 8097 	beq.w	8005ef0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dc6:	4b83      	ldr	r3, [pc, #524]	@ (8005fd4 <HAL_RCC_OscConfig+0x478>)
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10f      	bne.n	8005df2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	60bb      	str	r3, [r7, #8]
 8005dd6:	4b7f      	ldr	r3, [pc, #508]	@ (8005fd4 <HAL_RCC_OscConfig+0x478>)
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dda:	4a7e      	ldr	r2, [pc, #504]	@ (8005fd4 <HAL_RCC_OscConfig+0x478>)
 8005ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005de2:	4b7c      	ldr	r3, [pc, #496]	@ (8005fd4 <HAL_RCC_OscConfig+0x478>)
 8005de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dea:	60bb      	str	r3, [r7, #8]
 8005dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dee:	2301      	movs	r3, #1
 8005df0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005df2:	4b79      	ldr	r3, [pc, #484]	@ (8005fd8 <HAL_RCC_OscConfig+0x47c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d118      	bne.n	8005e30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dfe:	4b76      	ldr	r3, [pc, #472]	@ (8005fd8 <HAL_RCC_OscConfig+0x47c>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a75      	ldr	r2, [pc, #468]	@ (8005fd8 <HAL_RCC_OscConfig+0x47c>)
 8005e04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e0a:	f7fe fa69 	bl	80042e0 <HAL_GetTick>
 8005e0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e10:	e008      	b.n	8005e24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e12:	f7fe fa65 	bl	80042e0 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d901      	bls.n	8005e24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e118      	b.n	8006056 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e24:	4b6c      	ldr	r3, [pc, #432]	@ (8005fd8 <HAL_RCC_OscConfig+0x47c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0f0      	beq.n	8005e12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d106      	bne.n	8005e46 <HAL_RCC_OscConfig+0x2ea>
 8005e38:	4b66      	ldr	r3, [pc, #408]	@ (8005fd4 <HAL_RCC_OscConfig+0x478>)
 8005e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e3c:	4a65      	ldr	r2, [pc, #404]	@ (8005fd4 <HAL_RCC_OscConfig+0x478>)
 8005e3e:	f043 0301 	orr.w	r3, r3, #1
 8005e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e44:	e01c      	b.n	8005e80 <HAL_RCC_OscConfig+0x324>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	2b05      	cmp	r3, #5
 8005e4c:	d10c      	bne.n	8005e68 <HAL_RCC_OscConfig+0x30c>
 8005e4e:	4b61      	ldr	r3, [pc, #388]	@ (8005fd4 <HAL_RCC_OscConfig+0x478>)
 8005e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e52:	4a60      	ldr	r2, [pc, #384]	@ (8005fd4 <HAL_RCC_OscConfig+0x478>)
 8005e54:	f043 0304 	orr.w	r3, r3, #4
 8005e58:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e5a:	4b5e      	ldr	r3, [pc, #376]	@ (8005fd4 <HAL_RCC_OscConfig+0x478>)
 8005e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e5e:	4a5d      	ldr	r2, [pc, #372]	@ (8005fd4 <HAL_RCC_OscConfig+0x478>)
 8005e60:	f043 0301 	orr.w	r3, r3, #1
 8005e64:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e66:	e00b      	b.n	8005e80 <HAL_RCC_OscConfig+0x324>
 8005e68:	4b5a      	ldr	r3, [pc, #360]	@ (8005fd4 <HAL_RCC_OscConfig+0x478>)
 8005e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e6c:	4a59      	ldr	r2, [pc, #356]	@ (8005fd4 <HAL_RCC_OscConfig+0x478>)
 8005e6e:	f023 0301 	bic.w	r3, r3, #1
 8005e72:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e74:	4b57      	ldr	r3, [pc, #348]	@ (8005fd4 <HAL_RCC_OscConfig+0x478>)
 8005e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e78:	4a56      	ldr	r2, [pc, #344]	@ (8005fd4 <HAL_RCC_OscConfig+0x478>)
 8005e7a:	f023 0304 	bic.w	r3, r3, #4
 8005e7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d015      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e88:	f7fe fa2a 	bl	80042e0 <HAL_GetTick>
 8005e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e8e:	e00a      	b.n	8005ea6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e90:	f7fe fa26 	bl	80042e0 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e0d7      	b.n	8006056 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ea6:	4b4b      	ldr	r3, [pc, #300]	@ (8005fd4 <HAL_RCC_OscConfig+0x478>)
 8005ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d0ee      	beq.n	8005e90 <HAL_RCC_OscConfig+0x334>
 8005eb2:	e014      	b.n	8005ede <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb4:	f7fe fa14 	bl	80042e0 <HAL_GetTick>
 8005eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eba:	e00a      	b.n	8005ed2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ebc:	f7fe fa10 	bl	80042e0 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e0c1      	b.n	8006056 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ed2:	4b40      	ldr	r3, [pc, #256]	@ (8005fd4 <HAL_RCC_OscConfig+0x478>)
 8005ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1ee      	bne.n	8005ebc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ede:	7dfb      	ldrb	r3, [r7, #23]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d105      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ee4:	4b3b      	ldr	r3, [pc, #236]	@ (8005fd4 <HAL_RCC_OscConfig+0x478>)
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee8:	4a3a      	ldr	r2, [pc, #232]	@ (8005fd4 <HAL_RCC_OscConfig+0x478>)
 8005eea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005eee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 80ad 	beq.w	8006054 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005efa:	4b36      	ldr	r3, [pc, #216]	@ (8005fd4 <HAL_RCC_OscConfig+0x478>)
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f003 030c 	and.w	r3, r3, #12
 8005f02:	2b08      	cmp	r3, #8
 8005f04:	d060      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d145      	bne.n	8005f9a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f0e:	4b33      	ldr	r3, [pc, #204]	@ (8005fdc <HAL_RCC_OscConfig+0x480>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f14:	f7fe f9e4 	bl	80042e0 <HAL_GetTick>
 8005f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f1a:	e008      	b.n	8005f2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f1c:	f7fe f9e0 	bl	80042e0 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e093      	b.n	8006056 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f2e:	4b29      	ldr	r3, [pc, #164]	@ (8005fd4 <HAL_RCC_OscConfig+0x478>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1f0      	bne.n	8005f1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	69da      	ldr	r2, [r3, #28]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	431a      	orrs	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f48:	019b      	lsls	r3, r3, #6
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f50:	085b      	lsrs	r3, r3, #1
 8005f52:	3b01      	subs	r3, #1
 8005f54:	041b      	lsls	r3, r3, #16
 8005f56:	431a      	orrs	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5c:	061b      	lsls	r3, r3, #24
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f64:	071b      	lsls	r3, r3, #28
 8005f66:	491b      	ldr	r1, [pc, #108]	@ (8005fd4 <HAL_RCC_OscConfig+0x478>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8005fdc <HAL_RCC_OscConfig+0x480>)
 8005f6e:	2201      	movs	r2, #1
 8005f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f72:	f7fe f9b5 	bl	80042e0 <HAL_GetTick>
 8005f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f78:	e008      	b.n	8005f8c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f7a:	f7fe f9b1 	bl	80042e0 <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d901      	bls.n	8005f8c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e064      	b.n	8006056 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f8c:	4b11      	ldr	r3, [pc, #68]	@ (8005fd4 <HAL_RCC_OscConfig+0x478>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d0f0      	beq.n	8005f7a <HAL_RCC_OscConfig+0x41e>
 8005f98:	e05c      	b.n	8006054 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f9a:	4b10      	ldr	r3, [pc, #64]	@ (8005fdc <HAL_RCC_OscConfig+0x480>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa0:	f7fe f99e 	bl	80042e0 <HAL_GetTick>
 8005fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fa6:	e008      	b.n	8005fba <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fa8:	f7fe f99a 	bl	80042e0 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e04d      	b.n	8006056 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fba:	4b06      	ldr	r3, [pc, #24]	@ (8005fd4 <HAL_RCC_OscConfig+0x478>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1f0      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x44c>
 8005fc6:	e045      	b.n	8006054 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d107      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e040      	b.n	8006056 <HAL_RCC_OscConfig+0x4fa>
 8005fd4:	40023800 	.word	0x40023800
 8005fd8:	40007000 	.word	0x40007000
 8005fdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8006060 <HAL_RCC_OscConfig+0x504>)
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d030      	beq.n	8006050 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d129      	bne.n	8006050 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006006:	429a      	cmp	r2, r3
 8006008:	d122      	bne.n	8006050 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006010:	4013      	ands	r3, r2
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006016:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006018:	4293      	cmp	r3, r2
 800601a:	d119      	bne.n	8006050 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006026:	085b      	lsrs	r3, r3, #1
 8006028:	3b01      	subs	r3, #1
 800602a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800602c:	429a      	cmp	r2, r3
 800602e:	d10f      	bne.n	8006050 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800603a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800603c:	429a      	cmp	r2, r3
 800603e:	d107      	bne.n	8006050 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800604a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800604c:	429a      	cmp	r2, r3
 800604e:	d001      	beq.n	8006054 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e000      	b.n	8006056 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3718      	adds	r7, #24
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	40023800 	.word	0x40023800

08006064 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e07b      	b.n	800616e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607a:	2b00      	cmp	r3, #0
 800607c:	d108      	bne.n	8006090 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006086:	d009      	beq.n	800609c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	61da      	str	r2, [r3, #28]
 800608e:	e005      	b.n	800609c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d106      	bne.n	80060bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7fd fa58 	bl	800356c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80060e4:	431a      	orrs	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	431a      	orrs	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800610c:	431a      	orrs	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006116:	431a      	orrs	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a1b      	ldr	r3, [r3, #32]
 800611c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006120:	ea42 0103 	orr.w	r1, r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006128:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	0c1b      	lsrs	r3, r3, #16
 800613a:	f003 0104 	and.w	r1, r3, #4
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006142:	f003 0210 	and.w	r2, r3, #16
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	69da      	ldr	r2, [r3, #28]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800615c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b082      	sub	sp, #8
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e041      	b.n	800620c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	d106      	bne.n	80061a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7fd fb63 	bl	8003868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2202      	movs	r2, #2
 80061a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	3304      	adds	r3, #4
 80061b2:	4619      	mov	r1, r3
 80061b4:	4610      	mov	r0, r2
 80061b6:	f000 fd8b 	bl	8006cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b01      	cmp	r3, #1
 8006226:	d001      	beq.n	800622c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e04e      	b.n	80062ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2202      	movs	r2, #2
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f042 0201 	orr.w	r2, r2, #1
 8006242:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a23      	ldr	r2, [pc, #140]	@ (80062d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d022      	beq.n	8006294 <HAL_TIM_Base_Start_IT+0x80>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006256:	d01d      	beq.n	8006294 <HAL_TIM_Base_Start_IT+0x80>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a1f      	ldr	r2, [pc, #124]	@ (80062dc <HAL_TIM_Base_Start_IT+0xc8>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d018      	beq.n	8006294 <HAL_TIM_Base_Start_IT+0x80>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a1e      	ldr	r2, [pc, #120]	@ (80062e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d013      	beq.n	8006294 <HAL_TIM_Base_Start_IT+0x80>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1c      	ldr	r2, [pc, #112]	@ (80062e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d00e      	beq.n	8006294 <HAL_TIM_Base_Start_IT+0x80>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a1b      	ldr	r2, [pc, #108]	@ (80062e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d009      	beq.n	8006294 <HAL_TIM_Base_Start_IT+0x80>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a19      	ldr	r2, [pc, #100]	@ (80062ec <HAL_TIM_Base_Start_IT+0xd8>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d004      	beq.n	8006294 <HAL_TIM_Base_Start_IT+0x80>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a18      	ldr	r2, [pc, #96]	@ (80062f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d111      	bne.n	80062b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 0307 	and.w	r3, r3, #7
 800629e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2b06      	cmp	r3, #6
 80062a4:	d010      	beq.n	80062c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f042 0201 	orr.w	r2, r2, #1
 80062b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b6:	e007      	b.n	80062c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f042 0201 	orr.w	r2, r2, #1
 80062c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	40010000 	.word	0x40010000
 80062dc:	40000400 	.word	0x40000400
 80062e0:	40000800 	.word	0x40000800
 80062e4:	40000c00 	.word	0x40000c00
 80062e8:	40010400 	.word	0x40010400
 80062ec:	40014000 	.word	0x40014000
 80062f0:	40001800 	.word	0x40001800

080062f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e041      	b.n	800638a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d106      	bne.n	8006320 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7fd fb1e 	bl	800395c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2202      	movs	r2, #2
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	3304      	adds	r3, #4
 8006330:	4619      	mov	r1, r3
 8006332:	4610      	mov	r0, r2
 8006334:	f000 fccc 	bl	8006cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
	...

08006394 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d109      	bne.n	80063b8 <HAL_TIM_PWM_Start+0x24>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	bf14      	ite	ne
 80063b0:	2301      	movne	r3, #1
 80063b2:	2300      	moveq	r3, #0
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	e022      	b.n	80063fe <HAL_TIM_PWM_Start+0x6a>
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	d109      	bne.n	80063d2 <HAL_TIM_PWM_Start+0x3e>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	bf14      	ite	ne
 80063ca:	2301      	movne	r3, #1
 80063cc:	2300      	moveq	r3, #0
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	e015      	b.n	80063fe <HAL_TIM_PWM_Start+0x6a>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d109      	bne.n	80063ec <HAL_TIM_PWM_Start+0x58>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	bf14      	ite	ne
 80063e4:	2301      	movne	r3, #1
 80063e6:	2300      	moveq	r3, #0
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	e008      	b.n	80063fe <HAL_TIM_PWM_Start+0x6a>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	bf14      	ite	ne
 80063f8:	2301      	movne	r3, #1
 80063fa:	2300      	moveq	r3, #0
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e07c      	b.n	8006500 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d104      	bne.n	8006416 <HAL_TIM_PWM_Start+0x82>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006414:	e013      	b.n	800643e <HAL_TIM_PWM_Start+0xaa>
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b04      	cmp	r3, #4
 800641a:	d104      	bne.n	8006426 <HAL_TIM_PWM_Start+0x92>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2202      	movs	r2, #2
 8006420:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006424:	e00b      	b.n	800643e <HAL_TIM_PWM_Start+0xaa>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b08      	cmp	r3, #8
 800642a:	d104      	bne.n	8006436 <HAL_TIM_PWM_Start+0xa2>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006434:	e003      	b.n	800643e <HAL_TIM_PWM_Start+0xaa>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2202      	movs	r2, #2
 800643a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2201      	movs	r2, #1
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	4618      	mov	r0, r3
 8006448:	f000 ff38 	bl	80072bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a2d      	ldr	r2, [pc, #180]	@ (8006508 <HAL_TIM_PWM_Start+0x174>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d004      	beq.n	8006460 <HAL_TIM_PWM_Start+0xcc>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a2c      	ldr	r2, [pc, #176]	@ (800650c <HAL_TIM_PWM_Start+0x178>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d101      	bne.n	8006464 <HAL_TIM_PWM_Start+0xd0>
 8006460:	2301      	movs	r3, #1
 8006462:	e000      	b.n	8006466 <HAL_TIM_PWM_Start+0xd2>
 8006464:	2300      	movs	r3, #0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d007      	beq.n	800647a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006478:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a22      	ldr	r2, [pc, #136]	@ (8006508 <HAL_TIM_PWM_Start+0x174>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d022      	beq.n	80064ca <HAL_TIM_PWM_Start+0x136>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800648c:	d01d      	beq.n	80064ca <HAL_TIM_PWM_Start+0x136>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a1f      	ldr	r2, [pc, #124]	@ (8006510 <HAL_TIM_PWM_Start+0x17c>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d018      	beq.n	80064ca <HAL_TIM_PWM_Start+0x136>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a1d      	ldr	r2, [pc, #116]	@ (8006514 <HAL_TIM_PWM_Start+0x180>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d013      	beq.n	80064ca <HAL_TIM_PWM_Start+0x136>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a1c      	ldr	r2, [pc, #112]	@ (8006518 <HAL_TIM_PWM_Start+0x184>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d00e      	beq.n	80064ca <HAL_TIM_PWM_Start+0x136>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a16      	ldr	r2, [pc, #88]	@ (800650c <HAL_TIM_PWM_Start+0x178>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d009      	beq.n	80064ca <HAL_TIM_PWM_Start+0x136>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a18      	ldr	r2, [pc, #96]	@ (800651c <HAL_TIM_PWM_Start+0x188>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d004      	beq.n	80064ca <HAL_TIM_PWM_Start+0x136>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a16      	ldr	r2, [pc, #88]	@ (8006520 <HAL_TIM_PWM_Start+0x18c>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d111      	bne.n	80064ee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f003 0307 	and.w	r3, r3, #7
 80064d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b06      	cmp	r3, #6
 80064da:	d010      	beq.n	80064fe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f042 0201 	orr.w	r2, r2, #1
 80064ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ec:	e007      	b.n	80064fe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f042 0201 	orr.w	r2, r2, #1
 80064fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	40010000 	.word	0x40010000
 800650c:	40010400 	.word	0x40010400
 8006510:	40000400 	.word	0x40000400
 8006514:	40000800 	.word	0x40000800
 8006518:	40000c00 	.word	0x40000c00
 800651c:	40014000 	.word	0x40014000
 8006520:	40001800 	.word	0x40001800

08006524 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e097      	b.n	8006668 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d106      	bne.n	8006552 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7fd f875 	bl	800363c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2202      	movs	r2, #2
 8006556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	6812      	ldr	r2, [r2, #0]
 8006564:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006568:	f023 0307 	bic.w	r3, r3, #7
 800656c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	3304      	adds	r3, #4
 8006576:	4619      	mov	r1, r3
 8006578:	4610      	mov	r0, r2
 800657a:	f000 fba9 	bl	8006cd0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	4313      	orrs	r3, r2
 800659e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065a6:	f023 0303 	bic.w	r3, r3, #3
 80065aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	689a      	ldr	r2, [r3, #8]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	021b      	lsls	r3, r3, #8
 80065b6:	4313      	orrs	r3, r2
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80065c4:	f023 030c 	bic.w	r3, r3, #12
 80065c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80065d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	69db      	ldr	r3, [r3, #28]
 80065de:	021b      	lsls	r3, r3, #8
 80065e0:	4313      	orrs	r3, r2
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	011a      	lsls	r2, r3, #4
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	031b      	lsls	r3, r3, #12
 80065f4:	4313      	orrs	r3, r2
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006602:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800660a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	4313      	orrs	r3, r2
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	4313      	orrs	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3718      	adds	r7, #24
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006680:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006688:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006690:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006698:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d110      	bne.n	80066c2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d102      	bne.n	80066ac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80066a6:	7b7b      	ldrb	r3, [r7, #13]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d001      	beq.n	80066b0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e069      	b.n	8006784 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2202      	movs	r2, #2
 80066bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066c0:	e031      	b.n	8006726 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2b04      	cmp	r3, #4
 80066c6:	d110      	bne.n	80066ea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80066c8:	7bbb      	ldrb	r3, [r7, #14]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d102      	bne.n	80066d4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80066ce:	7b3b      	ldrb	r3, [r7, #12]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d001      	beq.n	80066d8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e055      	b.n	8006784 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80066e8:	e01d      	b.n	8006726 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066ea:	7bfb      	ldrb	r3, [r7, #15]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d108      	bne.n	8006702 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80066f0:	7bbb      	ldrb	r3, [r7, #14]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d105      	bne.n	8006702 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066f6:	7b7b      	ldrb	r3, [r7, #13]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d102      	bne.n	8006702 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80066fc:	7b3b      	ldrb	r3, [r7, #12]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d001      	beq.n	8006706 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e03e      	b.n	8006784 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2202      	movs	r2, #2
 800670a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2202      	movs	r2, #2
 8006712:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2202      	movs	r2, #2
 800671a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2202      	movs	r2, #2
 8006722:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <HAL_TIM_Encoder_Start+0xc4>
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	2b04      	cmp	r3, #4
 8006730:	d008      	beq.n	8006744 <HAL_TIM_Encoder_Start+0xd4>
 8006732:	e00f      	b.n	8006754 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2201      	movs	r2, #1
 800673a:	2100      	movs	r1, #0
 800673c:	4618      	mov	r0, r3
 800673e:	f000 fdbd 	bl	80072bc <TIM_CCxChannelCmd>
      break;
 8006742:	e016      	b.n	8006772 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2201      	movs	r2, #1
 800674a:	2104      	movs	r1, #4
 800674c:	4618      	mov	r0, r3
 800674e:	f000 fdb5 	bl	80072bc <TIM_CCxChannelCmd>
      break;
 8006752:	e00e      	b.n	8006772 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2201      	movs	r2, #1
 800675a:	2100      	movs	r1, #0
 800675c:	4618      	mov	r0, r3
 800675e:	f000 fdad 	bl	80072bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2201      	movs	r2, #1
 8006768:	2104      	movs	r1, #4
 800676a:	4618      	mov	r0, r3
 800676c:	f000 fda6 	bl	80072bc <TIM_CCxChannelCmd>
      break;
 8006770:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f042 0201 	orr.w	r2, r2, #1
 8006780:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d020      	beq.n	80067f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d01b      	beq.n	80067f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f06f 0202 	mvn.w	r2, #2
 80067c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	f003 0303 	and.w	r3, r3, #3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fa5b 	bl	8006c92 <HAL_TIM_IC_CaptureCallback>
 80067dc:	e005      	b.n	80067ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fa4d 	bl	8006c7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fa5e 	bl	8006ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	f003 0304 	and.w	r3, r3, #4
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d020      	beq.n	800683c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f003 0304 	and.w	r3, r3, #4
 8006800:	2b00      	cmp	r3, #0
 8006802:	d01b      	beq.n	800683c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f06f 0204 	mvn.w	r2, #4
 800680c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2202      	movs	r2, #2
 8006812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fa35 	bl	8006c92 <HAL_TIM_IC_CaptureCallback>
 8006828:	e005      	b.n	8006836 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fa27 	bl	8006c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fa38 	bl	8006ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f003 0308 	and.w	r3, r3, #8
 8006842:	2b00      	cmp	r3, #0
 8006844:	d020      	beq.n	8006888 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f003 0308 	and.w	r3, r3, #8
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01b      	beq.n	8006888 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f06f 0208 	mvn.w	r2, #8
 8006858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2204      	movs	r2, #4
 800685e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	f003 0303 	and.w	r3, r3, #3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fa0f 	bl	8006c92 <HAL_TIM_IC_CaptureCallback>
 8006874:	e005      	b.n	8006882 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fa01 	bl	8006c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fa12 	bl	8006ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	f003 0310 	and.w	r3, r3, #16
 800688e:	2b00      	cmp	r3, #0
 8006890:	d020      	beq.n	80068d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f003 0310 	and.w	r3, r3, #16
 8006898:	2b00      	cmp	r3, #0
 800689a:	d01b      	beq.n	80068d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f06f 0210 	mvn.w	r2, #16
 80068a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2208      	movs	r2, #8
 80068aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f9e9 	bl	8006c92 <HAL_TIM_IC_CaptureCallback>
 80068c0:	e005      	b.n	80068ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f9db 	bl	8006c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f9ec 	bl	8006ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00c      	beq.n	80068f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f003 0301 	and.w	r3, r3, #1
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d007      	beq.n	80068f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f06f 0201 	mvn.w	r2, #1
 80068f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7fa fde8 	bl	80014c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00c      	beq.n	800691c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006908:	2b00      	cmp	r3, #0
 800690a:	d007      	beq.n	800691c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fdce 	bl	80074b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00c      	beq.n	8006940 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800692c:	2b00      	cmp	r3, #0
 800692e:	d007      	beq.n	8006940 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f9bd 	bl	8006cba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f003 0320 	and.w	r3, r3, #32
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00c      	beq.n	8006964 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f003 0320 	and.w	r3, r3, #32
 8006950:	2b00      	cmp	r3, #0
 8006952:	d007      	beq.n	8006964 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f06f 0220 	mvn.w	r2, #32
 800695c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fda0 	bl	80074a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006964:	bf00      	nop
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006978:	2300      	movs	r3, #0
 800697a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006982:	2b01      	cmp	r3, #1
 8006984:	d101      	bne.n	800698a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006986:	2302      	movs	r3, #2
 8006988:	e0ae      	b.n	8006ae8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2b0c      	cmp	r3, #12
 8006996:	f200 809f 	bhi.w	8006ad8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800699a:	a201      	add	r2, pc, #4	@ (adr r2, 80069a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800699c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a0:	080069d5 	.word	0x080069d5
 80069a4:	08006ad9 	.word	0x08006ad9
 80069a8:	08006ad9 	.word	0x08006ad9
 80069ac:	08006ad9 	.word	0x08006ad9
 80069b0:	08006a15 	.word	0x08006a15
 80069b4:	08006ad9 	.word	0x08006ad9
 80069b8:	08006ad9 	.word	0x08006ad9
 80069bc:	08006ad9 	.word	0x08006ad9
 80069c0:	08006a57 	.word	0x08006a57
 80069c4:	08006ad9 	.word	0x08006ad9
 80069c8:	08006ad9 	.word	0x08006ad9
 80069cc:	08006ad9 	.word	0x08006ad9
 80069d0:	08006a97 	.word	0x08006a97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68b9      	ldr	r1, [r7, #8]
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 fa24 	bl	8006e28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	699a      	ldr	r2, [r3, #24]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f042 0208 	orr.w	r2, r2, #8
 80069ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	699a      	ldr	r2, [r3, #24]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f022 0204 	bic.w	r2, r2, #4
 80069fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6999      	ldr	r1, [r3, #24]
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	691a      	ldr	r2, [r3, #16]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	619a      	str	r2, [r3, #24]
      break;
 8006a12:	e064      	b.n	8006ade <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68b9      	ldr	r1, [r7, #8]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 fa74 	bl	8006f08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	699a      	ldr	r2, [r3, #24]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	699a      	ldr	r2, [r3, #24]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6999      	ldr	r1, [r3, #24]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	021a      	lsls	r2, r3, #8
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	619a      	str	r2, [r3, #24]
      break;
 8006a54:	e043      	b.n	8006ade <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68b9      	ldr	r1, [r7, #8]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f000 fac9 	bl	8006ff4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	69da      	ldr	r2, [r3, #28]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f042 0208 	orr.w	r2, r2, #8
 8006a70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	69da      	ldr	r2, [r3, #28]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f022 0204 	bic.w	r2, r2, #4
 8006a80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69d9      	ldr	r1, [r3, #28]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	691a      	ldr	r2, [r3, #16]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	61da      	str	r2, [r3, #28]
      break;
 8006a94:	e023      	b.n	8006ade <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68b9      	ldr	r1, [r7, #8]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f000 fb1d 	bl	80070dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	69da      	ldr	r2, [r3, #28]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	69da      	ldr	r2, [r3, #28]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	69d9      	ldr	r1, [r3, #28]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	021a      	lsls	r2, r3, #8
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	61da      	str	r2, [r3, #28]
      break;
 8006ad6:	e002      	b.n	8006ade <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	75fb      	strb	r3, [r7, #23]
      break;
 8006adc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3718      	adds	r7, #24
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006afa:	2300      	movs	r3, #0
 8006afc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d101      	bne.n	8006b0c <HAL_TIM_ConfigClockSource+0x1c>
 8006b08:	2302      	movs	r3, #2
 8006b0a:	e0b4      	b.n	8006c76 <HAL_TIM_ConfigClockSource+0x186>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006b2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b44:	d03e      	beq.n	8006bc4 <HAL_TIM_ConfigClockSource+0xd4>
 8006b46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b4a:	f200 8087 	bhi.w	8006c5c <HAL_TIM_ConfigClockSource+0x16c>
 8006b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b52:	f000 8086 	beq.w	8006c62 <HAL_TIM_ConfigClockSource+0x172>
 8006b56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b5a:	d87f      	bhi.n	8006c5c <HAL_TIM_ConfigClockSource+0x16c>
 8006b5c:	2b70      	cmp	r3, #112	@ 0x70
 8006b5e:	d01a      	beq.n	8006b96 <HAL_TIM_ConfigClockSource+0xa6>
 8006b60:	2b70      	cmp	r3, #112	@ 0x70
 8006b62:	d87b      	bhi.n	8006c5c <HAL_TIM_ConfigClockSource+0x16c>
 8006b64:	2b60      	cmp	r3, #96	@ 0x60
 8006b66:	d050      	beq.n	8006c0a <HAL_TIM_ConfigClockSource+0x11a>
 8006b68:	2b60      	cmp	r3, #96	@ 0x60
 8006b6a:	d877      	bhi.n	8006c5c <HAL_TIM_ConfigClockSource+0x16c>
 8006b6c:	2b50      	cmp	r3, #80	@ 0x50
 8006b6e:	d03c      	beq.n	8006bea <HAL_TIM_ConfigClockSource+0xfa>
 8006b70:	2b50      	cmp	r3, #80	@ 0x50
 8006b72:	d873      	bhi.n	8006c5c <HAL_TIM_ConfigClockSource+0x16c>
 8006b74:	2b40      	cmp	r3, #64	@ 0x40
 8006b76:	d058      	beq.n	8006c2a <HAL_TIM_ConfigClockSource+0x13a>
 8006b78:	2b40      	cmp	r3, #64	@ 0x40
 8006b7a:	d86f      	bhi.n	8006c5c <HAL_TIM_ConfigClockSource+0x16c>
 8006b7c:	2b30      	cmp	r3, #48	@ 0x30
 8006b7e:	d064      	beq.n	8006c4a <HAL_TIM_ConfigClockSource+0x15a>
 8006b80:	2b30      	cmp	r3, #48	@ 0x30
 8006b82:	d86b      	bhi.n	8006c5c <HAL_TIM_ConfigClockSource+0x16c>
 8006b84:	2b20      	cmp	r3, #32
 8006b86:	d060      	beq.n	8006c4a <HAL_TIM_ConfigClockSource+0x15a>
 8006b88:	2b20      	cmp	r3, #32
 8006b8a:	d867      	bhi.n	8006c5c <HAL_TIM_ConfigClockSource+0x16c>
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d05c      	beq.n	8006c4a <HAL_TIM_ConfigClockSource+0x15a>
 8006b90:	2b10      	cmp	r3, #16
 8006b92:	d05a      	beq.n	8006c4a <HAL_TIM_ConfigClockSource+0x15a>
 8006b94:	e062      	b.n	8006c5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ba6:	f000 fb69 	bl	800727c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006bb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	609a      	str	r2, [r3, #8]
      break;
 8006bc2:	e04f      	b.n	8006c64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006bd4:	f000 fb52 	bl	800727c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689a      	ldr	r2, [r3, #8]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006be6:	609a      	str	r2, [r3, #8]
      break;
 8006be8:	e03c      	b.n	8006c64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	f000 fac6 	bl	8007188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2150      	movs	r1, #80	@ 0x50
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 fb1f 	bl	8007246 <TIM_ITRx_SetConfig>
      break;
 8006c08:	e02c      	b.n	8006c64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c16:	461a      	mov	r2, r3
 8006c18:	f000 fae5 	bl	80071e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2160      	movs	r1, #96	@ 0x60
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 fb0f 	bl	8007246 <TIM_ITRx_SetConfig>
      break;
 8006c28:	e01c      	b.n	8006c64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c36:	461a      	mov	r2, r3
 8006c38:	f000 faa6 	bl	8007188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2140      	movs	r1, #64	@ 0x40
 8006c42:	4618      	mov	r0, r3
 8006c44:	f000 faff 	bl	8007246 <TIM_ITRx_SetConfig>
      break;
 8006c48:	e00c      	b.n	8006c64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4619      	mov	r1, r3
 8006c54:	4610      	mov	r0, r2
 8006c56:	f000 faf6 	bl	8007246 <TIM_ITRx_SetConfig>
      break;
 8006c5a:	e003      	b.n	8006c64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c60:	e000      	b.n	8006c64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b083      	sub	sp, #12
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c86:	bf00      	nop
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c9a:	bf00      	nop
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b083      	sub	sp, #12
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cae:	bf00      	nop
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b083      	sub	sp, #12
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cc2:	bf00      	nop
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
	...

08006cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a46      	ldr	r2, [pc, #280]	@ (8006dfc <TIM_Base_SetConfig+0x12c>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d013      	beq.n	8006d10 <TIM_Base_SetConfig+0x40>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cee:	d00f      	beq.n	8006d10 <TIM_Base_SetConfig+0x40>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a43      	ldr	r2, [pc, #268]	@ (8006e00 <TIM_Base_SetConfig+0x130>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d00b      	beq.n	8006d10 <TIM_Base_SetConfig+0x40>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a42      	ldr	r2, [pc, #264]	@ (8006e04 <TIM_Base_SetConfig+0x134>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d007      	beq.n	8006d10 <TIM_Base_SetConfig+0x40>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a41      	ldr	r2, [pc, #260]	@ (8006e08 <TIM_Base_SetConfig+0x138>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d003      	beq.n	8006d10 <TIM_Base_SetConfig+0x40>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a40      	ldr	r2, [pc, #256]	@ (8006e0c <TIM_Base_SetConfig+0x13c>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d108      	bne.n	8006d22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a35      	ldr	r2, [pc, #212]	@ (8006dfc <TIM_Base_SetConfig+0x12c>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d02b      	beq.n	8006d82 <TIM_Base_SetConfig+0xb2>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d30:	d027      	beq.n	8006d82 <TIM_Base_SetConfig+0xb2>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a32      	ldr	r2, [pc, #200]	@ (8006e00 <TIM_Base_SetConfig+0x130>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d023      	beq.n	8006d82 <TIM_Base_SetConfig+0xb2>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a31      	ldr	r2, [pc, #196]	@ (8006e04 <TIM_Base_SetConfig+0x134>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d01f      	beq.n	8006d82 <TIM_Base_SetConfig+0xb2>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a30      	ldr	r2, [pc, #192]	@ (8006e08 <TIM_Base_SetConfig+0x138>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d01b      	beq.n	8006d82 <TIM_Base_SetConfig+0xb2>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a2f      	ldr	r2, [pc, #188]	@ (8006e0c <TIM_Base_SetConfig+0x13c>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d017      	beq.n	8006d82 <TIM_Base_SetConfig+0xb2>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a2e      	ldr	r2, [pc, #184]	@ (8006e10 <TIM_Base_SetConfig+0x140>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d013      	beq.n	8006d82 <TIM_Base_SetConfig+0xb2>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a2d      	ldr	r2, [pc, #180]	@ (8006e14 <TIM_Base_SetConfig+0x144>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d00f      	beq.n	8006d82 <TIM_Base_SetConfig+0xb2>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a2c      	ldr	r2, [pc, #176]	@ (8006e18 <TIM_Base_SetConfig+0x148>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d00b      	beq.n	8006d82 <TIM_Base_SetConfig+0xb2>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a2b      	ldr	r2, [pc, #172]	@ (8006e1c <TIM_Base_SetConfig+0x14c>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d007      	beq.n	8006d82 <TIM_Base_SetConfig+0xb2>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a2a      	ldr	r2, [pc, #168]	@ (8006e20 <TIM_Base_SetConfig+0x150>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d003      	beq.n	8006d82 <TIM_Base_SetConfig+0xb2>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a29      	ldr	r2, [pc, #164]	@ (8006e24 <TIM_Base_SetConfig+0x154>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d108      	bne.n	8006d94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	689a      	ldr	r2, [r3, #8]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a10      	ldr	r2, [pc, #64]	@ (8006dfc <TIM_Base_SetConfig+0x12c>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d003      	beq.n	8006dc8 <TIM_Base_SetConfig+0xf8>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a12      	ldr	r2, [pc, #72]	@ (8006e0c <TIM_Base_SetConfig+0x13c>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d103      	bne.n	8006dd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	691a      	ldr	r2, [r3, #16]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d105      	bne.n	8006dee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	f023 0201 	bic.w	r2, r3, #1
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	611a      	str	r2, [r3, #16]
  }
}
 8006dee:	bf00      	nop
 8006df0:	3714      	adds	r7, #20
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	40010000 	.word	0x40010000
 8006e00:	40000400 	.word	0x40000400
 8006e04:	40000800 	.word	0x40000800
 8006e08:	40000c00 	.word	0x40000c00
 8006e0c:	40010400 	.word	0x40010400
 8006e10:	40014000 	.word	0x40014000
 8006e14:	40014400 	.word	0x40014400
 8006e18:	40014800 	.word	0x40014800
 8006e1c:	40001800 	.word	0x40001800
 8006e20:	40001c00 	.word	0x40001c00
 8006e24:	40002000 	.word	0x40002000

08006e28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	f023 0201 	bic.w	r2, r3, #1
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 0303 	bic.w	r3, r3, #3
 8006e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f023 0302 	bic.w	r3, r3, #2
 8006e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a20      	ldr	r2, [pc, #128]	@ (8006f00 <TIM_OC1_SetConfig+0xd8>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d003      	beq.n	8006e8c <TIM_OC1_SetConfig+0x64>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a1f      	ldr	r2, [pc, #124]	@ (8006f04 <TIM_OC1_SetConfig+0xdc>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d10c      	bne.n	8006ea6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f023 0308 	bic.w	r3, r3, #8
 8006e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f023 0304 	bic.w	r3, r3, #4
 8006ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a15      	ldr	r2, [pc, #84]	@ (8006f00 <TIM_OC1_SetConfig+0xd8>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d003      	beq.n	8006eb6 <TIM_OC1_SetConfig+0x8e>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a14      	ldr	r2, [pc, #80]	@ (8006f04 <TIM_OC1_SetConfig+0xdc>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d111      	bne.n	8006eda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ebc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	697a      	ldr	r2, [r7, #20]
 8006ef2:	621a      	str	r2, [r3, #32]
}
 8006ef4:	bf00      	nop
 8006ef6:	371c      	adds	r7, #28
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	40010000 	.word	0x40010000
 8006f04:	40010400 	.word	0x40010400

08006f08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b087      	sub	sp, #28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a1b      	ldr	r3, [r3, #32]
 8006f1c:	f023 0210 	bic.w	r2, r3, #16
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	021b      	lsls	r3, r3, #8
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f023 0320 	bic.w	r3, r3, #32
 8006f52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	011b      	lsls	r3, r3, #4
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a22      	ldr	r2, [pc, #136]	@ (8006fec <TIM_OC2_SetConfig+0xe4>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d003      	beq.n	8006f70 <TIM_OC2_SetConfig+0x68>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a21      	ldr	r2, [pc, #132]	@ (8006ff0 <TIM_OC2_SetConfig+0xe8>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d10d      	bne.n	8006f8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	011b      	lsls	r3, r3, #4
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a17      	ldr	r2, [pc, #92]	@ (8006fec <TIM_OC2_SetConfig+0xe4>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d003      	beq.n	8006f9c <TIM_OC2_SetConfig+0x94>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a16      	ldr	r2, [pc, #88]	@ (8006ff0 <TIM_OC2_SetConfig+0xe8>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d113      	bne.n	8006fc4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006fa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006faa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	695b      	ldr	r3, [r3, #20]
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	621a      	str	r2, [r3, #32]
}
 8006fde:	bf00      	nop
 8006fe0:	371c      	adds	r7, #28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	40010000 	.word	0x40010000
 8006ff0:	40010400 	.word	0x40010400

08006ff4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b087      	sub	sp, #28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f023 0303 	bic.w	r3, r3, #3
 800702a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	4313      	orrs	r3, r2
 8007034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800703c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	021b      	lsls	r3, r3, #8
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	4313      	orrs	r3, r2
 8007048:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a21      	ldr	r2, [pc, #132]	@ (80070d4 <TIM_OC3_SetConfig+0xe0>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d003      	beq.n	800705a <TIM_OC3_SetConfig+0x66>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a20      	ldr	r2, [pc, #128]	@ (80070d8 <TIM_OC3_SetConfig+0xe4>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d10d      	bne.n	8007076 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007060:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	021b      	lsls	r3, r3, #8
 8007068:	697a      	ldr	r2, [r7, #20]
 800706a:	4313      	orrs	r3, r2
 800706c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007074:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a16      	ldr	r2, [pc, #88]	@ (80070d4 <TIM_OC3_SetConfig+0xe0>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d003      	beq.n	8007086 <TIM_OC3_SetConfig+0x92>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a15      	ldr	r2, [pc, #84]	@ (80070d8 <TIM_OC3_SetConfig+0xe4>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d113      	bne.n	80070ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800708c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007094:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	011b      	lsls	r3, r3, #4
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	4313      	orrs	r3, r2
 80070a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	011b      	lsls	r3, r3, #4
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	685a      	ldr	r2, [r3, #4]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	621a      	str	r2, [r3, #32]
}
 80070c8:	bf00      	nop
 80070ca:	371c      	adds	r7, #28
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr
 80070d4:	40010000 	.word	0x40010000
 80070d8:	40010400 	.word	0x40010400

080070dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070dc:	b480      	push	{r7}
 80070de:	b087      	sub	sp, #28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a1b      	ldr	r3, [r3, #32]
 80070f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800710a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	021b      	lsls	r3, r3, #8
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	4313      	orrs	r3, r2
 800711e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007126:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	031b      	lsls	r3, r3, #12
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	4313      	orrs	r3, r2
 8007132:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a12      	ldr	r2, [pc, #72]	@ (8007180 <TIM_OC4_SetConfig+0xa4>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d003      	beq.n	8007144 <TIM_OC4_SetConfig+0x68>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a11      	ldr	r2, [pc, #68]	@ (8007184 <TIM_OC4_SetConfig+0xa8>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d109      	bne.n	8007158 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800714a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	695b      	ldr	r3, [r3, #20]
 8007150:	019b      	lsls	r3, r3, #6
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	4313      	orrs	r3, r2
 8007156:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	621a      	str	r2, [r3, #32]
}
 8007172:	bf00      	nop
 8007174:	371c      	adds	r7, #28
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	40010000 	.word	0x40010000
 8007184:	40010400 	.word	0x40010400

08007188 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6a1b      	ldr	r3, [r3, #32]
 8007198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6a1b      	ldr	r3, [r3, #32]
 800719e:	f023 0201 	bic.w	r2, r3, #1
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	011b      	lsls	r3, r3, #4
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f023 030a 	bic.w	r3, r3, #10
 80071c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	621a      	str	r2, [r3, #32]
}
 80071da:	bf00      	nop
 80071dc:	371c      	adds	r7, #28
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b087      	sub	sp, #28
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	60f8      	str	r0, [r7, #12]
 80071ee:	60b9      	str	r1, [r7, #8]
 80071f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6a1b      	ldr	r3, [r3, #32]
 80071fc:	f023 0210 	bic.w	r2, r3, #16
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007210:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	031b      	lsls	r3, r3, #12
 8007216:	693a      	ldr	r2, [r7, #16]
 8007218:	4313      	orrs	r3, r2
 800721a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007222:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	011b      	lsls	r3, r3, #4
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	4313      	orrs	r3, r2
 800722c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	621a      	str	r2, [r3, #32]
}
 800723a:	bf00      	nop
 800723c:	371c      	adds	r7, #28
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007246:	b480      	push	{r7}
 8007248:	b085      	sub	sp, #20
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800725c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4313      	orrs	r3, r2
 8007264:	f043 0307 	orr.w	r3, r3, #7
 8007268:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	609a      	str	r2, [r3, #8]
}
 8007270:	bf00      	nop
 8007272:	3714      	adds	r7, #20
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800727c:	b480      	push	{r7}
 800727e:	b087      	sub	sp, #28
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
 8007288:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007296:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	021a      	lsls	r2, r3, #8
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	431a      	orrs	r2, r3
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	609a      	str	r2, [r3, #8]
}
 80072b0:	bf00      	nop
 80072b2:	371c      	adds	r7, #28
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072bc:	b480      	push	{r7}
 80072be:	b087      	sub	sp, #28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f003 031f 	and.w	r3, r3, #31
 80072ce:	2201      	movs	r2, #1
 80072d0:	fa02 f303 	lsl.w	r3, r2, r3
 80072d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6a1a      	ldr	r2, [r3, #32]
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	43db      	mvns	r3, r3
 80072de:	401a      	ands	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6a1a      	ldr	r2, [r3, #32]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	f003 031f 	and.w	r3, r3, #31
 80072ee:	6879      	ldr	r1, [r7, #4]
 80072f0:	fa01 f303 	lsl.w	r3, r1, r3
 80072f4:	431a      	orrs	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	621a      	str	r2, [r3, #32]
}
 80072fa:	bf00      	nop
 80072fc:	371c      	adds	r7, #28
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
	...

08007308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007318:	2b01      	cmp	r3, #1
 800731a:	d101      	bne.n	8007320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800731c:	2302      	movs	r3, #2
 800731e:	e05a      	b.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007346:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a21      	ldr	r2, [pc, #132]	@ (80073e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d022      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800736c:	d01d      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a1d      	ldr	r2, [pc, #116]	@ (80073e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d018      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a1b      	ldr	r2, [pc, #108]	@ (80073ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d013      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a1a      	ldr	r2, [pc, #104]	@ (80073f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d00e      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a18      	ldr	r2, [pc, #96]	@ (80073f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d009      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a17      	ldr	r2, [pc, #92]	@ (80073f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d004      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a15      	ldr	r2, [pc, #84]	@ (80073fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d10c      	bne.n	80073c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	40010000 	.word	0x40010000
 80073e8:	40000400 	.word	0x40000400
 80073ec:	40000800 	.word	0x40000800
 80073f0:	40000c00 	.word	0x40000c00
 80073f4:	40010400 	.word	0x40010400
 80073f8:	40014000 	.word	0x40014000
 80073fc:	40001800 	.word	0x40001800

08007400 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800740a:	2300      	movs	r3, #0
 800740c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007414:	2b01      	cmp	r3, #1
 8007416:	d101      	bne.n	800741c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007418:	2302      	movs	r3, #2
 800741a:	e03d      	b.n	8007498 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	4313      	orrs	r3, r2
 8007430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	4313      	orrs	r3, r2
 800743e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	4313      	orrs	r3, r2
 800744c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4313      	orrs	r3, r2
 800745a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	4313      	orrs	r3, r2
 8007468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	4313      	orrs	r3, r2
 8007476:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	4313      	orrs	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074ac:	bf00      	nop
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d101      	bne.n	80074de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e042      	b.n	8007564 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d106      	bne.n	80074f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7fc fabe 	bl	8003a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2224      	movs	r2, #36	@ 0x24
 80074fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68da      	ldr	r2, [r3, #12]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800750e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 ff37 	bl	8008384 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	691a      	ldr	r2, [r3, #16]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007524:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	695a      	ldr	r2, [r3, #20]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007534:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68da      	ldr	r2, [r3, #12]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007544:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2220      	movs	r2, #32
 8007550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2220      	movs	r2, #32
 8007558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b08c      	sub	sp, #48	@ 0x30
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	4613      	mov	r3, r2
 8007578:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b20      	cmp	r3, #32
 8007584:	d156      	bne.n	8007634 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d002      	beq.n	8007592 <HAL_UART_Transmit_DMA+0x26>
 800758c:	88fb      	ldrh	r3, [r7, #6]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e04f      	b.n	8007636 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8007596:	68ba      	ldr	r2, [r7, #8]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	88fa      	ldrh	r2, [r7, #6]
 80075a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	88fa      	ldrh	r2, [r7, #6]
 80075a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2221      	movs	r2, #33	@ 0x21
 80075b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ba:	4a21      	ldr	r2, [pc, #132]	@ (8007640 <HAL_UART_Transmit_DMA+0xd4>)
 80075bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c2:	4a20      	ldr	r2, [pc, #128]	@ (8007644 <HAL_UART_Transmit_DMA+0xd8>)
 80075c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ca:	4a1f      	ldr	r2, [pc, #124]	@ (8007648 <HAL_UART_Transmit_DMA+0xdc>)
 80075cc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d2:	2200      	movs	r2, #0
 80075d4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80075d6:	f107 0308 	add.w	r3, r7, #8
 80075da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80075e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075e2:	6819      	ldr	r1, [r3, #0]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	3304      	adds	r3, #4
 80075ea:	461a      	mov	r2, r3
 80075ec:	88fb      	ldrh	r3, [r7, #6]
 80075ee:	f7fd f867 	bl	80046c0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80075fa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3314      	adds	r3, #20
 8007602:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	e853 3f00 	ldrex	r3, [r3]
 800760a:	617b      	str	r3, [r7, #20]
   return(result);
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007612:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	3314      	adds	r3, #20
 800761a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800761c:	627a      	str	r2, [r7, #36]	@ 0x24
 800761e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007620:	6a39      	ldr	r1, [r7, #32]
 8007622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007624:	e841 2300 	strex	r3, r2, [r1]
 8007628:	61fb      	str	r3, [r7, #28]
   return(result);
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1e5      	bne.n	80075fc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	e000      	b.n	8007636 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007634:	2302      	movs	r3, #2
  }
}
 8007636:	4618      	mov	r0, r3
 8007638:	3730      	adds	r7, #48	@ 0x30
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	08007c11 	.word	0x08007c11
 8007644:	08007cab 	.word	0x08007cab
 8007648:	08007e2f 	.word	0x08007e2f

0800764c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	4613      	mov	r3, r2
 8007658:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b20      	cmp	r3, #32
 8007664:	d112      	bne.n	800768c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d002      	beq.n	8007672 <HAL_UART_Receive_DMA+0x26>
 800766c:	88fb      	ldrh	r3, [r7, #6]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e00b      	b.n	800768e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800767c:	88fb      	ldrh	r3, [r7, #6]
 800767e:	461a      	mov	r2, r3
 8007680:	68b9      	ldr	r1, [r7, #8]
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f000 fc1e 	bl	8007ec4 <UART_Start_Receive_DMA>
 8007688:	4603      	mov	r3, r0
 800768a:	e000      	b.n	800768e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800768c:	2302      	movs	r3, #2
  }
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
	...

08007698 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b0ba      	sub	sp, #232	@ 0xe8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80076be:	2300      	movs	r3, #0
 80076c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80076ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076ce:	f003 030f 	and.w	r3, r3, #15
 80076d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80076d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10f      	bne.n	80076fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076e2:	f003 0320 	and.w	r3, r3, #32
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d009      	beq.n	80076fe <HAL_UART_IRQHandler+0x66>
 80076ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076ee:	f003 0320 	and.w	r3, r3, #32
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fd85 	bl	8008206 <UART_Receive_IT>
      return;
 80076fc:	e25b      	b.n	8007bb6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80076fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 80de 	beq.w	80078c4 <HAL_UART_IRQHandler+0x22c>
 8007708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800770c:	f003 0301 	and.w	r3, r3, #1
 8007710:	2b00      	cmp	r3, #0
 8007712:	d106      	bne.n	8007722 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007718:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 80d1 	beq.w	80078c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00b      	beq.n	8007746 <HAL_UART_IRQHandler+0xae>
 800772e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007736:	2b00      	cmp	r3, #0
 8007738:	d005      	beq.n	8007746 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800773e:	f043 0201 	orr.w	r2, r3, #1
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800774a:	f003 0304 	and.w	r3, r3, #4
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00b      	beq.n	800776a <HAL_UART_IRQHandler+0xd2>
 8007752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b00      	cmp	r3, #0
 800775c:	d005      	beq.n	800776a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007762:	f043 0202 	orr.w	r2, r3, #2
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800776a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00b      	beq.n	800778e <HAL_UART_IRQHandler+0xf6>
 8007776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	2b00      	cmp	r3, #0
 8007780:	d005      	beq.n	800778e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007786:	f043 0204 	orr.w	r2, r3, #4
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800778e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007792:	f003 0308 	and.w	r3, r3, #8
 8007796:	2b00      	cmp	r3, #0
 8007798:	d011      	beq.n	80077be <HAL_UART_IRQHandler+0x126>
 800779a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800779e:	f003 0320 	and.w	r3, r3, #32
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d105      	bne.n	80077b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80077a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d005      	beq.n	80077be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077b6:	f043 0208 	orr.w	r2, r3, #8
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f000 81f2 	beq.w	8007bac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077cc:	f003 0320 	and.w	r3, r3, #32
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d008      	beq.n	80077e6 <HAL_UART_IRQHandler+0x14e>
 80077d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077d8:	f003 0320 	and.w	r3, r3, #32
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d002      	beq.n	80077e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fd10 	bl	8008206 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	695b      	ldr	r3, [r3, #20]
 80077ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077f0:	2b40      	cmp	r3, #64	@ 0x40
 80077f2:	bf0c      	ite	eq
 80077f4:	2301      	moveq	r3, #1
 80077f6:	2300      	movne	r3, #0
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007802:	f003 0308 	and.w	r3, r3, #8
 8007806:	2b00      	cmp	r3, #0
 8007808:	d103      	bne.n	8007812 <HAL_UART_IRQHandler+0x17a>
 800780a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800780e:	2b00      	cmp	r3, #0
 8007810:	d04f      	beq.n	80078b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fc18 	bl	8008048 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	695b      	ldr	r3, [r3, #20]
 800781e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007822:	2b40      	cmp	r3, #64	@ 0x40
 8007824:	d141      	bne.n	80078aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3314      	adds	r3, #20
 800782c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007830:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007834:	e853 3f00 	ldrex	r3, [r3]
 8007838:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800783c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007840:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007844:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3314      	adds	r3, #20
 800784e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007852:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007856:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800785e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007862:	e841 2300 	strex	r3, r2, [r1]
 8007866:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800786a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1d9      	bne.n	8007826 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007876:	2b00      	cmp	r3, #0
 8007878:	d013      	beq.n	80078a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800787e:	4a7e      	ldr	r2, [pc, #504]	@ (8007a78 <HAL_UART_IRQHandler+0x3e0>)
 8007880:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007886:	4618      	mov	r0, r3
 8007888:	f7fc ffe2 	bl	8004850 <HAL_DMA_Abort_IT>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d016      	beq.n	80078c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800789c:	4610      	mov	r0, r2
 800789e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a0:	e00e      	b.n	80078c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f99e 	bl	8007be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a8:	e00a      	b.n	80078c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f99a 	bl	8007be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b0:	e006      	b.n	80078c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f996 	bl	8007be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80078be:	e175      	b.n	8007bac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078c0:	bf00      	nop
    return;
 80078c2:	e173      	b.n	8007bac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	f040 814f 	bne.w	8007b6c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80078ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078d2:	f003 0310 	and.w	r3, r3, #16
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 8148 	beq.w	8007b6c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80078dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078e0:	f003 0310 	and.w	r3, r3, #16
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 8141 	beq.w	8007b6c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078ea:	2300      	movs	r3, #0
 80078ec:	60bb      	str	r3, [r7, #8]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	60bb      	str	r3, [r7, #8]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	60bb      	str	r3, [r7, #8]
 80078fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800790a:	2b40      	cmp	r3, #64	@ 0x40
 800790c:	f040 80b6 	bne.w	8007a7c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800791c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 8145 	beq.w	8007bb0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800792a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800792e:	429a      	cmp	r2, r3
 8007930:	f080 813e 	bcs.w	8007bb0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800793a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007940:	69db      	ldr	r3, [r3, #28]
 8007942:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007946:	f000 8088 	beq.w	8007a5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	330c      	adds	r3, #12
 8007950:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007954:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007958:	e853 3f00 	ldrex	r3, [r3]
 800795c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007960:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007964:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007968:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	330c      	adds	r3, #12
 8007972:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007976:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800797a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007982:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007986:	e841 2300 	strex	r3, r2, [r1]
 800798a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800798e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1d9      	bne.n	800794a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3314      	adds	r3, #20
 800799c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079a0:	e853 3f00 	ldrex	r3, [r3]
 80079a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80079a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80079a8:	f023 0301 	bic.w	r3, r3, #1
 80079ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3314      	adds	r3, #20
 80079b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80079ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80079be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80079c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80079c6:	e841 2300 	strex	r3, r2, [r1]
 80079ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80079cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1e1      	bne.n	8007996 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3314      	adds	r3, #20
 80079d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079dc:	e853 3f00 	ldrex	r3, [r3]
 80079e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80079e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3314      	adds	r3, #20
 80079f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80079f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80079f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80079fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80079fe:	e841 2300 	strex	r3, r2, [r1]
 8007a02:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007a04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1e3      	bne.n	80079d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	330c      	adds	r3, #12
 8007a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a22:	e853 3f00 	ldrex	r3, [r3]
 8007a26:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a2a:	f023 0310 	bic.w	r3, r3, #16
 8007a2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	330c      	adds	r3, #12
 8007a38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007a3c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007a3e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a40:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a44:	e841 2300 	strex	r3, r2, [r1]
 8007a48:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1e3      	bne.n	8007a18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7fc fe8b 	bl	8004770 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2202      	movs	r2, #2
 8007a5e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	1ad3      	subs	r3, r2, r3
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f8c1 	bl	8007bf8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a76:	e09b      	b.n	8007bb0 <HAL_UART_IRQHandler+0x518>
 8007a78:	0800810f 	.word	0x0800810f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f000 808e 	beq.w	8007bb4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007a98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 8089 	beq.w	8007bb4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	330c      	adds	r3, #12
 8007aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aac:	e853 3f00 	ldrex	r3, [r3]
 8007ab0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ab4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ab8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	330c      	adds	r3, #12
 8007ac2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007ac6:	647a      	str	r2, [r7, #68]	@ 0x44
 8007ac8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007acc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ace:	e841 2300 	strex	r3, r2, [r1]
 8007ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1e3      	bne.n	8007aa2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	3314      	adds	r3, #20
 8007ae0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae4:	e853 3f00 	ldrex	r3, [r3]
 8007ae8:	623b      	str	r3, [r7, #32]
   return(result);
 8007aea:	6a3b      	ldr	r3, [r7, #32]
 8007aec:	f023 0301 	bic.w	r3, r3, #1
 8007af0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	3314      	adds	r3, #20
 8007afa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007afe:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b06:	e841 2300 	strex	r3, r2, [r1]
 8007b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1e3      	bne.n	8007ada <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2220      	movs	r2, #32
 8007b16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	330c      	adds	r3, #12
 8007b26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	e853 3f00 	ldrex	r3, [r3]
 8007b2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f023 0310 	bic.w	r3, r3, #16
 8007b36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	330c      	adds	r3, #12
 8007b40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007b44:	61fa      	str	r2, [r7, #28]
 8007b46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b48:	69b9      	ldr	r1, [r7, #24]
 8007b4a:	69fa      	ldr	r2, [r7, #28]
 8007b4c:	e841 2300 	strex	r3, r2, [r1]
 8007b50:	617b      	str	r3, [r7, #20]
   return(result);
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1e3      	bne.n	8007b20 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f847 	bl	8007bf8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b6a:	e023      	b.n	8007bb4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d009      	beq.n	8007b8c <HAL_UART_IRQHandler+0x4f4>
 8007b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d003      	beq.n	8007b8c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 fad6 	bl	8008136 <UART_Transmit_IT>
    return;
 8007b8a:	e014      	b.n	8007bb6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00e      	beq.n	8007bb6 <HAL_UART_IRQHandler+0x51e>
 8007b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d008      	beq.n	8007bb6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 fb16 	bl	80081d6 <UART_EndTransmit_IT>
    return;
 8007baa:	e004      	b.n	8007bb6 <HAL_UART_IRQHandler+0x51e>
    return;
 8007bac:	bf00      	nop
 8007bae:	e002      	b.n	8007bb6 <HAL_UART_IRQHandler+0x51e>
      return;
 8007bb0:	bf00      	nop
 8007bb2:	e000      	b.n	8007bb6 <HAL_UART_IRQHandler+0x51e>
      return;
 8007bb4:	bf00      	nop
  }
}
 8007bb6:	37e8      	adds	r7, #232	@ 0xe8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b090      	sub	sp, #64	@ 0x40
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d137      	bne.n	8007c9c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c2e:	2200      	movs	r2, #0
 8007c30:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	3314      	adds	r3, #20
 8007c38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3c:	e853 3f00 	ldrex	r3, [r3]
 8007c40:	623b      	str	r3, [r7, #32]
   return(result);
 8007c42:	6a3b      	ldr	r3, [r7, #32]
 8007c44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	3314      	adds	r3, #20
 8007c50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c52:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c5a:	e841 2300 	strex	r3, r2, [r1]
 8007c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1e5      	bne.n	8007c32 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	330c      	adds	r3, #12
 8007c6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	e853 3f00 	ldrex	r3, [r3]
 8007c74:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	330c      	adds	r3, #12
 8007c84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c86:	61fa      	str	r2, [r7, #28]
 8007c88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8a:	69b9      	ldr	r1, [r7, #24]
 8007c8c:	69fa      	ldr	r2, [r7, #28]
 8007c8e:	e841 2300 	strex	r3, r2, [r1]
 8007c92:	617b      	str	r3, [r7, #20]
   return(result);
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1e5      	bne.n	8007c66 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c9a:	e002      	b.n	8007ca2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007c9c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007c9e:	f7f9 fd5b 	bl	8001758 <HAL_UART_TxCpltCallback>
}
 8007ca2:	bf00      	nop
 8007ca4:	3740      	adds	r7, #64	@ 0x40
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b084      	sub	sp, #16
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f7ff ff7f 	bl	8007bbc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cbe:	bf00      	nop
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b09c      	sub	sp, #112	@ 0x70
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cd2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d172      	bne.n	8007dc8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007ce2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ce8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	330c      	adds	r3, #12
 8007cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cf2:	e853 3f00 	ldrex	r3, [r3]
 8007cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007cf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cfa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cfe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	330c      	adds	r3, #12
 8007d06:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007d08:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007d0a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d10:	e841 2300 	strex	r3, r2, [r1]
 8007d14:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1e5      	bne.n	8007ce8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3314      	adds	r3, #20
 8007d22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d26:	e853 3f00 	ldrex	r3, [r3]
 8007d2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d2e:	f023 0301 	bic.w	r3, r3, #1
 8007d32:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	3314      	adds	r3, #20
 8007d3a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007d3c:	647a      	str	r2, [r7, #68]	@ 0x44
 8007d3e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d44:	e841 2300 	strex	r3, r2, [r1]
 8007d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d1e5      	bne.n	8007d1c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	3314      	adds	r3, #20
 8007d56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5a:	e853 3f00 	ldrex	r3, [r3]
 8007d5e:	623b      	str	r3, [r7, #32]
   return(result);
 8007d60:	6a3b      	ldr	r3, [r7, #32]
 8007d62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d66:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	3314      	adds	r3, #20
 8007d6e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007d70:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d78:	e841 2300 	strex	r3, r2, [r1]
 8007d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1e5      	bne.n	8007d50 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d86:	2220      	movs	r2, #32
 8007d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d119      	bne.n	8007dc8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	330c      	adds	r3, #12
 8007d9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	e853 3f00 	ldrex	r3, [r3]
 8007da2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f023 0310 	bic.w	r3, r3, #16
 8007daa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007dac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	330c      	adds	r3, #12
 8007db2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007db4:	61fa      	str	r2, [r7, #28]
 8007db6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db8:	69b9      	ldr	r1, [r7, #24]
 8007dba:	69fa      	ldr	r2, [r7, #28]
 8007dbc:	e841 2300 	strex	r3, r2, [r1]
 8007dc0:	617b      	str	r3, [r7, #20]
   return(result);
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1e5      	bne.n	8007d94 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007dca:	2200      	movs	r2, #0
 8007dcc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d106      	bne.n	8007de4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007dd8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007dde:	f7ff ff0b 	bl	8007bf8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007de2:	e002      	b.n	8007dea <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007de4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007de6:	f7f9 fcc1 	bl	800176c <HAL_UART_RxCpltCallback>
}
 8007dea:	bf00      	nop
 8007dec:	3770      	adds	r7, #112	@ 0x70
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b084      	sub	sp, #16
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dfe:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2201      	movs	r2, #1
 8007e04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d108      	bne.n	8007e20 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007e12:	085b      	lsrs	r3, r3, #1
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	4619      	mov	r1, r3
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f7ff feed 	bl	8007bf8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e1e:	e002      	b.n	8007e26 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f7ff fed5 	bl	8007bd0 <HAL_UART_RxHalfCpltCallback>
}
 8007e26:	bf00      	nop
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b084      	sub	sp, #16
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007e36:	2300      	movs	r3, #0
 8007e38:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e3e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	695b      	ldr	r3, [r3, #20]
 8007e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e4a:	2b80      	cmp	r3, #128	@ 0x80
 8007e4c:	bf0c      	ite	eq
 8007e4e:	2301      	moveq	r3, #1
 8007e50:	2300      	movne	r3, #0
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	2b21      	cmp	r3, #33	@ 0x21
 8007e60:	d108      	bne.n	8007e74 <UART_DMAError+0x46>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d005      	beq.n	8007e74 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007e6e:	68b8      	ldr	r0, [r7, #8]
 8007e70:	f000 f8c2 	bl	8007ff8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e7e:	2b40      	cmp	r3, #64	@ 0x40
 8007e80:	bf0c      	ite	eq
 8007e82:	2301      	moveq	r3, #1
 8007e84:	2300      	movne	r3, #0
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b22      	cmp	r3, #34	@ 0x22
 8007e94:	d108      	bne.n	8007ea8 <UART_DMAError+0x7a>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d005      	beq.n	8007ea8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007ea2:	68b8      	ldr	r0, [r7, #8]
 8007ea4:	f000 f8d0 	bl	8008048 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eac:	f043 0210 	orr.w	r2, r3, #16
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007eb4:	68b8      	ldr	r0, [r7, #8]
 8007eb6:	f7ff fe95 	bl	8007be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eba:	bf00      	nop
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
	...

08007ec4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b098      	sub	sp, #96	@ 0x60
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	88fa      	ldrh	r2, [r7, #6]
 8007edc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2222      	movs	r2, #34	@ 0x22
 8007ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ef0:	4a3e      	ldr	r2, [pc, #248]	@ (8007fec <UART_Start_Receive_DMA+0x128>)
 8007ef2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ef8:	4a3d      	ldr	r2, [pc, #244]	@ (8007ff0 <UART_Start_Receive_DMA+0x12c>)
 8007efa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f00:	4a3c      	ldr	r2, [pc, #240]	@ (8007ff4 <UART_Start_Receive_DMA+0x130>)
 8007f02:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f08:	2200      	movs	r2, #0
 8007f0a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007f0c:	f107 0308 	add.w	r3, r7, #8
 8007f10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	3304      	adds	r3, #4
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	88fb      	ldrh	r3, [r7, #6]
 8007f24:	f7fc fbcc 	bl	80046c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007f28:	2300      	movs	r3, #0
 8007f2a:	613b      	str	r3, [r7, #16]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	613b      	str	r3, [r7, #16]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	613b      	str	r3, [r7, #16]
 8007f3c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d019      	beq.n	8007f7a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	330c      	adds	r3, #12
 8007f4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f50:	e853 3f00 	ldrex	r3, [r3]
 8007f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	330c      	adds	r3, #12
 8007f64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f66:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007f68:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007f6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007f6e:	e841 2300 	strex	r3, r2, [r1]
 8007f72:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007f74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1e5      	bne.n	8007f46 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	3314      	adds	r3, #20
 8007f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f84:	e853 3f00 	ldrex	r3, [r3]
 8007f88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f8c:	f043 0301 	orr.w	r3, r3, #1
 8007f90:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	3314      	adds	r3, #20
 8007f98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007f9a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007f9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007fa0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007fa2:	e841 2300 	strex	r3, r2, [r1]
 8007fa6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1e5      	bne.n	8007f7a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3314      	adds	r3, #20
 8007fb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	e853 3f00 	ldrex	r3, [r3]
 8007fbc:	617b      	str	r3, [r7, #20]
   return(result);
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fc4:	653b      	str	r3, [r7, #80]	@ 0x50
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	3314      	adds	r3, #20
 8007fcc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007fce:	627a      	str	r2, [r7, #36]	@ 0x24
 8007fd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd2:	6a39      	ldr	r1, [r7, #32]
 8007fd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fd6:	e841 2300 	strex	r3, r2, [r1]
 8007fda:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1e5      	bne.n	8007fae <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3760      	adds	r7, #96	@ 0x60
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	08007cc7 	.word	0x08007cc7
 8007ff0:	08007df3 	.word	0x08007df3
 8007ff4:	08007e2f 	.word	0x08007e2f

08007ff8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b089      	sub	sp, #36	@ 0x24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	330c      	adds	r3, #12
 8008006:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	e853 3f00 	ldrex	r3, [r3]
 800800e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008016:	61fb      	str	r3, [r7, #28]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	330c      	adds	r3, #12
 800801e:	69fa      	ldr	r2, [r7, #28]
 8008020:	61ba      	str	r2, [r7, #24]
 8008022:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008024:	6979      	ldr	r1, [r7, #20]
 8008026:	69ba      	ldr	r2, [r7, #24]
 8008028:	e841 2300 	strex	r3, r2, [r1]
 800802c:	613b      	str	r3, [r7, #16]
   return(result);
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1e5      	bne.n	8008000 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2220      	movs	r2, #32
 8008038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800803c:	bf00      	nop
 800803e:	3724      	adds	r7, #36	@ 0x24
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008048:	b480      	push	{r7}
 800804a:	b095      	sub	sp, #84	@ 0x54
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	330c      	adds	r3, #12
 8008056:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800805a:	e853 3f00 	ldrex	r3, [r3]
 800805e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008062:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008066:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	330c      	adds	r3, #12
 800806e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008070:	643a      	str	r2, [r7, #64]	@ 0x40
 8008072:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008074:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008076:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008078:	e841 2300 	strex	r3, r2, [r1]
 800807c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800807e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1e5      	bne.n	8008050 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3314      	adds	r3, #20
 800808a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808c:	6a3b      	ldr	r3, [r7, #32]
 800808e:	e853 3f00 	ldrex	r3, [r3]
 8008092:	61fb      	str	r3, [r7, #28]
   return(result);
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	f023 0301 	bic.w	r3, r3, #1
 800809a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	3314      	adds	r3, #20
 80080a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80080a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080ac:	e841 2300 	strex	r3, r2, [r1]
 80080b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80080b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1e5      	bne.n	8008084 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d119      	bne.n	80080f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	330c      	adds	r3, #12
 80080c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	e853 3f00 	ldrex	r3, [r3]
 80080ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	f023 0310 	bic.w	r3, r3, #16
 80080d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	330c      	adds	r3, #12
 80080de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080e0:	61ba      	str	r2, [r7, #24]
 80080e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e4:	6979      	ldr	r1, [r7, #20]
 80080e6:	69ba      	ldr	r2, [r7, #24]
 80080e8:	e841 2300 	strex	r3, r2, [r1]
 80080ec:	613b      	str	r3, [r7, #16]
   return(result);
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1e5      	bne.n	80080c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2220      	movs	r2, #32
 80080f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008102:	bf00      	nop
 8008104:	3754      	adds	r7, #84	@ 0x54
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr

0800810e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b084      	sub	sp, #16
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800811a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f7ff fd5b 	bl	8007be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800812e:	bf00      	nop
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008136:	b480      	push	{r7}
 8008138:	b085      	sub	sp, #20
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b21      	cmp	r3, #33	@ 0x21
 8008148:	d13e      	bne.n	80081c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008152:	d114      	bne.n	800817e <UART_Transmit_IT+0x48>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d110      	bne.n	800817e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a1b      	ldr	r3, [r3, #32]
 8008160:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	881b      	ldrh	r3, [r3, #0]
 8008166:	461a      	mov	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008170:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a1b      	ldr	r3, [r3, #32]
 8008176:	1c9a      	adds	r2, r3, #2
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	621a      	str	r2, [r3, #32]
 800817c:	e008      	b.n	8008190 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	1c59      	adds	r1, r3, #1
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	6211      	str	r1, [r2, #32]
 8008188:	781a      	ldrb	r2, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008194:	b29b      	uxth	r3, r3
 8008196:	3b01      	subs	r3, #1
 8008198:	b29b      	uxth	r3, r3
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	4619      	mov	r1, r3
 800819e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10f      	bne.n	80081c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68da      	ldr	r2, [r3, #12]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80081b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68da      	ldr	r2, [r3, #12]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	e000      	b.n	80081ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80081c8:	2302      	movs	r3, #2
  }
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3714      	adds	r7, #20
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b082      	sub	sp, #8
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68da      	ldr	r2, [r3, #12]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2220      	movs	r2, #32
 80081f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f7f9 faae 	bl	8001758 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b08c      	sub	sp, #48	@ 0x30
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b22      	cmp	r3, #34	@ 0x22
 8008218:	f040 80ae 	bne.w	8008378 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008224:	d117      	bne.n	8008256 <UART_Receive_IT+0x50>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d113      	bne.n	8008256 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800822e:	2300      	movs	r3, #0
 8008230:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008236:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	b29b      	uxth	r3, r3
 8008240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008244:	b29a      	uxth	r2, r3
 8008246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008248:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800824e:	1c9a      	adds	r2, r3, #2
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	629a      	str	r2, [r3, #40]	@ 0x28
 8008254:	e026      	b.n	80082a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800825a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800825c:	2300      	movs	r3, #0
 800825e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008268:	d007      	beq.n	800827a <UART_Receive_IT+0x74>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10a      	bne.n	8008288 <UART_Receive_IT+0x82>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d106      	bne.n	8008288 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	b2da      	uxtb	r2, r3
 8008282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008284:	701a      	strb	r2, [r3, #0]
 8008286:	e008      	b.n	800829a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	b2db      	uxtb	r3, r3
 8008290:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008294:	b2da      	uxtb	r2, r3
 8008296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008298:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800829e:	1c5a      	adds	r2, r3, #1
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	3b01      	subs	r3, #1
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	4619      	mov	r1, r3
 80082b2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d15d      	bne.n	8008374 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68da      	ldr	r2, [r3, #12]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f022 0220 	bic.w	r2, r2, #32
 80082c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68da      	ldr	r2, [r3, #12]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80082d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	695a      	ldr	r2, [r3, #20]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f022 0201 	bic.w	r2, r2, #1
 80082e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2220      	movs	r2, #32
 80082ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d135      	bne.n	800836a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	330c      	adds	r3, #12
 800830a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	e853 3f00 	ldrex	r3, [r3]
 8008312:	613b      	str	r3, [r7, #16]
   return(result);
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	f023 0310 	bic.w	r3, r3, #16
 800831a:	627b      	str	r3, [r7, #36]	@ 0x24
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	330c      	adds	r3, #12
 8008322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008324:	623a      	str	r2, [r7, #32]
 8008326:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008328:	69f9      	ldr	r1, [r7, #28]
 800832a:	6a3a      	ldr	r2, [r7, #32]
 800832c:	e841 2300 	strex	r3, r2, [r1]
 8008330:	61bb      	str	r3, [r7, #24]
   return(result);
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1e5      	bne.n	8008304 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 0310 	and.w	r3, r3, #16
 8008342:	2b10      	cmp	r3, #16
 8008344:	d10a      	bne.n	800835c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008346:	2300      	movs	r3, #0
 8008348:	60fb      	str	r3, [r7, #12]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	60fb      	str	r3, [r7, #12]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	60fb      	str	r3, [r7, #12]
 800835a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008360:	4619      	mov	r1, r3
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7ff fc48 	bl	8007bf8 <HAL_UARTEx_RxEventCallback>
 8008368:	e002      	b.n	8008370 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f7f9 f9fe 	bl	800176c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008370:	2300      	movs	r3, #0
 8008372:	e002      	b.n	800837a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008374:	2300      	movs	r3, #0
 8008376:	e000      	b.n	800837a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008378:	2302      	movs	r3, #2
  }
}
 800837a:	4618      	mov	r0, r3
 800837c:	3730      	adds	r7, #48	@ 0x30
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
	...

08008384 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008388:	b0c0      	sub	sp, #256	@ 0x100
 800838a:	af00      	add	r7, sp, #0
 800838c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800839c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083a0:	68d9      	ldr	r1, [r3, #12]
 80083a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	ea40 0301 	orr.w	r3, r0, r1
 80083ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80083ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083b2:	689a      	ldr	r2, [r3, #8]
 80083b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	431a      	orrs	r2, r3
 80083bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083c0:	695b      	ldr	r3, [r3, #20]
 80083c2:	431a      	orrs	r2, r3
 80083c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083c8:	69db      	ldr	r3, [r3, #28]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80083d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80083dc:	f021 010c 	bic.w	r1, r1, #12
 80083e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80083ea:	430b      	orrs	r3, r1
 80083ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80083ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	695b      	ldr	r3, [r3, #20]
 80083f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80083fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083fe:	6999      	ldr	r1, [r3, #24]
 8008400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	ea40 0301 	orr.w	r3, r0, r1
 800840a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800840c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	4b8f      	ldr	r3, [pc, #572]	@ (8008650 <UART_SetConfig+0x2cc>)
 8008414:	429a      	cmp	r2, r3
 8008416:	d005      	beq.n	8008424 <UART_SetConfig+0xa0>
 8008418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	4b8d      	ldr	r3, [pc, #564]	@ (8008654 <UART_SetConfig+0x2d0>)
 8008420:	429a      	cmp	r2, r3
 8008422:	d104      	bne.n	800842e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008424:	f7fd f9b8 	bl	8005798 <HAL_RCC_GetPCLK2Freq>
 8008428:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800842c:	e003      	b.n	8008436 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800842e:	f7fd f99f 	bl	8005770 <HAL_RCC_GetPCLK1Freq>
 8008432:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800843a:	69db      	ldr	r3, [r3, #28]
 800843c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008440:	f040 810c 	bne.w	800865c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008448:	2200      	movs	r2, #0
 800844a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800844e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008452:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008456:	4622      	mov	r2, r4
 8008458:	462b      	mov	r3, r5
 800845a:	1891      	adds	r1, r2, r2
 800845c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800845e:	415b      	adcs	r3, r3
 8008460:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008462:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008466:	4621      	mov	r1, r4
 8008468:	eb12 0801 	adds.w	r8, r2, r1
 800846c:	4629      	mov	r1, r5
 800846e:	eb43 0901 	adc.w	r9, r3, r1
 8008472:	f04f 0200 	mov.w	r2, #0
 8008476:	f04f 0300 	mov.w	r3, #0
 800847a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800847e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008482:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008486:	4690      	mov	r8, r2
 8008488:	4699      	mov	r9, r3
 800848a:	4623      	mov	r3, r4
 800848c:	eb18 0303 	adds.w	r3, r8, r3
 8008490:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008494:	462b      	mov	r3, r5
 8008496:	eb49 0303 	adc.w	r3, r9, r3
 800849a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800849e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80084aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80084ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80084b2:	460b      	mov	r3, r1
 80084b4:	18db      	adds	r3, r3, r3
 80084b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80084b8:	4613      	mov	r3, r2
 80084ba:	eb42 0303 	adc.w	r3, r2, r3
 80084be:	657b      	str	r3, [r7, #84]	@ 0x54
 80084c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80084c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80084c8:	f7f8 fc0e 	bl	8000ce8 <__aeabi_uldivmod>
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	4b61      	ldr	r3, [pc, #388]	@ (8008658 <UART_SetConfig+0x2d4>)
 80084d2:	fba3 2302 	umull	r2, r3, r3, r2
 80084d6:	095b      	lsrs	r3, r3, #5
 80084d8:	011c      	lsls	r4, r3, #4
 80084da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084de:	2200      	movs	r2, #0
 80084e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80084e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80084e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80084ec:	4642      	mov	r2, r8
 80084ee:	464b      	mov	r3, r9
 80084f0:	1891      	adds	r1, r2, r2
 80084f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80084f4:	415b      	adcs	r3, r3
 80084f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80084fc:	4641      	mov	r1, r8
 80084fe:	eb12 0a01 	adds.w	sl, r2, r1
 8008502:	4649      	mov	r1, r9
 8008504:	eb43 0b01 	adc.w	fp, r3, r1
 8008508:	f04f 0200 	mov.w	r2, #0
 800850c:	f04f 0300 	mov.w	r3, #0
 8008510:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008514:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008518:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800851c:	4692      	mov	sl, r2
 800851e:	469b      	mov	fp, r3
 8008520:	4643      	mov	r3, r8
 8008522:	eb1a 0303 	adds.w	r3, sl, r3
 8008526:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800852a:	464b      	mov	r3, r9
 800852c:	eb4b 0303 	adc.w	r3, fp, r3
 8008530:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008540:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008544:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008548:	460b      	mov	r3, r1
 800854a:	18db      	adds	r3, r3, r3
 800854c:	643b      	str	r3, [r7, #64]	@ 0x40
 800854e:	4613      	mov	r3, r2
 8008550:	eb42 0303 	adc.w	r3, r2, r3
 8008554:	647b      	str	r3, [r7, #68]	@ 0x44
 8008556:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800855a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800855e:	f7f8 fbc3 	bl	8000ce8 <__aeabi_uldivmod>
 8008562:	4602      	mov	r2, r0
 8008564:	460b      	mov	r3, r1
 8008566:	4611      	mov	r1, r2
 8008568:	4b3b      	ldr	r3, [pc, #236]	@ (8008658 <UART_SetConfig+0x2d4>)
 800856a:	fba3 2301 	umull	r2, r3, r3, r1
 800856e:	095b      	lsrs	r3, r3, #5
 8008570:	2264      	movs	r2, #100	@ 0x64
 8008572:	fb02 f303 	mul.w	r3, r2, r3
 8008576:	1acb      	subs	r3, r1, r3
 8008578:	00db      	lsls	r3, r3, #3
 800857a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800857e:	4b36      	ldr	r3, [pc, #216]	@ (8008658 <UART_SetConfig+0x2d4>)
 8008580:	fba3 2302 	umull	r2, r3, r3, r2
 8008584:	095b      	lsrs	r3, r3, #5
 8008586:	005b      	lsls	r3, r3, #1
 8008588:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800858c:	441c      	add	r4, r3
 800858e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008592:	2200      	movs	r2, #0
 8008594:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008598:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800859c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80085a0:	4642      	mov	r2, r8
 80085a2:	464b      	mov	r3, r9
 80085a4:	1891      	adds	r1, r2, r2
 80085a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80085a8:	415b      	adcs	r3, r3
 80085aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80085b0:	4641      	mov	r1, r8
 80085b2:	1851      	adds	r1, r2, r1
 80085b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80085b6:	4649      	mov	r1, r9
 80085b8:	414b      	adcs	r3, r1
 80085ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80085bc:	f04f 0200 	mov.w	r2, #0
 80085c0:	f04f 0300 	mov.w	r3, #0
 80085c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80085c8:	4659      	mov	r1, fp
 80085ca:	00cb      	lsls	r3, r1, #3
 80085cc:	4651      	mov	r1, sl
 80085ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085d2:	4651      	mov	r1, sl
 80085d4:	00ca      	lsls	r2, r1, #3
 80085d6:	4610      	mov	r0, r2
 80085d8:	4619      	mov	r1, r3
 80085da:	4603      	mov	r3, r0
 80085dc:	4642      	mov	r2, r8
 80085de:	189b      	adds	r3, r3, r2
 80085e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80085e4:	464b      	mov	r3, r9
 80085e6:	460a      	mov	r2, r1
 80085e8:	eb42 0303 	adc.w	r3, r2, r3
 80085ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80085f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80085fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008600:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008604:	460b      	mov	r3, r1
 8008606:	18db      	adds	r3, r3, r3
 8008608:	62bb      	str	r3, [r7, #40]	@ 0x28
 800860a:	4613      	mov	r3, r2
 800860c:	eb42 0303 	adc.w	r3, r2, r3
 8008610:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008612:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008616:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800861a:	f7f8 fb65 	bl	8000ce8 <__aeabi_uldivmod>
 800861e:	4602      	mov	r2, r0
 8008620:	460b      	mov	r3, r1
 8008622:	4b0d      	ldr	r3, [pc, #52]	@ (8008658 <UART_SetConfig+0x2d4>)
 8008624:	fba3 1302 	umull	r1, r3, r3, r2
 8008628:	095b      	lsrs	r3, r3, #5
 800862a:	2164      	movs	r1, #100	@ 0x64
 800862c:	fb01 f303 	mul.w	r3, r1, r3
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	00db      	lsls	r3, r3, #3
 8008634:	3332      	adds	r3, #50	@ 0x32
 8008636:	4a08      	ldr	r2, [pc, #32]	@ (8008658 <UART_SetConfig+0x2d4>)
 8008638:	fba2 2303 	umull	r2, r3, r2, r3
 800863c:	095b      	lsrs	r3, r3, #5
 800863e:	f003 0207 	and.w	r2, r3, #7
 8008642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4422      	add	r2, r4
 800864a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800864c:	e106      	b.n	800885c <UART_SetConfig+0x4d8>
 800864e:	bf00      	nop
 8008650:	40011000 	.word	0x40011000
 8008654:	40011400 	.word	0x40011400
 8008658:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800865c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008660:	2200      	movs	r2, #0
 8008662:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008666:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800866a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800866e:	4642      	mov	r2, r8
 8008670:	464b      	mov	r3, r9
 8008672:	1891      	adds	r1, r2, r2
 8008674:	6239      	str	r1, [r7, #32]
 8008676:	415b      	adcs	r3, r3
 8008678:	627b      	str	r3, [r7, #36]	@ 0x24
 800867a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800867e:	4641      	mov	r1, r8
 8008680:	1854      	adds	r4, r2, r1
 8008682:	4649      	mov	r1, r9
 8008684:	eb43 0501 	adc.w	r5, r3, r1
 8008688:	f04f 0200 	mov.w	r2, #0
 800868c:	f04f 0300 	mov.w	r3, #0
 8008690:	00eb      	lsls	r3, r5, #3
 8008692:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008696:	00e2      	lsls	r2, r4, #3
 8008698:	4614      	mov	r4, r2
 800869a:	461d      	mov	r5, r3
 800869c:	4643      	mov	r3, r8
 800869e:	18e3      	adds	r3, r4, r3
 80086a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80086a4:	464b      	mov	r3, r9
 80086a6:	eb45 0303 	adc.w	r3, r5, r3
 80086aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80086ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80086ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80086be:	f04f 0200 	mov.w	r2, #0
 80086c2:	f04f 0300 	mov.w	r3, #0
 80086c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80086ca:	4629      	mov	r1, r5
 80086cc:	008b      	lsls	r3, r1, #2
 80086ce:	4621      	mov	r1, r4
 80086d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086d4:	4621      	mov	r1, r4
 80086d6:	008a      	lsls	r2, r1, #2
 80086d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80086dc:	f7f8 fb04 	bl	8000ce8 <__aeabi_uldivmod>
 80086e0:	4602      	mov	r2, r0
 80086e2:	460b      	mov	r3, r1
 80086e4:	4b60      	ldr	r3, [pc, #384]	@ (8008868 <UART_SetConfig+0x4e4>)
 80086e6:	fba3 2302 	umull	r2, r3, r3, r2
 80086ea:	095b      	lsrs	r3, r3, #5
 80086ec:	011c      	lsls	r4, r3, #4
 80086ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086f2:	2200      	movs	r2, #0
 80086f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80086f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80086fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008700:	4642      	mov	r2, r8
 8008702:	464b      	mov	r3, r9
 8008704:	1891      	adds	r1, r2, r2
 8008706:	61b9      	str	r1, [r7, #24]
 8008708:	415b      	adcs	r3, r3
 800870a:	61fb      	str	r3, [r7, #28]
 800870c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008710:	4641      	mov	r1, r8
 8008712:	1851      	adds	r1, r2, r1
 8008714:	6139      	str	r1, [r7, #16]
 8008716:	4649      	mov	r1, r9
 8008718:	414b      	adcs	r3, r1
 800871a:	617b      	str	r3, [r7, #20]
 800871c:	f04f 0200 	mov.w	r2, #0
 8008720:	f04f 0300 	mov.w	r3, #0
 8008724:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008728:	4659      	mov	r1, fp
 800872a:	00cb      	lsls	r3, r1, #3
 800872c:	4651      	mov	r1, sl
 800872e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008732:	4651      	mov	r1, sl
 8008734:	00ca      	lsls	r2, r1, #3
 8008736:	4610      	mov	r0, r2
 8008738:	4619      	mov	r1, r3
 800873a:	4603      	mov	r3, r0
 800873c:	4642      	mov	r2, r8
 800873e:	189b      	adds	r3, r3, r2
 8008740:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008744:	464b      	mov	r3, r9
 8008746:	460a      	mov	r2, r1
 8008748:	eb42 0303 	adc.w	r3, r2, r3
 800874c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	67bb      	str	r3, [r7, #120]	@ 0x78
 800875a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800875c:	f04f 0200 	mov.w	r2, #0
 8008760:	f04f 0300 	mov.w	r3, #0
 8008764:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008768:	4649      	mov	r1, r9
 800876a:	008b      	lsls	r3, r1, #2
 800876c:	4641      	mov	r1, r8
 800876e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008772:	4641      	mov	r1, r8
 8008774:	008a      	lsls	r2, r1, #2
 8008776:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800877a:	f7f8 fab5 	bl	8000ce8 <__aeabi_uldivmod>
 800877e:	4602      	mov	r2, r0
 8008780:	460b      	mov	r3, r1
 8008782:	4611      	mov	r1, r2
 8008784:	4b38      	ldr	r3, [pc, #224]	@ (8008868 <UART_SetConfig+0x4e4>)
 8008786:	fba3 2301 	umull	r2, r3, r3, r1
 800878a:	095b      	lsrs	r3, r3, #5
 800878c:	2264      	movs	r2, #100	@ 0x64
 800878e:	fb02 f303 	mul.w	r3, r2, r3
 8008792:	1acb      	subs	r3, r1, r3
 8008794:	011b      	lsls	r3, r3, #4
 8008796:	3332      	adds	r3, #50	@ 0x32
 8008798:	4a33      	ldr	r2, [pc, #204]	@ (8008868 <UART_SetConfig+0x4e4>)
 800879a:	fba2 2303 	umull	r2, r3, r2, r3
 800879e:	095b      	lsrs	r3, r3, #5
 80087a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80087a4:	441c      	add	r4, r3
 80087a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087aa:	2200      	movs	r2, #0
 80087ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80087ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80087b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80087b4:	4642      	mov	r2, r8
 80087b6:	464b      	mov	r3, r9
 80087b8:	1891      	adds	r1, r2, r2
 80087ba:	60b9      	str	r1, [r7, #8]
 80087bc:	415b      	adcs	r3, r3
 80087be:	60fb      	str	r3, [r7, #12]
 80087c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80087c4:	4641      	mov	r1, r8
 80087c6:	1851      	adds	r1, r2, r1
 80087c8:	6039      	str	r1, [r7, #0]
 80087ca:	4649      	mov	r1, r9
 80087cc:	414b      	adcs	r3, r1
 80087ce:	607b      	str	r3, [r7, #4]
 80087d0:	f04f 0200 	mov.w	r2, #0
 80087d4:	f04f 0300 	mov.w	r3, #0
 80087d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80087dc:	4659      	mov	r1, fp
 80087de:	00cb      	lsls	r3, r1, #3
 80087e0:	4651      	mov	r1, sl
 80087e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087e6:	4651      	mov	r1, sl
 80087e8:	00ca      	lsls	r2, r1, #3
 80087ea:	4610      	mov	r0, r2
 80087ec:	4619      	mov	r1, r3
 80087ee:	4603      	mov	r3, r0
 80087f0:	4642      	mov	r2, r8
 80087f2:	189b      	adds	r3, r3, r2
 80087f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80087f6:	464b      	mov	r3, r9
 80087f8:	460a      	mov	r2, r1
 80087fa:	eb42 0303 	adc.w	r3, r2, r3
 80087fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	663b      	str	r3, [r7, #96]	@ 0x60
 800880a:	667a      	str	r2, [r7, #100]	@ 0x64
 800880c:	f04f 0200 	mov.w	r2, #0
 8008810:	f04f 0300 	mov.w	r3, #0
 8008814:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008818:	4649      	mov	r1, r9
 800881a:	008b      	lsls	r3, r1, #2
 800881c:	4641      	mov	r1, r8
 800881e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008822:	4641      	mov	r1, r8
 8008824:	008a      	lsls	r2, r1, #2
 8008826:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800882a:	f7f8 fa5d 	bl	8000ce8 <__aeabi_uldivmod>
 800882e:	4602      	mov	r2, r0
 8008830:	460b      	mov	r3, r1
 8008832:	4b0d      	ldr	r3, [pc, #52]	@ (8008868 <UART_SetConfig+0x4e4>)
 8008834:	fba3 1302 	umull	r1, r3, r3, r2
 8008838:	095b      	lsrs	r3, r3, #5
 800883a:	2164      	movs	r1, #100	@ 0x64
 800883c:	fb01 f303 	mul.w	r3, r1, r3
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	011b      	lsls	r3, r3, #4
 8008844:	3332      	adds	r3, #50	@ 0x32
 8008846:	4a08      	ldr	r2, [pc, #32]	@ (8008868 <UART_SetConfig+0x4e4>)
 8008848:	fba2 2303 	umull	r2, r3, r2, r3
 800884c:	095b      	lsrs	r3, r3, #5
 800884e:	f003 020f 	and.w	r2, r3, #15
 8008852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4422      	add	r2, r4
 800885a:	609a      	str	r2, [r3, #8]
}
 800885c:	bf00      	nop
 800885e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008862:	46bd      	mov	sp, r7
 8008864:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008868:	51eb851f 	.word	0x51eb851f

0800886c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800886c:	b084      	sub	sp, #16
 800886e:	b580      	push	{r7, lr}
 8008870:	b084      	sub	sp, #16
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	f107 001c 	add.w	r0, r7, #28
 800887a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800887e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008882:	2b01      	cmp	r3, #1
 8008884:	d123      	bne.n	80088ce <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800888a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800889a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80088ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d105      	bne.n	80088c2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 fa9a 	bl	8008dfc <USB_CoreReset>
 80088c8:	4603      	mov	r3, r0
 80088ca:	73fb      	strb	r3, [r7, #15]
 80088cc:	e01b      	b.n	8008906 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 fa8e 	bl	8008dfc <USB_CoreReset>
 80088e0:	4603      	mov	r3, r0
 80088e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80088e4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d106      	bne.n	80088fa <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088f0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80088f8:	e005      	b.n	8008906 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008906:	7fbb      	ldrb	r3, [r7, #30]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d10b      	bne.n	8008924 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	f043 0206 	orr.w	r2, r3, #6
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	f043 0220 	orr.w	r2, r3, #32
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008924:	7bfb      	ldrb	r3, [r7, #15]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008930:	b004      	add	sp, #16
 8008932:	4770      	bx	lr

08008934 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	f023 0201 	bic.w	r2, r3, #1
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	370c      	adds	r7, #12
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr

08008956 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b084      	sub	sp, #16
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
 800895e:	460b      	mov	r3, r1
 8008960:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008962:	2300      	movs	r3, #0
 8008964:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008972:	78fb      	ldrb	r3, [r7, #3]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d115      	bne.n	80089a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008984:	200a      	movs	r0, #10
 8008986:	f7fb fcb7 	bl	80042f8 <HAL_Delay>
      ms += 10U;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	330a      	adds	r3, #10
 800898e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 fa25 	bl	8008de0 <USB_GetMode>
 8008996:	4603      	mov	r3, r0
 8008998:	2b01      	cmp	r3, #1
 800899a:	d01e      	beq.n	80089da <USB_SetCurrentMode+0x84>
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2bc7      	cmp	r3, #199	@ 0xc7
 80089a0:	d9f0      	bls.n	8008984 <USB_SetCurrentMode+0x2e>
 80089a2:	e01a      	b.n	80089da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80089a4:	78fb      	ldrb	r3, [r7, #3]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d115      	bne.n	80089d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80089b6:	200a      	movs	r0, #10
 80089b8:	f7fb fc9e 	bl	80042f8 <HAL_Delay>
      ms += 10U;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	330a      	adds	r3, #10
 80089c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fa0c 	bl	8008de0 <USB_GetMode>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d005      	beq.n	80089da <USB_SetCurrentMode+0x84>
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2bc7      	cmp	r3, #199	@ 0xc7
 80089d2:	d9f0      	bls.n	80089b6 <USB_SetCurrentMode+0x60>
 80089d4:	e001      	b.n	80089da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	e005      	b.n	80089e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2bc8      	cmp	r3, #200	@ 0xc8
 80089de:	d101      	bne.n	80089e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e000      	b.n	80089e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
	...

080089f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089f0:	b084      	sub	sp, #16
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b086      	sub	sp, #24
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
 80089fa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80089fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	613b      	str	r3, [r7, #16]
 8008a0e:	e009      	b.n	8008a24 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	3340      	adds	r3, #64	@ 0x40
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	4413      	add	r3, r2
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	3301      	adds	r3, #1
 8008a22:	613b      	str	r3, [r7, #16]
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	2b0e      	cmp	r3, #14
 8008a28:	d9f2      	bls.n	8008a10 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008a2a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d11c      	bne.n	8008a6c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	68fa      	ldr	r2, [r7, #12]
 8008a3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a40:	f043 0302 	orr.w	r3, r3, #2
 8008a44:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a4a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	601a      	str	r2, [r3, #0]
 8008a6a:	e005      	b.n	8008a78 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a70:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008a7e:	461a      	mov	r2, r3
 8008a80:	2300      	movs	r3, #0
 8008a82:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a84:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d10d      	bne.n	8008aa8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d104      	bne.n	8008a9e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008a94:	2100      	movs	r1, #0
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f968 	bl	8008d6c <USB_SetDevSpeed>
 8008a9c:	e008      	b.n	8008ab0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008a9e:	2101      	movs	r1, #1
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 f963 	bl	8008d6c <USB_SetDevSpeed>
 8008aa6:	e003      	b.n	8008ab0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008aa8:	2103      	movs	r1, #3
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 f95e 	bl	8008d6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008ab0:	2110      	movs	r1, #16
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f8fa 	bl	8008cac <USB_FlushTxFifo>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d001      	beq.n	8008ac2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f924 	bl	8008d10 <USB_FlushRxFifo>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ad8:	461a      	mov	r2, r3
 8008ada:	2300      	movs	r3, #0
 8008adc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008af0:	461a      	mov	r2, r3
 8008af2:	2300      	movs	r3, #0
 8008af4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008af6:	2300      	movs	r3, #0
 8008af8:	613b      	str	r3, [r7, #16]
 8008afa:	e043      	b.n	8008b84 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	015a      	lsls	r2, r3, #5
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	4413      	add	r3, r2
 8008b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b12:	d118      	bne.n	8008b46 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d10a      	bne.n	8008b30 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	015a      	lsls	r2, r3, #5
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	4413      	add	r3, r2
 8008b22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b26:	461a      	mov	r2, r3
 8008b28:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008b2c:	6013      	str	r3, [r2, #0]
 8008b2e:	e013      	b.n	8008b58 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	015a      	lsls	r2, r3, #5
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	4413      	add	r3, r2
 8008b38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008b42:	6013      	str	r3, [r2, #0]
 8008b44:	e008      	b.n	8008b58 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	015a      	lsls	r2, r3, #5
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b52:	461a      	mov	r2, r3
 8008b54:	2300      	movs	r3, #0
 8008b56:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	015a      	lsls	r2, r3, #5
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	4413      	add	r3, r2
 8008b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b64:	461a      	mov	r2, r3
 8008b66:	2300      	movs	r3, #0
 8008b68:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	015a      	lsls	r2, r3, #5
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	4413      	add	r3, r2
 8008b72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b76:	461a      	mov	r2, r3
 8008b78:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008b7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	3301      	adds	r3, #1
 8008b82:	613b      	str	r3, [r7, #16]
 8008b84:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008b88:	461a      	mov	r2, r3
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d3b5      	bcc.n	8008afc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b90:	2300      	movs	r3, #0
 8008b92:	613b      	str	r3, [r7, #16]
 8008b94:	e043      	b.n	8008c1e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	015a      	lsls	r2, r3, #5
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008bac:	d118      	bne.n	8008be0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d10a      	bne.n	8008bca <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	015a      	lsls	r2, r3, #5
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	4413      	add	r3, r2
 8008bbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008bc6:	6013      	str	r3, [r2, #0]
 8008bc8:	e013      	b.n	8008bf2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	015a      	lsls	r2, r3, #5
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008bdc:	6013      	str	r3, [r2, #0]
 8008bde:	e008      	b.n	8008bf2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	015a      	lsls	r2, r3, #5
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	4413      	add	r3, r2
 8008be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bec:	461a      	mov	r2, r3
 8008bee:	2300      	movs	r3, #0
 8008bf0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	015a      	lsls	r2, r3, #5
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bfe:	461a      	mov	r2, r3
 8008c00:	2300      	movs	r3, #0
 8008c02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	015a      	lsls	r2, r3, #5
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c10:	461a      	mov	r2, r3
 8008c12:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008c16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	613b      	str	r3, [r7, #16]
 8008c1e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008c22:	461a      	mov	r2, r3
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d3b5      	bcc.n	8008b96 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008c38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c3c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008c4a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008c4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d105      	bne.n	8008c60 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	f043 0210 	orr.w	r2, r3, #16
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	699a      	ldr	r2, [r3, #24]
 8008c64:	4b10      	ldr	r3, [pc, #64]	@ (8008ca8 <USB_DevInit+0x2b8>)
 8008c66:	4313      	orrs	r3, r2
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008c6c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d005      	beq.n	8008c80 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	f043 0208 	orr.w	r2, r3, #8
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008c80:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d107      	bne.n	8008c98 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008c90:	f043 0304 	orr.w	r3, r3, #4
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3718      	adds	r7, #24
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ca4:	b004      	add	sp, #16
 8008ca6:	4770      	bx	lr
 8008ca8:	803c3800 	.word	0x803c3800

08008cac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008cc6:	d901      	bls.n	8008ccc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008cc8:	2303      	movs	r3, #3
 8008cca:	e01b      	b.n	8008d04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	daf2      	bge.n	8008cba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	019b      	lsls	r3, r3, #6
 8008cdc:	f043 0220 	orr.w	r2, r3, #32
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008cf0:	d901      	bls.n	8008cf6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	e006      	b.n	8008d04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	f003 0320 	and.w	r3, r3, #32
 8008cfe:	2b20      	cmp	r3, #32
 8008d00:	d0f0      	beq.n	8008ce4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3714      	adds	r7, #20
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008d28:	d901      	bls.n	8008d2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	e018      	b.n	8008d60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	691b      	ldr	r3, [r3, #16]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	daf2      	bge.n	8008d1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008d36:	2300      	movs	r3, #0
 8008d38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2210      	movs	r2, #16
 8008d3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	3301      	adds	r3, #1
 8008d44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008d4c:	d901      	bls.n	8008d52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e006      	b.n	8008d60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	691b      	ldr	r3, [r3, #16]
 8008d56:	f003 0310 	and.w	r3, r3, #16
 8008d5a:	2b10      	cmp	r3, #16
 8008d5c:	d0f0      	beq.n	8008d40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	460b      	mov	r3, r1
 8008d76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	78fb      	ldrb	r3, [r7, #3]
 8008d86:	68f9      	ldr	r1, [r7, #12]
 8008d88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3714      	adds	r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d9e:	b480      	push	{r7}
 8008da0:	b085      	sub	sp, #20
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008db8:	f023 0303 	bic.w	r3, r3, #3
 8008dbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008dcc:	f043 0302 	orr.w	r3, r3, #2
 8008dd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3714      	adds	r7, #20
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	695b      	ldr	r3, [r3, #20]
 8008dec:	f003 0301 	and.w	r3, r3, #1
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e04:	2300      	movs	r3, #0
 8008e06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e14:	d901      	bls.n	8008e1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e01b      	b.n	8008e52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	daf2      	bge.n	8008e08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e22:	2300      	movs	r3, #0
 8008e24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	f043 0201 	orr.w	r2, r3, #1
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	3301      	adds	r3, #1
 8008e36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e3e:	d901      	bls.n	8008e44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008e40:	2303      	movs	r3, #3
 8008e42:	e006      	b.n	8008e52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	f003 0301 	and.w	r3, r3, #1
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d0f0      	beq.n	8008e32 <USB_CoreReset+0x36>

  return HAL_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3714      	adds	r7, #20
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr

08008e5e <atoi>:
 8008e5e:	220a      	movs	r2, #10
 8008e60:	2100      	movs	r1, #0
 8008e62:	f000 be8b 	b.w	8009b7c <strtol>

08008e66 <sulp>:
 8008e66:	b570      	push	{r4, r5, r6, lr}
 8008e68:	4604      	mov	r4, r0
 8008e6a:	460d      	mov	r5, r1
 8008e6c:	ec45 4b10 	vmov	d0, r4, r5
 8008e70:	4616      	mov	r6, r2
 8008e72:	f003 fb51 	bl	800c518 <__ulp>
 8008e76:	ec51 0b10 	vmov	r0, r1, d0
 8008e7a:	b17e      	cbz	r6, 8008e9c <sulp+0x36>
 8008e7c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008e80:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	dd09      	ble.n	8008e9c <sulp+0x36>
 8008e88:	051b      	lsls	r3, r3, #20
 8008e8a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008e8e:	2400      	movs	r4, #0
 8008e90:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008e94:	4622      	mov	r2, r4
 8008e96:	462b      	mov	r3, r5
 8008e98:	f7f7 fbde 	bl	8000658 <__aeabi_dmul>
 8008e9c:	ec41 0b10 	vmov	d0, r0, r1
 8008ea0:	bd70      	pop	{r4, r5, r6, pc}
 8008ea2:	0000      	movs	r0, r0
 8008ea4:	0000      	movs	r0, r0
	...

08008ea8 <_strtod_l>:
 8008ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eac:	b09f      	sub	sp, #124	@ 0x7c
 8008eae:	460c      	mov	r4, r1
 8008eb0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	921a      	str	r2, [sp, #104]	@ 0x68
 8008eb6:	9005      	str	r0, [sp, #20]
 8008eb8:	f04f 0a00 	mov.w	sl, #0
 8008ebc:	f04f 0b00 	mov.w	fp, #0
 8008ec0:	460a      	mov	r2, r1
 8008ec2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ec4:	7811      	ldrb	r1, [r2, #0]
 8008ec6:	292b      	cmp	r1, #43	@ 0x2b
 8008ec8:	d04a      	beq.n	8008f60 <_strtod_l+0xb8>
 8008eca:	d838      	bhi.n	8008f3e <_strtod_l+0x96>
 8008ecc:	290d      	cmp	r1, #13
 8008ece:	d832      	bhi.n	8008f36 <_strtod_l+0x8e>
 8008ed0:	2908      	cmp	r1, #8
 8008ed2:	d832      	bhi.n	8008f3a <_strtod_l+0x92>
 8008ed4:	2900      	cmp	r1, #0
 8008ed6:	d03b      	beq.n	8008f50 <_strtod_l+0xa8>
 8008ed8:	2200      	movs	r2, #0
 8008eda:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008edc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008ede:	782a      	ldrb	r2, [r5, #0]
 8008ee0:	2a30      	cmp	r2, #48	@ 0x30
 8008ee2:	f040 80b3 	bne.w	800904c <_strtod_l+0x1a4>
 8008ee6:	786a      	ldrb	r2, [r5, #1]
 8008ee8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008eec:	2a58      	cmp	r2, #88	@ 0x58
 8008eee:	d16e      	bne.n	8008fce <_strtod_l+0x126>
 8008ef0:	9302      	str	r3, [sp, #8]
 8008ef2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ef4:	9301      	str	r3, [sp, #4]
 8008ef6:	ab1a      	add	r3, sp, #104	@ 0x68
 8008ef8:	9300      	str	r3, [sp, #0]
 8008efa:	4a8e      	ldr	r2, [pc, #568]	@ (8009134 <_strtod_l+0x28c>)
 8008efc:	9805      	ldr	r0, [sp, #20]
 8008efe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008f00:	a919      	add	r1, sp, #100	@ 0x64
 8008f02:	f002 fbfb 	bl	800b6fc <__gethex>
 8008f06:	f010 060f 	ands.w	r6, r0, #15
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	d005      	beq.n	8008f1a <_strtod_l+0x72>
 8008f0e:	2e06      	cmp	r6, #6
 8008f10:	d128      	bne.n	8008f64 <_strtod_l+0xbc>
 8008f12:	3501      	adds	r5, #1
 8008f14:	2300      	movs	r3, #0
 8008f16:	9519      	str	r5, [sp, #100]	@ 0x64
 8008f18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f040 858e 	bne.w	8009a3e <_strtod_l+0xb96>
 8008f22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f24:	b1cb      	cbz	r3, 8008f5a <_strtod_l+0xb2>
 8008f26:	4652      	mov	r2, sl
 8008f28:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008f2c:	ec43 2b10 	vmov	d0, r2, r3
 8008f30:	b01f      	add	sp, #124	@ 0x7c
 8008f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f36:	2920      	cmp	r1, #32
 8008f38:	d1ce      	bne.n	8008ed8 <_strtod_l+0x30>
 8008f3a:	3201      	adds	r2, #1
 8008f3c:	e7c1      	b.n	8008ec2 <_strtod_l+0x1a>
 8008f3e:	292d      	cmp	r1, #45	@ 0x2d
 8008f40:	d1ca      	bne.n	8008ed8 <_strtod_l+0x30>
 8008f42:	2101      	movs	r1, #1
 8008f44:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008f46:	1c51      	adds	r1, r2, #1
 8008f48:	9119      	str	r1, [sp, #100]	@ 0x64
 8008f4a:	7852      	ldrb	r2, [r2, #1]
 8008f4c:	2a00      	cmp	r2, #0
 8008f4e:	d1c5      	bne.n	8008edc <_strtod_l+0x34>
 8008f50:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008f52:	9419      	str	r4, [sp, #100]	@ 0x64
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f040 8570 	bne.w	8009a3a <_strtod_l+0xb92>
 8008f5a:	4652      	mov	r2, sl
 8008f5c:	465b      	mov	r3, fp
 8008f5e:	e7e5      	b.n	8008f2c <_strtod_l+0x84>
 8008f60:	2100      	movs	r1, #0
 8008f62:	e7ef      	b.n	8008f44 <_strtod_l+0x9c>
 8008f64:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008f66:	b13a      	cbz	r2, 8008f78 <_strtod_l+0xd0>
 8008f68:	2135      	movs	r1, #53	@ 0x35
 8008f6a:	a81c      	add	r0, sp, #112	@ 0x70
 8008f6c:	f003 fbce 	bl	800c70c <__copybits>
 8008f70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f72:	9805      	ldr	r0, [sp, #20]
 8008f74:	f002 ff9c 	bl	800beb0 <_Bfree>
 8008f78:	3e01      	subs	r6, #1
 8008f7a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008f7c:	2e04      	cmp	r6, #4
 8008f7e:	d806      	bhi.n	8008f8e <_strtod_l+0xe6>
 8008f80:	e8df f006 	tbb	[pc, r6]
 8008f84:	201d0314 	.word	0x201d0314
 8008f88:	14          	.byte	0x14
 8008f89:	00          	.byte	0x00
 8008f8a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008f8e:	05e1      	lsls	r1, r4, #23
 8008f90:	bf48      	it	mi
 8008f92:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008f96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008f9a:	0d1b      	lsrs	r3, r3, #20
 8008f9c:	051b      	lsls	r3, r3, #20
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1bb      	bne.n	8008f1a <_strtod_l+0x72>
 8008fa2:	f001 fc47 	bl	800a834 <__errno>
 8008fa6:	2322      	movs	r3, #34	@ 0x22
 8008fa8:	6003      	str	r3, [r0, #0]
 8008faa:	e7b6      	b.n	8008f1a <_strtod_l+0x72>
 8008fac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008fb0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008fb4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008fb8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008fbc:	e7e7      	b.n	8008f8e <_strtod_l+0xe6>
 8008fbe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800913c <_strtod_l+0x294>
 8008fc2:	e7e4      	b.n	8008f8e <_strtod_l+0xe6>
 8008fc4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008fc8:	f04f 3aff 	mov.w	sl, #4294967295
 8008fcc:	e7df      	b.n	8008f8e <_strtod_l+0xe6>
 8008fce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008fd0:	1c5a      	adds	r2, r3, #1
 8008fd2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008fd4:	785b      	ldrb	r3, [r3, #1]
 8008fd6:	2b30      	cmp	r3, #48	@ 0x30
 8008fd8:	d0f9      	beq.n	8008fce <_strtod_l+0x126>
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d09d      	beq.n	8008f1a <_strtod_l+0x72>
 8008fde:	2301      	movs	r3, #1
 8008fe0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fe2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008fe4:	930c      	str	r3, [sp, #48]	@ 0x30
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	9308      	str	r3, [sp, #32]
 8008fea:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fec:	461f      	mov	r7, r3
 8008fee:	220a      	movs	r2, #10
 8008ff0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008ff2:	7805      	ldrb	r5, [r0, #0]
 8008ff4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008ff8:	b2d9      	uxtb	r1, r3
 8008ffa:	2909      	cmp	r1, #9
 8008ffc:	d928      	bls.n	8009050 <_strtod_l+0x1a8>
 8008ffe:	494e      	ldr	r1, [pc, #312]	@ (8009138 <_strtod_l+0x290>)
 8009000:	2201      	movs	r2, #1
 8009002:	f001 fb5e 	bl	800a6c2 <strncmp>
 8009006:	2800      	cmp	r0, #0
 8009008:	d032      	beq.n	8009070 <_strtod_l+0x1c8>
 800900a:	2000      	movs	r0, #0
 800900c:	462a      	mov	r2, r5
 800900e:	4681      	mov	r9, r0
 8009010:	463d      	mov	r5, r7
 8009012:	4603      	mov	r3, r0
 8009014:	2a65      	cmp	r2, #101	@ 0x65
 8009016:	d001      	beq.n	800901c <_strtod_l+0x174>
 8009018:	2a45      	cmp	r2, #69	@ 0x45
 800901a:	d114      	bne.n	8009046 <_strtod_l+0x19e>
 800901c:	b91d      	cbnz	r5, 8009026 <_strtod_l+0x17e>
 800901e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009020:	4302      	orrs	r2, r0
 8009022:	d095      	beq.n	8008f50 <_strtod_l+0xa8>
 8009024:	2500      	movs	r5, #0
 8009026:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009028:	1c62      	adds	r2, r4, #1
 800902a:	9219      	str	r2, [sp, #100]	@ 0x64
 800902c:	7862      	ldrb	r2, [r4, #1]
 800902e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009030:	d077      	beq.n	8009122 <_strtod_l+0x27a>
 8009032:	2a2d      	cmp	r2, #45	@ 0x2d
 8009034:	d07b      	beq.n	800912e <_strtod_l+0x286>
 8009036:	f04f 0c00 	mov.w	ip, #0
 800903a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800903e:	2909      	cmp	r1, #9
 8009040:	f240 8082 	bls.w	8009148 <_strtod_l+0x2a0>
 8009044:	9419      	str	r4, [sp, #100]	@ 0x64
 8009046:	f04f 0800 	mov.w	r8, #0
 800904a:	e0a2      	b.n	8009192 <_strtod_l+0x2ea>
 800904c:	2300      	movs	r3, #0
 800904e:	e7c7      	b.n	8008fe0 <_strtod_l+0x138>
 8009050:	2f08      	cmp	r7, #8
 8009052:	bfd5      	itete	le
 8009054:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009056:	9908      	ldrgt	r1, [sp, #32]
 8009058:	fb02 3301 	mlale	r3, r2, r1, r3
 800905c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009060:	f100 0001 	add.w	r0, r0, #1
 8009064:	bfd4      	ite	le
 8009066:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009068:	9308      	strgt	r3, [sp, #32]
 800906a:	3701      	adds	r7, #1
 800906c:	9019      	str	r0, [sp, #100]	@ 0x64
 800906e:	e7bf      	b.n	8008ff0 <_strtod_l+0x148>
 8009070:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009072:	1c5a      	adds	r2, r3, #1
 8009074:	9219      	str	r2, [sp, #100]	@ 0x64
 8009076:	785a      	ldrb	r2, [r3, #1]
 8009078:	b37f      	cbz	r7, 80090da <_strtod_l+0x232>
 800907a:	4681      	mov	r9, r0
 800907c:	463d      	mov	r5, r7
 800907e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009082:	2b09      	cmp	r3, #9
 8009084:	d912      	bls.n	80090ac <_strtod_l+0x204>
 8009086:	2301      	movs	r3, #1
 8009088:	e7c4      	b.n	8009014 <_strtod_l+0x16c>
 800908a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800908c:	1c5a      	adds	r2, r3, #1
 800908e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009090:	785a      	ldrb	r2, [r3, #1]
 8009092:	3001      	adds	r0, #1
 8009094:	2a30      	cmp	r2, #48	@ 0x30
 8009096:	d0f8      	beq.n	800908a <_strtod_l+0x1e2>
 8009098:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800909c:	2b08      	cmp	r3, #8
 800909e:	f200 84d3 	bhi.w	8009a48 <_strtod_l+0xba0>
 80090a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80090a6:	4681      	mov	r9, r0
 80090a8:	2000      	movs	r0, #0
 80090aa:	4605      	mov	r5, r0
 80090ac:	3a30      	subs	r2, #48	@ 0x30
 80090ae:	f100 0301 	add.w	r3, r0, #1
 80090b2:	d02a      	beq.n	800910a <_strtod_l+0x262>
 80090b4:	4499      	add	r9, r3
 80090b6:	eb00 0c05 	add.w	ip, r0, r5
 80090ba:	462b      	mov	r3, r5
 80090bc:	210a      	movs	r1, #10
 80090be:	4563      	cmp	r3, ip
 80090c0:	d10d      	bne.n	80090de <_strtod_l+0x236>
 80090c2:	1c69      	adds	r1, r5, #1
 80090c4:	4401      	add	r1, r0
 80090c6:	4428      	add	r0, r5
 80090c8:	2808      	cmp	r0, #8
 80090ca:	dc16      	bgt.n	80090fa <_strtod_l+0x252>
 80090cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80090ce:	230a      	movs	r3, #10
 80090d0:	fb03 2300 	mla	r3, r3, r0, r2
 80090d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80090d6:	2300      	movs	r3, #0
 80090d8:	e018      	b.n	800910c <_strtod_l+0x264>
 80090da:	4638      	mov	r0, r7
 80090dc:	e7da      	b.n	8009094 <_strtod_l+0x1ec>
 80090de:	2b08      	cmp	r3, #8
 80090e0:	f103 0301 	add.w	r3, r3, #1
 80090e4:	dc03      	bgt.n	80090ee <_strtod_l+0x246>
 80090e6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80090e8:	434e      	muls	r6, r1
 80090ea:	960a      	str	r6, [sp, #40]	@ 0x28
 80090ec:	e7e7      	b.n	80090be <_strtod_l+0x216>
 80090ee:	2b10      	cmp	r3, #16
 80090f0:	bfde      	ittt	le
 80090f2:	9e08      	ldrle	r6, [sp, #32]
 80090f4:	434e      	mulle	r6, r1
 80090f6:	9608      	strle	r6, [sp, #32]
 80090f8:	e7e1      	b.n	80090be <_strtod_l+0x216>
 80090fa:	280f      	cmp	r0, #15
 80090fc:	dceb      	bgt.n	80090d6 <_strtod_l+0x22e>
 80090fe:	9808      	ldr	r0, [sp, #32]
 8009100:	230a      	movs	r3, #10
 8009102:	fb03 2300 	mla	r3, r3, r0, r2
 8009106:	9308      	str	r3, [sp, #32]
 8009108:	e7e5      	b.n	80090d6 <_strtod_l+0x22e>
 800910a:	4629      	mov	r1, r5
 800910c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800910e:	1c50      	adds	r0, r2, #1
 8009110:	9019      	str	r0, [sp, #100]	@ 0x64
 8009112:	7852      	ldrb	r2, [r2, #1]
 8009114:	4618      	mov	r0, r3
 8009116:	460d      	mov	r5, r1
 8009118:	e7b1      	b.n	800907e <_strtod_l+0x1d6>
 800911a:	f04f 0900 	mov.w	r9, #0
 800911e:	2301      	movs	r3, #1
 8009120:	e77d      	b.n	800901e <_strtod_l+0x176>
 8009122:	f04f 0c00 	mov.w	ip, #0
 8009126:	1ca2      	adds	r2, r4, #2
 8009128:	9219      	str	r2, [sp, #100]	@ 0x64
 800912a:	78a2      	ldrb	r2, [r4, #2]
 800912c:	e785      	b.n	800903a <_strtod_l+0x192>
 800912e:	f04f 0c01 	mov.w	ip, #1
 8009132:	e7f8      	b.n	8009126 <_strtod_l+0x27e>
 8009134:	0800d5cc 	.word	0x0800d5cc
 8009138:	0800d5b4 	.word	0x0800d5b4
 800913c:	7ff00000 	.word	0x7ff00000
 8009140:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009142:	1c51      	adds	r1, r2, #1
 8009144:	9119      	str	r1, [sp, #100]	@ 0x64
 8009146:	7852      	ldrb	r2, [r2, #1]
 8009148:	2a30      	cmp	r2, #48	@ 0x30
 800914a:	d0f9      	beq.n	8009140 <_strtod_l+0x298>
 800914c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009150:	2908      	cmp	r1, #8
 8009152:	f63f af78 	bhi.w	8009046 <_strtod_l+0x19e>
 8009156:	3a30      	subs	r2, #48	@ 0x30
 8009158:	920e      	str	r2, [sp, #56]	@ 0x38
 800915a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800915c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800915e:	f04f 080a 	mov.w	r8, #10
 8009162:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009164:	1c56      	adds	r6, r2, #1
 8009166:	9619      	str	r6, [sp, #100]	@ 0x64
 8009168:	7852      	ldrb	r2, [r2, #1]
 800916a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800916e:	f1be 0f09 	cmp.w	lr, #9
 8009172:	d939      	bls.n	80091e8 <_strtod_l+0x340>
 8009174:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009176:	1a76      	subs	r6, r6, r1
 8009178:	2e08      	cmp	r6, #8
 800917a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800917e:	dc03      	bgt.n	8009188 <_strtod_l+0x2e0>
 8009180:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009182:	4588      	cmp	r8, r1
 8009184:	bfa8      	it	ge
 8009186:	4688      	movge	r8, r1
 8009188:	f1bc 0f00 	cmp.w	ip, #0
 800918c:	d001      	beq.n	8009192 <_strtod_l+0x2ea>
 800918e:	f1c8 0800 	rsb	r8, r8, #0
 8009192:	2d00      	cmp	r5, #0
 8009194:	d14e      	bne.n	8009234 <_strtod_l+0x38c>
 8009196:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009198:	4308      	orrs	r0, r1
 800919a:	f47f aebe 	bne.w	8008f1a <_strtod_l+0x72>
 800919e:	2b00      	cmp	r3, #0
 80091a0:	f47f aed6 	bne.w	8008f50 <_strtod_l+0xa8>
 80091a4:	2a69      	cmp	r2, #105	@ 0x69
 80091a6:	d028      	beq.n	80091fa <_strtod_l+0x352>
 80091a8:	dc25      	bgt.n	80091f6 <_strtod_l+0x34e>
 80091aa:	2a49      	cmp	r2, #73	@ 0x49
 80091ac:	d025      	beq.n	80091fa <_strtod_l+0x352>
 80091ae:	2a4e      	cmp	r2, #78	@ 0x4e
 80091b0:	f47f aece 	bne.w	8008f50 <_strtod_l+0xa8>
 80091b4:	499b      	ldr	r1, [pc, #620]	@ (8009424 <_strtod_l+0x57c>)
 80091b6:	a819      	add	r0, sp, #100	@ 0x64
 80091b8:	f002 fcc2 	bl	800bb40 <__match>
 80091bc:	2800      	cmp	r0, #0
 80091be:	f43f aec7 	beq.w	8008f50 <_strtod_l+0xa8>
 80091c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	2b28      	cmp	r3, #40	@ 0x28
 80091c8:	d12e      	bne.n	8009228 <_strtod_l+0x380>
 80091ca:	4997      	ldr	r1, [pc, #604]	@ (8009428 <_strtod_l+0x580>)
 80091cc:	aa1c      	add	r2, sp, #112	@ 0x70
 80091ce:	a819      	add	r0, sp, #100	@ 0x64
 80091d0:	f002 fcca 	bl	800bb68 <__hexnan>
 80091d4:	2805      	cmp	r0, #5
 80091d6:	d127      	bne.n	8009228 <_strtod_l+0x380>
 80091d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80091da:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80091de:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80091e2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80091e6:	e698      	b.n	8008f1a <_strtod_l+0x72>
 80091e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80091ea:	fb08 2101 	mla	r1, r8, r1, r2
 80091ee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80091f2:	920e      	str	r2, [sp, #56]	@ 0x38
 80091f4:	e7b5      	b.n	8009162 <_strtod_l+0x2ba>
 80091f6:	2a6e      	cmp	r2, #110	@ 0x6e
 80091f8:	e7da      	b.n	80091b0 <_strtod_l+0x308>
 80091fa:	498c      	ldr	r1, [pc, #560]	@ (800942c <_strtod_l+0x584>)
 80091fc:	a819      	add	r0, sp, #100	@ 0x64
 80091fe:	f002 fc9f 	bl	800bb40 <__match>
 8009202:	2800      	cmp	r0, #0
 8009204:	f43f aea4 	beq.w	8008f50 <_strtod_l+0xa8>
 8009208:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800920a:	4989      	ldr	r1, [pc, #548]	@ (8009430 <_strtod_l+0x588>)
 800920c:	3b01      	subs	r3, #1
 800920e:	a819      	add	r0, sp, #100	@ 0x64
 8009210:	9319      	str	r3, [sp, #100]	@ 0x64
 8009212:	f002 fc95 	bl	800bb40 <__match>
 8009216:	b910      	cbnz	r0, 800921e <_strtod_l+0x376>
 8009218:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800921a:	3301      	adds	r3, #1
 800921c:	9319      	str	r3, [sp, #100]	@ 0x64
 800921e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009440 <_strtod_l+0x598>
 8009222:	f04f 0a00 	mov.w	sl, #0
 8009226:	e678      	b.n	8008f1a <_strtod_l+0x72>
 8009228:	4882      	ldr	r0, [pc, #520]	@ (8009434 <_strtod_l+0x58c>)
 800922a:	f001 fb41 	bl	800a8b0 <nan>
 800922e:	ec5b ab10 	vmov	sl, fp, d0
 8009232:	e672      	b.n	8008f1a <_strtod_l+0x72>
 8009234:	eba8 0309 	sub.w	r3, r8, r9
 8009238:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800923a:	9309      	str	r3, [sp, #36]	@ 0x24
 800923c:	2f00      	cmp	r7, #0
 800923e:	bf08      	it	eq
 8009240:	462f      	moveq	r7, r5
 8009242:	2d10      	cmp	r5, #16
 8009244:	462c      	mov	r4, r5
 8009246:	bfa8      	it	ge
 8009248:	2410      	movge	r4, #16
 800924a:	f7f7 f98b 	bl	8000564 <__aeabi_ui2d>
 800924e:	2d09      	cmp	r5, #9
 8009250:	4682      	mov	sl, r0
 8009252:	468b      	mov	fp, r1
 8009254:	dc13      	bgt.n	800927e <_strtod_l+0x3d6>
 8009256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009258:	2b00      	cmp	r3, #0
 800925a:	f43f ae5e 	beq.w	8008f1a <_strtod_l+0x72>
 800925e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009260:	dd78      	ble.n	8009354 <_strtod_l+0x4ac>
 8009262:	2b16      	cmp	r3, #22
 8009264:	dc5f      	bgt.n	8009326 <_strtod_l+0x47e>
 8009266:	4974      	ldr	r1, [pc, #464]	@ (8009438 <_strtod_l+0x590>)
 8009268:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800926c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009270:	4652      	mov	r2, sl
 8009272:	465b      	mov	r3, fp
 8009274:	f7f7 f9f0 	bl	8000658 <__aeabi_dmul>
 8009278:	4682      	mov	sl, r0
 800927a:	468b      	mov	fp, r1
 800927c:	e64d      	b.n	8008f1a <_strtod_l+0x72>
 800927e:	4b6e      	ldr	r3, [pc, #440]	@ (8009438 <_strtod_l+0x590>)
 8009280:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009284:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009288:	f7f7 f9e6 	bl	8000658 <__aeabi_dmul>
 800928c:	4682      	mov	sl, r0
 800928e:	9808      	ldr	r0, [sp, #32]
 8009290:	468b      	mov	fp, r1
 8009292:	f7f7 f967 	bl	8000564 <__aeabi_ui2d>
 8009296:	4602      	mov	r2, r0
 8009298:	460b      	mov	r3, r1
 800929a:	4650      	mov	r0, sl
 800929c:	4659      	mov	r1, fp
 800929e:	f7f7 f825 	bl	80002ec <__adddf3>
 80092a2:	2d0f      	cmp	r5, #15
 80092a4:	4682      	mov	sl, r0
 80092a6:	468b      	mov	fp, r1
 80092a8:	ddd5      	ble.n	8009256 <_strtod_l+0x3ae>
 80092aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092ac:	1b2c      	subs	r4, r5, r4
 80092ae:	441c      	add	r4, r3
 80092b0:	2c00      	cmp	r4, #0
 80092b2:	f340 8096 	ble.w	80093e2 <_strtod_l+0x53a>
 80092b6:	f014 030f 	ands.w	r3, r4, #15
 80092ba:	d00a      	beq.n	80092d2 <_strtod_l+0x42a>
 80092bc:	495e      	ldr	r1, [pc, #376]	@ (8009438 <_strtod_l+0x590>)
 80092be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80092c2:	4652      	mov	r2, sl
 80092c4:	465b      	mov	r3, fp
 80092c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092ca:	f7f7 f9c5 	bl	8000658 <__aeabi_dmul>
 80092ce:	4682      	mov	sl, r0
 80092d0:	468b      	mov	fp, r1
 80092d2:	f034 040f 	bics.w	r4, r4, #15
 80092d6:	d073      	beq.n	80093c0 <_strtod_l+0x518>
 80092d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80092dc:	dd48      	ble.n	8009370 <_strtod_l+0x4c8>
 80092de:	2400      	movs	r4, #0
 80092e0:	46a0      	mov	r8, r4
 80092e2:	940a      	str	r4, [sp, #40]	@ 0x28
 80092e4:	46a1      	mov	r9, r4
 80092e6:	9a05      	ldr	r2, [sp, #20]
 80092e8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009440 <_strtod_l+0x598>
 80092ec:	2322      	movs	r3, #34	@ 0x22
 80092ee:	6013      	str	r3, [r2, #0]
 80092f0:	f04f 0a00 	mov.w	sl, #0
 80092f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f43f ae0f 	beq.w	8008f1a <_strtod_l+0x72>
 80092fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092fe:	9805      	ldr	r0, [sp, #20]
 8009300:	f002 fdd6 	bl	800beb0 <_Bfree>
 8009304:	9805      	ldr	r0, [sp, #20]
 8009306:	4649      	mov	r1, r9
 8009308:	f002 fdd2 	bl	800beb0 <_Bfree>
 800930c:	9805      	ldr	r0, [sp, #20]
 800930e:	4641      	mov	r1, r8
 8009310:	f002 fdce 	bl	800beb0 <_Bfree>
 8009314:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009316:	9805      	ldr	r0, [sp, #20]
 8009318:	f002 fdca 	bl	800beb0 <_Bfree>
 800931c:	9805      	ldr	r0, [sp, #20]
 800931e:	4621      	mov	r1, r4
 8009320:	f002 fdc6 	bl	800beb0 <_Bfree>
 8009324:	e5f9      	b.n	8008f1a <_strtod_l+0x72>
 8009326:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009328:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800932c:	4293      	cmp	r3, r2
 800932e:	dbbc      	blt.n	80092aa <_strtod_l+0x402>
 8009330:	4c41      	ldr	r4, [pc, #260]	@ (8009438 <_strtod_l+0x590>)
 8009332:	f1c5 050f 	rsb	r5, r5, #15
 8009336:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800933a:	4652      	mov	r2, sl
 800933c:	465b      	mov	r3, fp
 800933e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009342:	f7f7 f989 	bl	8000658 <__aeabi_dmul>
 8009346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009348:	1b5d      	subs	r5, r3, r5
 800934a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800934e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009352:	e78f      	b.n	8009274 <_strtod_l+0x3cc>
 8009354:	3316      	adds	r3, #22
 8009356:	dba8      	blt.n	80092aa <_strtod_l+0x402>
 8009358:	4b37      	ldr	r3, [pc, #220]	@ (8009438 <_strtod_l+0x590>)
 800935a:	eba9 0808 	sub.w	r8, r9, r8
 800935e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009362:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009366:	4650      	mov	r0, sl
 8009368:	4659      	mov	r1, fp
 800936a:	f7f7 fa9f 	bl	80008ac <__aeabi_ddiv>
 800936e:	e783      	b.n	8009278 <_strtod_l+0x3d0>
 8009370:	4b32      	ldr	r3, [pc, #200]	@ (800943c <_strtod_l+0x594>)
 8009372:	9308      	str	r3, [sp, #32]
 8009374:	2300      	movs	r3, #0
 8009376:	1124      	asrs	r4, r4, #4
 8009378:	4650      	mov	r0, sl
 800937a:	4659      	mov	r1, fp
 800937c:	461e      	mov	r6, r3
 800937e:	2c01      	cmp	r4, #1
 8009380:	dc21      	bgt.n	80093c6 <_strtod_l+0x51e>
 8009382:	b10b      	cbz	r3, 8009388 <_strtod_l+0x4e0>
 8009384:	4682      	mov	sl, r0
 8009386:	468b      	mov	fp, r1
 8009388:	492c      	ldr	r1, [pc, #176]	@ (800943c <_strtod_l+0x594>)
 800938a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800938e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009392:	4652      	mov	r2, sl
 8009394:	465b      	mov	r3, fp
 8009396:	e9d1 0100 	ldrd	r0, r1, [r1]
 800939a:	f7f7 f95d 	bl	8000658 <__aeabi_dmul>
 800939e:	4b28      	ldr	r3, [pc, #160]	@ (8009440 <_strtod_l+0x598>)
 80093a0:	460a      	mov	r2, r1
 80093a2:	400b      	ands	r3, r1
 80093a4:	4927      	ldr	r1, [pc, #156]	@ (8009444 <_strtod_l+0x59c>)
 80093a6:	428b      	cmp	r3, r1
 80093a8:	4682      	mov	sl, r0
 80093aa:	d898      	bhi.n	80092de <_strtod_l+0x436>
 80093ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80093b0:	428b      	cmp	r3, r1
 80093b2:	bf86      	itte	hi
 80093b4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009448 <_strtod_l+0x5a0>
 80093b8:	f04f 3aff 	movhi.w	sl, #4294967295
 80093bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80093c0:	2300      	movs	r3, #0
 80093c2:	9308      	str	r3, [sp, #32]
 80093c4:	e07a      	b.n	80094bc <_strtod_l+0x614>
 80093c6:	07e2      	lsls	r2, r4, #31
 80093c8:	d505      	bpl.n	80093d6 <_strtod_l+0x52e>
 80093ca:	9b08      	ldr	r3, [sp, #32]
 80093cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d0:	f7f7 f942 	bl	8000658 <__aeabi_dmul>
 80093d4:	2301      	movs	r3, #1
 80093d6:	9a08      	ldr	r2, [sp, #32]
 80093d8:	3208      	adds	r2, #8
 80093da:	3601      	adds	r6, #1
 80093dc:	1064      	asrs	r4, r4, #1
 80093de:	9208      	str	r2, [sp, #32]
 80093e0:	e7cd      	b.n	800937e <_strtod_l+0x4d6>
 80093e2:	d0ed      	beq.n	80093c0 <_strtod_l+0x518>
 80093e4:	4264      	negs	r4, r4
 80093e6:	f014 020f 	ands.w	r2, r4, #15
 80093ea:	d00a      	beq.n	8009402 <_strtod_l+0x55a>
 80093ec:	4b12      	ldr	r3, [pc, #72]	@ (8009438 <_strtod_l+0x590>)
 80093ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093f2:	4650      	mov	r0, sl
 80093f4:	4659      	mov	r1, fp
 80093f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fa:	f7f7 fa57 	bl	80008ac <__aeabi_ddiv>
 80093fe:	4682      	mov	sl, r0
 8009400:	468b      	mov	fp, r1
 8009402:	1124      	asrs	r4, r4, #4
 8009404:	d0dc      	beq.n	80093c0 <_strtod_l+0x518>
 8009406:	2c1f      	cmp	r4, #31
 8009408:	dd20      	ble.n	800944c <_strtod_l+0x5a4>
 800940a:	2400      	movs	r4, #0
 800940c:	46a0      	mov	r8, r4
 800940e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009410:	46a1      	mov	r9, r4
 8009412:	9a05      	ldr	r2, [sp, #20]
 8009414:	2322      	movs	r3, #34	@ 0x22
 8009416:	f04f 0a00 	mov.w	sl, #0
 800941a:	f04f 0b00 	mov.w	fp, #0
 800941e:	6013      	str	r3, [r2, #0]
 8009420:	e768      	b.n	80092f4 <_strtod_l+0x44c>
 8009422:	bf00      	nop
 8009424:	0800d716 	.word	0x0800d716
 8009428:	0800d5b8 	.word	0x0800d5b8
 800942c:	0800d70e 	.word	0x0800d70e
 8009430:	0800d7f5 	.word	0x0800d7f5
 8009434:	0800d7f1 	.word	0x0800d7f1
 8009438:	0800d958 	.word	0x0800d958
 800943c:	0800d930 	.word	0x0800d930
 8009440:	7ff00000 	.word	0x7ff00000
 8009444:	7ca00000 	.word	0x7ca00000
 8009448:	7fefffff 	.word	0x7fefffff
 800944c:	f014 0310 	ands.w	r3, r4, #16
 8009450:	bf18      	it	ne
 8009452:	236a      	movne	r3, #106	@ 0x6a
 8009454:	4ea9      	ldr	r6, [pc, #676]	@ (80096fc <_strtod_l+0x854>)
 8009456:	9308      	str	r3, [sp, #32]
 8009458:	4650      	mov	r0, sl
 800945a:	4659      	mov	r1, fp
 800945c:	2300      	movs	r3, #0
 800945e:	07e2      	lsls	r2, r4, #31
 8009460:	d504      	bpl.n	800946c <_strtod_l+0x5c4>
 8009462:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009466:	f7f7 f8f7 	bl	8000658 <__aeabi_dmul>
 800946a:	2301      	movs	r3, #1
 800946c:	1064      	asrs	r4, r4, #1
 800946e:	f106 0608 	add.w	r6, r6, #8
 8009472:	d1f4      	bne.n	800945e <_strtod_l+0x5b6>
 8009474:	b10b      	cbz	r3, 800947a <_strtod_l+0x5d2>
 8009476:	4682      	mov	sl, r0
 8009478:	468b      	mov	fp, r1
 800947a:	9b08      	ldr	r3, [sp, #32]
 800947c:	b1b3      	cbz	r3, 80094ac <_strtod_l+0x604>
 800947e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009482:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009486:	2b00      	cmp	r3, #0
 8009488:	4659      	mov	r1, fp
 800948a:	dd0f      	ble.n	80094ac <_strtod_l+0x604>
 800948c:	2b1f      	cmp	r3, #31
 800948e:	dd55      	ble.n	800953c <_strtod_l+0x694>
 8009490:	2b34      	cmp	r3, #52	@ 0x34
 8009492:	bfde      	ittt	le
 8009494:	f04f 33ff 	movle.w	r3, #4294967295
 8009498:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800949c:	4093      	lslle	r3, r2
 800949e:	f04f 0a00 	mov.w	sl, #0
 80094a2:	bfcc      	ite	gt
 80094a4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80094a8:	ea03 0b01 	andle.w	fp, r3, r1
 80094ac:	2200      	movs	r2, #0
 80094ae:	2300      	movs	r3, #0
 80094b0:	4650      	mov	r0, sl
 80094b2:	4659      	mov	r1, fp
 80094b4:	f7f7 fb38 	bl	8000b28 <__aeabi_dcmpeq>
 80094b8:	2800      	cmp	r0, #0
 80094ba:	d1a6      	bne.n	800940a <_strtod_l+0x562>
 80094bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80094c2:	9805      	ldr	r0, [sp, #20]
 80094c4:	462b      	mov	r3, r5
 80094c6:	463a      	mov	r2, r7
 80094c8:	f002 fd5a 	bl	800bf80 <__s2b>
 80094cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80094ce:	2800      	cmp	r0, #0
 80094d0:	f43f af05 	beq.w	80092de <_strtod_l+0x436>
 80094d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094d6:	2a00      	cmp	r2, #0
 80094d8:	eba9 0308 	sub.w	r3, r9, r8
 80094dc:	bfa8      	it	ge
 80094de:	2300      	movge	r3, #0
 80094e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80094e2:	2400      	movs	r4, #0
 80094e4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80094e8:	9316      	str	r3, [sp, #88]	@ 0x58
 80094ea:	46a0      	mov	r8, r4
 80094ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094ee:	9805      	ldr	r0, [sp, #20]
 80094f0:	6859      	ldr	r1, [r3, #4]
 80094f2:	f002 fc9d 	bl	800be30 <_Balloc>
 80094f6:	4681      	mov	r9, r0
 80094f8:	2800      	cmp	r0, #0
 80094fa:	f43f aef4 	beq.w	80092e6 <_strtod_l+0x43e>
 80094fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009500:	691a      	ldr	r2, [r3, #16]
 8009502:	3202      	adds	r2, #2
 8009504:	f103 010c 	add.w	r1, r3, #12
 8009508:	0092      	lsls	r2, r2, #2
 800950a:	300c      	adds	r0, #12
 800950c:	f001 f9bf 	bl	800a88e <memcpy>
 8009510:	ec4b ab10 	vmov	d0, sl, fp
 8009514:	9805      	ldr	r0, [sp, #20]
 8009516:	aa1c      	add	r2, sp, #112	@ 0x70
 8009518:	a91b      	add	r1, sp, #108	@ 0x6c
 800951a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800951e:	f003 f86b 	bl	800c5f8 <__d2b>
 8009522:	901a      	str	r0, [sp, #104]	@ 0x68
 8009524:	2800      	cmp	r0, #0
 8009526:	f43f aede 	beq.w	80092e6 <_strtod_l+0x43e>
 800952a:	9805      	ldr	r0, [sp, #20]
 800952c:	2101      	movs	r1, #1
 800952e:	f002 fdbd 	bl	800c0ac <__i2b>
 8009532:	4680      	mov	r8, r0
 8009534:	b948      	cbnz	r0, 800954a <_strtod_l+0x6a2>
 8009536:	f04f 0800 	mov.w	r8, #0
 800953a:	e6d4      	b.n	80092e6 <_strtod_l+0x43e>
 800953c:	f04f 32ff 	mov.w	r2, #4294967295
 8009540:	fa02 f303 	lsl.w	r3, r2, r3
 8009544:	ea03 0a0a 	and.w	sl, r3, sl
 8009548:	e7b0      	b.n	80094ac <_strtod_l+0x604>
 800954a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800954c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800954e:	2d00      	cmp	r5, #0
 8009550:	bfab      	itete	ge
 8009552:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009554:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009556:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009558:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800955a:	bfac      	ite	ge
 800955c:	18ef      	addge	r7, r5, r3
 800955e:	1b5e      	sublt	r6, r3, r5
 8009560:	9b08      	ldr	r3, [sp, #32]
 8009562:	1aed      	subs	r5, r5, r3
 8009564:	4415      	add	r5, r2
 8009566:	4b66      	ldr	r3, [pc, #408]	@ (8009700 <_strtod_l+0x858>)
 8009568:	3d01      	subs	r5, #1
 800956a:	429d      	cmp	r5, r3
 800956c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009570:	da50      	bge.n	8009614 <_strtod_l+0x76c>
 8009572:	1b5b      	subs	r3, r3, r5
 8009574:	2b1f      	cmp	r3, #31
 8009576:	eba2 0203 	sub.w	r2, r2, r3
 800957a:	f04f 0101 	mov.w	r1, #1
 800957e:	dc3d      	bgt.n	80095fc <_strtod_l+0x754>
 8009580:	fa01 f303 	lsl.w	r3, r1, r3
 8009584:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009586:	2300      	movs	r3, #0
 8009588:	9310      	str	r3, [sp, #64]	@ 0x40
 800958a:	18bd      	adds	r5, r7, r2
 800958c:	9b08      	ldr	r3, [sp, #32]
 800958e:	42af      	cmp	r7, r5
 8009590:	4416      	add	r6, r2
 8009592:	441e      	add	r6, r3
 8009594:	463b      	mov	r3, r7
 8009596:	bfa8      	it	ge
 8009598:	462b      	movge	r3, r5
 800959a:	42b3      	cmp	r3, r6
 800959c:	bfa8      	it	ge
 800959e:	4633      	movge	r3, r6
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	bfc2      	ittt	gt
 80095a4:	1aed      	subgt	r5, r5, r3
 80095a6:	1af6      	subgt	r6, r6, r3
 80095a8:	1aff      	subgt	r7, r7, r3
 80095aa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	dd16      	ble.n	80095de <_strtod_l+0x736>
 80095b0:	4641      	mov	r1, r8
 80095b2:	9805      	ldr	r0, [sp, #20]
 80095b4:	461a      	mov	r2, r3
 80095b6:	f002 fe39 	bl	800c22c <__pow5mult>
 80095ba:	4680      	mov	r8, r0
 80095bc:	2800      	cmp	r0, #0
 80095be:	d0ba      	beq.n	8009536 <_strtod_l+0x68e>
 80095c0:	4601      	mov	r1, r0
 80095c2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80095c4:	9805      	ldr	r0, [sp, #20]
 80095c6:	f002 fd87 	bl	800c0d8 <__multiply>
 80095ca:	900e      	str	r0, [sp, #56]	@ 0x38
 80095cc:	2800      	cmp	r0, #0
 80095ce:	f43f ae8a 	beq.w	80092e6 <_strtod_l+0x43e>
 80095d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095d4:	9805      	ldr	r0, [sp, #20]
 80095d6:	f002 fc6b 	bl	800beb0 <_Bfree>
 80095da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80095de:	2d00      	cmp	r5, #0
 80095e0:	dc1d      	bgt.n	800961e <_strtod_l+0x776>
 80095e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	dd23      	ble.n	8009630 <_strtod_l+0x788>
 80095e8:	4649      	mov	r1, r9
 80095ea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80095ec:	9805      	ldr	r0, [sp, #20]
 80095ee:	f002 fe1d 	bl	800c22c <__pow5mult>
 80095f2:	4681      	mov	r9, r0
 80095f4:	b9e0      	cbnz	r0, 8009630 <_strtod_l+0x788>
 80095f6:	f04f 0900 	mov.w	r9, #0
 80095fa:	e674      	b.n	80092e6 <_strtod_l+0x43e>
 80095fc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009600:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009604:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009608:	35e2      	adds	r5, #226	@ 0xe2
 800960a:	fa01 f305 	lsl.w	r3, r1, r5
 800960e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009610:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009612:	e7ba      	b.n	800958a <_strtod_l+0x6e2>
 8009614:	2300      	movs	r3, #0
 8009616:	9310      	str	r3, [sp, #64]	@ 0x40
 8009618:	2301      	movs	r3, #1
 800961a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800961c:	e7b5      	b.n	800958a <_strtod_l+0x6e2>
 800961e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009620:	9805      	ldr	r0, [sp, #20]
 8009622:	462a      	mov	r2, r5
 8009624:	f002 fe5c 	bl	800c2e0 <__lshift>
 8009628:	901a      	str	r0, [sp, #104]	@ 0x68
 800962a:	2800      	cmp	r0, #0
 800962c:	d1d9      	bne.n	80095e2 <_strtod_l+0x73a>
 800962e:	e65a      	b.n	80092e6 <_strtod_l+0x43e>
 8009630:	2e00      	cmp	r6, #0
 8009632:	dd07      	ble.n	8009644 <_strtod_l+0x79c>
 8009634:	4649      	mov	r1, r9
 8009636:	9805      	ldr	r0, [sp, #20]
 8009638:	4632      	mov	r2, r6
 800963a:	f002 fe51 	bl	800c2e0 <__lshift>
 800963e:	4681      	mov	r9, r0
 8009640:	2800      	cmp	r0, #0
 8009642:	d0d8      	beq.n	80095f6 <_strtod_l+0x74e>
 8009644:	2f00      	cmp	r7, #0
 8009646:	dd08      	ble.n	800965a <_strtod_l+0x7b2>
 8009648:	4641      	mov	r1, r8
 800964a:	9805      	ldr	r0, [sp, #20]
 800964c:	463a      	mov	r2, r7
 800964e:	f002 fe47 	bl	800c2e0 <__lshift>
 8009652:	4680      	mov	r8, r0
 8009654:	2800      	cmp	r0, #0
 8009656:	f43f ae46 	beq.w	80092e6 <_strtod_l+0x43e>
 800965a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800965c:	9805      	ldr	r0, [sp, #20]
 800965e:	464a      	mov	r2, r9
 8009660:	f002 fec6 	bl	800c3f0 <__mdiff>
 8009664:	4604      	mov	r4, r0
 8009666:	2800      	cmp	r0, #0
 8009668:	f43f ae3d 	beq.w	80092e6 <_strtod_l+0x43e>
 800966c:	68c3      	ldr	r3, [r0, #12]
 800966e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009670:	2300      	movs	r3, #0
 8009672:	60c3      	str	r3, [r0, #12]
 8009674:	4641      	mov	r1, r8
 8009676:	f002 fe9f 	bl	800c3b8 <__mcmp>
 800967a:	2800      	cmp	r0, #0
 800967c:	da46      	bge.n	800970c <_strtod_l+0x864>
 800967e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009680:	ea53 030a 	orrs.w	r3, r3, sl
 8009684:	d16c      	bne.n	8009760 <_strtod_l+0x8b8>
 8009686:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800968a:	2b00      	cmp	r3, #0
 800968c:	d168      	bne.n	8009760 <_strtod_l+0x8b8>
 800968e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009692:	0d1b      	lsrs	r3, r3, #20
 8009694:	051b      	lsls	r3, r3, #20
 8009696:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800969a:	d961      	bls.n	8009760 <_strtod_l+0x8b8>
 800969c:	6963      	ldr	r3, [r4, #20]
 800969e:	b913      	cbnz	r3, 80096a6 <_strtod_l+0x7fe>
 80096a0:	6923      	ldr	r3, [r4, #16]
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	dd5c      	ble.n	8009760 <_strtod_l+0x8b8>
 80096a6:	4621      	mov	r1, r4
 80096a8:	2201      	movs	r2, #1
 80096aa:	9805      	ldr	r0, [sp, #20]
 80096ac:	f002 fe18 	bl	800c2e0 <__lshift>
 80096b0:	4641      	mov	r1, r8
 80096b2:	4604      	mov	r4, r0
 80096b4:	f002 fe80 	bl	800c3b8 <__mcmp>
 80096b8:	2800      	cmp	r0, #0
 80096ba:	dd51      	ble.n	8009760 <_strtod_l+0x8b8>
 80096bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80096c0:	9a08      	ldr	r2, [sp, #32]
 80096c2:	0d1b      	lsrs	r3, r3, #20
 80096c4:	051b      	lsls	r3, r3, #20
 80096c6:	2a00      	cmp	r2, #0
 80096c8:	d06b      	beq.n	80097a2 <_strtod_l+0x8fa>
 80096ca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80096ce:	d868      	bhi.n	80097a2 <_strtod_l+0x8fa>
 80096d0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80096d4:	f67f ae9d 	bls.w	8009412 <_strtod_l+0x56a>
 80096d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009704 <_strtod_l+0x85c>)
 80096da:	4650      	mov	r0, sl
 80096dc:	4659      	mov	r1, fp
 80096de:	2200      	movs	r2, #0
 80096e0:	f7f6 ffba 	bl	8000658 <__aeabi_dmul>
 80096e4:	4b08      	ldr	r3, [pc, #32]	@ (8009708 <_strtod_l+0x860>)
 80096e6:	400b      	ands	r3, r1
 80096e8:	4682      	mov	sl, r0
 80096ea:	468b      	mov	fp, r1
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f47f ae05 	bne.w	80092fc <_strtod_l+0x454>
 80096f2:	9a05      	ldr	r2, [sp, #20]
 80096f4:	2322      	movs	r3, #34	@ 0x22
 80096f6:	6013      	str	r3, [r2, #0]
 80096f8:	e600      	b.n	80092fc <_strtod_l+0x454>
 80096fa:	bf00      	nop
 80096fc:	0800d5e0 	.word	0x0800d5e0
 8009700:	fffffc02 	.word	0xfffffc02
 8009704:	39500000 	.word	0x39500000
 8009708:	7ff00000 	.word	0x7ff00000
 800970c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009710:	d165      	bne.n	80097de <_strtod_l+0x936>
 8009712:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009714:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009718:	b35a      	cbz	r2, 8009772 <_strtod_l+0x8ca>
 800971a:	4a9f      	ldr	r2, [pc, #636]	@ (8009998 <_strtod_l+0xaf0>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d12b      	bne.n	8009778 <_strtod_l+0x8d0>
 8009720:	9b08      	ldr	r3, [sp, #32]
 8009722:	4651      	mov	r1, sl
 8009724:	b303      	cbz	r3, 8009768 <_strtod_l+0x8c0>
 8009726:	4b9d      	ldr	r3, [pc, #628]	@ (800999c <_strtod_l+0xaf4>)
 8009728:	465a      	mov	r2, fp
 800972a:	4013      	ands	r3, r2
 800972c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009730:	f04f 32ff 	mov.w	r2, #4294967295
 8009734:	d81b      	bhi.n	800976e <_strtod_l+0x8c6>
 8009736:	0d1b      	lsrs	r3, r3, #20
 8009738:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800973c:	fa02 f303 	lsl.w	r3, r2, r3
 8009740:	4299      	cmp	r1, r3
 8009742:	d119      	bne.n	8009778 <_strtod_l+0x8d0>
 8009744:	4b96      	ldr	r3, [pc, #600]	@ (80099a0 <_strtod_l+0xaf8>)
 8009746:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009748:	429a      	cmp	r2, r3
 800974a:	d102      	bne.n	8009752 <_strtod_l+0x8aa>
 800974c:	3101      	adds	r1, #1
 800974e:	f43f adca 	beq.w	80092e6 <_strtod_l+0x43e>
 8009752:	4b92      	ldr	r3, [pc, #584]	@ (800999c <_strtod_l+0xaf4>)
 8009754:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009756:	401a      	ands	r2, r3
 8009758:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800975c:	f04f 0a00 	mov.w	sl, #0
 8009760:	9b08      	ldr	r3, [sp, #32]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d1b8      	bne.n	80096d8 <_strtod_l+0x830>
 8009766:	e5c9      	b.n	80092fc <_strtod_l+0x454>
 8009768:	f04f 33ff 	mov.w	r3, #4294967295
 800976c:	e7e8      	b.n	8009740 <_strtod_l+0x898>
 800976e:	4613      	mov	r3, r2
 8009770:	e7e6      	b.n	8009740 <_strtod_l+0x898>
 8009772:	ea53 030a 	orrs.w	r3, r3, sl
 8009776:	d0a1      	beq.n	80096bc <_strtod_l+0x814>
 8009778:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800977a:	b1db      	cbz	r3, 80097b4 <_strtod_l+0x90c>
 800977c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800977e:	4213      	tst	r3, r2
 8009780:	d0ee      	beq.n	8009760 <_strtod_l+0x8b8>
 8009782:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009784:	9a08      	ldr	r2, [sp, #32]
 8009786:	4650      	mov	r0, sl
 8009788:	4659      	mov	r1, fp
 800978a:	b1bb      	cbz	r3, 80097bc <_strtod_l+0x914>
 800978c:	f7ff fb6b 	bl	8008e66 <sulp>
 8009790:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009794:	ec53 2b10 	vmov	r2, r3, d0
 8009798:	f7f6 fda8 	bl	80002ec <__adddf3>
 800979c:	4682      	mov	sl, r0
 800979e:	468b      	mov	fp, r1
 80097a0:	e7de      	b.n	8009760 <_strtod_l+0x8b8>
 80097a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80097a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80097aa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80097ae:	f04f 3aff 	mov.w	sl, #4294967295
 80097b2:	e7d5      	b.n	8009760 <_strtod_l+0x8b8>
 80097b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80097b6:	ea13 0f0a 	tst.w	r3, sl
 80097ba:	e7e1      	b.n	8009780 <_strtod_l+0x8d8>
 80097bc:	f7ff fb53 	bl	8008e66 <sulp>
 80097c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097c4:	ec53 2b10 	vmov	r2, r3, d0
 80097c8:	f7f6 fd8e 	bl	80002e8 <__aeabi_dsub>
 80097cc:	2200      	movs	r2, #0
 80097ce:	2300      	movs	r3, #0
 80097d0:	4682      	mov	sl, r0
 80097d2:	468b      	mov	fp, r1
 80097d4:	f7f7 f9a8 	bl	8000b28 <__aeabi_dcmpeq>
 80097d8:	2800      	cmp	r0, #0
 80097da:	d0c1      	beq.n	8009760 <_strtod_l+0x8b8>
 80097dc:	e619      	b.n	8009412 <_strtod_l+0x56a>
 80097de:	4641      	mov	r1, r8
 80097e0:	4620      	mov	r0, r4
 80097e2:	f002 ff61 	bl	800c6a8 <__ratio>
 80097e6:	ec57 6b10 	vmov	r6, r7, d0
 80097ea:	2200      	movs	r2, #0
 80097ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80097f0:	4630      	mov	r0, r6
 80097f2:	4639      	mov	r1, r7
 80097f4:	f7f7 f9ac 	bl	8000b50 <__aeabi_dcmple>
 80097f8:	2800      	cmp	r0, #0
 80097fa:	d06f      	beq.n	80098dc <_strtod_l+0xa34>
 80097fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d17a      	bne.n	80098f8 <_strtod_l+0xa50>
 8009802:	f1ba 0f00 	cmp.w	sl, #0
 8009806:	d158      	bne.n	80098ba <_strtod_l+0xa12>
 8009808:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800980a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800980e:	2b00      	cmp	r3, #0
 8009810:	d15a      	bne.n	80098c8 <_strtod_l+0xa20>
 8009812:	4b64      	ldr	r3, [pc, #400]	@ (80099a4 <_strtod_l+0xafc>)
 8009814:	2200      	movs	r2, #0
 8009816:	4630      	mov	r0, r6
 8009818:	4639      	mov	r1, r7
 800981a:	f7f7 f98f 	bl	8000b3c <__aeabi_dcmplt>
 800981e:	2800      	cmp	r0, #0
 8009820:	d159      	bne.n	80098d6 <_strtod_l+0xa2e>
 8009822:	4630      	mov	r0, r6
 8009824:	4639      	mov	r1, r7
 8009826:	4b60      	ldr	r3, [pc, #384]	@ (80099a8 <_strtod_l+0xb00>)
 8009828:	2200      	movs	r2, #0
 800982a:	f7f6 ff15 	bl	8000658 <__aeabi_dmul>
 800982e:	4606      	mov	r6, r0
 8009830:	460f      	mov	r7, r1
 8009832:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009836:	9606      	str	r6, [sp, #24]
 8009838:	9307      	str	r3, [sp, #28]
 800983a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800983e:	4d57      	ldr	r5, [pc, #348]	@ (800999c <_strtod_l+0xaf4>)
 8009840:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009844:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009846:	401d      	ands	r5, r3
 8009848:	4b58      	ldr	r3, [pc, #352]	@ (80099ac <_strtod_l+0xb04>)
 800984a:	429d      	cmp	r5, r3
 800984c:	f040 80b2 	bne.w	80099b4 <_strtod_l+0xb0c>
 8009850:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009852:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009856:	ec4b ab10 	vmov	d0, sl, fp
 800985a:	f002 fe5d 	bl	800c518 <__ulp>
 800985e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009862:	ec51 0b10 	vmov	r0, r1, d0
 8009866:	f7f6 fef7 	bl	8000658 <__aeabi_dmul>
 800986a:	4652      	mov	r2, sl
 800986c:	465b      	mov	r3, fp
 800986e:	f7f6 fd3d 	bl	80002ec <__adddf3>
 8009872:	460b      	mov	r3, r1
 8009874:	4949      	ldr	r1, [pc, #292]	@ (800999c <_strtod_l+0xaf4>)
 8009876:	4a4e      	ldr	r2, [pc, #312]	@ (80099b0 <_strtod_l+0xb08>)
 8009878:	4019      	ands	r1, r3
 800987a:	4291      	cmp	r1, r2
 800987c:	4682      	mov	sl, r0
 800987e:	d942      	bls.n	8009906 <_strtod_l+0xa5e>
 8009880:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009882:	4b47      	ldr	r3, [pc, #284]	@ (80099a0 <_strtod_l+0xaf8>)
 8009884:	429a      	cmp	r2, r3
 8009886:	d103      	bne.n	8009890 <_strtod_l+0x9e8>
 8009888:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800988a:	3301      	adds	r3, #1
 800988c:	f43f ad2b 	beq.w	80092e6 <_strtod_l+0x43e>
 8009890:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80099a0 <_strtod_l+0xaf8>
 8009894:	f04f 3aff 	mov.w	sl, #4294967295
 8009898:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800989a:	9805      	ldr	r0, [sp, #20]
 800989c:	f002 fb08 	bl	800beb0 <_Bfree>
 80098a0:	9805      	ldr	r0, [sp, #20]
 80098a2:	4649      	mov	r1, r9
 80098a4:	f002 fb04 	bl	800beb0 <_Bfree>
 80098a8:	9805      	ldr	r0, [sp, #20]
 80098aa:	4641      	mov	r1, r8
 80098ac:	f002 fb00 	bl	800beb0 <_Bfree>
 80098b0:	9805      	ldr	r0, [sp, #20]
 80098b2:	4621      	mov	r1, r4
 80098b4:	f002 fafc 	bl	800beb0 <_Bfree>
 80098b8:	e618      	b.n	80094ec <_strtod_l+0x644>
 80098ba:	f1ba 0f01 	cmp.w	sl, #1
 80098be:	d103      	bne.n	80098c8 <_strtod_l+0xa20>
 80098c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f43f ada5 	beq.w	8009412 <_strtod_l+0x56a>
 80098c8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009978 <_strtod_l+0xad0>
 80098cc:	4f35      	ldr	r7, [pc, #212]	@ (80099a4 <_strtod_l+0xafc>)
 80098ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80098d2:	2600      	movs	r6, #0
 80098d4:	e7b1      	b.n	800983a <_strtod_l+0x992>
 80098d6:	4f34      	ldr	r7, [pc, #208]	@ (80099a8 <_strtod_l+0xb00>)
 80098d8:	2600      	movs	r6, #0
 80098da:	e7aa      	b.n	8009832 <_strtod_l+0x98a>
 80098dc:	4b32      	ldr	r3, [pc, #200]	@ (80099a8 <_strtod_l+0xb00>)
 80098de:	4630      	mov	r0, r6
 80098e0:	4639      	mov	r1, r7
 80098e2:	2200      	movs	r2, #0
 80098e4:	f7f6 feb8 	bl	8000658 <__aeabi_dmul>
 80098e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098ea:	4606      	mov	r6, r0
 80098ec:	460f      	mov	r7, r1
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d09f      	beq.n	8009832 <_strtod_l+0x98a>
 80098f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80098f6:	e7a0      	b.n	800983a <_strtod_l+0x992>
 80098f8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009980 <_strtod_l+0xad8>
 80098fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009900:	ec57 6b17 	vmov	r6, r7, d7
 8009904:	e799      	b.n	800983a <_strtod_l+0x992>
 8009906:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800990a:	9b08      	ldr	r3, [sp, #32]
 800990c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009910:	2b00      	cmp	r3, #0
 8009912:	d1c1      	bne.n	8009898 <_strtod_l+0x9f0>
 8009914:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009918:	0d1b      	lsrs	r3, r3, #20
 800991a:	051b      	lsls	r3, r3, #20
 800991c:	429d      	cmp	r5, r3
 800991e:	d1bb      	bne.n	8009898 <_strtod_l+0x9f0>
 8009920:	4630      	mov	r0, r6
 8009922:	4639      	mov	r1, r7
 8009924:	f7f7 f9f8 	bl	8000d18 <__aeabi_d2lz>
 8009928:	f7f6 fe68 	bl	80005fc <__aeabi_l2d>
 800992c:	4602      	mov	r2, r0
 800992e:	460b      	mov	r3, r1
 8009930:	4630      	mov	r0, r6
 8009932:	4639      	mov	r1, r7
 8009934:	f7f6 fcd8 	bl	80002e8 <__aeabi_dsub>
 8009938:	460b      	mov	r3, r1
 800993a:	4602      	mov	r2, r0
 800993c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009940:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009944:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009946:	ea46 060a 	orr.w	r6, r6, sl
 800994a:	431e      	orrs	r6, r3
 800994c:	d06f      	beq.n	8009a2e <_strtod_l+0xb86>
 800994e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009988 <_strtod_l+0xae0>)
 8009950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009954:	f7f7 f8f2 	bl	8000b3c <__aeabi_dcmplt>
 8009958:	2800      	cmp	r0, #0
 800995a:	f47f accf 	bne.w	80092fc <_strtod_l+0x454>
 800995e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009990 <_strtod_l+0xae8>)
 8009960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009964:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009968:	f7f7 f906 	bl	8000b78 <__aeabi_dcmpgt>
 800996c:	2800      	cmp	r0, #0
 800996e:	d093      	beq.n	8009898 <_strtod_l+0x9f0>
 8009970:	e4c4      	b.n	80092fc <_strtod_l+0x454>
 8009972:	bf00      	nop
 8009974:	f3af 8000 	nop.w
 8009978:	00000000 	.word	0x00000000
 800997c:	bff00000 	.word	0xbff00000
 8009980:	00000000 	.word	0x00000000
 8009984:	3ff00000 	.word	0x3ff00000
 8009988:	94a03595 	.word	0x94a03595
 800998c:	3fdfffff 	.word	0x3fdfffff
 8009990:	35afe535 	.word	0x35afe535
 8009994:	3fe00000 	.word	0x3fe00000
 8009998:	000fffff 	.word	0x000fffff
 800999c:	7ff00000 	.word	0x7ff00000
 80099a0:	7fefffff 	.word	0x7fefffff
 80099a4:	3ff00000 	.word	0x3ff00000
 80099a8:	3fe00000 	.word	0x3fe00000
 80099ac:	7fe00000 	.word	0x7fe00000
 80099b0:	7c9fffff 	.word	0x7c9fffff
 80099b4:	9b08      	ldr	r3, [sp, #32]
 80099b6:	b323      	cbz	r3, 8009a02 <_strtod_l+0xb5a>
 80099b8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80099bc:	d821      	bhi.n	8009a02 <_strtod_l+0xb5a>
 80099be:	a328      	add	r3, pc, #160	@ (adr r3, 8009a60 <_strtod_l+0xbb8>)
 80099c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c4:	4630      	mov	r0, r6
 80099c6:	4639      	mov	r1, r7
 80099c8:	f7f7 f8c2 	bl	8000b50 <__aeabi_dcmple>
 80099cc:	b1a0      	cbz	r0, 80099f8 <_strtod_l+0xb50>
 80099ce:	4639      	mov	r1, r7
 80099d0:	4630      	mov	r0, r6
 80099d2:	f7f7 f919 	bl	8000c08 <__aeabi_d2uiz>
 80099d6:	2801      	cmp	r0, #1
 80099d8:	bf38      	it	cc
 80099da:	2001      	movcc	r0, #1
 80099dc:	f7f6 fdc2 	bl	8000564 <__aeabi_ui2d>
 80099e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099e2:	4606      	mov	r6, r0
 80099e4:	460f      	mov	r7, r1
 80099e6:	b9fb      	cbnz	r3, 8009a28 <_strtod_l+0xb80>
 80099e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80099ec:	9014      	str	r0, [sp, #80]	@ 0x50
 80099ee:	9315      	str	r3, [sp, #84]	@ 0x54
 80099f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80099f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80099f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80099fa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80099fe:	1b5b      	subs	r3, r3, r5
 8009a00:	9311      	str	r3, [sp, #68]	@ 0x44
 8009a02:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009a06:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009a0a:	f002 fd85 	bl	800c518 <__ulp>
 8009a0e:	4650      	mov	r0, sl
 8009a10:	ec53 2b10 	vmov	r2, r3, d0
 8009a14:	4659      	mov	r1, fp
 8009a16:	f7f6 fe1f 	bl	8000658 <__aeabi_dmul>
 8009a1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009a1e:	f7f6 fc65 	bl	80002ec <__adddf3>
 8009a22:	4682      	mov	sl, r0
 8009a24:	468b      	mov	fp, r1
 8009a26:	e770      	b.n	800990a <_strtod_l+0xa62>
 8009a28:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009a2c:	e7e0      	b.n	80099f0 <_strtod_l+0xb48>
 8009a2e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009a68 <_strtod_l+0xbc0>)
 8009a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a34:	f7f7 f882 	bl	8000b3c <__aeabi_dcmplt>
 8009a38:	e798      	b.n	800996c <_strtod_l+0xac4>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a3e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009a40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a42:	6013      	str	r3, [r2, #0]
 8009a44:	f7ff ba6d 	b.w	8008f22 <_strtod_l+0x7a>
 8009a48:	2a65      	cmp	r2, #101	@ 0x65
 8009a4a:	f43f ab66 	beq.w	800911a <_strtod_l+0x272>
 8009a4e:	2a45      	cmp	r2, #69	@ 0x45
 8009a50:	f43f ab63 	beq.w	800911a <_strtod_l+0x272>
 8009a54:	2301      	movs	r3, #1
 8009a56:	f7ff bb9e 	b.w	8009196 <_strtod_l+0x2ee>
 8009a5a:	bf00      	nop
 8009a5c:	f3af 8000 	nop.w
 8009a60:	ffc00000 	.word	0xffc00000
 8009a64:	41dfffff 	.word	0x41dfffff
 8009a68:	94a03595 	.word	0x94a03595
 8009a6c:	3fcfffff 	.word	0x3fcfffff

08009a70 <strtod>:
 8009a70:	460a      	mov	r2, r1
 8009a72:	4601      	mov	r1, r0
 8009a74:	4802      	ldr	r0, [pc, #8]	@ (8009a80 <strtod+0x10>)
 8009a76:	4b03      	ldr	r3, [pc, #12]	@ (8009a84 <strtod+0x14>)
 8009a78:	6800      	ldr	r0, [r0, #0]
 8009a7a:	f7ff ba15 	b.w	8008ea8 <_strtod_l>
 8009a7e:	bf00      	nop
 8009a80:	20000184 	.word	0x20000184
 8009a84:	20000018 	.word	0x20000018

08009a88 <_strtol_l.constprop.0>:
 8009a88:	2b24      	cmp	r3, #36	@ 0x24
 8009a8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a8e:	4686      	mov	lr, r0
 8009a90:	4690      	mov	r8, r2
 8009a92:	d801      	bhi.n	8009a98 <_strtol_l.constprop.0+0x10>
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d106      	bne.n	8009aa6 <_strtol_l.constprop.0+0x1e>
 8009a98:	f000 fecc 	bl	800a834 <__errno>
 8009a9c:	2316      	movs	r3, #22
 8009a9e:	6003      	str	r3, [r0, #0]
 8009aa0:	2000      	movs	r0, #0
 8009aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aa6:	4834      	ldr	r0, [pc, #208]	@ (8009b78 <_strtol_l.constprop.0+0xf0>)
 8009aa8:	460d      	mov	r5, r1
 8009aaa:	462a      	mov	r2, r5
 8009aac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ab0:	5d06      	ldrb	r6, [r0, r4]
 8009ab2:	f016 0608 	ands.w	r6, r6, #8
 8009ab6:	d1f8      	bne.n	8009aaa <_strtol_l.constprop.0+0x22>
 8009ab8:	2c2d      	cmp	r4, #45	@ 0x2d
 8009aba:	d12d      	bne.n	8009b18 <_strtol_l.constprop.0+0x90>
 8009abc:	782c      	ldrb	r4, [r5, #0]
 8009abe:	2601      	movs	r6, #1
 8009ac0:	1c95      	adds	r5, r2, #2
 8009ac2:	f033 0210 	bics.w	r2, r3, #16
 8009ac6:	d109      	bne.n	8009adc <_strtol_l.constprop.0+0x54>
 8009ac8:	2c30      	cmp	r4, #48	@ 0x30
 8009aca:	d12a      	bne.n	8009b22 <_strtol_l.constprop.0+0x9a>
 8009acc:	782a      	ldrb	r2, [r5, #0]
 8009ace:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009ad2:	2a58      	cmp	r2, #88	@ 0x58
 8009ad4:	d125      	bne.n	8009b22 <_strtol_l.constprop.0+0x9a>
 8009ad6:	786c      	ldrb	r4, [r5, #1]
 8009ad8:	2310      	movs	r3, #16
 8009ada:	3502      	adds	r5, #2
 8009adc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009ae0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	fbbc f9f3 	udiv	r9, ip, r3
 8009aea:	4610      	mov	r0, r2
 8009aec:	fb03 ca19 	mls	sl, r3, r9, ip
 8009af0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009af4:	2f09      	cmp	r7, #9
 8009af6:	d81b      	bhi.n	8009b30 <_strtol_l.constprop.0+0xa8>
 8009af8:	463c      	mov	r4, r7
 8009afa:	42a3      	cmp	r3, r4
 8009afc:	dd27      	ble.n	8009b4e <_strtol_l.constprop.0+0xc6>
 8009afe:	1c57      	adds	r7, r2, #1
 8009b00:	d007      	beq.n	8009b12 <_strtol_l.constprop.0+0x8a>
 8009b02:	4581      	cmp	r9, r0
 8009b04:	d320      	bcc.n	8009b48 <_strtol_l.constprop.0+0xc0>
 8009b06:	d101      	bne.n	8009b0c <_strtol_l.constprop.0+0x84>
 8009b08:	45a2      	cmp	sl, r4
 8009b0a:	db1d      	blt.n	8009b48 <_strtol_l.constprop.0+0xc0>
 8009b0c:	fb00 4003 	mla	r0, r0, r3, r4
 8009b10:	2201      	movs	r2, #1
 8009b12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b16:	e7eb      	b.n	8009af0 <_strtol_l.constprop.0+0x68>
 8009b18:	2c2b      	cmp	r4, #43	@ 0x2b
 8009b1a:	bf04      	itt	eq
 8009b1c:	782c      	ldrbeq	r4, [r5, #0]
 8009b1e:	1c95      	addeq	r5, r2, #2
 8009b20:	e7cf      	b.n	8009ac2 <_strtol_l.constprop.0+0x3a>
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1da      	bne.n	8009adc <_strtol_l.constprop.0+0x54>
 8009b26:	2c30      	cmp	r4, #48	@ 0x30
 8009b28:	bf0c      	ite	eq
 8009b2a:	2308      	moveq	r3, #8
 8009b2c:	230a      	movne	r3, #10
 8009b2e:	e7d5      	b.n	8009adc <_strtol_l.constprop.0+0x54>
 8009b30:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009b34:	2f19      	cmp	r7, #25
 8009b36:	d801      	bhi.n	8009b3c <_strtol_l.constprop.0+0xb4>
 8009b38:	3c37      	subs	r4, #55	@ 0x37
 8009b3a:	e7de      	b.n	8009afa <_strtol_l.constprop.0+0x72>
 8009b3c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009b40:	2f19      	cmp	r7, #25
 8009b42:	d804      	bhi.n	8009b4e <_strtol_l.constprop.0+0xc6>
 8009b44:	3c57      	subs	r4, #87	@ 0x57
 8009b46:	e7d8      	b.n	8009afa <_strtol_l.constprop.0+0x72>
 8009b48:	f04f 32ff 	mov.w	r2, #4294967295
 8009b4c:	e7e1      	b.n	8009b12 <_strtol_l.constprop.0+0x8a>
 8009b4e:	1c53      	adds	r3, r2, #1
 8009b50:	d108      	bne.n	8009b64 <_strtol_l.constprop.0+0xdc>
 8009b52:	2322      	movs	r3, #34	@ 0x22
 8009b54:	f8ce 3000 	str.w	r3, [lr]
 8009b58:	4660      	mov	r0, ip
 8009b5a:	f1b8 0f00 	cmp.w	r8, #0
 8009b5e:	d0a0      	beq.n	8009aa2 <_strtol_l.constprop.0+0x1a>
 8009b60:	1e69      	subs	r1, r5, #1
 8009b62:	e006      	b.n	8009b72 <_strtol_l.constprop.0+0xea>
 8009b64:	b106      	cbz	r6, 8009b68 <_strtol_l.constprop.0+0xe0>
 8009b66:	4240      	negs	r0, r0
 8009b68:	f1b8 0f00 	cmp.w	r8, #0
 8009b6c:	d099      	beq.n	8009aa2 <_strtol_l.constprop.0+0x1a>
 8009b6e:	2a00      	cmp	r2, #0
 8009b70:	d1f6      	bne.n	8009b60 <_strtol_l.constprop.0+0xd8>
 8009b72:	f8c8 1000 	str.w	r1, [r8]
 8009b76:	e794      	b.n	8009aa2 <_strtol_l.constprop.0+0x1a>
 8009b78:	0800d609 	.word	0x0800d609

08009b7c <strtol>:
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	460a      	mov	r2, r1
 8009b80:	4601      	mov	r1, r0
 8009b82:	4802      	ldr	r0, [pc, #8]	@ (8009b8c <strtol+0x10>)
 8009b84:	6800      	ldr	r0, [r0, #0]
 8009b86:	f7ff bf7f 	b.w	8009a88 <_strtol_l.constprop.0>
 8009b8a:	bf00      	nop
 8009b8c:	20000184 	.word	0x20000184

08009b90 <__cvt>:
 8009b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b94:	ec57 6b10 	vmov	r6, r7, d0
 8009b98:	2f00      	cmp	r7, #0
 8009b9a:	460c      	mov	r4, r1
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	463b      	mov	r3, r7
 8009ba0:	bfbb      	ittet	lt
 8009ba2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009ba6:	461f      	movlt	r7, r3
 8009ba8:	2300      	movge	r3, #0
 8009baa:	232d      	movlt	r3, #45	@ 0x2d
 8009bac:	700b      	strb	r3, [r1, #0]
 8009bae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bb0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009bb4:	4691      	mov	r9, r2
 8009bb6:	f023 0820 	bic.w	r8, r3, #32
 8009bba:	bfbc      	itt	lt
 8009bbc:	4632      	movlt	r2, r6
 8009bbe:	4616      	movlt	r6, r2
 8009bc0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009bc4:	d005      	beq.n	8009bd2 <__cvt+0x42>
 8009bc6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009bca:	d100      	bne.n	8009bce <__cvt+0x3e>
 8009bcc:	3401      	adds	r4, #1
 8009bce:	2102      	movs	r1, #2
 8009bd0:	e000      	b.n	8009bd4 <__cvt+0x44>
 8009bd2:	2103      	movs	r1, #3
 8009bd4:	ab03      	add	r3, sp, #12
 8009bd6:	9301      	str	r3, [sp, #4]
 8009bd8:	ab02      	add	r3, sp, #8
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	ec47 6b10 	vmov	d0, r6, r7
 8009be0:	4653      	mov	r3, sl
 8009be2:	4622      	mov	r2, r4
 8009be4:	f000 ff14 	bl	800aa10 <_dtoa_r>
 8009be8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009bec:	4605      	mov	r5, r0
 8009bee:	d119      	bne.n	8009c24 <__cvt+0x94>
 8009bf0:	f019 0f01 	tst.w	r9, #1
 8009bf4:	d00e      	beq.n	8009c14 <__cvt+0x84>
 8009bf6:	eb00 0904 	add.w	r9, r0, r4
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	4630      	mov	r0, r6
 8009c00:	4639      	mov	r1, r7
 8009c02:	f7f6 ff91 	bl	8000b28 <__aeabi_dcmpeq>
 8009c06:	b108      	cbz	r0, 8009c0c <__cvt+0x7c>
 8009c08:	f8cd 900c 	str.w	r9, [sp, #12]
 8009c0c:	2230      	movs	r2, #48	@ 0x30
 8009c0e:	9b03      	ldr	r3, [sp, #12]
 8009c10:	454b      	cmp	r3, r9
 8009c12:	d31e      	bcc.n	8009c52 <__cvt+0xc2>
 8009c14:	9b03      	ldr	r3, [sp, #12]
 8009c16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c18:	1b5b      	subs	r3, r3, r5
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	6013      	str	r3, [r2, #0]
 8009c1e:	b004      	add	sp, #16
 8009c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009c28:	eb00 0904 	add.w	r9, r0, r4
 8009c2c:	d1e5      	bne.n	8009bfa <__cvt+0x6a>
 8009c2e:	7803      	ldrb	r3, [r0, #0]
 8009c30:	2b30      	cmp	r3, #48	@ 0x30
 8009c32:	d10a      	bne.n	8009c4a <__cvt+0xba>
 8009c34:	2200      	movs	r2, #0
 8009c36:	2300      	movs	r3, #0
 8009c38:	4630      	mov	r0, r6
 8009c3a:	4639      	mov	r1, r7
 8009c3c:	f7f6 ff74 	bl	8000b28 <__aeabi_dcmpeq>
 8009c40:	b918      	cbnz	r0, 8009c4a <__cvt+0xba>
 8009c42:	f1c4 0401 	rsb	r4, r4, #1
 8009c46:	f8ca 4000 	str.w	r4, [sl]
 8009c4a:	f8da 3000 	ldr.w	r3, [sl]
 8009c4e:	4499      	add	r9, r3
 8009c50:	e7d3      	b.n	8009bfa <__cvt+0x6a>
 8009c52:	1c59      	adds	r1, r3, #1
 8009c54:	9103      	str	r1, [sp, #12]
 8009c56:	701a      	strb	r2, [r3, #0]
 8009c58:	e7d9      	b.n	8009c0e <__cvt+0x7e>

08009c5a <__exponent>:
 8009c5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c5c:	2900      	cmp	r1, #0
 8009c5e:	bfba      	itte	lt
 8009c60:	4249      	neglt	r1, r1
 8009c62:	232d      	movlt	r3, #45	@ 0x2d
 8009c64:	232b      	movge	r3, #43	@ 0x2b
 8009c66:	2909      	cmp	r1, #9
 8009c68:	7002      	strb	r2, [r0, #0]
 8009c6a:	7043      	strb	r3, [r0, #1]
 8009c6c:	dd29      	ble.n	8009cc2 <__exponent+0x68>
 8009c6e:	f10d 0307 	add.w	r3, sp, #7
 8009c72:	461d      	mov	r5, r3
 8009c74:	270a      	movs	r7, #10
 8009c76:	461a      	mov	r2, r3
 8009c78:	fbb1 f6f7 	udiv	r6, r1, r7
 8009c7c:	fb07 1416 	mls	r4, r7, r6, r1
 8009c80:	3430      	adds	r4, #48	@ 0x30
 8009c82:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009c86:	460c      	mov	r4, r1
 8009c88:	2c63      	cmp	r4, #99	@ 0x63
 8009c8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009c8e:	4631      	mov	r1, r6
 8009c90:	dcf1      	bgt.n	8009c76 <__exponent+0x1c>
 8009c92:	3130      	adds	r1, #48	@ 0x30
 8009c94:	1e94      	subs	r4, r2, #2
 8009c96:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009c9a:	1c41      	adds	r1, r0, #1
 8009c9c:	4623      	mov	r3, r4
 8009c9e:	42ab      	cmp	r3, r5
 8009ca0:	d30a      	bcc.n	8009cb8 <__exponent+0x5e>
 8009ca2:	f10d 0309 	add.w	r3, sp, #9
 8009ca6:	1a9b      	subs	r3, r3, r2
 8009ca8:	42ac      	cmp	r4, r5
 8009caa:	bf88      	it	hi
 8009cac:	2300      	movhi	r3, #0
 8009cae:	3302      	adds	r3, #2
 8009cb0:	4403      	add	r3, r0
 8009cb2:	1a18      	subs	r0, r3, r0
 8009cb4:	b003      	add	sp, #12
 8009cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cb8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009cbc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009cc0:	e7ed      	b.n	8009c9e <__exponent+0x44>
 8009cc2:	2330      	movs	r3, #48	@ 0x30
 8009cc4:	3130      	adds	r1, #48	@ 0x30
 8009cc6:	7083      	strb	r3, [r0, #2]
 8009cc8:	70c1      	strb	r1, [r0, #3]
 8009cca:	1d03      	adds	r3, r0, #4
 8009ccc:	e7f1      	b.n	8009cb2 <__exponent+0x58>
	...

08009cd0 <_printf_float>:
 8009cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd4:	b08d      	sub	sp, #52	@ 0x34
 8009cd6:	460c      	mov	r4, r1
 8009cd8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009cdc:	4616      	mov	r6, r2
 8009cde:	461f      	mov	r7, r3
 8009ce0:	4605      	mov	r5, r0
 8009ce2:	f000 fd5d 	bl	800a7a0 <_localeconv_r>
 8009ce6:	6803      	ldr	r3, [r0, #0]
 8009ce8:	9304      	str	r3, [sp, #16]
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7f6 faf0 	bl	80002d0 <strlen>
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cf4:	f8d8 3000 	ldr.w	r3, [r8]
 8009cf8:	9005      	str	r0, [sp, #20]
 8009cfa:	3307      	adds	r3, #7
 8009cfc:	f023 0307 	bic.w	r3, r3, #7
 8009d00:	f103 0208 	add.w	r2, r3, #8
 8009d04:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009d08:	f8d4 b000 	ldr.w	fp, [r4]
 8009d0c:	f8c8 2000 	str.w	r2, [r8]
 8009d10:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d14:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009d18:	9307      	str	r3, [sp, #28]
 8009d1a:	f8cd 8018 	str.w	r8, [sp, #24]
 8009d1e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009d22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d26:	4b9c      	ldr	r3, [pc, #624]	@ (8009f98 <_printf_float+0x2c8>)
 8009d28:	f04f 32ff 	mov.w	r2, #4294967295
 8009d2c:	f7f6 ff2e 	bl	8000b8c <__aeabi_dcmpun>
 8009d30:	bb70      	cbnz	r0, 8009d90 <_printf_float+0xc0>
 8009d32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d36:	4b98      	ldr	r3, [pc, #608]	@ (8009f98 <_printf_float+0x2c8>)
 8009d38:	f04f 32ff 	mov.w	r2, #4294967295
 8009d3c:	f7f6 ff08 	bl	8000b50 <__aeabi_dcmple>
 8009d40:	bb30      	cbnz	r0, 8009d90 <_printf_float+0xc0>
 8009d42:	2200      	movs	r2, #0
 8009d44:	2300      	movs	r3, #0
 8009d46:	4640      	mov	r0, r8
 8009d48:	4649      	mov	r1, r9
 8009d4a:	f7f6 fef7 	bl	8000b3c <__aeabi_dcmplt>
 8009d4e:	b110      	cbz	r0, 8009d56 <_printf_float+0x86>
 8009d50:	232d      	movs	r3, #45	@ 0x2d
 8009d52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d56:	4a91      	ldr	r2, [pc, #580]	@ (8009f9c <_printf_float+0x2cc>)
 8009d58:	4b91      	ldr	r3, [pc, #580]	@ (8009fa0 <_printf_float+0x2d0>)
 8009d5a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009d5e:	bf94      	ite	ls
 8009d60:	4690      	movls	r8, r2
 8009d62:	4698      	movhi	r8, r3
 8009d64:	2303      	movs	r3, #3
 8009d66:	6123      	str	r3, [r4, #16]
 8009d68:	f02b 0304 	bic.w	r3, fp, #4
 8009d6c:	6023      	str	r3, [r4, #0]
 8009d6e:	f04f 0900 	mov.w	r9, #0
 8009d72:	9700      	str	r7, [sp, #0]
 8009d74:	4633      	mov	r3, r6
 8009d76:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009d78:	4621      	mov	r1, r4
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	f000 f9d2 	bl	800a124 <_printf_common>
 8009d80:	3001      	adds	r0, #1
 8009d82:	f040 808d 	bne.w	8009ea0 <_printf_float+0x1d0>
 8009d86:	f04f 30ff 	mov.w	r0, #4294967295
 8009d8a:	b00d      	add	sp, #52	@ 0x34
 8009d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d90:	4642      	mov	r2, r8
 8009d92:	464b      	mov	r3, r9
 8009d94:	4640      	mov	r0, r8
 8009d96:	4649      	mov	r1, r9
 8009d98:	f7f6 fef8 	bl	8000b8c <__aeabi_dcmpun>
 8009d9c:	b140      	cbz	r0, 8009db0 <_printf_float+0xe0>
 8009d9e:	464b      	mov	r3, r9
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	bfbc      	itt	lt
 8009da4:	232d      	movlt	r3, #45	@ 0x2d
 8009da6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009daa:	4a7e      	ldr	r2, [pc, #504]	@ (8009fa4 <_printf_float+0x2d4>)
 8009dac:	4b7e      	ldr	r3, [pc, #504]	@ (8009fa8 <_printf_float+0x2d8>)
 8009dae:	e7d4      	b.n	8009d5a <_printf_float+0x8a>
 8009db0:	6863      	ldr	r3, [r4, #4]
 8009db2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009db6:	9206      	str	r2, [sp, #24]
 8009db8:	1c5a      	adds	r2, r3, #1
 8009dba:	d13b      	bne.n	8009e34 <_printf_float+0x164>
 8009dbc:	2306      	movs	r3, #6
 8009dbe:	6063      	str	r3, [r4, #4]
 8009dc0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	6022      	str	r2, [r4, #0]
 8009dc8:	9303      	str	r3, [sp, #12]
 8009dca:	ab0a      	add	r3, sp, #40	@ 0x28
 8009dcc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009dd0:	ab09      	add	r3, sp, #36	@ 0x24
 8009dd2:	9300      	str	r3, [sp, #0]
 8009dd4:	6861      	ldr	r1, [r4, #4]
 8009dd6:	ec49 8b10 	vmov	d0, r8, r9
 8009dda:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009dde:	4628      	mov	r0, r5
 8009de0:	f7ff fed6 	bl	8009b90 <__cvt>
 8009de4:	9b06      	ldr	r3, [sp, #24]
 8009de6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009de8:	2b47      	cmp	r3, #71	@ 0x47
 8009dea:	4680      	mov	r8, r0
 8009dec:	d129      	bne.n	8009e42 <_printf_float+0x172>
 8009dee:	1cc8      	adds	r0, r1, #3
 8009df0:	db02      	blt.n	8009df8 <_printf_float+0x128>
 8009df2:	6863      	ldr	r3, [r4, #4]
 8009df4:	4299      	cmp	r1, r3
 8009df6:	dd41      	ble.n	8009e7c <_printf_float+0x1ac>
 8009df8:	f1aa 0a02 	sub.w	sl, sl, #2
 8009dfc:	fa5f fa8a 	uxtb.w	sl, sl
 8009e00:	3901      	subs	r1, #1
 8009e02:	4652      	mov	r2, sl
 8009e04:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009e08:	9109      	str	r1, [sp, #36]	@ 0x24
 8009e0a:	f7ff ff26 	bl	8009c5a <__exponent>
 8009e0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e10:	1813      	adds	r3, r2, r0
 8009e12:	2a01      	cmp	r2, #1
 8009e14:	4681      	mov	r9, r0
 8009e16:	6123      	str	r3, [r4, #16]
 8009e18:	dc02      	bgt.n	8009e20 <_printf_float+0x150>
 8009e1a:	6822      	ldr	r2, [r4, #0]
 8009e1c:	07d2      	lsls	r2, r2, #31
 8009e1e:	d501      	bpl.n	8009e24 <_printf_float+0x154>
 8009e20:	3301      	adds	r3, #1
 8009e22:	6123      	str	r3, [r4, #16]
 8009e24:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d0a2      	beq.n	8009d72 <_printf_float+0xa2>
 8009e2c:	232d      	movs	r3, #45	@ 0x2d
 8009e2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e32:	e79e      	b.n	8009d72 <_printf_float+0xa2>
 8009e34:	9a06      	ldr	r2, [sp, #24]
 8009e36:	2a47      	cmp	r2, #71	@ 0x47
 8009e38:	d1c2      	bne.n	8009dc0 <_printf_float+0xf0>
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d1c0      	bne.n	8009dc0 <_printf_float+0xf0>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e7bd      	b.n	8009dbe <_printf_float+0xee>
 8009e42:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009e46:	d9db      	bls.n	8009e00 <_printf_float+0x130>
 8009e48:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009e4c:	d118      	bne.n	8009e80 <_printf_float+0x1b0>
 8009e4e:	2900      	cmp	r1, #0
 8009e50:	6863      	ldr	r3, [r4, #4]
 8009e52:	dd0b      	ble.n	8009e6c <_printf_float+0x19c>
 8009e54:	6121      	str	r1, [r4, #16]
 8009e56:	b913      	cbnz	r3, 8009e5e <_printf_float+0x18e>
 8009e58:	6822      	ldr	r2, [r4, #0]
 8009e5a:	07d0      	lsls	r0, r2, #31
 8009e5c:	d502      	bpl.n	8009e64 <_printf_float+0x194>
 8009e5e:	3301      	adds	r3, #1
 8009e60:	440b      	add	r3, r1
 8009e62:	6123      	str	r3, [r4, #16]
 8009e64:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009e66:	f04f 0900 	mov.w	r9, #0
 8009e6a:	e7db      	b.n	8009e24 <_printf_float+0x154>
 8009e6c:	b913      	cbnz	r3, 8009e74 <_printf_float+0x1a4>
 8009e6e:	6822      	ldr	r2, [r4, #0]
 8009e70:	07d2      	lsls	r2, r2, #31
 8009e72:	d501      	bpl.n	8009e78 <_printf_float+0x1a8>
 8009e74:	3302      	adds	r3, #2
 8009e76:	e7f4      	b.n	8009e62 <_printf_float+0x192>
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e7f2      	b.n	8009e62 <_printf_float+0x192>
 8009e7c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009e80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e82:	4299      	cmp	r1, r3
 8009e84:	db05      	blt.n	8009e92 <_printf_float+0x1c2>
 8009e86:	6823      	ldr	r3, [r4, #0]
 8009e88:	6121      	str	r1, [r4, #16]
 8009e8a:	07d8      	lsls	r0, r3, #31
 8009e8c:	d5ea      	bpl.n	8009e64 <_printf_float+0x194>
 8009e8e:	1c4b      	adds	r3, r1, #1
 8009e90:	e7e7      	b.n	8009e62 <_printf_float+0x192>
 8009e92:	2900      	cmp	r1, #0
 8009e94:	bfd4      	ite	le
 8009e96:	f1c1 0202 	rsble	r2, r1, #2
 8009e9a:	2201      	movgt	r2, #1
 8009e9c:	4413      	add	r3, r2
 8009e9e:	e7e0      	b.n	8009e62 <_printf_float+0x192>
 8009ea0:	6823      	ldr	r3, [r4, #0]
 8009ea2:	055a      	lsls	r2, r3, #21
 8009ea4:	d407      	bmi.n	8009eb6 <_printf_float+0x1e6>
 8009ea6:	6923      	ldr	r3, [r4, #16]
 8009ea8:	4642      	mov	r2, r8
 8009eaa:	4631      	mov	r1, r6
 8009eac:	4628      	mov	r0, r5
 8009eae:	47b8      	blx	r7
 8009eb0:	3001      	adds	r0, #1
 8009eb2:	d12b      	bne.n	8009f0c <_printf_float+0x23c>
 8009eb4:	e767      	b.n	8009d86 <_printf_float+0xb6>
 8009eb6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009eba:	f240 80dd 	bls.w	800a078 <_printf_float+0x3a8>
 8009ebe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	f7f6 fe2f 	bl	8000b28 <__aeabi_dcmpeq>
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	d033      	beq.n	8009f36 <_printf_float+0x266>
 8009ece:	4a37      	ldr	r2, [pc, #220]	@ (8009fac <_printf_float+0x2dc>)
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	4631      	mov	r1, r6
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	47b8      	blx	r7
 8009ed8:	3001      	adds	r0, #1
 8009eda:	f43f af54 	beq.w	8009d86 <_printf_float+0xb6>
 8009ede:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009ee2:	4543      	cmp	r3, r8
 8009ee4:	db02      	blt.n	8009eec <_printf_float+0x21c>
 8009ee6:	6823      	ldr	r3, [r4, #0]
 8009ee8:	07d8      	lsls	r0, r3, #31
 8009eea:	d50f      	bpl.n	8009f0c <_printf_float+0x23c>
 8009eec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ef0:	4631      	mov	r1, r6
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	47b8      	blx	r7
 8009ef6:	3001      	adds	r0, #1
 8009ef8:	f43f af45 	beq.w	8009d86 <_printf_float+0xb6>
 8009efc:	f04f 0900 	mov.w	r9, #0
 8009f00:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f04:	f104 0a1a 	add.w	sl, r4, #26
 8009f08:	45c8      	cmp	r8, r9
 8009f0a:	dc09      	bgt.n	8009f20 <_printf_float+0x250>
 8009f0c:	6823      	ldr	r3, [r4, #0]
 8009f0e:	079b      	lsls	r3, r3, #30
 8009f10:	f100 8103 	bmi.w	800a11a <_printf_float+0x44a>
 8009f14:	68e0      	ldr	r0, [r4, #12]
 8009f16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f18:	4298      	cmp	r0, r3
 8009f1a:	bfb8      	it	lt
 8009f1c:	4618      	movlt	r0, r3
 8009f1e:	e734      	b.n	8009d8a <_printf_float+0xba>
 8009f20:	2301      	movs	r3, #1
 8009f22:	4652      	mov	r2, sl
 8009f24:	4631      	mov	r1, r6
 8009f26:	4628      	mov	r0, r5
 8009f28:	47b8      	blx	r7
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	f43f af2b 	beq.w	8009d86 <_printf_float+0xb6>
 8009f30:	f109 0901 	add.w	r9, r9, #1
 8009f34:	e7e8      	b.n	8009f08 <_printf_float+0x238>
 8009f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	dc39      	bgt.n	8009fb0 <_printf_float+0x2e0>
 8009f3c:	4a1b      	ldr	r2, [pc, #108]	@ (8009fac <_printf_float+0x2dc>)
 8009f3e:	2301      	movs	r3, #1
 8009f40:	4631      	mov	r1, r6
 8009f42:	4628      	mov	r0, r5
 8009f44:	47b8      	blx	r7
 8009f46:	3001      	adds	r0, #1
 8009f48:	f43f af1d 	beq.w	8009d86 <_printf_float+0xb6>
 8009f4c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009f50:	ea59 0303 	orrs.w	r3, r9, r3
 8009f54:	d102      	bne.n	8009f5c <_printf_float+0x28c>
 8009f56:	6823      	ldr	r3, [r4, #0]
 8009f58:	07d9      	lsls	r1, r3, #31
 8009f5a:	d5d7      	bpl.n	8009f0c <_printf_float+0x23c>
 8009f5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f60:	4631      	mov	r1, r6
 8009f62:	4628      	mov	r0, r5
 8009f64:	47b8      	blx	r7
 8009f66:	3001      	adds	r0, #1
 8009f68:	f43f af0d 	beq.w	8009d86 <_printf_float+0xb6>
 8009f6c:	f04f 0a00 	mov.w	sl, #0
 8009f70:	f104 0b1a 	add.w	fp, r4, #26
 8009f74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f76:	425b      	negs	r3, r3
 8009f78:	4553      	cmp	r3, sl
 8009f7a:	dc01      	bgt.n	8009f80 <_printf_float+0x2b0>
 8009f7c:	464b      	mov	r3, r9
 8009f7e:	e793      	b.n	8009ea8 <_printf_float+0x1d8>
 8009f80:	2301      	movs	r3, #1
 8009f82:	465a      	mov	r2, fp
 8009f84:	4631      	mov	r1, r6
 8009f86:	4628      	mov	r0, r5
 8009f88:	47b8      	blx	r7
 8009f8a:	3001      	adds	r0, #1
 8009f8c:	f43f aefb 	beq.w	8009d86 <_printf_float+0xb6>
 8009f90:	f10a 0a01 	add.w	sl, sl, #1
 8009f94:	e7ee      	b.n	8009f74 <_printf_float+0x2a4>
 8009f96:	bf00      	nop
 8009f98:	7fefffff 	.word	0x7fefffff
 8009f9c:	0800d709 	.word	0x0800d709
 8009fa0:	0800d70d 	.word	0x0800d70d
 8009fa4:	0800d711 	.word	0x0800d711
 8009fa8:	0800d715 	.word	0x0800d715
 8009fac:	0800d719 	.word	0x0800d719
 8009fb0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009fb2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009fb6:	4553      	cmp	r3, sl
 8009fb8:	bfa8      	it	ge
 8009fba:	4653      	movge	r3, sl
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	4699      	mov	r9, r3
 8009fc0:	dc36      	bgt.n	800a030 <_printf_float+0x360>
 8009fc2:	f04f 0b00 	mov.w	fp, #0
 8009fc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fca:	f104 021a 	add.w	r2, r4, #26
 8009fce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009fd0:	9306      	str	r3, [sp, #24]
 8009fd2:	eba3 0309 	sub.w	r3, r3, r9
 8009fd6:	455b      	cmp	r3, fp
 8009fd8:	dc31      	bgt.n	800a03e <_printf_float+0x36e>
 8009fda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fdc:	459a      	cmp	sl, r3
 8009fde:	dc3a      	bgt.n	800a056 <_printf_float+0x386>
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	07da      	lsls	r2, r3, #31
 8009fe4:	d437      	bmi.n	800a056 <_printf_float+0x386>
 8009fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fe8:	ebaa 0903 	sub.w	r9, sl, r3
 8009fec:	9b06      	ldr	r3, [sp, #24]
 8009fee:	ebaa 0303 	sub.w	r3, sl, r3
 8009ff2:	4599      	cmp	r9, r3
 8009ff4:	bfa8      	it	ge
 8009ff6:	4699      	movge	r9, r3
 8009ff8:	f1b9 0f00 	cmp.w	r9, #0
 8009ffc:	dc33      	bgt.n	800a066 <_printf_float+0x396>
 8009ffe:	f04f 0800 	mov.w	r8, #0
 800a002:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a006:	f104 0b1a 	add.w	fp, r4, #26
 800a00a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a00c:	ebaa 0303 	sub.w	r3, sl, r3
 800a010:	eba3 0309 	sub.w	r3, r3, r9
 800a014:	4543      	cmp	r3, r8
 800a016:	f77f af79 	ble.w	8009f0c <_printf_float+0x23c>
 800a01a:	2301      	movs	r3, #1
 800a01c:	465a      	mov	r2, fp
 800a01e:	4631      	mov	r1, r6
 800a020:	4628      	mov	r0, r5
 800a022:	47b8      	blx	r7
 800a024:	3001      	adds	r0, #1
 800a026:	f43f aeae 	beq.w	8009d86 <_printf_float+0xb6>
 800a02a:	f108 0801 	add.w	r8, r8, #1
 800a02e:	e7ec      	b.n	800a00a <_printf_float+0x33a>
 800a030:	4642      	mov	r2, r8
 800a032:	4631      	mov	r1, r6
 800a034:	4628      	mov	r0, r5
 800a036:	47b8      	blx	r7
 800a038:	3001      	adds	r0, #1
 800a03a:	d1c2      	bne.n	8009fc2 <_printf_float+0x2f2>
 800a03c:	e6a3      	b.n	8009d86 <_printf_float+0xb6>
 800a03e:	2301      	movs	r3, #1
 800a040:	4631      	mov	r1, r6
 800a042:	4628      	mov	r0, r5
 800a044:	9206      	str	r2, [sp, #24]
 800a046:	47b8      	blx	r7
 800a048:	3001      	adds	r0, #1
 800a04a:	f43f ae9c 	beq.w	8009d86 <_printf_float+0xb6>
 800a04e:	9a06      	ldr	r2, [sp, #24]
 800a050:	f10b 0b01 	add.w	fp, fp, #1
 800a054:	e7bb      	b.n	8009fce <_printf_float+0x2fe>
 800a056:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a05a:	4631      	mov	r1, r6
 800a05c:	4628      	mov	r0, r5
 800a05e:	47b8      	blx	r7
 800a060:	3001      	adds	r0, #1
 800a062:	d1c0      	bne.n	8009fe6 <_printf_float+0x316>
 800a064:	e68f      	b.n	8009d86 <_printf_float+0xb6>
 800a066:	9a06      	ldr	r2, [sp, #24]
 800a068:	464b      	mov	r3, r9
 800a06a:	4442      	add	r2, r8
 800a06c:	4631      	mov	r1, r6
 800a06e:	4628      	mov	r0, r5
 800a070:	47b8      	blx	r7
 800a072:	3001      	adds	r0, #1
 800a074:	d1c3      	bne.n	8009ffe <_printf_float+0x32e>
 800a076:	e686      	b.n	8009d86 <_printf_float+0xb6>
 800a078:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a07c:	f1ba 0f01 	cmp.w	sl, #1
 800a080:	dc01      	bgt.n	800a086 <_printf_float+0x3b6>
 800a082:	07db      	lsls	r3, r3, #31
 800a084:	d536      	bpl.n	800a0f4 <_printf_float+0x424>
 800a086:	2301      	movs	r3, #1
 800a088:	4642      	mov	r2, r8
 800a08a:	4631      	mov	r1, r6
 800a08c:	4628      	mov	r0, r5
 800a08e:	47b8      	blx	r7
 800a090:	3001      	adds	r0, #1
 800a092:	f43f ae78 	beq.w	8009d86 <_printf_float+0xb6>
 800a096:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a09a:	4631      	mov	r1, r6
 800a09c:	4628      	mov	r0, r5
 800a09e:	47b8      	blx	r7
 800a0a0:	3001      	adds	r0, #1
 800a0a2:	f43f ae70 	beq.w	8009d86 <_printf_float+0xb6>
 800a0a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0b2:	f7f6 fd39 	bl	8000b28 <__aeabi_dcmpeq>
 800a0b6:	b9c0      	cbnz	r0, 800a0ea <_printf_float+0x41a>
 800a0b8:	4653      	mov	r3, sl
 800a0ba:	f108 0201 	add.w	r2, r8, #1
 800a0be:	4631      	mov	r1, r6
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	47b8      	blx	r7
 800a0c4:	3001      	adds	r0, #1
 800a0c6:	d10c      	bne.n	800a0e2 <_printf_float+0x412>
 800a0c8:	e65d      	b.n	8009d86 <_printf_float+0xb6>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	465a      	mov	r2, fp
 800a0ce:	4631      	mov	r1, r6
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	47b8      	blx	r7
 800a0d4:	3001      	adds	r0, #1
 800a0d6:	f43f ae56 	beq.w	8009d86 <_printf_float+0xb6>
 800a0da:	f108 0801 	add.w	r8, r8, #1
 800a0de:	45d0      	cmp	r8, sl
 800a0e0:	dbf3      	blt.n	800a0ca <_printf_float+0x3fa>
 800a0e2:	464b      	mov	r3, r9
 800a0e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a0e8:	e6df      	b.n	8009eaa <_printf_float+0x1da>
 800a0ea:	f04f 0800 	mov.w	r8, #0
 800a0ee:	f104 0b1a 	add.w	fp, r4, #26
 800a0f2:	e7f4      	b.n	800a0de <_printf_float+0x40e>
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	4642      	mov	r2, r8
 800a0f8:	e7e1      	b.n	800a0be <_printf_float+0x3ee>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	464a      	mov	r2, r9
 800a0fe:	4631      	mov	r1, r6
 800a100:	4628      	mov	r0, r5
 800a102:	47b8      	blx	r7
 800a104:	3001      	adds	r0, #1
 800a106:	f43f ae3e 	beq.w	8009d86 <_printf_float+0xb6>
 800a10a:	f108 0801 	add.w	r8, r8, #1
 800a10e:	68e3      	ldr	r3, [r4, #12]
 800a110:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a112:	1a5b      	subs	r3, r3, r1
 800a114:	4543      	cmp	r3, r8
 800a116:	dcf0      	bgt.n	800a0fa <_printf_float+0x42a>
 800a118:	e6fc      	b.n	8009f14 <_printf_float+0x244>
 800a11a:	f04f 0800 	mov.w	r8, #0
 800a11e:	f104 0919 	add.w	r9, r4, #25
 800a122:	e7f4      	b.n	800a10e <_printf_float+0x43e>

0800a124 <_printf_common>:
 800a124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a128:	4616      	mov	r6, r2
 800a12a:	4698      	mov	r8, r3
 800a12c:	688a      	ldr	r2, [r1, #8]
 800a12e:	690b      	ldr	r3, [r1, #16]
 800a130:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a134:	4293      	cmp	r3, r2
 800a136:	bfb8      	it	lt
 800a138:	4613      	movlt	r3, r2
 800a13a:	6033      	str	r3, [r6, #0]
 800a13c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a140:	4607      	mov	r7, r0
 800a142:	460c      	mov	r4, r1
 800a144:	b10a      	cbz	r2, 800a14a <_printf_common+0x26>
 800a146:	3301      	adds	r3, #1
 800a148:	6033      	str	r3, [r6, #0]
 800a14a:	6823      	ldr	r3, [r4, #0]
 800a14c:	0699      	lsls	r1, r3, #26
 800a14e:	bf42      	ittt	mi
 800a150:	6833      	ldrmi	r3, [r6, #0]
 800a152:	3302      	addmi	r3, #2
 800a154:	6033      	strmi	r3, [r6, #0]
 800a156:	6825      	ldr	r5, [r4, #0]
 800a158:	f015 0506 	ands.w	r5, r5, #6
 800a15c:	d106      	bne.n	800a16c <_printf_common+0x48>
 800a15e:	f104 0a19 	add.w	sl, r4, #25
 800a162:	68e3      	ldr	r3, [r4, #12]
 800a164:	6832      	ldr	r2, [r6, #0]
 800a166:	1a9b      	subs	r3, r3, r2
 800a168:	42ab      	cmp	r3, r5
 800a16a:	dc26      	bgt.n	800a1ba <_printf_common+0x96>
 800a16c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a170:	6822      	ldr	r2, [r4, #0]
 800a172:	3b00      	subs	r3, #0
 800a174:	bf18      	it	ne
 800a176:	2301      	movne	r3, #1
 800a178:	0692      	lsls	r2, r2, #26
 800a17a:	d42b      	bmi.n	800a1d4 <_printf_common+0xb0>
 800a17c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a180:	4641      	mov	r1, r8
 800a182:	4638      	mov	r0, r7
 800a184:	47c8      	blx	r9
 800a186:	3001      	adds	r0, #1
 800a188:	d01e      	beq.n	800a1c8 <_printf_common+0xa4>
 800a18a:	6823      	ldr	r3, [r4, #0]
 800a18c:	6922      	ldr	r2, [r4, #16]
 800a18e:	f003 0306 	and.w	r3, r3, #6
 800a192:	2b04      	cmp	r3, #4
 800a194:	bf02      	ittt	eq
 800a196:	68e5      	ldreq	r5, [r4, #12]
 800a198:	6833      	ldreq	r3, [r6, #0]
 800a19a:	1aed      	subeq	r5, r5, r3
 800a19c:	68a3      	ldr	r3, [r4, #8]
 800a19e:	bf0c      	ite	eq
 800a1a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1a4:	2500      	movne	r5, #0
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	bfc4      	itt	gt
 800a1aa:	1a9b      	subgt	r3, r3, r2
 800a1ac:	18ed      	addgt	r5, r5, r3
 800a1ae:	2600      	movs	r6, #0
 800a1b0:	341a      	adds	r4, #26
 800a1b2:	42b5      	cmp	r5, r6
 800a1b4:	d11a      	bne.n	800a1ec <_printf_common+0xc8>
 800a1b6:	2000      	movs	r0, #0
 800a1b8:	e008      	b.n	800a1cc <_printf_common+0xa8>
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	4652      	mov	r2, sl
 800a1be:	4641      	mov	r1, r8
 800a1c0:	4638      	mov	r0, r7
 800a1c2:	47c8      	blx	r9
 800a1c4:	3001      	adds	r0, #1
 800a1c6:	d103      	bne.n	800a1d0 <_printf_common+0xac>
 800a1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1d0:	3501      	adds	r5, #1
 800a1d2:	e7c6      	b.n	800a162 <_printf_common+0x3e>
 800a1d4:	18e1      	adds	r1, r4, r3
 800a1d6:	1c5a      	adds	r2, r3, #1
 800a1d8:	2030      	movs	r0, #48	@ 0x30
 800a1da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a1de:	4422      	add	r2, r4
 800a1e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a1e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a1e8:	3302      	adds	r3, #2
 800a1ea:	e7c7      	b.n	800a17c <_printf_common+0x58>
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	4622      	mov	r2, r4
 800a1f0:	4641      	mov	r1, r8
 800a1f2:	4638      	mov	r0, r7
 800a1f4:	47c8      	blx	r9
 800a1f6:	3001      	adds	r0, #1
 800a1f8:	d0e6      	beq.n	800a1c8 <_printf_common+0xa4>
 800a1fa:	3601      	adds	r6, #1
 800a1fc:	e7d9      	b.n	800a1b2 <_printf_common+0x8e>
	...

0800a200 <_printf_i>:
 800a200:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a204:	7e0f      	ldrb	r7, [r1, #24]
 800a206:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a208:	2f78      	cmp	r7, #120	@ 0x78
 800a20a:	4691      	mov	r9, r2
 800a20c:	4680      	mov	r8, r0
 800a20e:	460c      	mov	r4, r1
 800a210:	469a      	mov	sl, r3
 800a212:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a216:	d807      	bhi.n	800a228 <_printf_i+0x28>
 800a218:	2f62      	cmp	r7, #98	@ 0x62
 800a21a:	d80a      	bhi.n	800a232 <_printf_i+0x32>
 800a21c:	2f00      	cmp	r7, #0
 800a21e:	f000 80d2 	beq.w	800a3c6 <_printf_i+0x1c6>
 800a222:	2f58      	cmp	r7, #88	@ 0x58
 800a224:	f000 80b9 	beq.w	800a39a <_printf_i+0x19a>
 800a228:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a22c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a230:	e03a      	b.n	800a2a8 <_printf_i+0xa8>
 800a232:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a236:	2b15      	cmp	r3, #21
 800a238:	d8f6      	bhi.n	800a228 <_printf_i+0x28>
 800a23a:	a101      	add	r1, pc, #4	@ (adr r1, 800a240 <_printf_i+0x40>)
 800a23c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a240:	0800a299 	.word	0x0800a299
 800a244:	0800a2ad 	.word	0x0800a2ad
 800a248:	0800a229 	.word	0x0800a229
 800a24c:	0800a229 	.word	0x0800a229
 800a250:	0800a229 	.word	0x0800a229
 800a254:	0800a229 	.word	0x0800a229
 800a258:	0800a2ad 	.word	0x0800a2ad
 800a25c:	0800a229 	.word	0x0800a229
 800a260:	0800a229 	.word	0x0800a229
 800a264:	0800a229 	.word	0x0800a229
 800a268:	0800a229 	.word	0x0800a229
 800a26c:	0800a3ad 	.word	0x0800a3ad
 800a270:	0800a2d7 	.word	0x0800a2d7
 800a274:	0800a367 	.word	0x0800a367
 800a278:	0800a229 	.word	0x0800a229
 800a27c:	0800a229 	.word	0x0800a229
 800a280:	0800a3cf 	.word	0x0800a3cf
 800a284:	0800a229 	.word	0x0800a229
 800a288:	0800a2d7 	.word	0x0800a2d7
 800a28c:	0800a229 	.word	0x0800a229
 800a290:	0800a229 	.word	0x0800a229
 800a294:	0800a36f 	.word	0x0800a36f
 800a298:	6833      	ldr	r3, [r6, #0]
 800a29a:	1d1a      	adds	r2, r3, #4
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	6032      	str	r2, [r6, #0]
 800a2a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	e09d      	b.n	800a3e8 <_printf_i+0x1e8>
 800a2ac:	6833      	ldr	r3, [r6, #0]
 800a2ae:	6820      	ldr	r0, [r4, #0]
 800a2b0:	1d19      	adds	r1, r3, #4
 800a2b2:	6031      	str	r1, [r6, #0]
 800a2b4:	0606      	lsls	r6, r0, #24
 800a2b6:	d501      	bpl.n	800a2bc <_printf_i+0xbc>
 800a2b8:	681d      	ldr	r5, [r3, #0]
 800a2ba:	e003      	b.n	800a2c4 <_printf_i+0xc4>
 800a2bc:	0645      	lsls	r5, r0, #25
 800a2be:	d5fb      	bpl.n	800a2b8 <_printf_i+0xb8>
 800a2c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a2c4:	2d00      	cmp	r5, #0
 800a2c6:	da03      	bge.n	800a2d0 <_printf_i+0xd0>
 800a2c8:	232d      	movs	r3, #45	@ 0x2d
 800a2ca:	426d      	negs	r5, r5
 800a2cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2d0:	4859      	ldr	r0, [pc, #356]	@ (800a438 <_printf_i+0x238>)
 800a2d2:	230a      	movs	r3, #10
 800a2d4:	e011      	b.n	800a2fa <_printf_i+0xfa>
 800a2d6:	6821      	ldr	r1, [r4, #0]
 800a2d8:	6833      	ldr	r3, [r6, #0]
 800a2da:	0608      	lsls	r0, r1, #24
 800a2dc:	f853 5b04 	ldr.w	r5, [r3], #4
 800a2e0:	d402      	bmi.n	800a2e8 <_printf_i+0xe8>
 800a2e2:	0649      	lsls	r1, r1, #25
 800a2e4:	bf48      	it	mi
 800a2e6:	b2ad      	uxthmi	r5, r5
 800a2e8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a2ea:	4853      	ldr	r0, [pc, #332]	@ (800a438 <_printf_i+0x238>)
 800a2ec:	6033      	str	r3, [r6, #0]
 800a2ee:	bf14      	ite	ne
 800a2f0:	230a      	movne	r3, #10
 800a2f2:	2308      	moveq	r3, #8
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a2fa:	6866      	ldr	r6, [r4, #4]
 800a2fc:	60a6      	str	r6, [r4, #8]
 800a2fe:	2e00      	cmp	r6, #0
 800a300:	bfa2      	ittt	ge
 800a302:	6821      	ldrge	r1, [r4, #0]
 800a304:	f021 0104 	bicge.w	r1, r1, #4
 800a308:	6021      	strge	r1, [r4, #0]
 800a30a:	b90d      	cbnz	r5, 800a310 <_printf_i+0x110>
 800a30c:	2e00      	cmp	r6, #0
 800a30e:	d04b      	beq.n	800a3a8 <_printf_i+0x1a8>
 800a310:	4616      	mov	r6, r2
 800a312:	fbb5 f1f3 	udiv	r1, r5, r3
 800a316:	fb03 5711 	mls	r7, r3, r1, r5
 800a31a:	5dc7      	ldrb	r7, [r0, r7]
 800a31c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a320:	462f      	mov	r7, r5
 800a322:	42bb      	cmp	r3, r7
 800a324:	460d      	mov	r5, r1
 800a326:	d9f4      	bls.n	800a312 <_printf_i+0x112>
 800a328:	2b08      	cmp	r3, #8
 800a32a:	d10b      	bne.n	800a344 <_printf_i+0x144>
 800a32c:	6823      	ldr	r3, [r4, #0]
 800a32e:	07df      	lsls	r7, r3, #31
 800a330:	d508      	bpl.n	800a344 <_printf_i+0x144>
 800a332:	6923      	ldr	r3, [r4, #16]
 800a334:	6861      	ldr	r1, [r4, #4]
 800a336:	4299      	cmp	r1, r3
 800a338:	bfde      	ittt	le
 800a33a:	2330      	movle	r3, #48	@ 0x30
 800a33c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a340:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a344:	1b92      	subs	r2, r2, r6
 800a346:	6122      	str	r2, [r4, #16]
 800a348:	f8cd a000 	str.w	sl, [sp]
 800a34c:	464b      	mov	r3, r9
 800a34e:	aa03      	add	r2, sp, #12
 800a350:	4621      	mov	r1, r4
 800a352:	4640      	mov	r0, r8
 800a354:	f7ff fee6 	bl	800a124 <_printf_common>
 800a358:	3001      	adds	r0, #1
 800a35a:	d14a      	bne.n	800a3f2 <_printf_i+0x1f2>
 800a35c:	f04f 30ff 	mov.w	r0, #4294967295
 800a360:	b004      	add	sp, #16
 800a362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a366:	6823      	ldr	r3, [r4, #0]
 800a368:	f043 0320 	orr.w	r3, r3, #32
 800a36c:	6023      	str	r3, [r4, #0]
 800a36e:	4833      	ldr	r0, [pc, #204]	@ (800a43c <_printf_i+0x23c>)
 800a370:	2778      	movs	r7, #120	@ 0x78
 800a372:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a376:	6823      	ldr	r3, [r4, #0]
 800a378:	6831      	ldr	r1, [r6, #0]
 800a37a:	061f      	lsls	r7, r3, #24
 800a37c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a380:	d402      	bmi.n	800a388 <_printf_i+0x188>
 800a382:	065f      	lsls	r7, r3, #25
 800a384:	bf48      	it	mi
 800a386:	b2ad      	uxthmi	r5, r5
 800a388:	6031      	str	r1, [r6, #0]
 800a38a:	07d9      	lsls	r1, r3, #31
 800a38c:	bf44      	itt	mi
 800a38e:	f043 0320 	orrmi.w	r3, r3, #32
 800a392:	6023      	strmi	r3, [r4, #0]
 800a394:	b11d      	cbz	r5, 800a39e <_printf_i+0x19e>
 800a396:	2310      	movs	r3, #16
 800a398:	e7ac      	b.n	800a2f4 <_printf_i+0xf4>
 800a39a:	4827      	ldr	r0, [pc, #156]	@ (800a438 <_printf_i+0x238>)
 800a39c:	e7e9      	b.n	800a372 <_printf_i+0x172>
 800a39e:	6823      	ldr	r3, [r4, #0]
 800a3a0:	f023 0320 	bic.w	r3, r3, #32
 800a3a4:	6023      	str	r3, [r4, #0]
 800a3a6:	e7f6      	b.n	800a396 <_printf_i+0x196>
 800a3a8:	4616      	mov	r6, r2
 800a3aa:	e7bd      	b.n	800a328 <_printf_i+0x128>
 800a3ac:	6833      	ldr	r3, [r6, #0]
 800a3ae:	6825      	ldr	r5, [r4, #0]
 800a3b0:	6961      	ldr	r1, [r4, #20]
 800a3b2:	1d18      	adds	r0, r3, #4
 800a3b4:	6030      	str	r0, [r6, #0]
 800a3b6:	062e      	lsls	r6, r5, #24
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	d501      	bpl.n	800a3c0 <_printf_i+0x1c0>
 800a3bc:	6019      	str	r1, [r3, #0]
 800a3be:	e002      	b.n	800a3c6 <_printf_i+0x1c6>
 800a3c0:	0668      	lsls	r0, r5, #25
 800a3c2:	d5fb      	bpl.n	800a3bc <_printf_i+0x1bc>
 800a3c4:	8019      	strh	r1, [r3, #0]
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	6123      	str	r3, [r4, #16]
 800a3ca:	4616      	mov	r6, r2
 800a3cc:	e7bc      	b.n	800a348 <_printf_i+0x148>
 800a3ce:	6833      	ldr	r3, [r6, #0]
 800a3d0:	1d1a      	adds	r2, r3, #4
 800a3d2:	6032      	str	r2, [r6, #0]
 800a3d4:	681e      	ldr	r6, [r3, #0]
 800a3d6:	6862      	ldr	r2, [r4, #4]
 800a3d8:	2100      	movs	r1, #0
 800a3da:	4630      	mov	r0, r6
 800a3dc:	f7f5 ff28 	bl	8000230 <memchr>
 800a3e0:	b108      	cbz	r0, 800a3e6 <_printf_i+0x1e6>
 800a3e2:	1b80      	subs	r0, r0, r6
 800a3e4:	6060      	str	r0, [r4, #4]
 800a3e6:	6863      	ldr	r3, [r4, #4]
 800a3e8:	6123      	str	r3, [r4, #16]
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3f0:	e7aa      	b.n	800a348 <_printf_i+0x148>
 800a3f2:	6923      	ldr	r3, [r4, #16]
 800a3f4:	4632      	mov	r2, r6
 800a3f6:	4649      	mov	r1, r9
 800a3f8:	4640      	mov	r0, r8
 800a3fa:	47d0      	blx	sl
 800a3fc:	3001      	adds	r0, #1
 800a3fe:	d0ad      	beq.n	800a35c <_printf_i+0x15c>
 800a400:	6823      	ldr	r3, [r4, #0]
 800a402:	079b      	lsls	r3, r3, #30
 800a404:	d413      	bmi.n	800a42e <_printf_i+0x22e>
 800a406:	68e0      	ldr	r0, [r4, #12]
 800a408:	9b03      	ldr	r3, [sp, #12]
 800a40a:	4298      	cmp	r0, r3
 800a40c:	bfb8      	it	lt
 800a40e:	4618      	movlt	r0, r3
 800a410:	e7a6      	b.n	800a360 <_printf_i+0x160>
 800a412:	2301      	movs	r3, #1
 800a414:	4632      	mov	r2, r6
 800a416:	4649      	mov	r1, r9
 800a418:	4640      	mov	r0, r8
 800a41a:	47d0      	blx	sl
 800a41c:	3001      	adds	r0, #1
 800a41e:	d09d      	beq.n	800a35c <_printf_i+0x15c>
 800a420:	3501      	adds	r5, #1
 800a422:	68e3      	ldr	r3, [r4, #12]
 800a424:	9903      	ldr	r1, [sp, #12]
 800a426:	1a5b      	subs	r3, r3, r1
 800a428:	42ab      	cmp	r3, r5
 800a42a:	dcf2      	bgt.n	800a412 <_printf_i+0x212>
 800a42c:	e7eb      	b.n	800a406 <_printf_i+0x206>
 800a42e:	2500      	movs	r5, #0
 800a430:	f104 0619 	add.w	r6, r4, #25
 800a434:	e7f5      	b.n	800a422 <_printf_i+0x222>
 800a436:	bf00      	nop
 800a438:	0800d71b 	.word	0x0800d71b
 800a43c:	0800d72c 	.word	0x0800d72c

0800a440 <std>:
 800a440:	2300      	movs	r3, #0
 800a442:	b510      	push	{r4, lr}
 800a444:	4604      	mov	r4, r0
 800a446:	e9c0 3300 	strd	r3, r3, [r0]
 800a44a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a44e:	6083      	str	r3, [r0, #8]
 800a450:	8181      	strh	r1, [r0, #12]
 800a452:	6643      	str	r3, [r0, #100]	@ 0x64
 800a454:	81c2      	strh	r2, [r0, #14]
 800a456:	6183      	str	r3, [r0, #24]
 800a458:	4619      	mov	r1, r3
 800a45a:	2208      	movs	r2, #8
 800a45c:	305c      	adds	r0, #92	@ 0x5c
 800a45e:	f000 f928 	bl	800a6b2 <memset>
 800a462:	4b0d      	ldr	r3, [pc, #52]	@ (800a498 <std+0x58>)
 800a464:	6263      	str	r3, [r4, #36]	@ 0x24
 800a466:	4b0d      	ldr	r3, [pc, #52]	@ (800a49c <std+0x5c>)
 800a468:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a46a:	4b0d      	ldr	r3, [pc, #52]	@ (800a4a0 <std+0x60>)
 800a46c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a46e:	4b0d      	ldr	r3, [pc, #52]	@ (800a4a4 <std+0x64>)
 800a470:	6323      	str	r3, [r4, #48]	@ 0x30
 800a472:	4b0d      	ldr	r3, [pc, #52]	@ (800a4a8 <std+0x68>)
 800a474:	6224      	str	r4, [r4, #32]
 800a476:	429c      	cmp	r4, r3
 800a478:	d006      	beq.n	800a488 <std+0x48>
 800a47a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a47e:	4294      	cmp	r4, r2
 800a480:	d002      	beq.n	800a488 <std+0x48>
 800a482:	33d0      	adds	r3, #208	@ 0xd0
 800a484:	429c      	cmp	r4, r3
 800a486:	d105      	bne.n	800a494 <std+0x54>
 800a488:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a48c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a490:	f000 b9fa 	b.w	800a888 <__retarget_lock_init_recursive>
 800a494:	bd10      	pop	{r4, pc}
 800a496:	bf00      	nop
 800a498:	0800a62d 	.word	0x0800a62d
 800a49c:	0800a64f 	.word	0x0800a64f
 800a4a0:	0800a687 	.word	0x0800a687
 800a4a4:	0800a6ab 	.word	0x0800a6ab
 800a4a8:	20000df0 	.word	0x20000df0

0800a4ac <stdio_exit_handler>:
 800a4ac:	4a02      	ldr	r2, [pc, #8]	@ (800a4b8 <stdio_exit_handler+0xc>)
 800a4ae:	4903      	ldr	r1, [pc, #12]	@ (800a4bc <stdio_exit_handler+0x10>)
 800a4b0:	4803      	ldr	r0, [pc, #12]	@ (800a4c0 <stdio_exit_handler+0x14>)
 800a4b2:	f000 b869 	b.w	800a588 <_fwalk_sglue>
 800a4b6:	bf00      	nop
 800a4b8:	2000000c 	.word	0x2000000c
 800a4bc:	0800cb65 	.word	0x0800cb65
 800a4c0:	20000188 	.word	0x20000188

0800a4c4 <cleanup_stdio>:
 800a4c4:	6841      	ldr	r1, [r0, #4]
 800a4c6:	4b0c      	ldr	r3, [pc, #48]	@ (800a4f8 <cleanup_stdio+0x34>)
 800a4c8:	4299      	cmp	r1, r3
 800a4ca:	b510      	push	{r4, lr}
 800a4cc:	4604      	mov	r4, r0
 800a4ce:	d001      	beq.n	800a4d4 <cleanup_stdio+0x10>
 800a4d0:	f002 fb48 	bl	800cb64 <_fflush_r>
 800a4d4:	68a1      	ldr	r1, [r4, #8]
 800a4d6:	4b09      	ldr	r3, [pc, #36]	@ (800a4fc <cleanup_stdio+0x38>)
 800a4d8:	4299      	cmp	r1, r3
 800a4da:	d002      	beq.n	800a4e2 <cleanup_stdio+0x1e>
 800a4dc:	4620      	mov	r0, r4
 800a4de:	f002 fb41 	bl	800cb64 <_fflush_r>
 800a4e2:	68e1      	ldr	r1, [r4, #12]
 800a4e4:	4b06      	ldr	r3, [pc, #24]	@ (800a500 <cleanup_stdio+0x3c>)
 800a4e6:	4299      	cmp	r1, r3
 800a4e8:	d004      	beq.n	800a4f4 <cleanup_stdio+0x30>
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4f0:	f002 bb38 	b.w	800cb64 <_fflush_r>
 800a4f4:	bd10      	pop	{r4, pc}
 800a4f6:	bf00      	nop
 800a4f8:	20000df0 	.word	0x20000df0
 800a4fc:	20000e58 	.word	0x20000e58
 800a500:	20000ec0 	.word	0x20000ec0

0800a504 <global_stdio_init.part.0>:
 800a504:	b510      	push	{r4, lr}
 800a506:	4b0b      	ldr	r3, [pc, #44]	@ (800a534 <global_stdio_init.part.0+0x30>)
 800a508:	4c0b      	ldr	r4, [pc, #44]	@ (800a538 <global_stdio_init.part.0+0x34>)
 800a50a:	4a0c      	ldr	r2, [pc, #48]	@ (800a53c <global_stdio_init.part.0+0x38>)
 800a50c:	601a      	str	r2, [r3, #0]
 800a50e:	4620      	mov	r0, r4
 800a510:	2200      	movs	r2, #0
 800a512:	2104      	movs	r1, #4
 800a514:	f7ff ff94 	bl	800a440 <std>
 800a518:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a51c:	2201      	movs	r2, #1
 800a51e:	2109      	movs	r1, #9
 800a520:	f7ff ff8e 	bl	800a440 <std>
 800a524:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a528:	2202      	movs	r2, #2
 800a52a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a52e:	2112      	movs	r1, #18
 800a530:	f7ff bf86 	b.w	800a440 <std>
 800a534:	20000f28 	.word	0x20000f28
 800a538:	20000df0 	.word	0x20000df0
 800a53c:	0800a4ad 	.word	0x0800a4ad

0800a540 <__sfp_lock_acquire>:
 800a540:	4801      	ldr	r0, [pc, #4]	@ (800a548 <__sfp_lock_acquire+0x8>)
 800a542:	f000 b9a2 	b.w	800a88a <__retarget_lock_acquire_recursive>
 800a546:	bf00      	nop
 800a548:	20000f31 	.word	0x20000f31

0800a54c <__sfp_lock_release>:
 800a54c:	4801      	ldr	r0, [pc, #4]	@ (800a554 <__sfp_lock_release+0x8>)
 800a54e:	f000 b99d 	b.w	800a88c <__retarget_lock_release_recursive>
 800a552:	bf00      	nop
 800a554:	20000f31 	.word	0x20000f31

0800a558 <__sinit>:
 800a558:	b510      	push	{r4, lr}
 800a55a:	4604      	mov	r4, r0
 800a55c:	f7ff fff0 	bl	800a540 <__sfp_lock_acquire>
 800a560:	6a23      	ldr	r3, [r4, #32]
 800a562:	b11b      	cbz	r3, 800a56c <__sinit+0x14>
 800a564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a568:	f7ff bff0 	b.w	800a54c <__sfp_lock_release>
 800a56c:	4b04      	ldr	r3, [pc, #16]	@ (800a580 <__sinit+0x28>)
 800a56e:	6223      	str	r3, [r4, #32]
 800a570:	4b04      	ldr	r3, [pc, #16]	@ (800a584 <__sinit+0x2c>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1f5      	bne.n	800a564 <__sinit+0xc>
 800a578:	f7ff ffc4 	bl	800a504 <global_stdio_init.part.0>
 800a57c:	e7f2      	b.n	800a564 <__sinit+0xc>
 800a57e:	bf00      	nop
 800a580:	0800a4c5 	.word	0x0800a4c5
 800a584:	20000f28 	.word	0x20000f28

0800a588 <_fwalk_sglue>:
 800a588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a58c:	4607      	mov	r7, r0
 800a58e:	4688      	mov	r8, r1
 800a590:	4614      	mov	r4, r2
 800a592:	2600      	movs	r6, #0
 800a594:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a598:	f1b9 0901 	subs.w	r9, r9, #1
 800a59c:	d505      	bpl.n	800a5aa <_fwalk_sglue+0x22>
 800a59e:	6824      	ldr	r4, [r4, #0]
 800a5a0:	2c00      	cmp	r4, #0
 800a5a2:	d1f7      	bne.n	800a594 <_fwalk_sglue+0xc>
 800a5a4:	4630      	mov	r0, r6
 800a5a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5aa:	89ab      	ldrh	r3, [r5, #12]
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d907      	bls.n	800a5c0 <_fwalk_sglue+0x38>
 800a5b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	d003      	beq.n	800a5c0 <_fwalk_sglue+0x38>
 800a5b8:	4629      	mov	r1, r5
 800a5ba:	4638      	mov	r0, r7
 800a5bc:	47c0      	blx	r8
 800a5be:	4306      	orrs	r6, r0
 800a5c0:	3568      	adds	r5, #104	@ 0x68
 800a5c2:	e7e9      	b.n	800a598 <_fwalk_sglue+0x10>

0800a5c4 <sniprintf>:
 800a5c4:	b40c      	push	{r2, r3}
 800a5c6:	b530      	push	{r4, r5, lr}
 800a5c8:	4b17      	ldr	r3, [pc, #92]	@ (800a628 <sniprintf+0x64>)
 800a5ca:	1e0c      	subs	r4, r1, #0
 800a5cc:	681d      	ldr	r5, [r3, #0]
 800a5ce:	b09d      	sub	sp, #116	@ 0x74
 800a5d0:	da08      	bge.n	800a5e4 <sniprintf+0x20>
 800a5d2:	238b      	movs	r3, #139	@ 0x8b
 800a5d4:	602b      	str	r3, [r5, #0]
 800a5d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5da:	b01d      	add	sp, #116	@ 0x74
 800a5dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5e0:	b002      	add	sp, #8
 800a5e2:	4770      	bx	lr
 800a5e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a5e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a5ec:	bf14      	ite	ne
 800a5ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a5f2:	4623      	moveq	r3, r4
 800a5f4:	9304      	str	r3, [sp, #16]
 800a5f6:	9307      	str	r3, [sp, #28]
 800a5f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a5fc:	9002      	str	r0, [sp, #8]
 800a5fe:	9006      	str	r0, [sp, #24]
 800a600:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a604:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a606:	ab21      	add	r3, sp, #132	@ 0x84
 800a608:	a902      	add	r1, sp, #8
 800a60a:	4628      	mov	r0, r5
 800a60c:	9301      	str	r3, [sp, #4]
 800a60e:	f002 f929 	bl	800c864 <_svfiprintf_r>
 800a612:	1c43      	adds	r3, r0, #1
 800a614:	bfbc      	itt	lt
 800a616:	238b      	movlt	r3, #139	@ 0x8b
 800a618:	602b      	strlt	r3, [r5, #0]
 800a61a:	2c00      	cmp	r4, #0
 800a61c:	d0dd      	beq.n	800a5da <sniprintf+0x16>
 800a61e:	9b02      	ldr	r3, [sp, #8]
 800a620:	2200      	movs	r2, #0
 800a622:	701a      	strb	r2, [r3, #0]
 800a624:	e7d9      	b.n	800a5da <sniprintf+0x16>
 800a626:	bf00      	nop
 800a628:	20000184 	.word	0x20000184

0800a62c <__sread>:
 800a62c:	b510      	push	{r4, lr}
 800a62e:	460c      	mov	r4, r1
 800a630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a634:	f000 f8da 	bl	800a7ec <_read_r>
 800a638:	2800      	cmp	r0, #0
 800a63a:	bfab      	itete	ge
 800a63c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a63e:	89a3      	ldrhlt	r3, [r4, #12]
 800a640:	181b      	addge	r3, r3, r0
 800a642:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a646:	bfac      	ite	ge
 800a648:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a64a:	81a3      	strhlt	r3, [r4, #12]
 800a64c:	bd10      	pop	{r4, pc}

0800a64e <__swrite>:
 800a64e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a652:	461f      	mov	r7, r3
 800a654:	898b      	ldrh	r3, [r1, #12]
 800a656:	05db      	lsls	r3, r3, #23
 800a658:	4605      	mov	r5, r0
 800a65a:	460c      	mov	r4, r1
 800a65c:	4616      	mov	r6, r2
 800a65e:	d505      	bpl.n	800a66c <__swrite+0x1e>
 800a660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a664:	2302      	movs	r3, #2
 800a666:	2200      	movs	r2, #0
 800a668:	f000 f8ae 	bl	800a7c8 <_lseek_r>
 800a66c:	89a3      	ldrh	r3, [r4, #12]
 800a66e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a672:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a676:	81a3      	strh	r3, [r4, #12]
 800a678:	4632      	mov	r2, r6
 800a67a:	463b      	mov	r3, r7
 800a67c:	4628      	mov	r0, r5
 800a67e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a682:	f000 b8c5 	b.w	800a810 <_write_r>

0800a686 <__sseek>:
 800a686:	b510      	push	{r4, lr}
 800a688:	460c      	mov	r4, r1
 800a68a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a68e:	f000 f89b 	bl	800a7c8 <_lseek_r>
 800a692:	1c43      	adds	r3, r0, #1
 800a694:	89a3      	ldrh	r3, [r4, #12]
 800a696:	bf15      	itete	ne
 800a698:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a69a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a69e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a6a2:	81a3      	strheq	r3, [r4, #12]
 800a6a4:	bf18      	it	ne
 800a6a6:	81a3      	strhne	r3, [r4, #12]
 800a6a8:	bd10      	pop	{r4, pc}

0800a6aa <__sclose>:
 800a6aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6ae:	f000 b87b 	b.w	800a7a8 <_close_r>

0800a6b2 <memset>:
 800a6b2:	4402      	add	r2, r0
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d100      	bne.n	800a6bc <memset+0xa>
 800a6ba:	4770      	bx	lr
 800a6bc:	f803 1b01 	strb.w	r1, [r3], #1
 800a6c0:	e7f9      	b.n	800a6b6 <memset+0x4>

0800a6c2 <strncmp>:
 800a6c2:	b510      	push	{r4, lr}
 800a6c4:	b16a      	cbz	r2, 800a6e2 <strncmp+0x20>
 800a6c6:	3901      	subs	r1, #1
 800a6c8:	1884      	adds	r4, r0, r2
 800a6ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d103      	bne.n	800a6de <strncmp+0x1c>
 800a6d6:	42a0      	cmp	r0, r4
 800a6d8:	d001      	beq.n	800a6de <strncmp+0x1c>
 800a6da:	2a00      	cmp	r2, #0
 800a6dc:	d1f5      	bne.n	800a6ca <strncmp+0x8>
 800a6de:	1ad0      	subs	r0, r2, r3
 800a6e0:	bd10      	pop	{r4, pc}
 800a6e2:	4610      	mov	r0, r2
 800a6e4:	e7fc      	b.n	800a6e0 <strncmp+0x1e>
	...

0800a6e8 <strtok>:
 800a6e8:	4b16      	ldr	r3, [pc, #88]	@ (800a744 <strtok+0x5c>)
 800a6ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ee:	681f      	ldr	r7, [r3, #0]
 800a6f0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800a6f2:	4605      	mov	r5, r0
 800a6f4:	460e      	mov	r6, r1
 800a6f6:	b9ec      	cbnz	r4, 800a734 <strtok+0x4c>
 800a6f8:	2050      	movs	r0, #80	@ 0x50
 800a6fa:	f001 fad1 	bl	800bca0 <malloc>
 800a6fe:	4602      	mov	r2, r0
 800a700:	6478      	str	r0, [r7, #68]	@ 0x44
 800a702:	b920      	cbnz	r0, 800a70e <strtok+0x26>
 800a704:	4b10      	ldr	r3, [pc, #64]	@ (800a748 <strtok+0x60>)
 800a706:	4811      	ldr	r0, [pc, #68]	@ (800a74c <strtok+0x64>)
 800a708:	215b      	movs	r1, #91	@ 0x5b
 800a70a:	f000 f8d9 	bl	800a8c0 <__assert_func>
 800a70e:	e9c0 4400 	strd	r4, r4, [r0]
 800a712:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a716:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a71a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800a71e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800a722:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800a726:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800a72a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800a72e:	6184      	str	r4, [r0, #24]
 800a730:	7704      	strb	r4, [r0, #28]
 800a732:	6244      	str	r4, [r0, #36]	@ 0x24
 800a734:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a736:	4631      	mov	r1, r6
 800a738:	4628      	mov	r0, r5
 800a73a:	2301      	movs	r3, #1
 800a73c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a740:	f000 b806 	b.w	800a750 <__strtok_r>
 800a744:	20000184 	.word	0x20000184
 800a748:	0800d73d 	.word	0x0800d73d
 800a74c:	0800d754 	.word	0x0800d754

0800a750 <__strtok_r>:
 800a750:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a752:	4604      	mov	r4, r0
 800a754:	b908      	cbnz	r0, 800a75a <__strtok_r+0xa>
 800a756:	6814      	ldr	r4, [r2, #0]
 800a758:	b144      	cbz	r4, 800a76c <__strtok_r+0x1c>
 800a75a:	4620      	mov	r0, r4
 800a75c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a760:	460f      	mov	r7, r1
 800a762:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a766:	b91e      	cbnz	r6, 800a770 <__strtok_r+0x20>
 800a768:	b965      	cbnz	r5, 800a784 <__strtok_r+0x34>
 800a76a:	6015      	str	r5, [r2, #0]
 800a76c:	2000      	movs	r0, #0
 800a76e:	e005      	b.n	800a77c <__strtok_r+0x2c>
 800a770:	42b5      	cmp	r5, r6
 800a772:	d1f6      	bne.n	800a762 <__strtok_r+0x12>
 800a774:	2b00      	cmp	r3, #0
 800a776:	d1f0      	bne.n	800a75a <__strtok_r+0xa>
 800a778:	6014      	str	r4, [r2, #0]
 800a77a:	7003      	strb	r3, [r0, #0]
 800a77c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a77e:	461c      	mov	r4, r3
 800a780:	e00c      	b.n	800a79c <__strtok_r+0x4c>
 800a782:	b915      	cbnz	r5, 800a78a <__strtok_r+0x3a>
 800a784:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a788:	460e      	mov	r6, r1
 800a78a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a78e:	42ab      	cmp	r3, r5
 800a790:	d1f7      	bne.n	800a782 <__strtok_r+0x32>
 800a792:	2b00      	cmp	r3, #0
 800a794:	d0f3      	beq.n	800a77e <__strtok_r+0x2e>
 800a796:	2300      	movs	r3, #0
 800a798:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a79c:	6014      	str	r4, [r2, #0]
 800a79e:	e7ed      	b.n	800a77c <__strtok_r+0x2c>

0800a7a0 <_localeconv_r>:
 800a7a0:	4800      	ldr	r0, [pc, #0]	@ (800a7a4 <_localeconv_r+0x4>)
 800a7a2:	4770      	bx	lr
 800a7a4:	20000108 	.word	0x20000108

0800a7a8 <_close_r>:
 800a7a8:	b538      	push	{r3, r4, r5, lr}
 800a7aa:	4d06      	ldr	r5, [pc, #24]	@ (800a7c4 <_close_r+0x1c>)
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	4608      	mov	r0, r1
 800a7b2:	602b      	str	r3, [r5, #0]
 800a7b4:	f7f9 fc88 	bl	80040c8 <_close>
 800a7b8:	1c43      	adds	r3, r0, #1
 800a7ba:	d102      	bne.n	800a7c2 <_close_r+0x1a>
 800a7bc:	682b      	ldr	r3, [r5, #0]
 800a7be:	b103      	cbz	r3, 800a7c2 <_close_r+0x1a>
 800a7c0:	6023      	str	r3, [r4, #0]
 800a7c2:	bd38      	pop	{r3, r4, r5, pc}
 800a7c4:	20000f2c 	.word	0x20000f2c

0800a7c8 <_lseek_r>:
 800a7c8:	b538      	push	{r3, r4, r5, lr}
 800a7ca:	4d07      	ldr	r5, [pc, #28]	@ (800a7e8 <_lseek_r+0x20>)
 800a7cc:	4604      	mov	r4, r0
 800a7ce:	4608      	mov	r0, r1
 800a7d0:	4611      	mov	r1, r2
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	602a      	str	r2, [r5, #0]
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	f7f9 fc9d 	bl	8004116 <_lseek>
 800a7dc:	1c43      	adds	r3, r0, #1
 800a7de:	d102      	bne.n	800a7e6 <_lseek_r+0x1e>
 800a7e0:	682b      	ldr	r3, [r5, #0]
 800a7e2:	b103      	cbz	r3, 800a7e6 <_lseek_r+0x1e>
 800a7e4:	6023      	str	r3, [r4, #0]
 800a7e6:	bd38      	pop	{r3, r4, r5, pc}
 800a7e8:	20000f2c 	.word	0x20000f2c

0800a7ec <_read_r>:
 800a7ec:	b538      	push	{r3, r4, r5, lr}
 800a7ee:	4d07      	ldr	r5, [pc, #28]	@ (800a80c <_read_r+0x20>)
 800a7f0:	4604      	mov	r4, r0
 800a7f2:	4608      	mov	r0, r1
 800a7f4:	4611      	mov	r1, r2
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	602a      	str	r2, [r5, #0]
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	f7f9 fc2b 	bl	8004056 <_read>
 800a800:	1c43      	adds	r3, r0, #1
 800a802:	d102      	bne.n	800a80a <_read_r+0x1e>
 800a804:	682b      	ldr	r3, [r5, #0]
 800a806:	b103      	cbz	r3, 800a80a <_read_r+0x1e>
 800a808:	6023      	str	r3, [r4, #0]
 800a80a:	bd38      	pop	{r3, r4, r5, pc}
 800a80c:	20000f2c 	.word	0x20000f2c

0800a810 <_write_r>:
 800a810:	b538      	push	{r3, r4, r5, lr}
 800a812:	4d07      	ldr	r5, [pc, #28]	@ (800a830 <_write_r+0x20>)
 800a814:	4604      	mov	r4, r0
 800a816:	4608      	mov	r0, r1
 800a818:	4611      	mov	r1, r2
 800a81a:	2200      	movs	r2, #0
 800a81c:	602a      	str	r2, [r5, #0]
 800a81e:	461a      	mov	r2, r3
 800a820:	f7f9 fc36 	bl	8004090 <_write>
 800a824:	1c43      	adds	r3, r0, #1
 800a826:	d102      	bne.n	800a82e <_write_r+0x1e>
 800a828:	682b      	ldr	r3, [r5, #0]
 800a82a:	b103      	cbz	r3, 800a82e <_write_r+0x1e>
 800a82c:	6023      	str	r3, [r4, #0]
 800a82e:	bd38      	pop	{r3, r4, r5, pc}
 800a830:	20000f2c 	.word	0x20000f2c

0800a834 <__errno>:
 800a834:	4b01      	ldr	r3, [pc, #4]	@ (800a83c <__errno+0x8>)
 800a836:	6818      	ldr	r0, [r3, #0]
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	20000184 	.word	0x20000184

0800a840 <__libc_init_array>:
 800a840:	b570      	push	{r4, r5, r6, lr}
 800a842:	4d0d      	ldr	r5, [pc, #52]	@ (800a878 <__libc_init_array+0x38>)
 800a844:	4c0d      	ldr	r4, [pc, #52]	@ (800a87c <__libc_init_array+0x3c>)
 800a846:	1b64      	subs	r4, r4, r5
 800a848:	10a4      	asrs	r4, r4, #2
 800a84a:	2600      	movs	r6, #0
 800a84c:	42a6      	cmp	r6, r4
 800a84e:	d109      	bne.n	800a864 <__libc_init_array+0x24>
 800a850:	4d0b      	ldr	r5, [pc, #44]	@ (800a880 <__libc_init_array+0x40>)
 800a852:	4c0c      	ldr	r4, [pc, #48]	@ (800a884 <__libc_init_array+0x44>)
 800a854:	f002 fe56 	bl	800d504 <_init>
 800a858:	1b64      	subs	r4, r4, r5
 800a85a:	10a4      	asrs	r4, r4, #2
 800a85c:	2600      	movs	r6, #0
 800a85e:	42a6      	cmp	r6, r4
 800a860:	d105      	bne.n	800a86e <__libc_init_array+0x2e>
 800a862:	bd70      	pop	{r4, r5, r6, pc}
 800a864:	f855 3b04 	ldr.w	r3, [r5], #4
 800a868:	4798      	blx	r3
 800a86a:	3601      	adds	r6, #1
 800a86c:	e7ee      	b.n	800a84c <__libc_init_array+0xc>
 800a86e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a872:	4798      	blx	r3
 800a874:	3601      	adds	r6, #1
 800a876:	e7f2      	b.n	800a85e <__libc_init_array+0x1e>
 800a878:	0800da3c 	.word	0x0800da3c
 800a87c:	0800da3c 	.word	0x0800da3c
 800a880:	0800da3c 	.word	0x0800da3c
 800a884:	0800da40 	.word	0x0800da40

0800a888 <__retarget_lock_init_recursive>:
 800a888:	4770      	bx	lr

0800a88a <__retarget_lock_acquire_recursive>:
 800a88a:	4770      	bx	lr

0800a88c <__retarget_lock_release_recursive>:
 800a88c:	4770      	bx	lr

0800a88e <memcpy>:
 800a88e:	440a      	add	r2, r1
 800a890:	4291      	cmp	r1, r2
 800a892:	f100 33ff 	add.w	r3, r0, #4294967295
 800a896:	d100      	bne.n	800a89a <memcpy+0xc>
 800a898:	4770      	bx	lr
 800a89a:	b510      	push	{r4, lr}
 800a89c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8a4:	4291      	cmp	r1, r2
 800a8a6:	d1f9      	bne.n	800a89c <memcpy+0xe>
 800a8a8:	bd10      	pop	{r4, pc}
 800a8aa:	0000      	movs	r0, r0
 800a8ac:	0000      	movs	r0, r0
	...

0800a8b0 <nan>:
 800a8b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a8b8 <nan+0x8>
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop
 800a8b8:	00000000 	.word	0x00000000
 800a8bc:	7ff80000 	.word	0x7ff80000

0800a8c0 <__assert_func>:
 800a8c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a8c2:	4614      	mov	r4, r2
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	4b09      	ldr	r3, [pc, #36]	@ (800a8ec <__assert_func+0x2c>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4605      	mov	r5, r0
 800a8cc:	68d8      	ldr	r0, [r3, #12]
 800a8ce:	b954      	cbnz	r4, 800a8e6 <__assert_func+0x26>
 800a8d0:	4b07      	ldr	r3, [pc, #28]	@ (800a8f0 <__assert_func+0x30>)
 800a8d2:	461c      	mov	r4, r3
 800a8d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a8d8:	9100      	str	r1, [sp, #0]
 800a8da:	462b      	mov	r3, r5
 800a8dc:	4905      	ldr	r1, [pc, #20]	@ (800a8f4 <__assert_func+0x34>)
 800a8de:	f002 f969 	bl	800cbb4 <fiprintf>
 800a8e2:	f002 f9a3 	bl	800cc2c <abort>
 800a8e6:	4b04      	ldr	r3, [pc, #16]	@ (800a8f8 <__assert_func+0x38>)
 800a8e8:	e7f4      	b.n	800a8d4 <__assert_func+0x14>
 800a8ea:	bf00      	nop
 800a8ec:	20000184 	.word	0x20000184
 800a8f0:	0800d7f1 	.word	0x0800d7f1
 800a8f4:	0800d7c3 	.word	0x0800d7c3
 800a8f8:	0800d7b6 	.word	0x0800d7b6

0800a8fc <quorem>:
 800a8fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a900:	6903      	ldr	r3, [r0, #16]
 800a902:	690c      	ldr	r4, [r1, #16]
 800a904:	42a3      	cmp	r3, r4
 800a906:	4607      	mov	r7, r0
 800a908:	db7e      	blt.n	800aa08 <quorem+0x10c>
 800a90a:	3c01      	subs	r4, #1
 800a90c:	f101 0814 	add.w	r8, r1, #20
 800a910:	00a3      	lsls	r3, r4, #2
 800a912:	f100 0514 	add.w	r5, r0, #20
 800a916:	9300      	str	r3, [sp, #0]
 800a918:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a91c:	9301      	str	r3, [sp, #4]
 800a91e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a922:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a926:	3301      	adds	r3, #1
 800a928:	429a      	cmp	r2, r3
 800a92a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a92e:	fbb2 f6f3 	udiv	r6, r2, r3
 800a932:	d32e      	bcc.n	800a992 <quorem+0x96>
 800a934:	f04f 0a00 	mov.w	sl, #0
 800a938:	46c4      	mov	ip, r8
 800a93a:	46ae      	mov	lr, r5
 800a93c:	46d3      	mov	fp, sl
 800a93e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a942:	b298      	uxth	r0, r3
 800a944:	fb06 a000 	mla	r0, r6, r0, sl
 800a948:	0c02      	lsrs	r2, r0, #16
 800a94a:	0c1b      	lsrs	r3, r3, #16
 800a94c:	fb06 2303 	mla	r3, r6, r3, r2
 800a950:	f8de 2000 	ldr.w	r2, [lr]
 800a954:	b280      	uxth	r0, r0
 800a956:	b292      	uxth	r2, r2
 800a958:	1a12      	subs	r2, r2, r0
 800a95a:	445a      	add	r2, fp
 800a95c:	f8de 0000 	ldr.w	r0, [lr]
 800a960:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a964:	b29b      	uxth	r3, r3
 800a966:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a96a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a96e:	b292      	uxth	r2, r2
 800a970:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a974:	45e1      	cmp	r9, ip
 800a976:	f84e 2b04 	str.w	r2, [lr], #4
 800a97a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a97e:	d2de      	bcs.n	800a93e <quorem+0x42>
 800a980:	9b00      	ldr	r3, [sp, #0]
 800a982:	58eb      	ldr	r3, [r5, r3]
 800a984:	b92b      	cbnz	r3, 800a992 <quorem+0x96>
 800a986:	9b01      	ldr	r3, [sp, #4]
 800a988:	3b04      	subs	r3, #4
 800a98a:	429d      	cmp	r5, r3
 800a98c:	461a      	mov	r2, r3
 800a98e:	d32f      	bcc.n	800a9f0 <quorem+0xf4>
 800a990:	613c      	str	r4, [r7, #16]
 800a992:	4638      	mov	r0, r7
 800a994:	f001 fd10 	bl	800c3b8 <__mcmp>
 800a998:	2800      	cmp	r0, #0
 800a99a:	db25      	blt.n	800a9e8 <quorem+0xec>
 800a99c:	4629      	mov	r1, r5
 800a99e:	2000      	movs	r0, #0
 800a9a0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a9a4:	f8d1 c000 	ldr.w	ip, [r1]
 800a9a8:	fa1f fe82 	uxth.w	lr, r2
 800a9ac:	fa1f f38c 	uxth.w	r3, ip
 800a9b0:	eba3 030e 	sub.w	r3, r3, lr
 800a9b4:	4403      	add	r3, r0
 800a9b6:	0c12      	lsrs	r2, r2, #16
 800a9b8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a9bc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9c6:	45c1      	cmp	r9, r8
 800a9c8:	f841 3b04 	str.w	r3, [r1], #4
 800a9cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a9d0:	d2e6      	bcs.n	800a9a0 <quorem+0xa4>
 800a9d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9da:	b922      	cbnz	r2, 800a9e6 <quorem+0xea>
 800a9dc:	3b04      	subs	r3, #4
 800a9de:	429d      	cmp	r5, r3
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	d30b      	bcc.n	800a9fc <quorem+0x100>
 800a9e4:	613c      	str	r4, [r7, #16]
 800a9e6:	3601      	adds	r6, #1
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	b003      	add	sp, #12
 800a9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9f0:	6812      	ldr	r2, [r2, #0]
 800a9f2:	3b04      	subs	r3, #4
 800a9f4:	2a00      	cmp	r2, #0
 800a9f6:	d1cb      	bne.n	800a990 <quorem+0x94>
 800a9f8:	3c01      	subs	r4, #1
 800a9fa:	e7c6      	b.n	800a98a <quorem+0x8e>
 800a9fc:	6812      	ldr	r2, [r2, #0]
 800a9fe:	3b04      	subs	r3, #4
 800aa00:	2a00      	cmp	r2, #0
 800aa02:	d1ef      	bne.n	800a9e4 <quorem+0xe8>
 800aa04:	3c01      	subs	r4, #1
 800aa06:	e7ea      	b.n	800a9de <quorem+0xe2>
 800aa08:	2000      	movs	r0, #0
 800aa0a:	e7ee      	b.n	800a9ea <quorem+0xee>
 800aa0c:	0000      	movs	r0, r0
	...

0800aa10 <_dtoa_r>:
 800aa10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa14:	69c7      	ldr	r7, [r0, #28]
 800aa16:	b099      	sub	sp, #100	@ 0x64
 800aa18:	ed8d 0b02 	vstr	d0, [sp, #8]
 800aa1c:	ec55 4b10 	vmov	r4, r5, d0
 800aa20:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800aa22:	9109      	str	r1, [sp, #36]	@ 0x24
 800aa24:	4683      	mov	fp, r0
 800aa26:	920e      	str	r2, [sp, #56]	@ 0x38
 800aa28:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aa2a:	b97f      	cbnz	r7, 800aa4c <_dtoa_r+0x3c>
 800aa2c:	2010      	movs	r0, #16
 800aa2e:	f001 f937 	bl	800bca0 <malloc>
 800aa32:	4602      	mov	r2, r0
 800aa34:	f8cb 001c 	str.w	r0, [fp, #28]
 800aa38:	b920      	cbnz	r0, 800aa44 <_dtoa_r+0x34>
 800aa3a:	4ba7      	ldr	r3, [pc, #668]	@ (800acd8 <_dtoa_r+0x2c8>)
 800aa3c:	21ef      	movs	r1, #239	@ 0xef
 800aa3e:	48a7      	ldr	r0, [pc, #668]	@ (800acdc <_dtoa_r+0x2cc>)
 800aa40:	f7ff ff3e 	bl	800a8c0 <__assert_func>
 800aa44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aa48:	6007      	str	r7, [r0, #0]
 800aa4a:	60c7      	str	r7, [r0, #12]
 800aa4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aa50:	6819      	ldr	r1, [r3, #0]
 800aa52:	b159      	cbz	r1, 800aa6c <_dtoa_r+0x5c>
 800aa54:	685a      	ldr	r2, [r3, #4]
 800aa56:	604a      	str	r2, [r1, #4]
 800aa58:	2301      	movs	r3, #1
 800aa5a:	4093      	lsls	r3, r2
 800aa5c:	608b      	str	r3, [r1, #8]
 800aa5e:	4658      	mov	r0, fp
 800aa60:	f001 fa26 	bl	800beb0 <_Bfree>
 800aa64:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	601a      	str	r2, [r3, #0]
 800aa6c:	1e2b      	subs	r3, r5, #0
 800aa6e:	bfb9      	ittee	lt
 800aa70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aa74:	9303      	strlt	r3, [sp, #12]
 800aa76:	2300      	movge	r3, #0
 800aa78:	6033      	strge	r3, [r6, #0]
 800aa7a:	9f03      	ldr	r7, [sp, #12]
 800aa7c:	4b98      	ldr	r3, [pc, #608]	@ (800ace0 <_dtoa_r+0x2d0>)
 800aa7e:	bfbc      	itt	lt
 800aa80:	2201      	movlt	r2, #1
 800aa82:	6032      	strlt	r2, [r6, #0]
 800aa84:	43bb      	bics	r3, r7
 800aa86:	d112      	bne.n	800aaae <_dtoa_r+0x9e>
 800aa88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aa8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aa8e:	6013      	str	r3, [r2, #0]
 800aa90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa94:	4323      	orrs	r3, r4
 800aa96:	f000 854d 	beq.w	800b534 <_dtoa_r+0xb24>
 800aa9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aa9c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800acf4 <_dtoa_r+0x2e4>
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	f000 854f 	beq.w	800b544 <_dtoa_r+0xb34>
 800aaa6:	f10a 0303 	add.w	r3, sl, #3
 800aaaa:	f000 bd49 	b.w	800b540 <_dtoa_r+0xb30>
 800aaae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aab2:	2200      	movs	r2, #0
 800aab4:	ec51 0b17 	vmov	r0, r1, d7
 800aab8:	2300      	movs	r3, #0
 800aaba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800aabe:	f7f6 f833 	bl	8000b28 <__aeabi_dcmpeq>
 800aac2:	4680      	mov	r8, r0
 800aac4:	b158      	cbz	r0, 800aade <_dtoa_r+0xce>
 800aac6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aac8:	2301      	movs	r3, #1
 800aaca:	6013      	str	r3, [r2, #0]
 800aacc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aace:	b113      	cbz	r3, 800aad6 <_dtoa_r+0xc6>
 800aad0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800aad2:	4b84      	ldr	r3, [pc, #528]	@ (800ace4 <_dtoa_r+0x2d4>)
 800aad4:	6013      	str	r3, [r2, #0]
 800aad6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800acf8 <_dtoa_r+0x2e8>
 800aada:	f000 bd33 	b.w	800b544 <_dtoa_r+0xb34>
 800aade:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aae2:	aa16      	add	r2, sp, #88	@ 0x58
 800aae4:	a917      	add	r1, sp, #92	@ 0x5c
 800aae6:	4658      	mov	r0, fp
 800aae8:	f001 fd86 	bl	800c5f8 <__d2b>
 800aaec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800aaf0:	4681      	mov	r9, r0
 800aaf2:	2e00      	cmp	r6, #0
 800aaf4:	d077      	beq.n	800abe6 <_dtoa_r+0x1d6>
 800aaf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aaf8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800aafc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ab08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ab0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ab10:	4619      	mov	r1, r3
 800ab12:	2200      	movs	r2, #0
 800ab14:	4b74      	ldr	r3, [pc, #464]	@ (800ace8 <_dtoa_r+0x2d8>)
 800ab16:	f7f5 fbe7 	bl	80002e8 <__aeabi_dsub>
 800ab1a:	a369      	add	r3, pc, #420	@ (adr r3, 800acc0 <_dtoa_r+0x2b0>)
 800ab1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab20:	f7f5 fd9a 	bl	8000658 <__aeabi_dmul>
 800ab24:	a368      	add	r3, pc, #416	@ (adr r3, 800acc8 <_dtoa_r+0x2b8>)
 800ab26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2a:	f7f5 fbdf 	bl	80002ec <__adddf3>
 800ab2e:	4604      	mov	r4, r0
 800ab30:	4630      	mov	r0, r6
 800ab32:	460d      	mov	r5, r1
 800ab34:	f7f5 fd26 	bl	8000584 <__aeabi_i2d>
 800ab38:	a365      	add	r3, pc, #404	@ (adr r3, 800acd0 <_dtoa_r+0x2c0>)
 800ab3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3e:	f7f5 fd8b 	bl	8000658 <__aeabi_dmul>
 800ab42:	4602      	mov	r2, r0
 800ab44:	460b      	mov	r3, r1
 800ab46:	4620      	mov	r0, r4
 800ab48:	4629      	mov	r1, r5
 800ab4a:	f7f5 fbcf 	bl	80002ec <__adddf3>
 800ab4e:	4604      	mov	r4, r0
 800ab50:	460d      	mov	r5, r1
 800ab52:	f7f6 f831 	bl	8000bb8 <__aeabi_d2iz>
 800ab56:	2200      	movs	r2, #0
 800ab58:	4607      	mov	r7, r0
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	4629      	mov	r1, r5
 800ab60:	f7f5 ffec 	bl	8000b3c <__aeabi_dcmplt>
 800ab64:	b140      	cbz	r0, 800ab78 <_dtoa_r+0x168>
 800ab66:	4638      	mov	r0, r7
 800ab68:	f7f5 fd0c 	bl	8000584 <__aeabi_i2d>
 800ab6c:	4622      	mov	r2, r4
 800ab6e:	462b      	mov	r3, r5
 800ab70:	f7f5 ffda 	bl	8000b28 <__aeabi_dcmpeq>
 800ab74:	b900      	cbnz	r0, 800ab78 <_dtoa_r+0x168>
 800ab76:	3f01      	subs	r7, #1
 800ab78:	2f16      	cmp	r7, #22
 800ab7a:	d851      	bhi.n	800ac20 <_dtoa_r+0x210>
 800ab7c:	4b5b      	ldr	r3, [pc, #364]	@ (800acec <_dtoa_r+0x2dc>)
 800ab7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab8a:	f7f5 ffd7 	bl	8000b3c <__aeabi_dcmplt>
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	d048      	beq.n	800ac24 <_dtoa_r+0x214>
 800ab92:	3f01      	subs	r7, #1
 800ab94:	2300      	movs	r3, #0
 800ab96:	9312      	str	r3, [sp, #72]	@ 0x48
 800ab98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ab9a:	1b9b      	subs	r3, r3, r6
 800ab9c:	1e5a      	subs	r2, r3, #1
 800ab9e:	bf44      	itt	mi
 800aba0:	f1c3 0801 	rsbmi	r8, r3, #1
 800aba4:	2300      	movmi	r3, #0
 800aba6:	9208      	str	r2, [sp, #32]
 800aba8:	bf54      	ite	pl
 800abaa:	f04f 0800 	movpl.w	r8, #0
 800abae:	9308      	strmi	r3, [sp, #32]
 800abb0:	2f00      	cmp	r7, #0
 800abb2:	db39      	blt.n	800ac28 <_dtoa_r+0x218>
 800abb4:	9b08      	ldr	r3, [sp, #32]
 800abb6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800abb8:	443b      	add	r3, r7
 800abba:	9308      	str	r3, [sp, #32]
 800abbc:	2300      	movs	r3, #0
 800abbe:	930a      	str	r3, [sp, #40]	@ 0x28
 800abc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abc2:	2b09      	cmp	r3, #9
 800abc4:	d864      	bhi.n	800ac90 <_dtoa_r+0x280>
 800abc6:	2b05      	cmp	r3, #5
 800abc8:	bfc4      	itt	gt
 800abca:	3b04      	subgt	r3, #4
 800abcc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800abce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abd0:	f1a3 0302 	sub.w	r3, r3, #2
 800abd4:	bfcc      	ite	gt
 800abd6:	2400      	movgt	r4, #0
 800abd8:	2401      	movle	r4, #1
 800abda:	2b03      	cmp	r3, #3
 800abdc:	d863      	bhi.n	800aca6 <_dtoa_r+0x296>
 800abde:	e8df f003 	tbb	[pc, r3]
 800abe2:	372a      	.short	0x372a
 800abe4:	5535      	.short	0x5535
 800abe6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800abea:	441e      	add	r6, r3
 800abec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800abf0:	2b20      	cmp	r3, #32
 800abf2:	bfc1      	itttt	gt
 800abf4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800abf8:	409f      	lslgt	r7, r3
 800abfa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800abfe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ac02:	bfd6      	itet	le
 800ac04:	f1c3 0320 	rsble	r3, r3, #32
 800ac08:	ea47 0003 	orrgt.w	r0, r7, r3
 800ac0c:	fa04 f003 	lslle.w	r0, r4, r3
 800ac10:	f7f5 fca8 	bl	8000564 <__aeabi_ui2d>
 800ac14:	2201      	movs	r2, #1
 800ac16:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ac1a:	3e01      	subs	r6, #1
 800ac1c:	9214      	str	r2, [sp, #80]	@ 0x50
 800ac1e:	e777      	b.n	800ab10 <_dtoa_r+0x100>
 800ac20:	2301      	movs	r3, #1
 800ac22:	e7b8      	b.n	800ab96 <_dtoa_r+0x186>
 800ac24:	9012      	str	r0, [sp, #72]	@ 0x48
 800ac26:	e7b7      	b.n	800ab98 <_dtoa_r+0x188>
 800ac28:	427b      	negs	r3, r7
 800ac2a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	eba8 0807 	sub.w	r8, r8, r7
 800ac32:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ac34:	e7c4      	b.n	800abc0 <_dtoa_r+0x1b0>
 800ac36:	2300      	movs	r3, #0
 800ac38:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	dc35      	bgt.n	800acac <_dtoa_r+0x29c>
 800ac40:	2301      	movs	r3, #1
 800ac42:	9300      	str	r3, [sp, #0]
 800ac44:	9307      	str	r3, [sp, #28]
 800ac46:	461a      	mov	r2, r3
 800ac48:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac4a:	e00b      	b.n	800ac64 <_dtoa_r+0x254>
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	e7f3      	b.n	800ac38 <_dtoa_r+0x228>
 800ac50:	2300      	movs	r3, #0
 800ac52:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac56:	18fb      	adds	r3, r7, r3
 800ac58:	9300      	str	r3, [sp, #0]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	9307      	str	r3, [sp, #28]
 800ac60:	bfb8      	it	lt
 800ac62:	2301      	movlt	r3, #1
 800ac64:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ac68:	2100      	movs	r1, #0
 800ac6a:	2204      	movs	r2, #4
 800ac6c:	f102 0514 	add.w	r5, r2, #20
 800ac70:	429d      	cmp	r5, r3
 800ac72:	d91f      	bls.n	800acb4 <_dtoa_r+0x2a4>
 800ac74:	6041      	str	r1, [r0, #4]
 800ac76:	4658      	mov	r0, fp
 800ac78:	f001 f8da 	bl	800be30 <_Balloc>
 800ac7c:	4682      	mov	sl, r0
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	d13c      	bne.n	800acfc <_dtoa_r+0x2ec>
 800ac82:	4b1b      	ldr	r3, [pc, #108]	@ (800acf0 <_dtoa_r+0x2e0>)
 800ac84:	4602      	mov	r2, r0
 800ac86:	f240 11af 	movw	r1, #431	@ 0x1af
 800ac8a:	e6d8      	b.n	800aa3e <_dtoa_r+0x2e>
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	e7e0      	b.n	800ac52 <_dtoa_r+0x242>
 800ac90:	2401      	movs	r4, #1
 800ac92:	2300      	movs	r3, #0
 800ac94:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac96:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ac98:	f04f 33ff 	mov.w	r3, #4294967295
 800ac9c:	9300      	str	r3, [sp, #0]
 800ac9e:	9307      	str	r3, [sp, #28]
 800aca0:	2200      	movs	r2, #0
 800aca2:	2312      	movs	r3, #18
 800aca4:	e7d0      	b.n	800ac48 <_dtoa_r+0x238>
 800aca6:	2301      	movs	r3, #1
 800aca8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800acaa:	e7f5      	b.n	800ac98 <_dtoa_r+0x288>
 800acac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acae:	9300      	str	r3, [sp, #0]
 800acb0:	9307      	str	r3, [sp, #28]
 800acb2:	e7d7      	b.n	800ac64 <_dtoa_r+0x254>
 800acb4:	3101      	adds	r1, #1
 800acb6:	0052      	lsls	r2, r2, #1
 800acb8:	e7d8      	b.n	800ac6c <_dtoa_r+0x25c>
 800acba:	bf00      	nop
 800acbc:	f3af 8000 	nop.w
 800acc0:	636f4361 	.word	0x636f4361
 800acc4:	3fd287a7 	.word	0x3fd287a7
 800acc8:	8b60c8b3 	.word	0x8b60c8b3
 800accc:	3fc68a28 	.word	0x3fc68a28
 800acd0:	509f79fb 	.word	0x509f79fb
 800acd4:	3fd34413 	.word	0x3fd34413
 800acd8:	0800d73d 	.word	0x0800d73d
 800acdc:	0800d7ff 	.word	0x0800d7ff
 800ace0:	7ff00000 	.word	0x7ff00000
 800ace4:	0800d71a 	.word	0x0800d71a
 800ace8:	3ff80000 	.word	0x3ff80000
 800acec:	0800d958 	.word	0x0800d958
 800acf0:	0800d857 	.word	0x0800d857
 800acf4:	0800d7fb 	.word	0x0800d7fb
 800acf8:	0800d719 	.word	0x0800d719
 800acfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ad00:	6018      	str	r0, [r3, #0]
 800ad02:	9b07      	ldr	r3, [sp, #28]
 800ad04:	2b0e      	cmp	r3, #14
 800ad06:	f200 80a4 	bhi.w	800ae52 <_dtoa_r+0x442>
 800ad0a:	2c00      	cmp	r4, #0
 800ad0c:	f000 80a1 	beq.w	800ae52 <_dtoa_r+0x442>
 800ad10:	2f00      	cmp	r7, #0
 800ad12:	dd33      	ble.n	800ad7c <_dtoa_r+0x36c>
 800ad14:	4bad      	ldr	r3, [pc, #692]	@ (800afcc <_dtoa_r+0x5bc>)
 800ad16:	f007 020f 	and.w	r2, r7, #15
 800ad1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad1e:	ed93 7b00 	vldr	d7, [r3]
 800ad22:	05f8      	lsls	r0, r7, #23
 800ad24:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ad28:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ad2c:	d516      	bpl.n	800ad5c <_dtoa_r+0x34c>
 800ad2e:	4ba8      	ldr	r3, [pc, #672]	@ (800afd0 <_dtoa_r+0x5c0>)
 800ad30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad38:	f7f5 fdb8 	bl	80008ac <__aeabi_ddiv>
 800ad3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad40:	f004 040f 	and.w	r4, r4, #15
 800ad44:	2603      	movs	r6, #3
 800ad46:	4da2      	ldr	r5, [pc, #648]	@ (800afd0 <_dtoa_r+0x5c0>)
 800ad48:	b954      	cbnz	r4, 800ad60 <_dtoa_r+0x350>
 800ad4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad52:	f7f5 fdab 	bl	80008ac <__aeabi_ddiv>
 800ad56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad5a:	e028      	b.n	800adae <_dtoa_r+0x39e>
 800ad5c:	2602      	movs	r6, #2
 800ad5e:	e7f2      	b.n	800ad46 <_dtoa_r+0x336>
 800ad60:	07e1      	lsls	r1, r4, #31
 800ad62:	d508      	bpl.n	800ad76 <_dtoa_r+0x366>
 800ad64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad68:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad6c:	f7f5 fc74 	bl	8000658 <__aeabi_dmul>
 800ad70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad74:	3601      	adds	r6, #1
 800ad76:	1064      	asrs	r4, r4, #1
 800ad78:	3508      	adds	r5, #8
 800ad7a:	e7e5      	b.n	800ad48 <_dtoa_r+0x338>
 800ad7c:	f000 80d2 	beq.w	800af24 <_dtoa_r+0x514>
 800ad80:	427c      	negs	r4, r7
 800ad82:	4b92      	ldr	r3, [pc, #584]	@ (800afcc <_dtoa_r+0x5bc>)
 800ad84:	4d92      	ldr	r5, [pc, #584]	@ (800afd0 <_dtoa_r+0x5c0>)
 800ad86:	f004 020f 	and.w	r2, r4, #15
 800ad8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad96:	f7f5 fc5f 	bl	8000658 <__aeabi_dmul>
 800ad9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad9e:	1124      	asrs	r4, r4, #4
 800ada0:	2300      	movs	r3, #0
 800ada2:	2602      	movs	r6, #2
 800ada4:	2c00      	cmp	r4, #0
 800ada6:	f040 80b2 	bne.w	800af0e <_dtoa_r+0x4fe>
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d1d3      	bne.n	800ad56 <_dtoa_r+0x346>
 800adae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800adb0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f000 80b7 	beq.w	800af28 <_dtoa_r+0x518>
 800adba:	4b86      	ldr	r3, [pc, #536]	@ (800afd4 <_dtoa_r+0x5c4>)
 800adbc:	2200      	movs	r2, #0
 800adbe:	4620      	mov	r0, r4
 800adc0:	4629      	mov	r1, r5
 800adc2:	f7f5 febb 	bl	8000b3c <__aeabi_dcmplt>
 800adc6:	2800      	cmp	r0, #0
 800adc8:	f000 80ae 	beq.w	800af28 <_dtoa_r+0x518>
 800adcc:	9b07      	ldr	r3, [sp, #28]
 800adce:	2b00      	cmp	r3, #0
 800add0:	f000 80aa 	beq.w	800af28 <_dtoa_r+0x518>
 800add4:	9b00      	ldr	r3, [sp, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	dd37      	ble.n	800ae4a <_dtoa_r+0x43a>
 800adda:	1e7b      	subs	r3, r7, #1
 800addc:	9304      	str	r3, [sp, #16]
 800adde:	4620      	mov	r0, r4
 800ade0:	4b7d      	ldr	r3, [pc, #500]	@ (800afd8 <_dtoa_r+0x5c8>)
 800ade2:	2200      	movs	r2, #0
 800ade4:	4629      	mov	r1, r5
 800ade6:	f7f5 fc37 	bl	8000658 <__aeabi_dmul>
 800adea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adee:	9c00      	ldr	r4, [sp, #0]
 800adf0:	3601      	adds	r6, #1
 800adf2:	4630      	mov	r0, r6
 800adf4:	f7f5 fbc6 	bl	8000584 <__aeabi_i2d>
 800adf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800adfc:	f7f5 fc2c 	bl	8000658 <__aeabi_dmul>
 800ae00:	4b76      	ldr	r3, [pc, #472]	@ (800afdc <_dtoa_r+0x5cc>)
 800ae02:	2200      	movs	r2, #0
 800ae04:	f7f5 fa72 	bl	80002ec <__adddf3>
 800ae08:	4605      	mov	r5, r0
 800ae0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ae0e:	2c00      	cmp	r4, #0
 800ae10:	f040 808d 	bne.w	800af2e <_dtoa_r+0x51e>
 800ae14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae18:	4b71      	ldr	r3, [pc, #452]	@ (800afe0 <_dtoa_r+0x5d0>)
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f7f5 fa64 	bl	80002e8 <__aeabi_dsub>
 800ae20:	4602      	mov	r2, r0
 800ae22:	460b      	mov	r3, r1
 800ae24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae28:	462a      	mov	r2, r5
 800ae2a:	4633      	mov	r3, r6
 800ae2c:	f7f5 fea4 	bl	8000b78 <__aeabi_dcmpgt>
 800ae30:	2800      	cmp	r0, #0
 800ae32:	f040 828b 	bne.w	800b34c <_dtoa_r+0x93c>
 800ae36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae3a:	462a      	mov	r2, r5
 800ae3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ae40:	f7f5 fe7c 	bl	8000b3c <__aeabi_dcmplt>
 800ae44:	2800      	cmp	r0, #0
 800ae46:	f040 8128 	bne.w	800b09a <_dtoa_r+0x68a>
 800ae4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ae4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ae52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	f2c0 815a 	blt.w	800b10e <_dtoa_r+0x6fe>
 800ae5a:	2f0e      	cmp	r7, #14
 800ae5c:	f300 8157 	bgt.w	800b10e <_dtoa_r+0x6fe>
 800ae60:	4b5a      	ldr	r3, [pc, #360]	@ (800afcc <_dtoa_r+0x5bc>)
 800ae62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ae66:	ed93 7b00 	vldr	d7, [r3]
 800ae6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	ed8d 7b00 	vstr	d7, [sp]
 800ae72:	da03      	bge.n	800ae7c <_dtoa_r+0x46c>
 800ae74:	9b07      	ldr	r3, [sp, #28]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	f340 8101 	ble.w	800b07e <_dtoa_r+0x66e>
 800ae7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ae80:	4656      	mov	r6, sl
 800ae82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae86:	4620      	mov	r0, r4
 800ae88:	4629      	mov	r1, r5
 800ae8a:	f7f5 fd0f 	bl	80008ac <__aeabi_ddiv>
 800ae8e:	f7f5 fe93 	bl	8000bb8 <__aeabi_d2iz>
 800ae92:	4680      	mov	r8, r0
 800ae94:	f7f5 fb76 	bl	8000584 <__aeabi_i2d>
 800ae98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae9c:	f7f5 fbdc 	bl	8000658 <__aeabi_dmul>
 800aea0:	4602      	mov	r2, r0
 800aea2:	460b      	mov	r3, r1
 800aea4:	4620      	mov	r0, r4
 800aea6:	4629      	mov	r1, r5
 800aea8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800aeac:	f7f5 fa1c 	bl	80002e8 <__aeabi_dsub>
 800aeb0:	f806 4b01 	strb.w	r4, [r6], #1
 800aeb4:	9d07      	ldr	r5, [sp, #28]
 800aeb6:	eba6 040a 	sub.w	r4, r6, sl
 800aeba:	42a5      	cmp	r5, r4
 800aebc:	4602      	mov	r2, r0
 800aebe:	460b      	mov	r3, r1
 800aec0:	f040 8117 	bne.w	800b0f2 <_dtoa_r+0x6e2>
 800aec4:	f7f5 fa12 	bl	80002ec <__adddf3>
 800aec8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aecc:	4604      	mov	r4, r0
 800aece:	460d      	mov	r5, r1
 800aed0:	f7f5 fe52 	bl	8000b78 <__aeabi_dcmpgt>
 800aed4:	2800      	cmp	r0, #0
 800aed6:	f040 80f9 	bne.w	800b0cc <_dtoa_r+0x6bc>
 800aeda:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aede:	4620      	mov	r0, r4
 800aee0:	4629      	mov	r1, r5
 800aee2:	f7f5 fe21 	bl	8000b28 <__aeabi_dcmpeq>
 800aee6:	b118      	cbz	r0, 800aef0 <_dtoa_r+0x4e0>
 800aee8:	f018 0f01 	tst.w	r8, #1
 800aeec:	f040 80ee 	bne.w	800b0cc <_dtoa_r+0x6bc>
 800aef0:	4649      	mov	r1, r9
 800aef2:	4658      	mov	r0, fp
 800aef4:	f000 ffdc 	bl	800beb0 <_Bfree>
 800aef8:	2300      	movs	r3, #0
 800aefa:	7033      	strb	r3, [r6, #0]
 800aefc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aefe:	3701      	adds	r7, #1
 800af00:	601f      	str	r7, [r3, #0]
 800af02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800af04:	2b00      	cmp	r3, #0
 800af06:	f000 831d 	beq.w	800b544 <_dtoa_r+0xb34>
 800af0a:	601e      	str	r6, [r3, #0]
 800af0c:	e31a      	b.n	800b544 <_dtoa_r+0xb34>
 800af0e:	07e2      	lsls	r2, r4, #31
 800af10:	d505      	bpl.n	800af1e <_dtoa_r+0x50e>
 800af12:	e9d5 2300 	ldrd	r2, r3, [r5]
 800af16:	f7f5 fb9f 	bl	8000658 <__aeabi_dmul>
 800af1a:	3601      	adds	r6, #1
 800af1c:	2301      	movs	r3, #1
 800af1e:	1064      	asrs	r4, r4, #1
 800af20:	3508      	adds	r5, #8
 800af22:	e73f      	b.n	800ada4 <_dtoa_r+0x394>
 800af24:	2602      	movs	r6, #2
 800af26:	e742      	b.n	800adae <_dtoa_r+0x39e>
 800af28:	9c07      	ldr	r4, [sp, #28]
 800af2a:	9704      	str	r7, [sp, #16]
 800af2c:	e761      	b.n	800adf2 <_dtoa_r+0x3e2>
 800af2e:	4b27      	ldr	r3, [pc, #156]	@ (800afcc <_dtoa_r+0x5bc>)
 800af30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800af32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af3a:	4454      	add	r4, sl
 800af3c:	2900      	cmp	r1, #0
 800af3e:	d053      	beq.n	800afe8 <_dtoa_r+0x5d8>
 800af40:	4928      	ldr	r1, [pc, #160]	@ (800afe4 <_dtoa_r+0x5d4>)
 800af42:	2000      	movs	r0, #0
 800af44:	f7f5 fcb2 	bl	80008ac <__aeabi_ddiv>
 800af48:	4633      	mov	r3, r6
 800af4a:	462a      	mov	r2, r5
 800af4c:	f7f5 f9cc 	bl	80002e8 <__aeabi_dsub>
 800af50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af54:	4656      	mov	r6, sl
 800af56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af5a:	f7f5 fe2d 	bl	8000bb8 <__aeabi_d2iz>
 800af5e:	4605      	mov	r5, r0
 800af60:	f7f5 fb10 	bl	8000584 <__aeabi_i2d>
 800af64:	4602      	mov	r2, r0
 800af66:	460b      	mov	r3, r1
 800af68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af6c:	f7f5 f9bc 	bl	80002e8 <__aeabi_dsub>
 800af70:	3530      	adds	r5, #48	@ 0x30
 800af72:	4602      	mov	r2, r0
 800af74:	460b      	mov	r3, r1
 800af76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af7a:	f806 5b01 	strb.w	r5, [r6], #1
 800af7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af82:	f7f5 fddb 	bl	8000b3c <__aeabi_dcmplt>
 800af86:	2800      	cmp	r0, #0
 800af88:	d171      	bne.n	800b06e <_dtoa_r+0x65e>
 800af8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af8e:	4911      	ldr	r1, [pc, #68]	@ (800afd4 <_dtoa_r+0x5c4>)
 800af90:	2000      	movs	r0, #0
 800af92:	f7f5 f9a9 	bl	80002e8 <__aeabi_dsub>
 800af96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af9a:	f7f5 fdcf 	bl	8000b3c <__aeabi_dcmplt>
 800af9e:	2800      	cmp	r0, #0
 800afa0:	f040 8095 	bne.w	800b0ce <_dtoa_r+0x6be>
 800afa4:	42a6      	cmp	r6, r4
 800afa6:	f43f af50 	beq.w	800ae4a <_dtoa_r+0x43a>
 800afaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800afae:	4b0a      	ldr	r3, [pc, #40]	@ (800afd8 <_dtoa_r+0x5c8>)
 800afb0:	2200      	movs	r2, #0
 800afb2:	f7f5 fb51 	bl	8000658 <__aeabi_dmul>
 800afb6:	4b08      	ldr	r3, [pc, #32]	@ (800afd8 <_dtoa_r+0x5c8>)
 800afb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800afbc:	2200      	movs	r2, #0
 800afbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afc2:	f7f5 fb49 	bl	8000658 <__aeabi_dmul>
 800afc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afca:	e7c4      	b.n	800af56 <_dtoa_r+0x546>
 800afcc:	0800d958 	.word	0x0800d958
 800afd0:	0800d930 	.word	0x0800d930
 800afd4:	3ff00000 	.word	0x3ff00000
 800afd8:	40240000 	.word	0x40240000
 800afdc:	401c0000 	.word	0x401c0000
 800afe0:	40140000 	.word	0x40140000
 800afe4:	3fe00000 	.word	0x3fe00000
 800afe8:	4631      	mov	r1, r6
 800afea:	4628      	mov	r0, r5
 800afec:	f7f5 fb34 	bl	8000658 <__aeabi_dmul>
 800aff0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aff4:	9415      	str	r4, [sp, #84]	@ 0x54
 800aff6:	4656      	mov	r6, sl
 800aff8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800affc:	f7f5 fddc 	bl	8000bb8 <__aeabi_d2iz>
 800b000:	4605      	mov	r5, r0
 800b002:	f7f5 fabf 	bl	8000584 <__aeabi_i2d>
 800b006:	4602      	mov	r2, r0
 800b008:	460b      	mov	r3, r1
 800b00a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b00e:	f7f5 f96b 	bl	80002e8 <__aeabi_dsub>
 800b012:	3530      	adds	r5, #48	@ 0x30
 800b014:	f806 5b01 	strb.w	r5, [r6], #1
 800b018:	4602      	mov	r2, r0
 800b01a:	460b      	mov	r3, r1
 800b01c:	42a6      	cmp	r6, r4
 800b01e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b022:	f04f 0200 	mov.w	r2, #0
 800b026:	d124      	bne.n	800b072 <_dtoa_r+0x662>
 800b028:	4bac      	ldr	r3, [pc, #688]	@ (800b2dc <_dtoa_r+0x8cc>)
 800b02a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b02e:	f7f5 f95d 	bl	80002ec <__adddf3>
 800b032:	4602      	mov	r2, r0
 800b034:	460b      	mov	r3, r1
 800b036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b03a:	f7f5 fd9d 	bl	8000b78 <__aeabi_dcmpgt>
 800b03e:	2800      	cmp	r0, #0
 800b040:	d145      	bne.n	800b0ce <_dtoa_r+0x6be>
 800b042:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b046:	49a5      	ldr	r1, [pc, #660]	@ (800b2dc <_dtoa_r+0x8cc>)
 800b048:	2000      	movs	r0, #0
 800b04a:	f7f5 f94d 	bl	80002e8 <__aeabi_dsub>
 800b04e:	4602      	mov	r2, r0
 800b050:	460b      	mov	r3, r1
 800b052:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b056:	f7f5 fd71 	bl	8000b3c <__aeabi_dcmplt>
 800b05a:	2800      	cmp	r0, #0
 800b05c:	f43f aef5 	beq.w	800ae4a <_dtoa_r+0x43a>
 800b060:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b062:	1e73      	subs	r3, r6, #1
 800b064:	9315      	str	r3, [sp, #84]	@ 0x54
 800b066:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b06a:	2b30      	cmp	r3, #48	@ 0x30
 800b06c:	d0f8      	beq.n	800b060 <_dtoa_r+0x650>
 800b06e:	9f04      	ldr	r7, [sp, #16]
 800b070:	e73e      	b.n	800aef0 <_dtoa_r+0x4e0>
 800b072:	4b9b      	ldr	r3, [pc, #620]	@ (800b2e0 <_dtoa_r+0x8d0>)
 800b074:	f7f5 faf0 	bl	8000658 <__aeabi_dmul>
 800b078:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b07c:	e7bc      	b.n	800aff8 <_dtoa_r+0x5e8>
 800b07e:	d10c      	bne.n	800b09a <_dtoa_r+0x68a>
 800b080:	4b98      	ldr	r3, [pc, #608]	@ (800b2e4 <_dtoa_r+0x8d4>)
 800b082:	2200      	movs	r2, #0
 800b084:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b088:	f7f5 fae6 	bl	8000658 <__aeabi_dmul>
 800b08c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b090:	f7f5 fd68 	bl	8000b64 <__aeabi_dcmpge>
 800b094:	2800      	cmp	r0, #0
 800b096:	f000 8157 	beq.w	800b348 <_dtoa_r+0x938>
 800b09a:	2400      	movs	r4, #0
 800b09c:	4625      	mov	r5, r4
 800b09e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0a0:	43db      	mvns	r3, r3
 800b0a2:	9304      	str	r3, [sp, #16]
 800b0a4:	4656      	mov	r6, sl
 800b0a6:	2700      	movs	r7, #0
 800b0a8:	4621      	mov	r1, r4
 800b0aa:	4658      	mov	r0, fp
 800b0ac:	f000 ff00 	bl	800beb0 <_Bfree>
 800b0b0:	2d00      	cmp	r5, #0
 800b0b2:	d0dc      	beq.n	800b06e <_dtoa_r+0x65e>
 800b0b4:	b12f      	cbz	r7, 800b0c2 <_dtoa_r+0x6b2>
 800b0b6:	42af      	cmp	r7, r5
 800b0b8:	d003      	beq.n	800b0c2 <_dtoa_r+0x6b2>
 800b0ba:	4639      	mov	r1, r7
 800b0bc:	4658      	mov	r0, fp
 800b0be:	f000 fef7 	bl	800beb0 <_Bfree>
 800b0c2:	4629      	mov	r1, r5
 800b0c4:	4658      	mov	r0, fp
 800b0c6:	f000 fef3 	bl	800beb0 <_Bfree>
 800b0ca:	e7d0      	b.n	800b06e <_dtoa_r+0x65e>
 800b0cc:	9704      	str	r7, [sp, #16]
 800b0ce:	4633      	mov	r3, r6
 800b0d0:	461e      	mov	r6, r3
 800b0d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0d6:	2a39      	cmp	r2, #57	@ 0x39
 800b0d8:	d107      	bne.n	800b0ea <_dtoa_r+0x6da>
 800b0da:	459a      	cmp	sl, r3
 800b0dc:	d1f8      	bne.n	800b0d0 <_dtoa_r+0x6c0>
 800b0de:	9a04      	ldr	r2, [sp, #16]
 800b0e0:	3201      	adds	r2, #1
 800b0e2:	9204      	str	r2, [sp, #16]
 800b0e4:	2230      	movs	r2, #48	@ 0x30
 800b0e6:	f88a 2000 	strb.w	r2, [sl]
 800b0ea:	781a      	ldrb	r2, [r3, #0]
 800b0ec:	3201      	adds	r2, #1
 800b0ee:	701a      	strb	r2, [r3, #0]
 800b0f0:	e7bd      	b.n	800b06e <_dtoa_r+0x65e>
 800b0f2:	4b7b      	ldr	r3, [pc, #492]	@ (800b2e0 <_dtoa_r+0x8d0>)
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f7f5 faaf 	bl	8000658 <__aeabi_dmul>
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	4604      	mov	r4, r0
 800b100:	460d      	mov	r5, r1
 800b102:	f7f5 fd11 	bl	8000b28 <__aeabi_dcmpeq>
 800b106:	2800      	cmp	r0, #0
 800b108:	f43f aebb 	beq.w	800ae82 <_dtoa_r+0x472>
 800b10c:	e6f0      	b.n	800aef0 <_dtoa_r+0x4e0>
 800b10e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b110:	2a00      	cmp	r2, #0
 800b112:	f000 80db 	beq.w	800b2cc <_dtoa_r+0x8bc>
 800b116:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b118:	2a01      	cmp	r2, #1
 800b11a:	f300 80bf 	bgt.w	800b29c <_dtoa_r+0x88c>
 800b11e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b120:	2a00      	cmp	r2, #0
 800b122:	f000 80b7 	beq.w	800b294 <_dtoa_r+0x884>
 800b126:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b12a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b12c:	4646      	mov	r6, r8
 800b12e:	9a08      	ldr	r2, [sp, #32]
 800b130:	2101      	movs	r1, #1
 800b132:	441a      	add	r2, r3
 800b134:	4658      	mov	r0, fp
 800b136:	4498      	add	r8, r3
 800b138:	9208      	str	r2, [sp, #32]
 800b13a:	f000 ffb7 	bl	800c0ac <__i2b>
 800b13e:	4605      	mov	r5, r0
 800b140:	b15e      	cbz	r6, 800b15a <_dtoa_r+0x74a>
 800b142:	9b08      	ldr	r3, [sp, #32]
 800b144:	2b00      	cmp	r3, #0
 800b146:	dd08      	ble.n	800b15a <_dtoa_r+0x74a>
 800b148:	42b3      	cmp	r3, r6
 800b14a:	9a08      	ldr	r2, [sp, #32]
 800b14c:	bfa8      	it	ge
 800b14e:	4633      	movge	r3, r6
 800b150:	eba8 0803 	sub.w	r8, r8, r3
 800b154:	1af6      	subs	r6, r6, r3
 800b156:	1ad3      	subs	r3, r2, r3
 800b158:	9308      	str	r3, [sp, #32]
 800b15a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b15c:	b1f3      	cbz	r3, 800b19c <_dtoa_r+0x78c>
 800b15e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b160:	2b00      	cmp	r3, #0
 800b162:	f000 80b7 	beq.w	800b2d4 <_dtoa_r+0x8c4>
 800b166:	b18c      	cbz	r4, 800b18c <_dtoa_r+0x77c>
 800b168:	4629      	mov	r1, r5
 800b16a:	4622      	mov	r2, r4
 800b16c:	4658      	mov	r0, fp
 800b16e:	f001 f85d 	bl	800c22c <__pow5mult>
 800b172:	464a      	mov	r2, r9
 800b174:	4601      	mov	r1, r0
 800b176:	4605      	mov	r5, r0
 800b178:	4658      	mov	r0, fp
 800b17a:	f000 ffad 	bl	800c0d8 <__multiply>
 800b17e:	4649      	mov	r1, r9
 800b180:	9004      	str	r0, [sp, #16]
 800b182:	4658      	mov	r0, fp
 800b184:	f000 fe94 	bl	800beb0 <_Bfree>
 800b188:	9b04      	ldr	r3, [sp, #16]
 800b18a:	4699      	mov	r9, r3
 800b18c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b18e:	1b1a      	subs	r2, r3, r4
 800b190:	d004      	beq.n	800b19c <_dtoa_r+0x78c>
 800b192:	4649      	mov	r1, r9
 800b194:	4658      	mov	r0, fp
 800b196:	f001 f849 	bl	800c22c <__pow5mult>
 800b19a:	4681      	mov	r9, r0
 800b19c:	2101      	movs	r1, #1
 800b19e:	4658      	mov	r0, fp
 800b1a0:	f000 ff84 	bl	800c0ac <__i2b>
 800b1a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1a6:	4604      	mov	r4, r0
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f000 81cf 	beq.w	800b54c <_dtoa_r+0xb3c>
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	4601      	mov	r1, r0
 800b1b2:	4658      	mov	r0, fp
 800b1b4:	f001 f83a 	bl	800c22c <__pow5mult>
 800b1b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	4604      	mov	r4, r0
 800b1be:	f300 8095 	bgt.w	800b2ec <_dtoa_r+0x8dc>
 800b1c2:	9b02      	ldr	r3, [sp, #8]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	f040 8087 	bne.w	800b2d8 <_dtoa_r+0x8c8>
 800b1ca:	9b03      	ldr	r3, [sp, #12]
 800b1cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	f040 8089 	bne.w	800b2e8 <_dtoa_r+0x8d8>
 800b1d6:	9b03      	ldr	r3, [sp, #12]
 800b1d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b1dc:	0d1b      	lsrs	r3, r3, #20
 800b1de:	051b      	lsls	r3, r3, #20
 800b1e0:	b12b      	cbz	r3, 800b1ee <_dtoa_r+0x7de>
 800b1e2:	9b08      	ldr	r3, [sp, #32]
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	9308      	str	r3, [sp, #32]
 800b1e8:	f108 0801 	add.w	r8, r8, #1
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	f000 81b0 	beq.w	800b558 <_dtoa_r+0xb48>
 800b1f8:	6923      	ldr	r3, [r4, #16]
 800b1fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b1fe:	6918      	ldr	r0, [r3, #16]
 800b200:	f000 ff08 	bl	800c014 <__hi0bits>
 800b204:	f1c0 0020 	rsb	r0, r0, #32
 800b208:	9b08      	ldr	r3, [sp, #32]
 800b20a:	4418      	add	r0, r3
 800b20c:	f010 001f 	ands.w	r0, r0, #31
 800b210:	d077      	beq.n	800b302 <_dtoa_r+0x8f2>
 800b212:	f1c0 0320 	rsb	r3, r0, #32
 800b216:	2b04      	cmp	r3, #4
 800b218:	dd6b      	ble.n	800b2f2 <_dtoa_r+0x8e2>
 800b21a:	9b08      	ldr	r3, [sp, #32]
 800b21c:	f1c0 001c 	rsb	r0, r0, #28
 800b220:	4403      	add	r3, r0
 800b222:	4480      	add	r8, r0
 800b224:	4406      	add	r6, r0
 800b226:	9308      	str	r3, [sp, #32]
 800b228:	f1b8 0f00 	cmp.w	r8, #0
 800b22c:	dd05      	ble.n	800b23a <_dtoa_r+0x82a>
 800b22e:	4649      	mov	r1, r9
 800b230:	4642      	mov	r2, r8
 800b232:	4658      	mov	r0, fp
 800b234:	f001 f854 	bl	800c2e0 <__lshift>
 800b238:	4681      	mov	r9, r0
 800b23a:	9b08      	ldr	r3, [sp, #32]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	dd05      	ble.n	800b24c <_dtoa_r+0x83c>
 800b240:	4621      	mov	r1, r4
 800b242:	461a      	mov	r2, r3
 800b244:	4658      	mov	r0, fp
 800b246:	f001 f84b 	bl	800c2e0 <__lshift>
 800b24a:	4604      	mov	r4, r0
 800b24c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d059      	beq.n	800b306 <_dtoa_r+0x8f6>
 800b252:	4621      	mov	r1, r4
 800b254:	4648      	mov	r0, r9
 800b256:	f001 f8af 	bl	800c3b8 <__mcmp>
 800b25a:	2800      	cmp	r0, #0
 800b25c:	da53      	bge.n	800b306 <_dtoa_r+0x8f6>
 800b25e:	1e7b      	subs	r3, r7, #1
 800b260:	9304      	str	r3, [sp, #16]
 800b262:	4649      	mov	r1, r9
 800b264:	2300      	movs	r3, #0
 800b266:	220a      	movs	r2, #10
 800b268:	4658      	mov	r0, fp
 800b26a:	f000 fe43 	bl	800bef4 <__multadd>
 800b26e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b270:	4681      	mov	r9, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	f000 8172 	beq.w	800b55c <_dtoa_r+0xb4c>
 800b278:	2300      	movs	r3, #0
 800b27a:	4629      	mov	r1, r5
 800b27c:	220a      	movs	r2, #10
 800b27e:	4658      	mov	r0, fp
 800b280:	f000 fe38 	bl	800bef4 <__multadd>
 800b284:	9b00      	ldr	r3, [sp, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	4605      	mov	r5, r0
 800b28a:	dc67      	bgt.n	800b35c <_dtoa_r+0x94c>
 800b28c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b28e:	2b02      	cmp	r3, #2
 800b290:	dc41      	bgt.n	800b316 <_dtoa_r+0x906>
 800b292:	e063      	b.n	800b35c <_dtoa_r+0x94c>
 800b294:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b296:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b29a:	e746      	b.n	800b12a <_dtoa_r+0x71a>
 800b29c:	9b07      	ldr	r3, [sp, #28]
 800b29e:	1e5c      	subs	r4, r3, #1
 800b2a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2a2:	42a3      	cmp	r3, r4
 800b2a4:	bfbf      	itttt	lt
 800b2a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b2a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b2aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b2ac:	1ae3      	sublt	r3, r4, r3
 800b2ae:	bfb4      	ite	lt
 800b2b0:	18d2      	addlt	r2, r2, r3
 800b2b2:	1b1c      	subge	r4, r3, r4
 800b2b4:	9b07      	ldr	r3, [sp, #28]
 800b2b6:	bfbc      	itt	lt
 800b2b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b2ba:	2400      	movlt	r4, #0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	bfb5      	itete	lt
 800b2c0:	eba8 0603 	sublt.w	r6, r8, r3
 800b2c4:	9b07      	ldrge	r3, [sp, #28]
 800b2c6:	2300      	movlt	r3, #0
 800b2c8:	4646      	movge	r6, r8
 800b2ca:	e730      	b.n	800b12e <_dtoa_r+0x71e>
 800b2cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b2ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b2d0:	4646      	mov	r6, r8
 800b2d2:	e735      	b.n	800b140 <_dtoa_r+0x730>
 800b2d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b2d6:	e75c      	b.n	800b192 <_dtoa_r+0x782>
 800b2d8:	2300      	movs	r3, #0
 800b2da:	e788      	b.n	800b1ee <_dtoa_r+0x7de>
 800b2dc:	3fe00000 	.word	0x3fe00000
 800b2e0:	40240000 	.word	0x40240000
 800b2e4:	40140000 	.word	0x40140000
 800b2e8:	9b02      	ldr	r3, [sp, #8]
 800b2ea:	e780      	b.n	800b1ee <_dtoa_r+0x7de>
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2f0:	e782      	b.n	800b1f8 <_dtoa_r+0x7e8>
 800b2f2:	d099      	beq.n	800b228 <_dtoa_r+0x818>
 800b2f4:	9a08      	ldr	r2, [sp, #32]
 800b2f6:	331c      	adds	r3, #28
 800b2f8:	441a      	add	r2, r3
 800b2fa:	4498      	add	r8, r3
 800b2fc:	441e      	add	r6, r3
 800b2fe:	9208      	str	r2, [sp, #32]
 800b300:	e792      	b.n	800b228 <_dtoa_r+0x818>
 800b302:	4603      	mov	r3, r0
 800b304:	e7f6      	b.n	800b2f4 <_dtoa_r+0x8e4>
 800b306:	9b07      	ldr	r3, [sp, #28]
 800b308:	9704      	str	r7, [sp, #16]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	dc20      	bgt.n	800b350 <_dtoa_r+0x940>
 800b30e:	9300      	str	r3, [sp, #0]
 800b310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b312:	2b02      	cmp	r3, #2
 800b314:	dd1e      	ble.n	800b354 <_dtoa_r+0x944>
 800b316:	9b00      	ldr	r3, [sp, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	f47f aec0 	bne.w	800b09e <_dtoa_r+0x68e>
 800b31e:	4621      	mov	r1, r4
 800b320:	2205      	movs	r2, #5
 800b322:	4658      	mov	r0, fp
 800b324:	f000 fde6 	bl	800bef4 <__multadd>
 800b328:	4601      	mov	r1, r0
 800b32a:	4604      	mov	r4, r0
 800b32c:	4648      	mov	r0, r9
 800b32e:	f001 f843 	bl	800c3b8 <__mcmp>
 800b332:	2800      	cmp	r0, #0
 800b334:	f77f aeb3 	ble.w	800b09e <_dtoa_r+0x68e>
 800b338:	4656      	mov	r6, sl
 800b33a:	2331      	movs	r3, #49	@ 0x31
 800b33c:	f806 3b01 	strb.w	r3, [r6], #1
 800b340:	9b04      	ldr	r3, [sp, #16]
 800b342:	3301      	adds	r3, #1
 800b344:	9304      	str	r3, [sp, #16]
 800b346:	e6ae      	b.n	800b0a6 <_dtoa_r+0x696>
 800b348:	9c07      	ldr	r4, [sp, #28]
 800b34a:	9704      	str	r7, [sp, #16]
 800b34c:	4625      	mov	r5, r4
 800b34e:	e7f3      	b.n	800b338 <_dtoa_r+0x928>
 800b350:	9b07      	ldr	r3, [sp, #28]
 800b352:	9300      	str	r3, [sp, #0]
 800b354:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b356:	2b00      	cmp	r3, #0
 800b358:	f000 8104 	beq.w	800b564 <_dtoa_r+0xb54>
 800b35c:	2e00      	cmp	r6, #0
 800b35e:	dd05      	ble.n	800b36c <_dtoa_r+0x95c>
 800b360:	4629      	mov	r1, r5
 800b362:	4632      	mov	r2, r6
 800b364:	4658      	mov	r0, fp
 800b366:	f000 ffbb 	bl	800c2e0 <__lshift>
 800b36a:	4605      	mov	r5, r0
 800b36c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d05a      	beq.n	800b428 <_dtoa_r+0xa18>
 800b372:	6869      	ldr	r1, [r5, #4]
 800b374:	4658      	mov	r0, fp
 800b376:	f000 fd5b 	bl	800be30 <_Balloc>
 800b37a:	4606      	mov	r6, r0
 800b37c:	b928      	cbnz	r0, 800b38a <_dtoa_r+0x97a>
 800b37e:	4b84      	ldr	r3, [pc, #528]	@ (800b590 <_dtoa_r+0xb80>)
 800b380:	4602      	mov	r2, r0
 800b382:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b386:	f7ff bb5a 	b.w	800aa3e <_dtoa_r+0x2e>
 800b38a:	692a      	ldr	r2, [r5, #16]
 800b38c:	3202      	adds	r2, #2
 800b38e:	0092      	lsls	r2, r2, #2
 800b390:	f105 010c 	add.w	r1, r5, #12
 800b394:	300c      	adds	r0, #12
 800b396:	f7ff fa7a 	bl	800a88e <memcpy>
 800b39a:	2201      	movs	r2, #1
 800b39c:	4631      	mov	r1, r6
 800b39e:	4658      	mov	r0, fp
 800b3a0:	f000 ff9e 	bl	800c2e0 <__lshift>
 800b3a4:	f10a 0301 	add.w	r3, sl, #1
 800b3a8:	9307      	str	r3, [sp, #28]
 800b3aa:	9b00      	ldr	r3, [sp, #0]
 800b3ac:	4453      	add	r3, sl
 800b3ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3b0:	9b02      	ldr	r3, [sp, #8]
 800b3b2:	f003 0301 	and.w	r3, r3, #1
 800b3b6:	462f      	mov	r7, r5
 800b3b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3ba:	4605      	mov	r5, r0
 800b3bc:	9b07      	ldr	r3, [sp, #28]
 800b3be:	4621      	mov	r1, r4
 800b3c0:	3b01      	subs	r3, #1
 800b3c2:	4648      	mov	r0, r9
 800b3c4:	9300      	str	r3, [sp, #0]
 800b3c6:	f7ff fa99 	bl	800a8fc <quorem>
 800b3ca:	4639      	mov	r1, r7
 800b3cc:	9002      	str	r0, [sp, #8]
 800b3ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b3d2:	4648      	mov	r0, r9
 800b3d4:	f000 fff0 	bl	800c3b8 <__mcmp>
 800b3d8:	462a      	mov	r2, r5
 800b3da:	9008      	str	r0, [sp, #32]
 800b3dc:	4621      	mov	r1, r4
 800b3de:	4658      	mov	r0, fp
 800b3e0:	f001 f806 	bl	800c3f0 <__mdiff>
 800b3e4:	68c2      	ldr	r2, [r0, #12]
 800b3e6:	4606      	mov	r6, r0
 800b3e8:	bb02      	cbnz	r2, 800b42c <_dtoa_r+0xa1c>
 800b3ea:	4601      	mov	r1, r0
 800b3ec:	4648      	mov	r0, r9
 800b3ee:	f000 ffe3 	bl	800c3b8 <__mcmp>
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	4631      	mov	r1, r6
 800b3f6:	4658      	mov	r0, fp
 800b3f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b3fa:	f000 fd59 	bl	800beb0 <_Bfree>
 800b3fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b400:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b402:	9e07      	ldr	r6, [sp, #28]
 800b404:	ea43 0102 	orr.w	r1, r3, r2
 800b408:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b40a:	4319      	orrs	r1, r3
 800b40c:	d110      	bne.n	800b430 <_dtoa_r+0xa20>
 800b40e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b412:	d029      	beq.n	800b468 <_dtoa_r+0xa58>
 800b414:	9b08      	ldr	r3, [sp, #32]
 800b416:	2b00      	cmp	r3, #0
 800b418:	dd02      	ble.n	800b420 <_dtoa_r+0xa10>
 800b41a:	9b02      	ldr	r3, [sp, #8]
 800b41c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b420:	9b00      	ldr	r3, [sp, #0]
 800b422:	f883 8000 	strb.w	r8, [r3]
 800b426:	e63f      	b.n	800b0a8 <_dtoa_r+0x698>
 800b428:	4628      	mov	r0, r5
 800b42a:	e7bb      	b.n	800b3a4 <_dtoa_r+0x994>
 800b42c:	2201      	movs	r2, #1
 800b42e:	e7e1      	b.n	800b3f4 <_dtoa_r+0x9e4>
 800b430:	9b08      	ldr	r3, [sp, #32]
 800b432:	2b00      	cmp	r3, #0
 800b434:	db04      	blt.n	800b440 <_dtoa_r+0xa30>
 800b436:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b438:	430b      	orrs	r3, r1
 800b43a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b43c:	430b      	orrs	r3, r1
 800b43e:	d120      	bne.n	800b482 <_dtoa_r+0xa72>
 800b440:	2a00      	cmp	r2, #0
 800b442:	dded      	ble.n	800b420 <_dtoa_r+0xa10>
 800b444:	4649      	mov	r1, r9
 800b446:	2201      	movs	r2, #1
 800b448:	4658      	mov	r0, fp
 800b44a:	f000 ff49 	bl	800c2e0 <__lshift>
 800b44e:	4621      	mov	r1, r4
 800b450:	4681      	mov	r9, r0
 800b452:	f000 ffb1 	bl	800c3b8 <__mcmp>
 800b456:	2800      	cmp	r0, #0
 800b458:	dc03      	bgt.n	800b462 <_dtoa_r+0xa52>
 800b45a:	d1e1      	bne.n	800b420 <_dtoa_r+0xa10>
 800b45c:	f018 0f01 	tst.w	r8, #1
 800b460:	d0de      	beq.n	800b420 <_dtoa_r+0xa10>
 800b462:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b466:	d1d8      	bne.n	800b41a <_dtoa_r+0xa0a>
 800b468:	9a00      	ldr	r2, [sp, #0]
 800b46a:	2339      	movs	r3, #57	@ 0x39
 800b46c:	7013      	strb	r3, [r2, #0]
 800b46e:	4633      	mov	r3, r6
 800b470:	461e      	mov	r6, r3
 800b472:	3b01      	subs	r3, #1
 800b474:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b478:	2a39      	cmp	r2, #57	@ 0x39
 800b47a:	d052      	beq.n	800b522 <_dtoa_r+0xb12>
 800b47c:	3201      	adds	r2, #1
 800b47e:	701a      	strb	r2, [r3, #0]
 800b480:	e612      	b.n	800b0a8 <_dtoa_r+0x698>
 800b482:	2a00      	cmp	r2, #0
 800b484:	dd07      	ble.n	800b496 <_dtoa_r+0xa86>
 800b486:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b48a:	d0ed      	beq.n	800b468 <_dtoa_r+0xa58>
 800b48c:	9a00      	ldr	r2, [sp, #0]
 800b48e:	f108 0301 	add.w	r3, r8, #1
 800b492:	7013      	strb	r3, [r2, #0]
 800b494:	e608      	b.n	800b0a8 <_dtoa_r+0x698>
 800b496:	9b07      	ldr	r3, [sp, #28]
 800b498:	9a07      	ldr	r2, [sp, #28]
 800b49a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b49e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d028      	beq.n	800b4f6 <_dtoa_r+0xae6>
 800b4a4:	4649      	mov	r1, r9
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	220a      	movs	r2, #10
 800b4aa:	4658      	mov	r0, fp
 800b4ac:	f000 fd22 	bl	800bef4 <__multadd>
 800b4b0:	42af      	cmp	r7, r5
 800b4b2:	4681      	mov	r9, r0
 800b4b4:	f04f 0300 	mov.w	r3, #0
 800b4b8:	f04f 020a 	mov.w	r2, #10
 800b4bc:	4639      	mov	r1, r7
 800b4be:	4658      	mov	r0, fp
 800b4c0:	d107      	bne.n	800b4d2 <_dtoa_r+0xac2>
 800b4c2:	f000 fd17 	bl	800bef4 <__multadd>
 800b4c6:	4607      	mov	r7, r0
 800b4c8:	4605      	mov	r5, r0
 800b4ca:	9b07      	ldr	r3, [sp, #28]
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	9307      	str	r3, [sp, #28]
 800b4d0:	e774      	b.n	800b3bc <_dtoa_r+0x9ac>
 800b4d2:	f000 fd0f 	bl	800bef4 <__multadd>
 800b4d6:	4629      	mov	r1, r5
 800b4d8:	4607      	mov	r7, r0
 800b4da:	2300      	movs	r3, #0
 800b4dc:	220a      	movs	r2, #10
 800b4de:	4658      	mov	r0, fp
 800b4e0:	f000 fd08 	bl	800bef4 <__multadd>
 800b4e4:	4605      	mov	r5, r0
 800b4e6:	e7f0      	b.n	800b4ca <_dtoa_r+0xaba>
 800b4e8:	9b00      	ldr	r3, [sp, #0]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	bfcc      	ite	gt
 800b4ee:	461e      	movgt	r6, r3
 800b4f0:	2601      	movle	r6, #1
 800b4f2:	4456      	add	r6, sl
 800b4f4:	2700      	movs	r7, #0
 800b4f6:	4649      	mov	r1, r9
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	4658      	mov	r0, fp
 800b4fc:	f000 fef0 	bl	800c2e0 <__lshift>
 800b500:	4621      	mov	r1, r4
 800b502:	4681      	mov	r9, r0
 800b504:	f000 ff58 	bl	800c3b8 <__mcmp>
 800b508:	2800      	cmp	r0, #0
 800b50a:	dcb0      	bgt.n	800b46e <_dtoa_r+0xa5e>
 800b50c:	d102      	bne.n	800b514 <_dtoa_r+0xb04>
 800b50e:	f018 0f01 	tst.w	r8, #1
 800b512:	d1ac      	bne.n	800b46e <_dtoa_r+0xa5e>
 800b514:	4633      	mov	r3, r6
 800b516:	461e      	mov	r6, r3
 800b518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b51c:	2a30      	cmp	r2, #48	@ 0x30
 800b51e:	d0fa      	beq.n	800b516 <_dtoa_r+0xb06>
 800b520:	e5c2      	b.n	800b0a8 <_dtoa_r+0x698>
 800b522:	459a      	cmp	sl, r3
 800b524:	d1a4      	bne.n	800b470 <_dtoa_r+0xa60>
 800b526:	9b04      	ldr	r3, [sp, #16]
 800b528:	3301      	adds	r3, #1
 800b52a:	9304      	str	r3, [sp, #16]
 800b52c:	2331      	movs	r3, #49	@ 0x31
 800b52e:	f88a 3000 	strb.w	r3, [sl]
 800b532:	e5b9      	b.n	800b0a8 <_dtoa_r+0x698>
 800b534:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b536:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b594 <_dtoa_r+0xb84>
 800b53a:	b11b      	cbz	r3, 800b544 <_dtoa_r+0xb34>
 800b53c:	f10a 0308 	add.w	r3, sl, #8
 800b540:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b542:	6013      	str	r3, [r2, #0]
 800b544:	4650      	mov	r0, sl
 800b546:	b019      	add	sp, #100	@ 0x64
 800b548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b54c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b54e:	2b01      	cmp	r3, #1
 800b550:	f77f ae37 	ble.w	800b1c2 <_dtoa_r+0x7b2>
 800b554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b556:	930a      	str	r3, [sp, #40]	@ 0x28
 800b558:	2001      	movs	r0, #1
 800b55a:	e655      	b.n	800b208 <_dtoa_r+0x7f8>
 800b55c:	9b00      	ldr	r3, [sp, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	f77f aed6 	ble.w	800b310 <_dtoa_r+0x900>
 800b564:	4656      	mov	r6, sl
 800b566:	4621      	mov	r1, r4
 800b568:	4648      	mov	r0, r9
 800b56a:	f7ff f9c7 	bl	800a8fc <quorem>
 800b56e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b572:	f806 8b01 	strb.w	r8, [r6], #1
 800b576:	9b00      	ldr	r3, [sp, #0]
 800b578:	eba6 020a 	sub.w	r2, r6, sl
 800b57c:	4293      	cmp	r3, r2
 800b57e:	ddb3      	ble.n	800b4e8 <_dtoa_r+0xad8>
 800b580:	4649      	mov	r1, r9
 800b582:	2300      	movs	r3, #0
 800b584:	220a      	movs	r2, #10
 800b586:	4658      	mov	r0, fp
 800b588:	f000 fcb4 	bl	800bef4 <__multadd>
 800b58c:	4681      	mov	r9, r0
 800b58e:	e7ea      	b.n	800b566 <_dtoa_r+0xb56>
 800b590:	0800d857 	.word	0x0800d857
 800b594:	0800d7f2 	.word	0x0800d7f2

0800b598 <_free_r>:
 800b598:	b538      	push	{r3, r4, r5, lr}
 800b59a:	4605      	mov	r5, r0
 800b59c:	2900      	cmp	r1, #0
 800b59e:	d041      	beq.n	800b624 <_free_r+0x8c>
 800b5a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5a4:	1f0c      	subs	r4, r1, #4
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	bfb8      	it	lt
 800b5aa:	18e4      	addlt	r4, r4, r3
 800b5ac:	f000 fc34 	bl	800be18 <__malloc_lock>
 800b5b0:	4a1d      	ldr	r2, [pc, #116]	@ (800b628 <_free_r+0x90>)
 800b5b2:	6813      	ldr	r3, [r2, #0]
 800b5b4:	b933      	cbnz	r3, 800b5c4 <_free_r+0x2c>
 800b5b6:	6063      	str	r3, [r4, #4]
 800b5b8:	6014      	str	r4, [r2, #0]
 800b5ba:	4628      	mov	r0, r5
 800b5bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5c0:	f000 bc30 	b.w	800be24 <__malloc_unlock>
 800b5c4:	42a3      	cmp	r3, r4
 800b5c6:	d908      	bls.n	800b5da <_free_r+0x42>
 800b5c8:	6820      	ldr	r0, [r4, #0]
 800b5ca:	1821      	adds	r1, r4, r0
 800b5cc:	428b      	cmp	r3, r1
 800b5ce:	bf01      	itttt	eq
 800b5d0:	6819      	ldreq	r1, [r3, #0]
 800b5d2:	685b      	ldreq	r3, [r3, #4]
 800b5d4:	1809      	addeq	r1, r1, r0
 800b5d6:	6021      	streq	r1, [r4, #0]
 800b5d8:	e7ed      	b.n	800b5b6 <_free_r+0x1e>
 800b5da:	461a      	mov	r2, r3
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	b10b      	cbz	r3, 800b5e4 <_free_r+0x4c>
 800b5e0:	42a3      	cmp	r3, r4
 800b5e2:	d9fa      	bls.n	800b5da <_free_r+0x42>
 800b5e4:	6811      	ldr	r1, [r2, #0]
 800b5e6:	1850      	adds	r0, r2, r1
 800b5e8:	42a0      	cmp	r0, r4
 800b5ea:	d10b      	bne.n	800b604 <_free_r+0x6c>
 800b5ec:	6820      	ldr	r0, [r4, #0]
 800b5ee:	4401      	add	r1, r0
 800b5f0:	1850      	adds	r0, r2, r1
 800b5f2:	4283      	cmp	r3, r0
 800b5f4:	6011      	str	r1, [r2, #0]
 800b5f6:	d1e0      	bne.n	800b5ba <_free_r+0x22>
 800b5f8:	6818      	ldr	r0, [r3, #0]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	6053      	str	r3, [r2, #4]
 800b5fe:	4408      	add	r0, r1
 800b600:	6010      	str	r0, [r2, #0]
 800b602:	e7da      	b.n	800b5ba <_free_r+0x22>
 800b604:	d902      	bls.n	800b60c <_free_r+0x74>
 800b606:	230c      	movs	r3, #12
 800b608:	602b      	str	r3, [r5, #0]
 800b60a:	e7d6      	b.n	800b5ba <_free_r+0x22>
 800b60c:	6820      	ldr	r0, [r4, #0]
 800b60e:	1821      	adds	r1, r4, r0
 800b610:	428b      	cmp	r3, r1
 800b612:	bf04      	itt	eq
 800b614:	6819      	ldreq	r1, [r3, #0]
 800b616:	685b      	ldreq	r3, [r3, #4]
 800b618:	6063      	str	r3, [r4, #4]
 800b61a:	bf04      	itt	eq
 800b61c:	1809      	addeq	r1, r1, r0
 800b61e:	6021      	streq	r1, [r4, #0]
 800b620:	6054      	str	r4, [r2, #4]
 800b622:	e7ca      	b.n	800b5ba <_free_r+0x22>
 800b624:	bd38      	pop	{r3, r4, r5, pc}
 800b626:	bf00      	nop
 800b628:	20000f38 	.word	0x20000f38

0800b62c <rshift>:
 800b62c:	6903      	ldr	r3, [r0, #16]
 800b62e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b632:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b636:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b63a:	f100 0414 	add.w	r4, r0, #20
 800b63e:	dd45      	ble.n	800b6cc <rshift+0xa0>
 800b640:	f011 011f 	ands.w	r1, r1, #31
 800b644:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b648:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b64c:	d10c      	bne.n	800b668 <rshift+0x3c>
 800b64e:	f100 0710 	add.w	r7, r0, #16
 800b652:	4629      	mov	r1, r5
 800b654:	42b1      	cmp	r1, r6
 800b656:	d334      	bcc.n	800b6c2 <rshift+0x96>
 800b658:	1a9b      	subs	r3, r3, r2
 800b65a:	009b      	lsls	r3, r3, #2
 800b65c:	1eea      	subs	r2, r5, #3
 800b65e:	4296      	cmp	r6, r2
 800b660:	bf38      	it	cc
 800b662:	2300      	movcc	r3, #0
 800b664:	4423      	add	r3, r4
 800b666:	e015      	b.n	800b694 <rshift+0x68>
 800b668:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b66c:	f1c1 0820 	rsb	r8, r1, #32
 800b670:	40cf      	lsrs	r7, r1
 800b672:	f105 0e04 	add.w	lr, r5, #4
 800b676:	46a1      	mov	r9, r4
 800b678:	4576      	cmp	r6, lr
 800b67a:	46f4      	mov	ip, lr
 800b67c:	d815      	bhi.n	800b6aa <rshift+0x7e>
 800b67e:	1a9a      	subs	r2, r3, r2
 800b680:	0092      	lsls	r2, r2, #2
 800b682:	3a04      	subs	r2, #4
 800b684:	3501      	adds	r5, #1
 800b686:	42ae      	cmp	r6, r5
 800b688:	bf38      	it	cc
 800b68a:	2200      	movcc	r2, #0
 800b68c:	18a3      	adds	r3, r4, r2
 800b68e:	50a7      	str	r7, [r4, r2]
 800b690:	b107      	cbz	r7, 800b694 <rshift+0x68>
 800b692:	3304      	adds	r3, #4
 800b694:	1b1a      	subs	r2, r3, r4
 800b696:	42a3      	cmp	r3, r4
 800b698:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b69c:	bf08      	it	eq
 800b69e:	2300      	moveq	r3, #0
 800b6a0:	6102      	str	r2, [r0, #16]
 800b6a2:	bf08      	it	eq
 800b6a4:	6143      	streq	r3, [r0, #20]
 800b6a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6aa:	f8dc c000 	ldr.w	ip, [ip]
 800b6ae:	fa0c fc08 	lsl.w	ip, ip, r8
 800b6b2:	ea4c 0707 	orr.w	r7, ip, r7
 800b6b6:	f849 7b04 	str.w	r7, [r9], #4
 800b6ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b6be:	40cf      	lsrs	r7, r1
 800b6c0:	e7da      	b.n	800b678 <rshift+0x4c>
 800b6c2:	f851 cb04 	ldr.w	ip, [r1], #4
 800b6c6:	f847 cf04 	str.w	ip, [r7, #4]!
 800b6ca:	e7c3      	b.n	800b654 <rshift+0x28>
 800b6cc:	4623      	mov	r3, r4
 800b6ce:	e7e1      	b.n	800b694 <rshift+0x68>

0800b6d0 <__hexdig_fun>:
 800b6d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b6d4:	2b09      	cmp	r3, #9
 800b6d6:	d802      	bhi.n	800b6de <__hexdig_fun+0xe>
 800b6d8:	3820      	subs	r0, #32
 800b6da:	b2c0      	uxtb	r0, r0
 800b6dc:	4770      	bx	lr
 800b6de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b6e2:	2b05      	cmp	r3, #5
 800b6e4:	d801      	bhi.n	800b6ea <__hexdig_fun+0x1a>
 800b6e6:	3847      	subs	r0, #71	@ 0x47
 800b6e8:	e7f7      	b.n	800b6da <__hexdig_fun+0xa>
 800b6ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b6ee:	2b05      	cmp	r3, #5
 800b6f0:	d801      	bhi.n	800b6f6 <__hexdig_fun+0x26>
 800b6f2:	3827      	subs	r0, #39	@ 0x27
 800b6f4:	e7f1      	b.n	800b6da <__hexdig_fun+0xa>
 800b6f6:	2000      	movs	r0, #0
 800b6f8:	4770      	bx	lr
	...

0800b6fc <__gethex>:
 800b6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b700:	b085      	sub	sp, #20
 800b702:	468a      	mov	sl, r1
 800b704:	9302      	str	r3, [sp, #8]
 800b706:	680b      	ldr	r3, [r1, #0]
 800b708:	9001      	str	r0, [sp, #4]
 800b70a:	4690      	mov	r8, r2
 800b70c:	1c9c      	adds	r4, r3, #2
 800b70e:	46a1      	mov	r9, r4
 800b710:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b714:	2830      	cmp	r0, #48	@ 0x30
 800b716:	d0fa      	beq.n	800b70e <__gethex+0x12>
 800b718:	eba9 0303 	sub.w	r3, r9, r3
 800b71c:	f1a3 0b02 	sub.w	fp, r3, #2
 800b720:	f7ff ffd6 	bl	800b6d0 <__hexdig_fun>
 800b724:	4605      	mov	r5, r0
 800b726:	2800      	cmp	r0, #0
 800b728:	d168      	bne.n	800b7fc <__gethex+0x100>
 800b72a:	49a0      	ldr	r1, [pc, #640]	@ (800b9ac <__gethex+0x2b0>)
 800b72c:	2201      	movs	r2, #1
 800b72e:	4648      	mov	r0, r9
 800b730:	f7fe ffc7 	bl	800a6c2 <strncmp>
 800b734:	4607      	mov	r7, r0
 800b736:	2800      	cmp	r0, #0
 800b738:	d167      	bne.n	800b80a <__gethex+0x10e>
 800b73a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b73e:	4626      	mov	r6, r4
 800b740:	f7ff ffc6 	bl	800b6d0 <__hexdig_fun>
 800b744:	2800      	cmp	r0, #0
 800b746:	d062      	beq.n	800b80e <__gethex+0x112>
 800b748:	4623      	mov	r3, r4
 800b74a:	7818      	ldrb	r0, [r3, #0]
 800b74c:	2830      	cmp	r0, #48	@ 0x30
 800b74e:	4699      	mov	r9, r3
 800b750:	f103 0301 	add.w	r3, r3, #1
 800b754:	d0f9      	beq.n	800b74a <__gethex+0x4e>
 800b756:	f7ff ffbb 	bl	800b6d0 <__hexdig_fun>
 800b75a:	fab0 f580 	clz	r5, r0
 800b75e:	096d      	lsrs	r5, r5, #5
 800b760:	f04f 0b01 	mov.w	fp, #1
 800b764:	464a      	mov	r2, r9
 800b766:	4616      	mov	r6, r2
 800b768:	3201      	adds	r2, #1
 800b76a:	7830      	ldrb	r0, [r6, #0]
 800b76c:	f7ff ffb0 	bl	800b6d0 <__hexdig_fun>
 800b770:	2800      	cmp	r0, #0
 800b772:	d1f8      	bne.n	800b766 <__gethex+0x6a>
 800b774:	498d      	ldr	r1, [pc, #564]	@ (800b9ac <__gethex+0x2b0>)
 800b776:	2201      	movs	r2, #1
 800b778:	4630      	mov	r0, r6
 800b77a:	f7fe ffa2 	bl	800a6c2 <strncmp>
 800b77e:	2800      	cmp	r0, #0
 800b780:	d13f      	bne.n	800b802 <__gethex+0x106>
 800b782:	b944      	cbnz	r4, 800b796 <__gethex+0x9a>
 800b784:	1c74      	adds	r4, r6, #1
 800b786:	4622      	mov	r2, r4
 800b788:	4616      	mov	r6, r2
 800b78a:	3201      	adds	r2, #1
 800b78c:	7830      	ldrb	r0, [r6, #0]
 800b78e:	f7ff ff9f 	bl	800b6d0 <__hexdig_fun>
 800b792:	2800      	cmp	r0, #0
 800b794:	d1f8      	bne.n	800b788 <__gethex+0x8c>
 800b796:	1ba4      	subs	r4, r4, r6
 800b798:	00a7      	lsls	r7, r4, #2
 800b79a:	7833      	ldrb	r3, [r6, #0]
 800b79c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b7a0:	2b50      	cmp	r3, #80	@ 0x50
 800b7a2:	d13e      	bne.n	800b822 <__gethex+0x126>
 800b7a4:	7873      	ldrb	r3, [r6, #1]
 800b7a6:	2b2b      	cmp	r3, #43	@ 0x2b
 800b7a8:	d033      	beq.n	800b812 <__gethex+0x116>
 800b7aa:	2b2d      	cmp	r3, #45	@ 0x2d
 800b7ac:	d034      	beq.n	800b818 <__gethex+0x11c>
 800b7ae:	1c71      	adds	r1, r6, #1
 800b7b0:	2400      	movs	r4, #0
 800b7b2:	7808      	ldrb	r0, [r1, #0]
 800b7b4:	f7ff ff8c 	bl	800b6d0 <__hexdig_fun>
 800b7b8:	1e43      	subs	r3, r0, #1
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	2b18      	cmp	r3, #24
 800b7be:	d830      	bhi.n	800b822 <__gethex+0x126>
 800b7c0:	f1a0 0210 	sub.w	r2, r0, #16
 800b7c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b7c8:	f7ff ff82 	bl	800b6d0 <__hexdig_fun>
 800b7cc:	f100 3cff 	add.w	ip, r0, #4294967295
 800b7d0:	fa5f fc8c 	uxtb.w	ip, ip
 800b7d4:	f1bc 0f18 	cmp.w	ip, #24
 800b7d8:	f04f 030a 	mov.w	r3, #10
 800b7dc:	d91e      	bls.n	800b81c <__gethex+0x120>
 800b7de:	b104      	cbz	r4, 800b7e2 <__gethex+0xe6>
 800b7e0:	4252      	negs	r2, r2
 800b7e2:	4417      	add	r7, r2
 800b7e4:	f8ca 1000 	str.w	r1, [sl]
 800b7e8:	b1ed      	cbz	r5, 800b826 <__gethex+0x12a>
 800b7ea:	f1bb 0f00 	cmp.w	fp, #0
 800b7ee:	bf0c      	ite	eq
 800b7f0:	2506      	moveq	r5, #6
 800b7f2:	2500      	movne	r5, #0
 800b7f4:	4628      	mov	r0, r5
 800b7f6:	b005      	add	sp, #20
 800b7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7fc:	2500      	movs	r5, #0
 800b7fe:	462c      	mov	r4, r5
 800b800:	e7b0      	b.n	800b764 <__gethex+0x68>
 800b802:	2c00      	cmp	r4, #0
 800b804:	d1c7      	bne.n	800b796 <__gethex+0x9a>
 800b806:	4627      	mov	r7, r4
 800b808:	e7c7      	b.n	800b79a <__gethex+0x9e>
 800b80a:	464e      	mov	r6, r9
 800b80c:	462f      	mov	r7, r5
 800b80e:	2501      	movs	r5, #1
 800b810:	e7c3      	b.n	800b79a <__gethex+0x9e>
 800b812:	2400      	movs	r4, #0
 800b814:	1cb1      	adds	r1, r6, #2
 800b816:	e7cc      	b.n	800b7b2 <__gethex+0xb6>
 800b818:	2401      	movs	r4, #1
 800b81a:	e7fb      	b.n	800b814 <__gethex+0x118>
 800b81c:	fb03 0002 	mla	r0, r3, r2, r0
 800b820:	e7ce      	b.n	800b7c0 <__gethex+0xc4>
 800b822:	4631      	mov	r1, r6
 800b824:	e7de      	b.n	800b7e4 <__gethex+0xe8>
 800b826:	eba6 0309 	sub.w	r3, r6, r9
 800b82a:	3b01      	subs	r3, #1
 800b82c:	4629      	mov	r1, r5
 800b82e:	2b07      	cmp	r3, #7
 800b830:	dc0a      	bgt.n	800b848 <__gethex+0x14c>
 800b832:	9801      	ldr	r0, [sp, #4]
 800b834:	f000 fafc 	bl	800be30 <_Balloc>
 800b838:	4604      	mov	r4, r0
 800b83a:	b940      	cbnz	r0, 800b84e <__gethex+0x152>
 800b83c:	4b5c      	ldr	r3, [pc, #368]	@ (800b9b0 <__gethex+0x2b4>)
 800b83e:	4602      	mov	r2, r0
 800b840:	21e4      	movs	r1, #228	@ 0xe4
 800b842:	485c      	ldr	r0, [pc, #368]	@ (800b9b4 <__gethex+0x2b8>)
 800b844:	f7ff f83c 	bl	800a8c0 <__assert_func>
 800b848:	3101      	adds	r1, #1
 800b84a:	105b      	asrs	r3, r3, #1
 800b84c:	e7ef      	b.n	800b82e <__gethex+0x132>
 800b84e:	f100 0a14 	add.w	sl, r0, #20
 800b852:	2300      	movs	r3, #0
 800b854:	4655      	mov	r5, sl
 800b856:	469b      	mov	fp, r3
 800b858:	45b1      	cmp	r9, r6
 800b85a:	d337      	bcc.n	800b8cc <__gethex+0x1d0>
 800b85c:	f845 bb04 	str.w	fp, [r5], #4
 800b860:	eba5 050a 	sub.w	r5, r5, sl
 800b864:	10ad      	asrs	r5, r5, #2
 800b866:	6125      	str	r5, [r4, #16]
 800b868:	4658      	mov	r0, fp
 800b86a:	f000 fbd3 	bl	800c014 <__hi0bits>
 800b86e:	016d      	lsls	r5, r5, #5
 800b870:	f8d8 6000 	ldr.w	r6, [r8]
 800b874:	1a2d      	subs	r5, r5, r0
 800b876:	42b5      	cmp	r5, r6
 800b878:	dd54      	ble.n	800b924 <__gethex+0x228>
 800b87a:	1bad      	subs	r5, r5, r6
 800b87c:	4629      	mov	r1, r5
 800b87e:	4620      	mov	r0, r4
 800b880:	f000 ff67 	bl	800c752 <__any_on>
 800b884:	4681      	mov	r9, r0
 800b886:	b178      	cbz	r0, 800b8a8 <__gethex+0x1ac>
 800b888:	1e6b      	subs	r3, r5, #1
 800b88a:	1159      	asrs	r1, r3, #5
 800b88c:	f003 021f 	and.w	r2, r3, #31
 800b890:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b894:	f04f 0901 	mov.w	r9, #1
 800b898:	fa09 f202 	lsl.w	r2, r9, r2
 800b89c:	420a      	tst	r2, r1
 800b89e:	d003      	beq.n	800b8a8 <__gethex+0x1ac>
 800b8a0:	454b      	cmp	r3, r9
 800b8a2:	dc36      	bgt.n	800b912 <__gethex+0x216>
 800b8a4:	f04f 0902 	mov.w	r9, #2
 800b8a8:	4629      	mov	r1, r5
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	f7ff febe 	bl	800b62c <rshift>
 800b8b0:	442f      	add	r7, r5
 800b8b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b8b6:	42bb      	cmp	r3, r7
 800b8b8:	da42      	bge.n	800b940 <__gethex+0x244>
 800b8ba:	9801      	ldr	r0, [sp, #4]
 800b8bc:	4621      	mov	r1, r4
 800b8be:	f000 faf7 	bl	800beb0 <_Bfree>
 800b8c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	6013      	str	r3, [r2, #0]
 800b8c8:	25a3      	movs	r5, #163	@ 0xa3
 800b8ca:	e793      	b.n	800b7f4 <__gethex+0xf8>
 800b8cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b8d0:	2a2e      	cmp	r2, #46	@ 0x2e
 800b8d2:	d012      	beq.n	800b8fa <__gethex+0x1fe>
 800b8d4:	2b20      	cmp	r3, #32
 800b8d6:	d104      	bne.n	800b8e2 <__gethex+0x1e6>
 800b8d8:	f845 bb04 	str.w	fp, [r5], #4
 800b8dc:	f04f 0b00 	mov.w	fp, #0
 800b8e0:	465b      	mov	r3, fp
 800b8e2:	7830      	ldrb	r0, [r6, #0]
 800b8e4:	9303      	str	r3, [sp, #12]
 800b8e6:	f7ff fef3 	bl	800b6d0 <__hexdig_fun>
 800b8ea:	9b03      	ldr	r3, [sp, #12]
 800b8ec:	f000 000f 	and.w	r0, r0, #15
 800b8f0:	4098      	lsls	r0, r3
 800b8f2:	ea4b 0b00 	orr.w	fp, fp, r0
 800b8f6:	3304      	adds	r3, #4
 800b8f8:	e7ae      	b.n	800b858 <__gethex+0x15c>
 800b8fa:	45b1      	cmp	r9, r6
 800b8fc:	d8ea      	bhi.n	800b8d4 <__gethex+0x1d8>
 800b8fe:	492b      	ldr	r1, [pc, #172]	@ (800b9ac <__gethex+0x2b0>)
 800b900:	9303      	str	r3, [sp, #12]
 800b902:	2201      	movs	r2, #1
 800b904:	4630      	mov	r0, r6
 800b906:	f7fe fedc 	bl	800a6c2 <strncmp>
 800b90a:	9b03      	ldr	r3, [sp, #12]
 800b90c:	2800      	cmp	r0, #0
 800b90e:	d1e1      	bne.n	800b8d4 <__gethex+0x1d8>
 800b910:	e7a2      	b.n	800b858 <__gethex+0x15c>
 800b912:	1ea9      	subs	r1, r5, #2
 800b914:	4620      	mov	r0, r4
 800b916:	f000 ff1c 	bl	800c752 <__any_on>
 800b91a:	2800      	cmp	r0, #0
 800b91c:	d0c2      	beq.n	800b8a4 <__gethex+0x1a8>
 800b91e:	f04f 0903 	mov.w	r9, #3
 800b922:	e7c1      	b.n	800b8a8 <__gethex+0x1ac>
 800b924:	da09      	bge.n	800b93a <__gethex+0x23e>
 800b926:	1b75      	subs	r5, r6, r5
 800b928:	4621      	mov	r1, r4
 800b92a:	9801      	ldr	r0, [sp, #4]
 800b92c:	462a      	mov	r2, r5
 800b92e:	f000 fcd7 	bl	800c2e0 <__lshift>
 800b932:	1b7f      	subs	r7, r7, r5
 800b934:	4604      	mov	r4, r0
 800b936:	f100 0a14 	add.w	sl, r0, #20
 800b93a:	f04f 0900 	mov.w	r9, #0
 800b93e:	e7b8      	b.n	800b8b2 <__gethex+0x1b6>
 800b940:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b944:	42bd      	cmp	r5, r7
 800b946:	dd6f      	ble.n	800ba28 <__gethex+0x32c>
 800b948:	1bed      	subs	r5, r5, r7
 800b94a:	42ae      	cmp	r6, r5
 800b94c:	dc34      	bgt.n	800b9b8 <__gethex+0x2bc>
 800b94e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b952:	2b02      	cmp	r3, #2
 800b954:	d022      	beq.n	800b99c <__gethex+0x2a0>
 800b956:	2b03      	cmp	r3, #3
 800b958:	d024      	beq.n	800b9a4 <__gethex+0x2a8>
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	d115      	bne.n	800b98a <__gethex+0x28e>
 800b95e:	42ae      	cmp	r6, r5
 800b960:	d113      	bne.n	800b98a <__gethex+0x28e>
 800b962:	2e01      	cmp	r6, #1
 800b964:	d10b      	bne.n	800b97e <__gethex+0x282>
 800b966:	9a02      	ldr	r2, [sp, #8]
 800b968:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b96c:	6013      	str	r3, [r2, #0]
 800b96e:	2301      	movs	r3, #1
 800b970:	6123      	str	r3, [r4, #16]
 800b972:	f8ca 3000 	str.w	r3, [sl]
 800b976:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b978:	2562      	movs	r5, #98	@ 0x62
 800b97a:	601c      	str	r4, [r3, #0]
 800b97c:	e73a      	b.n	800b7f4 <__gethex+0xf8>
 800b97e:	1e71      	subs	r1, r6, #1
 800b980:	4620      	mov	r0, r4
 800b982:	f000 fee6 	bl	800c752 <__any_on>
 800b986:	2800      	cmp	r0, #0
 800b988:	d1ed      	bne.n	800b966 <__gethex+0x26a>
 800b98a:	9801      	ldr	r0, [sp, #4]
 800b98c:	4621      	mov	r1, r4
 800b98e:	f000 fa8f 	bl	800beb0 <_Bfree>
 800b992:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b994:	2300      	movs	r3, #0
 800b996:	6013      	str	r3, [r2, #0]
 800b998:	2550      	movs	r5, #80	@ 0x50
 800b99a:	e72b      	b.n	800b7f4 <__gethex+0xf8>
 800b99c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d1f3      	bne.n	800b98a <__gethex+0x28e>
 800b9a2:	e7e0      	b.n	800b966 <__gethex+0x26a>
 800b9a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d1dd      	bne.n	800b966 <__gethex+0x26a>
 800b9aa:	e7ee      	b.n	800b98a <__gethex+0x28e>
 800b9ac:	0800d5b4 	.word	0x0800d5b4
 800b9b0:	0800d857 	.word	0x0800d857
 800b9b4:	0800d868 	.word	0x0800d868
 800b9b8:	1e6f      	subs	r7, r5, #1
 800b9ba:	f1b9 0f00 	cmp.w	r9, #0
 800b9be:	d130      	bne.n	800ba22 <__gethex+0x326>
 800b9c0:	b127      	cbz	r7, 800b9cc <__gethex+0x2d0>
 800b9c2:	4639      	mov	r1, r7
 800b9c4:	4620      	mov	r0, r4
 800b9c6:	f000 fec4 	bl	800c752 <__any_on>
 800b9ca:	4681      	mov	r9, r0
 800b9cc:	117a      	asrs	r2, r7, #5
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b9d4:	f007 071f 	and.w	r7, r7, #31
 800b9d8:	40bb      	lsls	r3, r7
 800b9da:	4213      	tst	r3, r2
 800b9dc:	4629      	mov	r1, r5
 800b9de:	4620      	mov	r0, r4
 800b9e0:	bf18      	it	ne
 800b9e2:	f049 0902 	orrne.w	r9, r9, #2
 800b9e6:	f7ff fe21 	bl	800b62c <rshift>
 800b9ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b9ee:	1b76      	subs	r6, r6, r5
 800b9f0:	2502      	movs	r5, #2
 800b9f2:	f1b9 0f00 	cmp.w	r9, #0
 800b9f6:	d047      	beq.n	800ba88 <__gethex+0x38c>
 800b9f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b9fc:	2b02      	cmp	r3, #2
 800b9fe:	d015      	beq.n	800ba2c <__gethex+0x330>
 800ba00:	2b03      	cmp	r3, #3
 800ba02:	d017      	beq.n	800ba34 <__gethex+0x338>
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d109      	bne.n	800ba1c <__gethex+0x320>
 800ba08:	f019 0f02 	tst.w	r9, #2
 800ba0c:	d006      	beq.n	800ba1c <__gethex+0x320>
 800ba0e:	f8da 3000 	ldr.w	r3, [sl]
 800ba12:	ea49 0903 	orr.w	r9, r9, r3
 800ba16:	f019 0f01 	tst.w	r9, #1
 800ba1a:	d10e      	bne.n	800ba3a <__gethex+0x33e>
 800ba1c:	f045 0510 	orr.w	r5, r5, #16
 800ba20:	e032      	b.n	800ba88 <__gethex+0x38c>
 800ba22:	f04f 0901 	mov.w	r9, #1
 800ba26:	e7d1      	b.n	800b9cc <__gethex+0x2d0>
 800ba28:	2501      	movs	r5, #1
 800ba2a:	e7e2      	b.n	800b9f2 <__gethex+0x2f6>
 800ba2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba2e:	f1c3 0301 	rsb	r3, r3, #1
 800ba32:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d0f0      	beq.n	800ba1c <__gethex+0x320>
 800ba3a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ba3e:	f104 0314 	add.w	r3, r4, #20
 800ba42:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ba46:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ba4a:	f04f 0c00 	mov.w	ip, #0
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba54:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ba58:	d01b      	beq.n	800ba92 <__gethex+0x396>
 800ba5a:	3201      	adds	r2, #1
 800ba5c:	6002      	str	r2, [r0, #0]
 800ba5e:	2d02      	cmp	r5, #2
 800ba60:	f104 0314 	add.w	r3, r4, #20
 800ba64:	d13c      	bne.n	800bae0 <__gethex+0x3e4>
 800ba66:	f8d8 2000 	ldr.w	r2, [r8]
 800ba6a:	3a01      	subs	r2, #1
 800ba6c:	42b2      	cmp	r2, r6
 800ba6e:	d109      	bne.n	800ba84 <__gethex+0x388>
 800ba70:	1171      	asrs	r1, r6, #5
 800ba72:	2201      	movs	r2, #1
 800ba74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ba78:	f006 061f 	and.w	r6, r6, #31
 800ba7c:	fa02 f606 	lsl.w	r6, r2, r6
 800ba80:	421e      	tst	r6, r3
 800ba82:	d13a      	bne.n	800bafa <__gethex+0x3fe>
 800ba84:	f045 0520 	orr.w	r5, r5, #32
 800ba88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba8a:	601c      	str	r4, [r3, #0]
 800ba8c:	9b02      	ldr	r3, [sp, #8]
 800ba8e:	601f      	str	r7, [r3, #0]
 800ba90:	e6b0      	b.n	800b7f4 <__gethex+0xf8>
 800ba92:	4299      	cmp	r1, r3
 800ba94:	f843 cc04 	str.w	ip, [r3, #-4]
 800ba98:	d8d9      	bhi.n	800ba4e <__gethex+0x352>
 800ba9a:	68a3      	ldr	r3, [r4, #8]
 800ba9c:	459b      	cmp	fp, r3
 800ba9e:	db17      	blt.n	800bad0 <__gethex+0x3d4>
 800baa0:	6861      	ldr	r1, [r4, #4]
 800baa2:	9801      	ldr	r0, [sp, #4]
 800baa4:	3101      	adds	r1, #1
 800baa6:	f000 f9c3 	bl	800be30 <_Balloc>
 800baaa:	4681      	mov	r9, r0
 800baac:	b918      	cbnz	r0, 800bab6 <__gethex+0x3ba>
 800baae:	4b1a      	ldr	r3, [pc, #104]	@ (800bb18 <__gethex+0x41c>)
 800bab0:	4602      	mov	r2, r0
 800bab2:	2184      	movs	r1, #132	@ 0x84
 800bab4:	e6c5      	b.n	800b842 <__gethex+0x146>
 800bab6:	6922      	ldr	r2, [r4, #16]
 800bab8:	3202      	adds	r2, #2
 800baba:	f104 010c 	add.w	r1, r4, #12
 800babe:	0092      	lsls	r2, r2, #2
 800bac0:	300c      	adds	r0, #12
 800bac2:	f7fe fee4 	bl	800a88e <memcpy>
 800bac6:	4621      	mov	r1, r4
 800bac8:	9801      	ldr	r0, [sp, #4]
 800baca:	f000 f9f1 	bl	800beb0 <_Bfree>
 800bace:	464c      	mov	r4, r9
 800bad0:	6923      	ldr	r3, [r4, #16]
 800bad2:	1c5a      	adds	r2, r3, #1
 800bad4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bad8:	6122      	str	r2, [r4, #16]
 800bada:	2201      	movs	r2, #1
 800badc:	615a      	str	r2, [r3, #20]
 800bade:	e7be      	b.n	800ba5e <__gethex+0x362>
 800bae0:	6922      	ldr	r2, [r4, #16]
 800bae2:	455a      	cmp	r2, fp
 800bae4:	dd0b      	ble.n	800bafe <__gethex+0x402>
 800bae6:	2101      	movs	r1, #1
 800bae8:	4620      	mov	r0, r4
 800baea:	f7ff fd9f 	bl	800b62c <rshift>
 800baee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800baf2:	3701      	adds	r7, #1
 800baf4:	42bb      	cmp	r3, r7
 800baf6:	f6ff aee0 	blt.w	800b8ba <__gethex+0x1be>
 800bafa:	2501      	movs	r5, #1
 800bafc:	e7c2      	b.n	800ba84 <__gethex+0x388>
 800bafe:	f016 061f 	ands.w	r6, r6, #31
 800bb02:	d0fa      	beq.n	800bafa <__gethex+0x3fe>
 800bb04:	4453      	add	r3, sl
 800bb06:	f1c6 0620 	rsb	r6, r6, #32
 800bb0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bb0e:	f000 fa81 	bl	800c014 <__hi0bits>
 800bb12:	42b0      	cmp	r0, r6
 800bb14:	dbe7      	blt.n	800bae6 <__gethex+0x3ea>
 800bb16:	e7f0      	b.n	800bafa <__gethex+0x3fe>
 800bb18:	0800d857 	.word	0x0800d857

0800bb1c <L_shift>:
 800bb1c:	f1c2 0208 	rsb	r2, r2, #8
 800bb20:	0092      	lsls	r2, r2, #2
 800bb22:	b570      	push	{r4, r5, r6, lr}
 800bb24:	f1c2 0620 	rsb	r6, r2, #32
 800bb28:	6843      	ldr	r3, [r0, #4]
 800bb2a:	6804      	ldr	r4, [r0, #0]
 800bb2c:	fa03 f506 	lsl.w	r5, r3, r6
 800bb30:	432c      	orrs	r4, r5
 800bb32:	40d3      	lsrs	r3, r2
 800bb34:	6004      	str	r4, [r0, #0]
 800bb36:	f840 3f04 	str.w	r3, [r0, #4]!
 800bb3a:	4288      	cmp	r0, r1
 800bb3c:	d3f4      	bcc.n	800bb28 <L_shift+0xc>
 800bb3e:	bd70      	pop	{r4, r5, r6, pc}

0800bb40 <__match>:
 800bb40:	b530      	push	{r4, r5, lr}
 800bb42:	6803      	ldr	r3, [r0, #0]
 800bb44:	3301      	adds	r3, #1
 800bb46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb4a:	b914      	cbnz	r4, 800bb52 <__match+0x12>
 800bb4c:	6003      	str	r3, [r0, #0]
 800bb4e:	2001      	movs	r0, #1
 800bb50:	bd30      	pop	{r4, r5, pc}
 800bb52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb56:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bb5a:	2d19      	cmp	r5, #25
 800bb5c:	bf98      	it	ls
 800bb5e:	3220      	addls	r2, #32
 800bb60:	42a2      	cmp	r2, r4
 800bb62:	d0f0      	beq.n	800bb46 <__match+0x6>
 800bb64:	2000      	movs	r0, #0
 800bb66:	e7f3      	b.n	800bb50 <__match+0x10>

0800bb68 <__hexnan>:
 800bb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb6c:	680b      	ldr	r3, [r1, #0]
 800bb6e:	6801      	ldr	r1, [r0, #0]
 800bb70:	115e      	asrs	r6, r3, #5
 800bb72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bb76:	f013 031f 	ands.w	r3, r3, #31
 800bb7a:	b087      	sub	sp, #28
 800bb7c:	bf18      	it	ne
 800bb7e:	3604      	addne	r6, #4
 800bb80:	2500      	movs	r5, #0
 800bb82:	1f37      	subs	r7, r6, #4
 800bb84:	4682      	mov	sl, r0
 800bb86:	4690      	mov	r8, r2
 800bb88:	9301      	str	r3, [sp, #4]
 800bb8a:	f846 5c04 	str.w	r5, [r6, #-4]
 800bb8e:	46b9      	mov	r9, r7
 800bb90:	463c      	mov	r4, r7
 800bb92:	9502      	str	r5, [sp, #8]
 800bb94:	46ab      	mov	fp, r5
 800bb96:	784a      	ldrb	r2, [r1, #1]
 800bb98:	1c4b      	adds	r3, r1, #1
 800bb9a:	9303      	str	r3, [sp, #12]
 800bb9c:	b342      	cbz	r2, 800bbf0 <__hexnan+0x88>
 800bb9e:	4610      	mov	r0, r2
 800bba0:	9105      	str	r1, [sp, #20]
 800bba2:	9204      	str	r2, [sp, #16]
 800bba4:	f7ff fd94 	bl	800b6d0 <__hexdig_fun>
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	d151      	bne.n	800bc50 <__hexnan+0xe8>
 800bbac:	9a04      	ldr	r2, [sp, #16]
 800bbae:	9905      	ldr	r1, [sp, #20]
 800bbb0:	2a20      	cmp	r2, #32
 800bbb2:	d818      	bhi.n	800bbe6 <__hexnan+0x7e>
 800bbb4:	9b02      	ldr	r3, [sp, #8]
 800bbb6:	459b      	cmp	fp, r3
 800bbb8:	dd13      	ble.n	800bbe2 <__hexnan+0x7a>
 800bbba:	454c      	cmp	r4, r9
 800bbbc:	d206      	bcs.n	800bbcc <__hexnan+0x64>
 800bbbe:	2d07      	cmp	r5, #7
 800bbc0:	dc04      	bgt.n	800bbcc <__hexnan+0x64>
 800bbc2:	462a      	mov	r2, r5
 800bbc4:	4649      	mov	r1, r9
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	f7ff ffa8 	bl	800bb1c <L_shift>
 800bbcc:	4544      	cmp	r4, r8
 800bbce:	d952      	bls.n	800bc76 <__hexnan+0x10e>
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	f1a4 0904 	sub.w	r9, r4, #4
 800bbd6:	f844 3c04 	str.w	r3, [r4, #-4]
 800bbda:	f8cd b008 	str.w	fp, [sp, #8]
 800bbde:	464c      	mov	r4, r9
 800bbe0:	461d      	mov	r5, r3
 800bbe2:	9903      	ldr	r1, [sp, #12]
 800bbe4:	e7d7      	b.n	800bb96 <__hexnan+0x2e>
 800bbe6:	2a29      	cmp	r2, #41	@ 0x29
 800bbe8:	d157      	bne.n	800bc9a <__hexnan+0x132>
 800bbea:	3102      	adds	r1, #2
 800bbec:	f8ca 1000 	str.w	r1, [sl]
 800bbf0:	f1bb 0f00 	cmp.w	fp, #0
 800bbf4:	d051      	beq.n	800bc9a <__hexnan+0x132>
 800bbf6:	454c      	cmp	r4, r9
 800bbf8:	d206      	bcs.n	800bc08 <__hexnan+0xa0>
 800bbfa:	2d07      	cmp	r5, #7
 800bbfc:	dc04      	bgt.n	800bc08 <__hexnan+0xa0>
 800bbfe:	462a      	mov	r2, r5
 800bc00:	4649      	mov	r1, r9
 800bc02:	4620      	mov	r0, r4
 800bc04:	f7ff ff8a 	bl	800bb1c <L_shift>
 800bc08:	4544      	cmp	r4, r8
 800bc0a:	d936      	bls.n	800bc7a <__hexnan+0x112>
 800bc0c:	f1a8 0204 	sub.w	r2, r8, #4
 800bc10:	4623      	mov	r3, r4
 800bc12:	f853 1b04 	ldr.w	r1, [r3], #4
 800bc16:	f842 1f04 	str.w	r1, [r2, #4]!
 800bc1a:	429f      	cmp	r7, r3
 800bc1c:	d2f9      	bcs.n	800bc12 <__hexnan+0xaa>
 800bc1e:	1b3b      	subs	r3, r7, r4
 800bc20:	f023 0303 	bic.w	r3, r3, #3
 800bc24:	3304      	adds	r3, #4
 800bc26:	3401      	adds	r4, #1
 800bc28:	3e03      	subs	r6, #3
 800bc2a:	42b4      	cmp	r4, r6
 800bc2c:	bf88      	it	hi
 800bc2e:	2304      	movhi	r3, #4
 800bc30:	4443      	add	r3, r8
 800bc32:	2200      	movs	r2, #0
 800bc34:	f843 2b04 	str.w	r2, [r3], #4
 800bc38:	429f      	cmp	r7, r3
 800bc3a:	d2fb      	bcs.n	800bc34 <__hexnan+0xcc>
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	b91b      	cbnz	r3, 800bc48 <__hexnan+0xe0>
 800bc40:	4547      	cmp	r7, r8
 800bc42:	d128      	bne.n	800bc96 <__hexnan+0x12e>
 800bc44:	2301      	movs	r3, #1
 800bc46:	603b      	str	r3, [r7, #0]
 800bc48:	2005      	movs	r0, #5
 800bc4a:	b007      	add	sp, #28
 800bc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc50:	3501      	adds	r5, #1
 800bc52:	2d08      	cmp	r5, #8
 800bc54:	f10b 0b01 	add.w	fp, fp, #1
 800bc58:	dd06      	ble.n	800bc68 <__hexnan+0x100>
 800bc5a:	4544      	cmp	r4, r8
 800bc5c:	d9c1      	bls.n	800bbe2 <__hexnan+0x7a>
 800bc5e:	2300      	movs	r3, #0
 800bc60:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc64:	2501      	movs	r5, #1
 800bc66:	3c04      	subs	r4, #4
 800bc68:	6822      	ldr	r2, [r4, #0]
 800bc6a:	f000 000f 	and.w	r0, r0, #15
 800bc6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bc72:	6020      	str	r0, [r4, #0]
 800bc74:	e7b5      	b.n	800bbe2 <__hexnan+0x7a>
 800bc76:	2508      	movs	r5, #8
 800bc78:	e7b3      	b.n	800bbe2 <__hexnan+0x7a>
 800bc7a:	9b01      	ldr	r3, [sp, #4]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d0dd      	beq.n	800bc3c <__hexnan+0xd4>
 800bc80:	f1c3 0320 	rsb	r3, r3, #32
 800bc84:	f04f 32ff 	mov.w	r2, #4294967295
 800bc88:	40da      	lsrs	r2, r3
 800bc8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bc8e:	4013      	ands	r3, r2
 800bc90:	f846 3c04 	str.w	r3, [r6, #-4]
 800bc94:	e7d2      	b.n	800bc3c <__hexnan+0xd4>
 800bc96:	3f04      	subs	r7, #4
 800bc98:	e7d0      	b.n	800bc3c <__hexnan+0xd4>
 800bc9a:	2004      	movs	r0, #4
 800bc9c:	e7d5      	b.n	800bc4a <__hexnan+0xe2>
	...

0800bca0 <malloc>:
 800bca0:	4b02      	ldr	r3, [pc, #8]	@ (800bcac <malloc+0xc>)
 800bca2:	4601      	mov	r1, r0
 800bca4:	6818      	ldr	r0, [r3, #0]
 800bca6:	f000 b825 	b.w	800bcf4 <_malloc_r>
 800bcaa:	bf00      	nop
 800bcac:	20000184 	.word	0x20000184

0800bcb0 <sbrk_aligned>:
 800bcb0:	b570      	push	{r4, r5, r6, lr}
 800bcb2:	4e0f      	ldr	r6, [pc, #60]	@ (800bcf0 <sbrk_aligned+0x40>)
 800bcb4:	460c      	mov	r4, r1
 800bcb6:	6831      	ldr	r1, [r6, #0]
 800bcb8:	4605      	mov	r5, r0
 800bcba:	b911      	cbnz	r1, 800bcc2 <sbrk_aligned+0x12>
 800bcbc:	f000 ffa6 	bl	800cc0c <_sbrk_r>
 800bcc0:	6030      	str	r0, [r6, #0]
 800bcc2:	4621      	mov	r1, r4
 800bcc4:	4628      	mov	r0, r5
 800bcc6:	f000 ffa1 	bl	800cc0c <_sbrk_r>
 800bcca:	1c43      	adds	r3, r0, #1
 800bccc:	d103      	bne.n	800bcd6 <sbrk_aligned+0x26>
 800bcce:	f04f 34ff 	mov.w	r4, #4294967295
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	bd70      	pop	{r4, r5, r6, pc}
 800bcd6:	1cc4      	adds	r4, r0, #3
 800bcd8:	f024 0403 	bic.w	r4, r4, #3
 800bcdc:	42a0      	cmp	r0, r4
 800bcde:	d0f8      	beq.n	800bcd2 <sbrk_aligned+0x22>
 800bce0:	1a21      	subs	r1, r4, r0
 800bce2:	4628      	mov	r0, r5
 800bce4:	f000 ff92 	bl	800cc0c <_sbrk_r>
 800bce8:	3001      	adds	r0, #1
 800bcea:	d1f2      	bne.n	800bcd2 <sbrk_aligned+0x22>
 800bcec:	e7ef      	b.n	800bcce <sbrk_aligned+0x1e>
 800bcee:	bf00      	nop
 800bcf0:	20000f34 	.word	0x20000f34

0800bcf4 <_malloc_r>:
 800bcf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcf8:	1ccd      	adds	r5, r1, #3
 800bcfa:	f025 0503 	bic.w	r5, r5, #3
 800bcfe:	3508      	adds	r5, #8
 800bd00:	2d0c      	cmp	r5, #12
 800bd02:	bf38      	it	cc
 800bd04:	250c      	movcc	r5, #12
 800bd06:	2d00      	cmp	r5, #0
 800bd08:	4606      	mov	r6, r0
 800bd0a:	db01      	blt.n	800bd10 <_malloc_r+0x1c>
 800bd0c:	42a9      	cmp	r1, r5
 800bd0e:	d904      	bls.n	800bd1a <_malloc_r+0x26>
 800bd10:	230c      	movs	r3, #12
 800bd12:	6033      	str	r3, [r6, #0]
 800bd14:	2000      	movs	r0, #0
 800bd16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bdf0 <_malloc_r+0xfc>
 800bd1e:	f000 f87b 	bl	800be18 <__malloc_lock>
 800bd22:	f8d8 3000 	ldr.w	r3, [r8]
 800bd26:	461c      	mov	r4, r3
 800bd28:	bb44      	cbnz	r4, 800bd7c <_malloc_r+0x88>
 800bd2a:	4629      	mov	r1, r5
 800bd2c:	4630      	mov	r0, r6
 800bd2e:	f7ff ffbf 	bl	800bcb0 <sbrk_aligned>
 800bd32:	1c43      	adds	r3, r0, #1
 800bd34:	4604      	mov	r4, r0
 800bd36:	d158      	bne.n	800bdea <_malloc_r+0xf6>
 800bd38:	f8d8 4000 	ldr.w	r4, [r8]
 800bd3c:	4627      	mov	r7, r4
 800bd3e:	2f00      	cmp	r7, #0
 800bd40:	d143      	bne.n	800bdca <_malloc_r+0xd6>
 800bd42:	2c00      	cmp	r4, #0
 800bd44:	d04b      	beq.n	800bdde <_malloc_r+0xea>
 800bd46:	6823      	ldr	r3, [r4, #0]
 800bd48:	4639      	mov	r1, r7
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	eb04 0903 	add.w	r9, r4, r3
 800bd50:	f000 ff5c 	bl	800cc0c <_sbrk_r>
 800bd54:	4581      	cmp	r9, r0
 800bd56:	d142      	bne.n	800bdde <_malloc_r+0xea>
 800bd58:	6821      	ldr	r1, [r4, #0]
 800bd5a:	1a6d      	subs	r5, r5, r1
 800bd5c:	4629      	mov	r1, r5
 800bd5e:	4630      	mov	r0, r6
 800bd60:	f7ff ffa6 	bl	800bcb0 <sbrk_aligned>
 800bd64:	3001      	adds	r0, #1
 800bd66:	d03a      	beq.n	800bdde <_malloc_r+0xea>
 800bd68:	6823      	ldr	r3, [r4, #0]
 800bd6a:	442b      	add	r3, r5
 800bd6c:	6023      	str	r3, [r4, #0]
 800bd6e:	f8d8 3000 	ldr.w	r3, [r8]
 800bd72:	685a      	ldr	r2, [r3, #4]
 800bd74:	bb62      	cbnz	r2, 800bdd0 <_malloc_r+0xdc>
 800bd76:	f8c8 7000 	str.w	r7, [r8]
 800bd7a:	e00f      	b.n	800bd9c <_malloc_r+0xa8>
 800bd7c:	6822      	ldr	r2, [r4, #0]
 800bd7e:	1b52      	subs	r2, r2, r5
 800bd80:	d420      	bmi.n	800bdc4 <_malloc_r+0xd0>
 800bd82:	2a0b      	cmp	r2, #11
 800bd84:	d917      	bls.n	800bdb6 <_malloc_r+0xc2>
 800bd86:	1961      	adds	r1, r4, r5
 800bd88:	42a3      	cmp	r3, r4
 800bd8a:	6025      	str	r5, [r4, #0]
 800bd8c:	bf18      	it	ne
 800bd8e:	6059      	strne	r1, [r3, #4]
 800bd90:	6863      	ldr	r3, [r4, #4]
 800bd92:	bf08      	it	eq
 800bd94:	f8c8 1000 	streq.w	r1, [r8]
 800bd98:	5162      	str	r2, [r4, r5]
 800bd9a:	604b      	str	r3, [r1, #4]
 800bd9c:	4630      	mov	r0, r6
 800bd9e:	f000 f841 	bl	800be24 <__malloc_unlock>
 800bda2:	f104 000b 	add.w	r0, r4, #11
 800bda6:	1d23      	adds	r3, r4, #4
 800bda8:	f020 0007 	bic.w	r0, r0, #7
 800bdac:	1ac2      	subs	r2, r0, r3
 800bdae:	bf1c      	itt	ne
 800bdb0:	1a1b      	subne	r3, r3, r0
 800bdb2:	50a3      	strne	r3, [r4, r2]
 800bdb4:	e7af      	b.n	800bd16 <_malloc_r+0x22>
 800bdb6:	6862      	ldr	r2, [r4, #4]
 800bdb8:	42a3      	cmp	r3, r4
 800bdba:	bf0c      	ite	eq
 800bdbc:	f8c8 2000 	streq.w	r2, [r8]
 800bdc0:	605a      	strne	r2, [r3, #4]
 800bdc2:	e7eb      	b.n	800bd9c <_malloc_r+0xa8>
 800bdc4:	4623      	mov	r3, r4
 800bdc6:	6864      	ldr	r4, [r4, #4]
 800bdc8:	e7ae      	b.n	800bd28 <_malloc_r+0x34>
 800bdca:	463c      	mov	r4, r7
 800bdcc:	687f      	ldr	r7, [r7, #4]
 800bdce:	e7b6      	b.n	800bd3e <_malloc_r+0x4a>
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	42a3      	cmp	r3, r4
 800bdd6:	d1fb      	bne.n	800bdd0 <_malloc_r+0xdc>
 800bdd8:	2300      	movs	r3, #0
 800bdda:	6053      	str	r3, [r2, #4]
 800bddc:	e7de      	b.n	800bd9c <_malloc_r+0xa8>
 800bdde:	230c      	movs	r3, #12
 800bde0:	6033      	str	r3, [r6, #0]
 800bde2:	4630      	mov	r0, r6
 800bde4:	f000 f81e 	bl	800be24 <__malloc_unlock>
 800bde8:	e794      	b.n	800bd14 <_malloc_r+0x20>
 800bdea:	6005      	str	r5, [r0, #0]
 800bdec:	e7d6      	b.n	800bd9c <_malloc_r+0xa8>
 800bdee:	bf00      	nop
 800bdf0:	20000f38 	.word	0x20000f38

0800bdf4 <__ascii_mbtowc>:
 800bdf4:	b082      	sub	sp, #8
 800bdf6:	b901      	cbnz	r1, 800bdfa <__ascii_mbtowc+0x6>
 800bdf8:	a901      	add	r1, sp, #4
 800bdfa:	b142      	cbz	r2, 800be0e <__ascii_mbtowc+0x1a>
 800bdfc:	b14b      	cbz	r3, 800be12 <__ascii_mbtowc+0x1e>
 800bdfe:	7813      	ldrb	r3, [r2, #0]
 800be00:	600b      	str	r3, [r1, #0]
 800be02:	7812      	ldrb	r2, [r2, #0]
 800be04:	1e10      	subs	r0, r2, #0
 800be06:	bf18      	it	ne
 800be08:	2001      	movne	r0, #1
 800be0a:	b002      	add	sp, #8
 800be0c:	4770      	bx	lr
 800be0e:	4610      	mov	r0, r2
 800be10:	e7fb      	b.n	800be0a <__ascii_mbtowc+0x16>
 800be12:	f06f 0001 	mvn.w	r0, #1
 800be16:	e7f8      	b.n	800be0a <__ascii_mbtowc+0x16>

0800be18 <__malloc_lock>:
 800be18:	4801      	ldr	r0, [pc, #4]	@ (800be20 <__malloc_lock+0x8>)
 800be1a:	f7fe bd36 	b.w	800a88a <__retarget_lock_acquire_recursive>
 800be1e:	bf00      	nop
 800be20:	20000f30 	.word	0x20000f30

0800be24 <__malloc_unlock>:
 800be24:	4801      	ldr	r0, [pc, #4]	@ (800be2c <__malloc_unlock+0x8>)
 800be26:	f7fe bd31 	b.w	800a88c <__retarget_lock_release_recursive>
 800be2a:	bf00      	nop
 800be2c:	20000f30 	.word	0x20000f30

0800be30 <_Balloc>:
 800be30:	b570      	push	{r4, r5, r6, lr}
 800be32:	69c6      	ldr	r6, [r0, #28]
 800be34:	4604      	mov	r4, r0
 800be36:	460d      	mov	r5, r1
 800be38:	b976      	cbnz	r6, 800be58 <_Balloc+0x28>
 800be3a:	2010      	movs	r0, #16
 800be3c:	f7ff ff30 	bl	800bca0 <malloc>
 800be40:	4602      	mov	r2, r0
 800be42:	61e0      	str	r0, [r4, #28]
 800be44:	b920      	cbnz	r0, 800be50 <_Balloc+0x20>
 800be46:	4b18      	ldr	r3, [pc, #96]	@ (800bea8 <_Balloc+0x78>)
 800be48:	4818      	ldr	r0, [pc, #96]	@ (800beac <_Balloc+0x7c>)
 800be4a:	216b      	movs	r1, #107	@ 0x6b
 800be4c:	f7fe fd38 	bl	800a8c0 <__assert_func>
 800be50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be54:	6006      	str	r6, [r0, #0]
 800be56:	60c6      	str	r6, [r0, #12]
 800be58:	69e6      	ldr	r6, [r4, #28]
 800be5a:	68f3      	ldr	r3, [r6, #12]
 800be5c:	b183      	cbz	r3, 800be80 <_Balloc+0x50>
 800be5e:	69e3      	ldr	r3, [r4, #28]
 800be60:	68db      	ldr	r3, [r3, #12]
 800be62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be66:	b9b8      	cbnz	r0, 800be98 <_Balloc+0x68>
 800be68:	2101      	movs	r1, #1
 800be6a:	fa01 f605 	lsl.w	r6, r1, r5
 800be6e:	1d72      	adds	r2, r6, #5
 800be70:	0092      	lsls	r2, r2, #2
 800be72:	4620      	mov	r0, r4
 800be74:	f000 fee1 	bl	800cc3a <_calloc_r>
 800be78:	b160      	cbz	r0, 800be94 <_Balloc+0x64>
 800be7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800be7e:	e00e      	b.n	800be9e <_Balloc+0x6e>
 800be80:	2221      	movs	r2, #33	@ 0x21
 800be82:	2104      	movs	r1, #4
 800be84:	4620      	mov	r0, r4
 800be86:	f000 fed8 	bl	800cc3a <_calloc_r>
 800be8a:	69e3      	ldr	r3, [r4, #28]
 800be8c:	60f0      	str	r0, [r6, #12]
 800be8e:	68db      	ldr	r3, [r3, #12]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d1e4      	bne.n	800be5e <_Balloc+0x2e>
 800be94:	2000      	movs	r0, #0
 800be96:	bd70      	pop	{r4, r5, r6, pc}
 800be98:	6802      	ldr	r2, [r0, #0]
 800be9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800be9e:	2300      	movs	r3, #0
 800bea0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bea4:	e7f7      	b.n	800be96 <_Balloc+0x66>
 800bea6:	bf00      	nop
 800bea8:	0800d73d 	.word	0x0800d73d
 800beac:	0800d8c8 	.word	0x0800d8c8

0800beb0 <_Bfree>:
 800beb0:	b570      	push	{r4, r5, r6, lr}
 800beb2:	69c6      	ldr	r6, [r0, #28]
 800beb4:	4605      	mov	r5, r0
 800beb6:	460c      	mov	r4, r1
 800beb8:	b976      	cbnz	r6, 800bed8 <_Bfree+0x28>
 800beba:	2010      	movs	r0, #16
 800bebc:	f7ff fef0 	bl	800bca0 <malloc>
 800bec0:	4602      	mov	r2, r0
 800bec2:	61e8      	str	r0, [r5, #28]
 800bec4:	b920      	cbnz	r0, 800bed0 <_Bfree+0x20>
 800bec6:	4b09      	ldr	r3, [pc, #36]	@ (800beec <_Bfree+0x3c>)
 800bec8:	4809      	ldr	r0, [pc, #36]	@ (800bef0 <_Bfree+0x40>)
 800beca:	218f      	movs	r1, #143	@ 0x8f
 800becc:	f7fe fcf8 	bl	800a8c0 <__assert_func>
 800bed0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bed4:	6006      	str	r6, [r0, #0]
 800bed6:	60c6      	str	r6, [r0, #12]
 800bed8:	b13c      	cbz	r4, 800beea <_Bfree+0x3a>
 800beda:	69eb      	ldr	r3, [r5, #28]
 800bedc:	6862      	ldr	r2, [r4, #4]
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bee4:	6021      	str	r1, [r4, #0]
 800bee6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800beea:	bd70      	pop	{r4, r5, r6, pc}
 800beec:	0800d73d 	.word	0x0800d73d
 800bef0:	0800d8c8 	.word	0x0800d8c8

0800bef4 <__multadd>:
 800bef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bef8:	690d      	ldr	r5, [r1, #16]
 800befa:	4607      	mov	r7, r0
 800befc:	460c      	mov	r4, r1
 800befe:	461e      	mov	r6, r3
 800bf00:	f101 0c14 	add.w	ip, r1, #20
 800bf04:	2000      	movs	r0, #0
 800bf06:	f8dc 3000 	ldr.w	r3, [ip]
 800bf0a:	b299      	uxth	r1, r3
 800bf0c:	fb02 6101 	mla	r1, r2, r1, r6
 800bf10:	0c1e      	lsrs	r6, r3, #16
 800bf12:	0c0b      	lsrs	r3, r1, #16
 800bf14:	fb02 3306 	mla	r3, r2, r6, r3
 800bf18:	b289      	uxth	r1, r1
 800bf1a:	3001      	adds	r0, #1
 800bf1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf20:	4285      	cmp	r5, r0
 800bf22:	f84c 1b04 	str.w	r1, [ip], #4
 800bf26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bf2a:	dcec      	bgt.n	800bf06 <__multadd+0x12>
 800bf2c:	b30e      	cbz	r6, 800bf72 <__multadd+0x7e>
 800bf2e:	68a3      	ldr	r3, [r4, #8]
 800bf30:	42ab      	cmp	r3, r5
 800bf32:	dc19      	bgt.n	800bf68 <__multadd+0x74>
 800bf34:	6861      	ldr	r1, [r4, #4]
 800bf36:	4638      	mov	r0, r7
 800bf38:	3101      	adds	r1, #1
 800bf3a:	f7ff ff79 	bl	800be30 <_Balloc>
 800bf3e:	4680      	mov	r8, r0
 800bf40:	b928      	cbnz	r0, 800bf4e <__multadd+0x5a>
 800bf42:	4602      	mov	r2, r0
 800bf44:	4b0c      	ldr	r3, [pc, #48]	@ (800bf78 <__multadd+0x84>)
 800bf46:	480d      	ldr	r0, [pc, #52]	@ (800bf7c <__multadd+0x88>)
 800bf48:	21ba      	movs	r1, #186	@ 0xba
 800bf4a:	f7fe fcb9 	bl	800a8c0 <__assert_func>
 800bf4e:	6922      	ldr	r2, [r4, #16]
 800bf50:	3202      	adds	r2, #2
 800bf52:	f104 010c 	add.w	r1, r4, #12
 800bf56:	0092      	lsls	r2, r2, #2
 800bf58:	300c      	adds	r0, #12
 800bf5a:	f7fe fc98 	bl	800a88e <memcpy>
 800bf5e:	4621      	mov	r1, r4
 800bf60:	4638      	mov	r0, r7
 800bf62:	f7ff ffa5 	bl	800beb0 <_Bfree>
 800bf66:	4644      	mov	r4, r8
 800bf68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bf6c:	3501      	adds	r5, #1
 800bf6e:	615e      	str	r6, [r3, #20]
 800bf70:	6125      	str	r5, [r4, #16]
 800bf72:	4620      	mov	r0, r4
 800bf74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf78:	0800d857 	.word	0x0800d857
 800bf7c:	0800d8c8 	.word	0x0800d8c8

0800bf80 <__s2b>:
 800bf80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf84:	460c      	mov	r4, r1
 800bf86:	4615      	mov	r5, r2
 800bf88:	461f      	mov	r7, r3
 800bf8a:	2209      	movs	r2, #9
 800bf8c:	3308      	adds	r3, #8
 800bf8e:	4606      	mov	r6, r0
 800bf90:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf94:	2100      	movs	r1, #0
 800bf96:	2201      	movs	r2, #1
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	db09      	blt.n	800bfb0 <__s2b+0x30>
 800bf9c:	4630      	mov	r0, r6
 800bf9e:	f7ff ff47 	bl	800be30 <_Balloc>
 800bfa2:	b940      	cbnz	r0, 800bfb6 <__s2b+0x36>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	4b19      	ldr	r3, [pc, #100]	@ (800c00c <__s2b+0x8c>)
 800bfa8:	4819      	ldr	r0, [pc, #100]	@ (800c010 <__s2b+0x90>)
 800bfaa:	21d3      	movs	r1, #211	@ 0xd3
 800bfac:	f7fe fc88 	bl	800a8c0 <__assert_func>
 800bfb0:	0052      	lsls	r2, r2, #1
 800bfb2:	3101      	adds	r1, #1
 800bfb4:	e7f0      	b.n	800bf98 <__s2b+0x18>
 800bfb6:	9b08      	ldr	r3, [sp, #32]
 800bfb8:	6143      	str	r3, [r0, #20]
 800bfba:	2d09      	cmp	r5, #9
 800bfbc:	f04f 0301 	mov.w	r3, #1
 800bfc0:	6103      	str	r3, [r0, #16]
 800bfc2:	dd16      	ble.n	800bff2 <__s2b+0x72>
 800bfc4:	f104 0909 	add.w	r9, r4, #9
 800bfc8:	46c8      	mov	r8, r9
 800bfca:	442c      	add	r4, r5
 800bfcc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bfd0:	4601      	mov	r1, r0
 800bfd2:	3b30      	subs	r3, #48	@ 0x30
 800bfd4:	220a      	movs	r2, #10
 800bfd6:	4630      	mov	r0, r6
 800bfd8:	f7ff ff8c 	bl	800bef4 <__multadd>
 800bfdc:	45a0      	cmp	r8, r4
 800bfde:	d1f5      	bne.n	800bfcc <__s2b+0x4c>
 800bfe0:	f1a5 0408 	sub.w	r4, r5, #8
 800bfe4:	444c      	add	r4, r9
 800bfe6:	1b2d      	subs	r5, r5, r4
 800bfe8:	1963      	adds	r3, r4, r5
 800bfea:	42bb      	cmp	r3, r7
 800bfec:	db04      	blt.n	800bff8 <__s2b+0x78>
 800bfee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bff2:	340a      	adds	r4, #10
 800bff4:	2509      	movs	r5, #9
 800bff6:	e7f6      	b.n	800bfe6 <__s2b+0x66>
 800bff8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bffc:	4601      	mov	r1, r0
 800bffe:	3b30      	subs	r3, #48	@ 0x30
 800c000:	220a      	movs	r2, #10
 800c002:	4630      	mov	r0, r6
 800c004:	f7ff ff76 	bl	800bef4 <__multadd>
 800c008:	e7ee      	b.n	800bfe8 <__s2b+0x68>
 800c00a:	bf00      	nop
 800c00c:	0800d857 	.word	0x0800d857
 800c010:	0800d8c8 	.word	0x0800d8c8

0800c014 <__hi0bits>:
 800c014:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c018:	4603      	mov	r3, r0
 800c01a:	bf36      	itet	cc
 800c01c:	0403      	lslcc	r3, r0, #16
 800c01e:	2000      	movcs	r0, #0
 800c020:	2010      	movcc	r0, #16
 800c022:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c026:	bf3c      	itt	cc
 800c028:	021b      	lslcc	r3, r3, #8
 800c02a:	3008      	addcc	r0, #8
 800c02c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c030:	bf3c      	itt	cc
 800c032:	011b      	lslcc	r3, r3, #4
 800c034:	3004      	addcc	r0, #4
 800c036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c03a:	bf3c      	itt	cc
 800c03c:	009b      	lslcc	r3, r3, #2
 800c03e:	3002      	addcc	r0, #2
 800c040:	2b00      	cmp	r3, #0
 800c042:	db05      	blt.n	800c050 <__hi0bits+0x3c>
 800c044:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c048:	f100 0001 	add.w	r0, r0, #1
 800c04c:	bf08      	it	eq
 800c04e:	2020      	moveq	r0, #32
 800c050:	4770      	bx	lr

0800c052 <__lo0bits>:
 800c052:	6803      	ldr	r3, [r0, #0]
 800c054:	4602      	mov	r2, r0
 800c056:	f013 0007 	ands.w	r0, r3, #7
 800c05a:	d00b      	beq.n	800c074 <__lo0bits+0x22>
 800c05c:	07d9      	lsls	r1, r3, #31
 800c05e:	d421      	bmi.n	800c0a4 <__lo0bits+0x52>
 800c060:	0798      	lsls	r0, r3, #30
 800c062:	bf49      	itett	mi
 800c064:	085b      	lsrmi	r3, r3, #1
 800c066:	089b      	lsrpl	r3, r3, #2
 800c068:	2001      	movmi	r0, #1
 800c06a:	6013      	strmi	r3, [r2, #0]
 800c06c:	bf5c      	itt	pl
 800c06e:	6013      	strpl	r3, [r2, #0]
 800c070:	2002      	movpl	r0, #2
 800c072:	4770      	bx	lr
 800c074:	b299      	uxth	r1, r3
 800c076:	b909      	cbnz	r1, 800c07c <__lo0bits+0x2a>
 800c078:	0c1b      	lsrs	r3, r3, #16
 800c07a:	2010      	movs	r0, #16
 800c07c:	b2d9      	uxtb	r1, r3
 800c07e:	b909      	cbnz	r1, 800c084 <__lo0bits+0x32>
 800c080:	3008      	adds	r0, #8
 800c082:	0a1b      	lsrs	r3, r3, #8
 800c084:	0719      	lsls	r1, r3, #28
 800c086:	bf04      	itt	eq
 800c088:	091b      	lsreq	r3, r3, #4
 800c08a:	3004      	addeq	r0, #4
 800c08c:	0799      	lsls	r1, r3, #30
 800c08e:	bf04      	itt	eq
 800c090:	089b      	lsreq	r3, r3, #2
 800c092:	3002      	addeq	r0, #2
 800c094:	07d9      	lsls	r1, r3, #31
 800c096:	d403      	bmi.n	800c0a0 <__lo0bits+0x4e>
 800c098:	085b      	lsrs	r3, r3, #1
 800c09a:	f100 0001 	add.w	r0, r0, #1
 800c09e:	d003      	beq.n	800c0a8 <__lo0bits+0x56>
 800c0a0:	6013      	str	r3, [r2, #0]
 800c0a2:	4770      	bx	lr
 800c0a4:	2000      	movs	r0, #0
 800c0a6:	4770      	bx	lr
 800c0a8:	2020      	movs	r0, #32
 800c0aa:	4770      	bx	lr

0800c0ac <__i2b>:
 800c0ac:	b510      	push	{r4, lr}
 800c0ae:	460c      	mov	r4, r1
 800c0b0:	2101      	movs	r1, #1
 800c0b2:	f7ff febd 	bl	800be30 <_Balloc>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	b928      	cbnz	r0, 800c0c6 <__i2b+0x1a>
 800c0ba:	4b05      	ldr	r3, [pc, #20]	@ (800c0d0 <__i2b+0x24>)
 800c0bc:	4805      	ldr	r0, [pc, #20]	@ (800c0d4 <__i2b+0x28>)
 800c0be:	f240 1145 	movw	r1, #325	@ 0x145
 800c0c2:	f7fe fbfd 	bl	800a8c0 <__assert_func>
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	6144      	str	r4, [r0, #20]
 800c0ca:	6103      	str	r3, [r0, #16]
 800c0cc:	bd10      	pop	{r4, pc}
 800c0ce:	bf00      	nop
 800c0d0:	0800d857 	.word	0x0800d857
 800c0d4:	0800d8c8 	.word	0x0800d8c8

0800c0d8 <__multiply>:
 800c0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0dc:	4614      	mov	r4, r2
 800c0de:	690a      	ldr	r2, [r1, #16]
 800c0e0:	6923      	ldr	r3, [r4, #16]
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	bfa8      	it	ge
 800c0e6:	4623      	movge	r3, r4
 800c0e8:	460f      	mov	r7, r1
 800c0ea:	bfa4      	itt	ge
 800c0ec:	460c      	movge	r4, r1
 800c0ee:	461f      	movge	r7, r3
 800c0f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c0f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c0f8:	68a3      	ldr	r3, [r4, #8]
 800c0fa:	6861      	ldr	r1, [r4, #4]
 800c0fc:	eb0a 0609 	add.w	r6, sl, r9
 800c100:	42b3      	cmp	r3, r6
 800c102:	b085      	sub	sp, #20
 800c104:	bfb8      	it	lt
 800c106:	3101      	addlt	r1, #1
 800c108:	f7ff fe92 	bl	800be30 <_Balloc>
 800c10c:	b930      	cbnz	r0, 800c11c <__multiply+0x44>
 800c10e:	4602      	mov	r2, r0
 800c110:	4b44      	ldr	r3, [pc, #272]	@ (800c224 <__multiply+0x14c>)
 800c112:	4845      	ldr	r0, [pc, #276]	@ (800c228 <__multiply+0x150>)
 800c114:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c118:	f7fe fbd2 	bl	800a8c0 <__assert_func>
 800c11c:	f100 0514 	add.w	r5, r0, #20
 800c120:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c124:	462b      	mov	r3, r5
 800c126:	2200      	movs	r2, #0
 800c128:	4543      	cmp	r3, r8
 800c12a:	d321      	bcc.n	800c170 <__multiply+0x98>
 800c12c:	f107 0114 	add.w	r1, r7, #20
 800c130:	f104 0214 	add.w	r2, r4, #20
 800c134:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c138:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c13c:	9302      	str	r3, [sp, #8]
 800c13e:	1b13      	subs	r3, r2, r4
 800c140:	3b15      	subs	r3, #21
 800c142:	f023 0303 	bic.w	r3, r3, #3
 800c146:	3304      	adds	r3, #4
 800c148:	f104 0715 	add.w	r7, r4, #21
 800c14c:	42ba      	cmp	r2, r7
 800c14e:	bf38      	it	cc
 800c150:	2304      	movcc	r3, #4
 800c152:	9301      	str	r3, [sp, #4]
 800c154:	9b02      	ldr	r3, [sp, #8]
 800c156:	9103      	str	r1, [sp, #12]
 800c158:	428b      	cmp	r3, r1
 800c15a:	d80c      	bhi.n	800c176 <__multiply+0x9e>
 800c15c:	2e00      	cmp	r6, #0
 800c15e:	dd03      	ble.n	800c168 <__multiply+0x90>
 800c160:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c164:	2b00      	cmp	r3, #0
 800c166:	d05b      	beq.n	800c220 <__multiply+0x148>
 800c168:	6106      	str	r6, [r0, #16]
 800c16a:	b005      	add	sp, #20
 800c16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c170:	f843 2b04 	str.w	r2, [r3], #4
 800c174:	e7d8      	b.n	800c128 <__multiply+0x50>
 800c176:	f8b1 a000 	ldrh.w	sl, [r1]
 800c17a:	f1ba 0f00 	cmp.w	sl, #0
 800c17e:	d024      	beq.n	800c1ca <__multiply+0xf2>
 800c180:	f104 0e14 	add.w	lr, r4, #20
 800c184:	46a9      	mov	r9, r5
 800c186:	f04f 0c00 	mov.w	ip, #0
 800c18a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c18e:	f8d9 3000 	ldr.w	r3, [r9]
 800c192:	fa1f fb87 	uxth.w	fp, r7
 800c196:	b29b      	uxth	r3, r3
 800c198:	fb0a 330b 	mla	r3, sl, fp, r3
 800c19c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c1a0:	f8d9 7000 	ldr.w	r7, [r9]
 800c1a4:	4463      	add	r3, ip
 800c1a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c1aa:	fb0a c70b 	mla	r7, sl, fp, ip
 800c1ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c1b2:	b29b      	uxth	r3, r3
 800c1b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c1b8:	4572      	cmp	r2, lr
 800c1ba:	f849 3b04 	str.w	r3, [r9], #4
 800c1be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c1c2:	d8e2      	bhi.n	800c18a <__multiply+0xb2>
 800c1c4:	9b01      	ldr	r3, [sp, #4]
 800c1c6:	f845 c003 	str.w	ip, [r5, r3]
 800c1ca:	9b03      	ldr	r3, [sp, #12]
 800c1cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c1d0:	3104      	adds	r1, #4
 800c1d2:	f1b9 0f00 	cmp.w	r9, #0
 800c1d6:	d021      	beq.n	800c21c <__multiply+0x144>
 800c1d8:	682b      	ldr	r3, [r5, #0]
 800c1da:	f104 0c14 	add.w	ip, r4, #20
 800c1de:	46ae      	mov	lr, r5
 800c1e0:	f04f 0a00 	mov.w	sl, #0
 800c1e4:	f8bc b000 	ldrh.w	fp, [ip]
 800c1e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c1ec:	fb09 770b 	mla	r7, r9, fp, r7
 800c1f0:	4457      	add	r7, sl
 800c1f2:	b29b      	uxth	r3, r3
 800c1f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c1f8:	f84e 3b04 	str.w	r3, [lr], #4
 800c1fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c200:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c204:	f8be 3000 	ldrh.w	r3, [lr]
 800c208:	fb09 330a 	mla	r3, r9, sl, r3
 800c20c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c210:	4562      	cmp	r2, ip
 800c212:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c216:	d8e5      	bhi.n	800c1e4 <__multiply+0x10c>
 800c218:	9f01      	ldr	r7, [sp, #4]
 800c21a:	51eb      	str	r3, [r5, r7]
 800c21c:	3504      	adds	r5, #4
 800c21e:	e799      	b.n	800c154 <__multiply+0x7c>
 800c220:	3e01      	subs	r6, #1
 800c222:	e79b      	b.n	800c15c <__multiply+0x84>
 800c224:	0800d857 	.word	0x0800d857
 800c228:	0800d8c8 	.word	0x0800d8c8

0800c22c <__pow5mult>:
 800c22c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c230:	4615      	mov	r5, r2
 800c232:	f012 0203 	ands.w	r2, r2, #3
 800c236:	4607      	mov	r7, r0
 800c238:	460e      	mov	r6, r1
 800c23a:	d007      	beq.n	800c24c <__pow5mult+0x20>
 800c23c:	4c25      	ldr	r4, [pc, #148]	@ (800c2d4 <__pow5mult+0xa8>)
 800c23e:	3a01      	subs	r2, #1
 800c240:	2300      	movs	r3, #0
 800c242:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c246:	f7ff fe55 	bl	800bef4 <__multadd>
 800c24a:	4606      	mov	r6, r0
 800c24c:	10ad      	asrs	r5, r5, #2
 800c24e:	d03d      	beq.n	800c2cc <__pow5mult+0xa0>
 800c250:	69fc      	ldr	r4, [r7, #28]
 800c252:	b97c      	cbnz	r4, 800c274 <__pow5mult+0x48>
 800c254:	2010      	movs	r0, #16
 800c256:	f7ff fd23 	bl	800bca0 <malloc>
 800c25a:	4602      	mov	r2, r0
 800c25c:	61f8      	str	r0, [r7, #28]
 800c25e:	b928      	cbnz	r0, 800c26c <__pow5mult+0x40>
 800c260:	4b1d      	ldr	r3, [pc, #116]	@ (800c2d8 <__pow5mult+0xac>)
 800c262:	481e      	ldr	r0, [pc, #120]	@ (800c2dc <__pow5mult+0xb0>)
 800c264:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c268:	f7fe fb2a 	bl	800a8c0 <__assert_func>
 800c26c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c270:	6004      	str	r4, [r0, #0]
 800c272:	60c4      	str	r4, [r0, #12]
 800c274:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c278:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c27c:	b94c      	cbnz	r4, 800c292 <__pow5mult+0x66>
 800c27e:	f240 2171 	movw	r1, #625	@ 0x271
 800c282:	4638      	mov	r0, r7
 800c284:	f7ff ff12 	bl	800c0ac <__i2b>
 800c288:	2300      	movs	r3, #0
 800c28a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c28e:	4604      	mov	r4, r0
 800c290:	6003      	str	r3, [r0, #0]
 800c292:	f04f 0900 	mov.w	r9, #0
 800c296:	07eb      	lsls	r3, r5, #31
 800c298:	d50a      	bpl.n	800c2b0 <__pow5mult+0x84>
 800c29a:	4631      	mov	r1, r6
 800c29c:	4622      	mov	r2, r4
 800c29e:	4638      	mov	r0, r7
 800c2a0:	f7ff ff1a 	bl	800c0d8 <__multiply>
 800c2a4:	4631      	mov	r1, r6
 800c2a6:	4680      	mov	r8, r0
 800c2a8:	4638      	mov	r0, r7
 800c2aa:	f7ff fe01 	bl	800beb0 <_Bfree>
 800c2ae:	4646      	mov	r6, r8
 800c2b0:	106d      	asrs	r5, r5, #1
 800c2b2:	d00b      	beq.n	800c2cc <__pow5mult+0xa0>
 800c2b4:	6820      	ldr	r0, [r4, #0]
 800c2b6:	b938      	cbnz	r0, 800c2c8 <__pow5mult+0x9c>
 800c2b8:	4622      	mov	r2, r4
 800c2ba:	4621      	mov	r1, r4
 800c2bc:	4638      	mov	r0, r7
 800c2be:	f7ff ff0b 	bl	800c0d8 <__multiply>
 800c2c2:	6020      	str	r0, [r4, #0]
 800c2c4:	f8c0 9000 	str.w	r9, [r0]
 800c2c8:	4604      	mov	r4, r0
 800c2ca:	e7e4      	b.n	800c296 <__pow5mult+0x6a>
 800c2cc:	4630      	mov	r0, r6
 800c2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2d2:	bf00      	nop
 800c2d4:	0800d924 	.word	0x0800d924
 800c2d8:	0800d73d 	.word	0x0800d73d
 800c2dc:	0800d8c8 	.word	0x0800d8c8

0800c2e0 <__lshift>:
 800c2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2e4:	460c      	mov	r4, r1
 800c2e6:	6849      	ldr	r1, [r1, #4]
 800c2e8:	6923      	ldr	r3, [r4, #16]
 800c2ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c2ee:	68a3      	ldr	r3, [r4, #8]
 800c2f0:	4607      	mov	r7, r0
 800c2f2:	4691      	mov	r9, r2
 800c2f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c2f8:	f108 0601 	add.w	r6, r8, #1
 800c2fc:	42b3      	cmp	r3, r6
 800c2fe:	db0b      	blt.n	800c318 <__lshift+0x38>
 800c300:	4638      	mov	r0, r7
 800c302:	f7ff fd95 	bl	800be30 <_Balloc>
 800c306:	4605      	mov	r5, r0
 800c308:	b948      	cbnz	r0, 800c31e <__lshift+0x3e>
 800c30a:	4602      	mov	r2, r0
 800c30c:	4b28      	ldr	r3, [pc, #160]	@ (800c3b0 <__lshift+0xd0>)
 800c30e:	4829      	ldr	r0, [pc, #164]	@ (800c3b4 <__lshift+0xd4>)
 800c310:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c314:	f7fe fad4 	bl	800a8c0 <__assert_func>
 800c318:	3101      	adds	r1, #1
 800c31a:	005b      	lsls	r3, r3, #1
 800c31c:	e7ee      	b.n	800c2fc <__lshift+0x1c>
 800c31e:	2300      	movs	r3, #0
 800c320:	f100 0114 	add.w	r1, r0, #20
 800c324:	f100 0210 	add.w	r2, r0, #16
 800c328:	4618      	mov	r0, r3
 800c32a:	4553      	cmp	r3, sl
 800c32c:	db33      	blt.n	800c396 <__lshift+0xb6>
 800c32e:	6920      	ldr	r0, [r4, #16]
 800c330:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c334:	f104 0314 	add.w	r3, r4, #20
 800c338:	f019 091f 	ands.w	r9, r9, #31
 800c33c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c340:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c344:	d02b      	beq.n	800c39e <__lshift+0xbe>
 800c346:	f1c9 0e20 	rsb	lr, r9, #32
 800c34a:	468a      	mov	sl, r1
 800c34c:	2200      	movs	r2, #0
 800c34e:	6818      	ldr	r0, [r3, #0]
 800c350:	fa00 f009 	lsl.w	r0, r0, r9
 800c354:	4310      	orrs	r0, r2
 800c356:	f84a 0b04 	str.w	r0, [sl], #4
 800c35a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c35e:	459c      	cmp	ip, r3
 800c360:	fa22 f20e 	lsr.w	r2, r2, lr
 800c364:	d8f3      	bhi.n	800c34e <__lshift+0x6e>
 800c366:	ebac 0304 	sub.w	r3, ip, r4
 800c36a:	3b15      	subs	r3, #21
 800c36c:	f023 0303 	bic.w	r3, r3, #3
 800c370:	3304      	adds	r3, #4
 800c372:	f104 0015 	add.w	r0, r4, #21
 800c376:	4584      	cmp	ip, r0
 800c378:	bf38      	it	cc
 800c37a:	2304      	movcc	r3, #4
 800c37c:	50ca      	str	r2, [r1, r3]
 800c37e:	b10a      	cbz	r2, 800c384 <__lshift+0xa4>
 800c380:	f108 0602 	add.w	r6, r8, #2
 800c384:	3e01      	subs	r6, #1
 800c386:	4638      	mov	r0, r7
 800c388:	612e      	str	r6, [r5, #16]
 800c38a:	4621      	mov	r1, r4
 800c38c:	f7ff fd90 	bl	800beb0 <_Bfree>
 800c390:	4628      	mov	r0, r5
 800c392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c396:	f842 0f04 	str.w	r0, [r2, #4]!
 800c39a:	3301      	adds	r3, #1
 800c39c:	e7c5      	b.n	800c32a <__lshift+0x4a>
 800c39e:	3904      	subs	r1, #4
 800c3a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c3a8:	459c      	cmp	ip, r3
 800c3aa:	d8f9      	bhi.n	800c3a0 <__lshift+0xc0>
 800c3ac:	e7ea      	b.n	800c384 <__lshift+0xa4>
 800c3ae:	bf00      	nop
 800c3b0:	0800d857 	.word	0x0800d857
 800c3b4:	0800d8c8 	.word	0x0800d8c8

0800c3b8 <__mcmp>:
 800c3b8:	690a      	ldr	r2, [r1, #16]
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	6900      	ldr	r0, [r0, #16]
 800c3be:	1a80      	subs	r0, r0, r2
 800c3c0:	b530      	push	{r4, r5, lr}
 800c3c2:	d10e      	bne.n	800c3e2 <__mcmp+0x2a>
 800c3c4:	3314      	adds	r3, #20
 800c3c6:	3114      	adds	r1, #20
 800c3c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c3cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c3d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c3d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c3d8:	4295      	cmp	r5, r2
 800c3da:	d003      	beq.n	800c3e4 <__mcmp+0x2c>
 800c3dc:	d205      	bcs.n	800c3ea <__mcmp+0x32>
 800c3de:	f04f 30ff 	mov.w	r0, #4294967295
 800c3e2:	bd30      	pop	{r4, r5, pc}
 800c3e4:	42a3      	cmp	r3, r4
 800c3e6:	d3f3      	bcc.n	800c3d0 <__mcmp+0x18>
 800c3e8:	e7fb      	b.n	800c3e2 <__mcmp+0x2a>
 800c3ea:	2001      	movs	r0, #1
 800c3ec:	e7f9      	b.n	800c3e2 <__mcmp+0x2a>
	...

0800c3f0 <__mdiff>:
 800c3f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f4:	4689      	mov	r9, r1
 800c3f6:	4606      	mov	r6, r0
 800c3f8:	4611      	mov	r1, r2
 800c3fa:	4648      	mov	r0, r9
 800c3fc:	4614      	mov	r4, r2
 800c3fe:	f7ff ffdb 	bl	800c3b8 <__mcmp>
 800c402:	1e05      	subs	r5, r0, #0
 800c404:	d112      	bne.n	800c42c <__mdiff+0x3c>
 800c406:	4629      	mov	r1, r5
 800c408:	4630      	mov	r0, r6
 800c40a:	f7ff fd11 	bl	800be30 <_Balloc>
 800c40e:	4602      	mov	r2, r0
 800c410:	b928      	cbnz	r0, 800c41e <__mdiff+0x2e>
 800c412:	4b3f      	ldr	r3, [pc, #252]	@ (800c510 <__mdiff+0x120>)
 800c414:	f240 2137 	movw	r1, #567	@ 0x237
 800c418:	483e      	ldr	r0, [pc, #248]	@ (800c514 <__mdiff+0x124>)
 800c41a:	f7fe fa51 	bl	800a8c0 <__assert_func>
 800c41e:	2301      	movs	r3, #1
 800c420:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c424:	4610      	mov	r0, r2
 800c426:	b003      	add	sp, #12
 800c428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c42c:	bfbc      	itt	lt
 800c42e:	464b      	movlt	r3, r9
 800c430:	46a1      	movlt	r9, r4
 800c432:	4630      	mov	r0, r6
 800c434:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c438:	bfba      	itte	lt
 800c43a:	461c      	movlt	r4, r3
 800c43c:	2501      	movlt	r5, #1
 800c43e:	2500      	movge	r5, #0
 800c440:	f7ff fcf6 	bl	800be30 <_Balloc>
 800c444:	4602      	mov	r2, r0
 800c446:	b918      	cbnz	r0, 800c450 <__mdiff+0x60>
 800c448:	4b31      	ldr	r3, [pc, #196]	@ (800c510 <__mdiff+0x120>)
 800c44a:	f240 2145 	movw	r1, #581	@ 0x245
 800c44e:	e7e3      	b.n	800c418 <__mdiff+0x28>
 800c450:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c454:	6926      	ldr	r6, [r4, #16]
 800c456:	60c5      	str	r5, [r0, #12]
 800c458:	f109 0310 	add.w	r3, r9, #16
 800c45c:	f109 0514 	add.w	r5, r9, #20
 800c460:	f104 0e14 	add.w	lr, r4, #20
 800c464:	f100 0b14 	add.w	fp, r0, #20
 800c468:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c46c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c470:	9301      	str	r3, [sp, #4]
 800c472:	46d9      	mov	r9, fp
 800c474:	f04f 0c00 	mov.w	ip, #0
 800c478:	9b01      	ldr	r3, [sp, #4]
 800c47a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c47e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c482:	9301      	str	r3, [sp, #4]
 800c484:	fa1f f38a 	uxth.w	r3, sl
 800c488:	4619      	mov	r1, r3
 800c48a:	b283      	uxth	r3, r0
 800c48c:	1acb      	subs	r3, r1, r3
 800c48e:	0c00      	lsrs	r0, r0, #16
 800c490:	4463      	add	r3, ip
 800c492:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c496:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c4a0:	4576      	cmp	r6, lr
 800c4a2:	f849 3b04 	str.w	r3, [r9], #4
 800c4a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c4aa:	d8e5      	bhi.n	800c478 <__mdiff+0x88>
 800c4ac:	1b33      	subs	r3, r6, r4
 800c4ae:	3b15      	subs	r3, #21
 800c4b0:	f023 0303 	bic.w	r3, r3, #3
 800c4b4:	3415      	adds	r4, #21
 800c4b6:	3304      	adds	r3, #4
 800c4b8:	42a6      	cmp	r6, r4
 800c4ba:	bf38      	it	cc
 800c4bc:	2304      	movcc	r3, #4
 800c4be:	441d      	add	r5, r3
 800c4c0:	445b      	add	r3, fp
 800c4c2:	461e      	mov	r6, r3
 800c4c4:	462c      	mov	r4, r5
 800c4c6:	4544      	cmp	r4, r8
 800c4c8:	d30e      	bcc.n	800c4e8 <__mdiff+0xf8>
 800c4ca:	f108 0103 	add.w	r1, r8, #3
 800c4ce:	1b49      	subs	r1, r1, r5
 800c4d0:	f021 0103 	bic.w	r1, r1, #3
 800c4d4:	3d03      	subs	r5, #3
 800c4d6:	45a8      	cmp	r8, r5
 800c4d8:	bf38      	it	cc
 800c4da:	2100      	movcc	r1, #0
 800c4dc:	440b      	add	r3, r1
 800c4de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c4e2:	b191      	cbz	r1, 800c50a <__mdiff+0x11a>
 800c4e4:	6117      	str	r7, [r2, #16]
 800c4e6:	e79d      	b.n	800c424 <__mdiff+0x34>
 800c4e8:	f854 1b04 	ldr.w	r1, [r4], #4
 800c4ec:	46e6      	mov	lr, ip
 800c4ee:	0c08      	lsrs	r0, r1, #16
 800c4f0:	fa1c fc81 	uxtah	ip, ip, r1
 800c4f4:	4471      	add	r1, lr
 800c4f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c4fa:	b289      	uxth	r1, r1
 800c4fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c500:	f846 1b04 	str.w	r1, [r6], #4
 800c504:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c508:	e7dd      	b.n	800c4c6 <__mdiff+0xd6>
 800c50a:	3f01      	subs	r7, #1
 800c50c:	e7e7      	b.n	800c4de <__mdiff+0xee>
 800c50e:	bf00      	nop
 800c510:	0800d857 	.word	0x0800d857
 800c514:	0800d8c8 	.word	0x0800d8c8

0800c518 <__ulp>:
 800c518:	b082      	sub	sp, #8
 800c51a:	ed8d 0b00 	vstr	d0, [sp]
 800c51e:	9a01      	ldr	r2, [sp, #4]
 800c520:	4b0f      	ldr	r3, [pc, #60]	@ (800c560 <__ulp+0x48>)
 800c522:	4013      	ands	r3, r2
 800c524:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c528:	2b00      	cmp	r3, #0
 800c52a:	dc08      	bgt.n	800c53e <__ulp+0x26>
 800c52c:	425b      	negs	r3, r3
 800c52e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c532:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c536:	da04      	bge.n	800c542 <__ulp+0x2a>
 800c538:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c53c:	4113      	asrs	r3, r2
 800c53e:	2200      	movs	r2, #0
 800c540:	e008      	b.n	800c554 <__ulp+0x3c>
 800c542:	f1a2 0314 	sub.w	r3, r2, #20
 800c546:	2b1e      	cmp	r3, #30
 800c548:	bfda      	itte	le
 800c54a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c54e:	40da      	lsrle	r2, r3
 800c550:	2201      	movgt	r2, #1
 800c552:	2300      	movs	r3, #0
 800c554:	4619      	mov	r1, r3
 800c556:	4610      	mov	r0, r2
 800c558:	ec41 0b10 	vmov	d0, r0, r1
 800c55c:	b002      	add	sp, #8
 800c55e:	4770      	bx	lr
 800c560:	7ff00000 	.word	0x7ff00000

0800c564 <__b2d>:
 800c564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c568:	6906      	ldr	r6, [r0, #16]
 800c56a:	f100 0814 	add.w	r8, r0, #20
 800c56e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c572:	1f37      	subs	r7, r6, #4
 800c574:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c578:	4610      	mov	r0, r2
 800c57a:	f7ff fd4b 	bl	800c014 <__hi0bits>
 800c57e:	f1c0 0320 	rsb	r3, r0, #32
 800c582:	280a      	cmp	r0, #10
 800c584:	600b      	str	r3, [r1, #0]
 800c586:	491b      	ldr	r1, [pc, #108]	@ (800c5f4 <__b2d+0x90>)
 800c588:	dc15      	bgt.n	800c5b6 <__b2d+0x52>
 800c58a:	f1c0 0c0b 	rsb	ip, r0, #11
 800c58e:	fa22 f30c 	lsr.w	r3, r2, ip
 800c592:	45b8      	cmp	r8, r7
 800c594:	ea43 0501 	orr.w	r5, r3, r1
 800c598:	bf34      	ite	cc
 800c59a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c59e:	2300      	movcs	r3, #0
 800c5a0:	3015      	adds	r0, #21
 800c5a2:	fa02 f000 	lsl.w	r0, r2, r0
 800c5a6:	fa23 f30c 	lsr.w	r3, r3, ip
 800c5aa:	4303      	orrs	r3, r0
 800c5ac:	461c      	mov	r4, r3
 800c5ae:	ec45 4b10 	vmov	d0, r4, r5
 800c5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5b6:	45b8      	cmp	r8, r7
 800c5b8:	bf3a      	itte	cc
 800c5ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c5be:	f1a6 0708 	subcc.w	r7, r6, #8
 800c5c2:	2300      	movcs	r3, #0
 800c5c4:	380b      	subs	r0, #11
 800c5c6:	d012      	beq.n	800c5ee <__b2d+0x8a>
 800c5c8:	f1c0 0120 	rsb	r1, r0, #32
 800c5cc:	fa23 f401 	lsr.w	r4, r3, r1
 800c5d0:	4082      	lsls	r2, r0
 800c5d2:	4322      	orrs	r2, r4
 800c5d4:	4547      	cmp	r7, r8
 800c5d6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c5da:	bf8c      	ite	hi
 800c5dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c5e0:	2200      	movls	r2, #0
 800c5e2:	4083      	lsls	r3, r0
 800c5e4:	40ca      	lsrs	r2, r1
 800c5e6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c5ea:	4313      	orrs	r3, r2
 800c5ec:	e7de      	b.n	800c5ac <__b2d+0x48>
 800c5ee:	ea42 0501 	orr.w	r5, r2, r1
 800c5f2:	e7db      	b.n	800c5ac <__b2d+0x48>
 800c5f4:	3ff00000 	.word	0x3ff00000

0800c5f8 <__d2b>:
 800c5f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c5fc:	460f      	mov	r7, r1
 800c5fe:	2101      	movs	r1, #1
 800c600:	ec59 8b10 	vmov	r8, r9, d0
 800c604:	4616      	mov	r6, r2
 800c606:	f7ff fc13 	bl	800be30 <_Balloc>
 800c60a:	4604      	mov	r4, r0
 800c60c:	b930      	cbnz	r0, 800c61c <__d2b+0x24>
 800c60e:	4602      	mov	r2, r0
 800c610:	4b23      	ldr	r3, [pc, #140]	@ (800c6a0 <__d2b+0xa8>)
 800c612:	4824      	ldr	r0, [pc, #144]	@ (800c6a4 <__d2b+0xac>)
 800c614:	f240 310f 	movw	r1, #783	@ 0x30f
 800c618:	f7fe f952 	bl	800a8c0 <__assert_func>
 800c61c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c620:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c624:	b10d      	cbz	r5, 800c62a <__d2b+0x32>
 800c626:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c62a:	9301      	str	r3, [sp, #4]
 800c62c:	f1b8 0300 	subs.w	r3, r8, #0
 800c630:	d023      	beq.n	800c67a <__d2b+0x82>
 800c632:	4668      	mov	r0, sp
 800c634:	9300      	str	r3, [sp, #0]
 800c636:	f7ff fd0c 	bl	800c052 <__lo0bits>
 800c63a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c63e:	b1d0      	cbz	r0, 800c676 <__d2b+0x7e>
 800c640:	f1c0 0320 	rsb	r3, r0, #32
 800c644:	fa02 f303 	lsl.w	r3, r2, r3
 800c648:	430b      	orrs	r3, r1
 800c64a:	40c2      	lsrs	r2, r0
 800c64c:	6163      	str	r3, [r4, #20]
 800c64e:	9201      	str	r2, [sp, #4]
 800c650:	9b01      	ldr	r3, [sp, #4]
 800c652:	61a3      	str	r3, [r4, #24]
 800c654:	2b00      	cmp	r3, #0
 800c656:	bf0c      	ite	eq
 800c658:	2201      	moveq	r2, #1
 800c65a:	2202      	movne	r2, #2
 800c65c:	6122      	str	r2, [r4, #16]
 800c65e:	b1a5      	cbz	r5, 800c68a <__d2b+0x92>
 800c660:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c664:	4405      	add	r5, r0
 800c666:	603d      	str	r5, [r7, #0]
 800c668:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c66c:	6030      	str	r0, [r6, #0]
 800c66e:	4620      	mov	r0, r4
 800c670:	b003      	add	sp, #12
 800c672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c676:	6161      	str	r1, [r4, #20]
 800c678:	e7ea      	b.n	800c650 <__d2b+0x58>
 800c67a:	a801      	add	r0, sp, #4
 800c67c:	f7ff fce9 	bl	800c052 <__lo0bits>
 800c680:	9b01      	ldr	r3, [sp, #4]
 800c682:	6163      	str	r3, [r4, #20]
 800c684:	3020      	adds	r0, #32
 800c686:	2201      	movs	r2, #1
 800c688:	e7e8      	b.n	800c65c <__d2b+0x64>
 800c68a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c68e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c692:	6038      	str	r0, [r7, #0]
 800c694:	6918      	ldr	r0, [r3, #16]
 800c696:	f7ff fcbd 	bl	800c014 <__hi0bits>
 800c69a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c69e:	e7e5      	b.n	800c66c <__d2b+0x74>
 800c6a0:	0800d857 	.word	0x0800d857
 800c6a4:	0800d8c8 	.word	0x0800d8c8

0800c6a8 <__ratio>:
 800c6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ac:	b085      	sub	sp, #20
 800c6ae:	e9cd 1000 	strd	r1, r0, [sp]
 800c6b2:	a902      	add	r1, sp, #8
 800c6b4:	f7ff ff56 	bl	800c564 <__b2d>
 800c6b8:	9800      	ldr	r0, [sp, #0]
 800c6ba:	a903      	add	r1, sp, #12
 800c6bc:	ec55 4b10 	vmov	r4, r5, d0
 800c6c0:	f7ff ff50 	bl	800c564 <__b2d>
 800c6c4:	9b01      	ldr	r3, [sp, #4]
 800c6c6:	6919      	ldr	r1, [r3, #16]
 800c6c8:	9b00      	ldr	r3, [sp, #0]
 800c6ca:	691b      	ldr	r3, [r3, #16]
 800c6cc:	1ac9      	subs	r1, r1, r3
 800c6ce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c6d2:	1a9b      	subs	r3, r3, r2
 800c6d4:	ec5b ab10 	vmov	sl, fp, d0
 800c6d8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	bfce      	itee	gt
 800c6e0:	462a      	movgt	r2, r5
 800c6e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c6e6:	465a      	movle	r2, fp
 800c6e8:	462f      	mov	r7, r5
 800c6ea:	46d9      	mov	r9, fp
 800c6ec:	bfcc      	ite	gt
 800c6ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c6f2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c6f6:	464b      	mov	r3, r9
 800c6f8:	4652      	mov	r2, sl
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	4639      	mov	r1, r7
 800c6fe:	f7f4 f8d5 	bl	80008ac <__aeabi_ddiv>
 800c702:	ec41 0b10 	vmov	d0, r0, r1
 800c706:	b005      	add	sp, #20
 800c708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c70c <__copybits>:
 800c70c:	3901      	subs	r1, #1
 800c70e:	b570      	push	{r4, r5, r6, lr}
 800c710:	1149      	asrs	r1, r1, #5
 800c712:	6914      	ldr	r4, [r2, #16]
 800c714:	3101      	adds	r1, #1
 800c716:	f102 0314 	add.w	r3, r2, #20
 800c71a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c71e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c722:	1f05      	subs	r5, r0, #4
 800c724:	42a3      	cmp	r3, r4
 800c726:	d30c      	bcc.n	800c742 <__copybits+0x36>
 800c728:	1aa3      	subs	r3, r4, r2
 800c72a:	3b11      	subs	r3, #17
 800c72c:	f023 0303 	bic.w	r3, r3, #3
 800c730:	3211      	adds	r2, #17
 800c732:	42a2      	cmp	r2, r4
 800c734:	bf88      	it	hi
 800c736:	2300      	movhi	r3, #0
 800c738:	4418      	add	r0, r3
 800c73a:	2300      	movs	r3, #0
 800c73c:	4288      	cmp	r0, r1
 800c73e:	d305      	bcc.n	800c74c <__copybits+0x40>
 800c740:	bd70      	pop	{r4, r5, r6, pc}
 800c742:	f853 6b04 	ldr.w	r6, [r3], #4
 800c746:	f845 6f04 	str.w	r6, [r5, #4]!
 800c74a:	e7eb      	b.n	800c724 <__copybits+0x18>
 800c74c:	f840 3b04 	str.w	r3, [r0], #4
 800c750:	e7f4      	b.n	800c73c <__copybits+0x30>

0800c752 <__any_on>:
 800c752:	f100 0214 	add.w	r2, r0, #20
 800c756:	6900      	ldr	r0, [r0, #16]
 800c758:	114b      	asrs	r3, r1, #5
 800c75a:	4298      	cmp	r0, r3
 800c75c:	b510      	push	{r4, lr}
 800c75e:	db11      	blt.n	800c784 <__any_on+0x32>
 800c760:	dd0a      	ble.n	800c778 <__any_on+0x26>
 800c762:	f011 011f 	ands.w	r1, r1, #31
 800c766:	d007      	beq.n	800c778 <__any_on+0x26>
 800c768:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c76c:	fa24 f001 	lsr.w	r0, r4, r1
 800c770:	fa00 f101 	lsl.w	r1, r0, r1
 800c774:	428c      	cmp	r4, r1
 800c776:	d10b      	bne.n	800c790 <__any_on+0x3e>
 800c778:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d803      	bhi.n	800c788 <__any_on+0x36>
 800c780:	2000      	movs	r0, #0
 800c782:	bd10      	pop	{r4, pc}
 800c784:	4603      	mov	r3, r0
 800c786:	e7f7      	b.n	800c778 <__any_on+0x26>
 800c788:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c78c:	2900      	cmp	r1, #0
 800c78e:	d0f5      	beq.n	800c77c <__any_on+0x2a>
 800c790:	2001      	movs	r0, #1
 800c792:	e7f6      	b.n	800c782 <__any_on+0x30>

0800c794 <__ascii_wctomb>:
 800c794:	4603      	mov	r3, r0
 800c796:	4608      	mov	r0, r1
 800c798:	b141      	cbz	r1, 800c7ac <__ascii_wctomb+0x18>
 800c79a:	2aff      	cmp	r2, #255	@ 0xff
 800c79c:	d904      	bls.n	800c7a8 <__ascii_wctomb+0x14>
 800c79e:	228a      	movs	r2, #138	@ 0x8a
 800c7a0:	601a      	str	r2, [r3, #0]
 800c7a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c7a6:	4770      	bx	lr
 800c7a8:	700a      	strb	r2, [r1, #0]
 800c7aa:	2001      	movs	r0, #1
 800c7ac:	4770      	bx	lr

0800c7ae <__ssputs_r>:
 800c7ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7b2:	688e      	ldr	r6, [r1, #8]
 800c7b4:	461f      	mov	r7, r3
 800c7b6:	42be      	cmp	r6, r7
 800c7b8:	680b      	ldr	r3, [r1, #0]
 800c7ba:	4682      	mov	sl, r0
 800c7bc:	460c      	mov	r4, r1
 800c7be:	4690      	mov	r8, r2
 800c7c0:	d82d      	bhi.n	800c81e <__ssputs_r+0x70>
 800c7c2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c7c6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c7ca:	d026      	beq.n	800c81a <__ssputs_r+0x6c>
 800c7cc:	6965      	ldr	r5, [r4, #20]
 800c7ce:	6909      	ldr	r1, [r1, #16]
 800c7d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c7d4:	eba3 0901 	sub.w	r9, r3, r1
 800c7d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c7dc:	1c7b      	adds	r3, r7, #1
 800c7de:	444b      	add	r3, r9
 800c7e0:	106d      	asrs	r5, r5, #1
 800c7e2:	429d      	cmp	r5, r3
 800c7e4:	bf38      	it	cc
 800c7e6:	461d      	movcc	r5, r3
 800c7e8:	0553      	lsls	r3, r2, #21
 800c7ea:	d527      	bpl.n	800c83c <__ssputs_r+0x8e>
 800c7ec:	4629      	mov	r1, r5
 800c7ee:	f7ff fa81 	bl	800bcf4 <_malloc_r>
 800c7f2:	4606      	mov	r6, r0
 800c7f4:	b360      	cbz	r0, 800c850 <__ssputs_r+0xa2>
 800c7f6:	6921      	ldr	r1, [r4, #16]
 800c7f8:	464a      	mov	r2, r9
 800c7fa:	f7fe f848 	bl	800a88e <memcpy>
 800c7fe:	89a3      	ldrh	r3, [r4, #12]
 800c800:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c808:	81a3      	strh	r3, [r4, #12]
 800c80a:	6126      	str	r6, [r4, #16]
 800c80c:	6165      	str	r5, [r4, #20]
 800c80e:	444e      	add	r6, r9
 800c810:	eba5 0509 	sub.w	r5, r5, r9
 800c814:	6026      	str	r6, [r4, #0]
 800c816:	60a5      	str	r5, [r4, #8]
 800c818:	463e      	mov	r6, r7
 800c81a:	42be      	cmp	r6, r7
 800c81c:	d900      	bls.n	800c820 <__ssputs_r+0x72>
 800c81e:	463e      	mov	r6, r7
 800c820:	6820      	ldr	r0, [r4, #0]
 800c822:	4632      	mov	r2, r6
 800c824:	4641      	mov	r1, r8
 800c826:	f000 f9d7 	bl	800cbd8 <memmove>
 800c82a:	68a3      	ldr	r3, [r4, #8]
 800c82c:	1b9b      	subs	r3, r3, r6
 800c82e:	60a3      	str	r3, [r4, #8]
 800c830:	6823      	ldr	r3, [r4, #0]
 800c832:	4433      	add	r3, r6
 800c834:	6023      	str	r3, [r4, #0]
 800c836:	2000      	movs	r0, #0
 800c838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c83c:	462a      	mov	r2, r5
 800c83e:	f000 fa10 	bl	800cc62 <_realloc_r>
 800c842:	4606      	mov	r6, r0
 800c844:	2800      	cmp	r0, #0
 800c846:	d1e0      	bne.n	800c80a <__ssputs_r+0x5c>
 800c848:	6921      	ldr	r1, [r4, #16]
 800c84a:	4650      	mov	r0, sl
 800c84c:	f7fe fea4 	bl	800b598 <_free_r>
 800c850:	230c      	movs	r3, #12
 800c852:	f8ca 3000 	str.w	r3, [sl]
 800c856:	89a3      	ldrh	r3, [r4, #12]
 800c858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c85c:	81a3      	strh	r3, [r4, #12]
 800c85e:	f04f 30ff 	mov.w	r0, #4294967295
 800c862:	e7e9      	b.n	800c838 <__ssputs_r+0x8a>

0800c864 <_svfiprintf_r>:
 800c864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c868:	4698      	mov	r8, r3
 800c86a:	898b      	ldrh	r3, [r1, #12]
 800c86c:	061b      	lsls	r3, r3, #24
 800c86e:	b09d      	sub	sp, #116	@ 0x74
 800c870:	4607      	mov	r7, r0
 800c872:	460d      	mov	r5, r1
 800c874:	4614      	mov	r4, r2
 800c876:	d510      	bpl.n	800c89a <_svfiprintf_r+0x36>
 800c878:	690b      	ldr	r3, [r1, #16]
 800c87a:	b973      	cbnz	r3, 800c89a <_svfiprintf_r+0x36>
 800c87c:	2140      	movs	r1, #64	@ 0x40
 800c87e:	f7ff fa39 	bl	800bcf4 <_malloc_r>
 800c882:	6028      	str	r0, [r5, #0]
 800c884:	6128      	str	r0, [r5, #16]
 800c886:	b930      	cbnz	r0, 800c896 <_svfiprintf_r+0x32>
 800c888:	230c      	movs	r3, #12
 800c88a:	603b      	str	r3, [r7, #0]
 800c88c:	f04f 30ff 	mov.w	r0, #4294967295
 800c890:	b01d      	add	sp, #116	@ 0x74
 800c892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c896:	2340      	movs	r3, #64	@ 0x40
 800c898:	616b      	str	r3, [r5, #20]
 800c89a:	2300      	movs	r3, #0
 800c89c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c89e:	2320      	movs	r3, #32
 800c8a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c8a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8a8:	2330      	movs	r3, #48	@ 0x30
 800c8aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ca48 <_svfiprintf_r+0x1e4>
 800c8ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c8b2:	f04f 0901 	mov.w	r9, #1
 800c8b6:	4623      	mov	r3, r4
 800c8b8:	469a      	mov	sl, r3
 800c8ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8be:	b10a      	cbz	r2, 800c8c4 <_svfiprintf_r+0x60>
 800c8c0:	2a25      	cmp	r2, #37	@ 0x25
 800c8c2:	d1f9      	bne.n	800c8b8 <_svfiprintf_r+0x54>
 800c8c4:	ebba 0b04 	subs.w	fp, sl, r4
 800c8c8:	d00b      	beq.n	800c8e2 <_svfiprintf_r+0x7e>
 800c8ca:	465b      	mov	r3, fp
 800c8cc:	4622      	mov	r2, r4
 800c8ce:	4629      	mov	r1, r5
 800c8d0:	4638      	mov	r0, r7
 800c8d2:	f7ff ff6c 	bl	800c7ae <__ssputs_r>
 800c8d6:	3001      	adds	r0, #1
 800c8d8:	f000 80a7 	beq.w	800ca2a <_svfiprintf_r+0x1c6>
 800c8dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8de:	445a      	add	r2, fp
 800c8e0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c8e2:	f89a 3000 	ldrb.w	r3, [sl]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	f000 809f 	beq.w	800ca2a <_svfiprintf_r+0x1c6>
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c8f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8f6:	f10a 0a01 	add.w	sl, sl, #1
 800c8fa:	9304      	str	r3, [sp, #16]
 800c8fc:	9307      	str	r3, [sp, #28]
 800c8fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c902:	931a      	str	r3, [sp, #104]	@ 0x68
 800c904:	4654      	mov	r4, sl
 800c906:	2205      	movs	r2, #5
 800c908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c90c:	484e      	ldr	r0, [pc, #312]	@ (800ca48 <_svfiprintf_r+0x1e4>)
 800c90e:	f7f3 fc8f 	bl	8000230 <memchr>
 800c912:	9a04      	ldr	r2, [sp, #16]
 800c914:	b9d8      	cbnz	r0, 800c94e <_svfiprintf_r+0xea>
 800c916:	06d0      	lsls	r0, r2, #27
 800c918:	bf44      	itt	mi
 800c91a:	2320      	movmi	r3, #32
 800c91c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c920:	0711      	lsls	r1, r2, #28
 800c922:	bf44      	itt	mi
 800c924:	232b      	movmi	r3, #43	@ 0x2b
 800c926:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c92a:	f89a 3000 	ldrb.w	r3, [sl]
 800c92e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c930:	d015      	beq.n	800c95e <_svfiprintf_r+0xfa>
 800c932:	9a07      	ldr	r2, [sp, #28]
 800c934:	4654      	mov	r4, sl
 800c936:	2000      	movs	r0, #0
 800c938:	f04f 0c0a 	mov.w	ip, #10
 800c93c:	4621      	mov	r1, r4
 800c93e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c942:	3b30      	subs	r3, #48	@ 0x30
 800c944:	2b09      	cmp	r3, #9
 800c946:	d94b      	bls.n	800c9e0 <_svfiprintf_r+0x17c>
 800c948:	b1b0      	cbz	r0, 800c978 <_svfiprintf_r+0x114>
 800c94a:	9207      	str	r2, [sp, #28]
 800c94c:	e014      	b.n	800c978 <_svfiprintf_r+0x114>
 800c94e:	eba0 0308 	sub.w	r3, r0, r8
 800c952:	fa09 f303 	lsl.w	r3, r9, r3
 800c956:	4313      	orrs	r3, r2
 800c958:	9304      	str	r3, [sp, #16]
 800c95a:	46a2      	mov	sl, r4
 800c95c:	e7d2      	b.n	800c904 <_svfiprintf_r+0xa0>
 800c95e:	9b03      	ldr	r3, [sp, #12]
 800c960:	1d19      	adds	r1, r3, #4
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	9103      	str	r1, [sp, #12]
 800c966:	2b00      	cmp	r3, #0
 800c968:	bfbb      	ittet	lt
 800c96a:	425b      	neglt	r3, r3
 800c96c:	f042 0202 	orrlt.w	r2, r2, #2
 800c970:	9307      	strge	r3, [sp, #28]
 800c972:	9307      	strlt	r3, [sp, #28]
 800c974:	bfb8      	it	lt
 800c976:	9204      	strlt	r2, [sp, #16]
 800c978:	7823      	ldrb	r3, [r4, #0]
 800c97a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c97c:	d10a      	bne.n	800c994 <_svfiprintf_r+0x130>
 800c97e:	7863      	ldrb	r3, [r4, #1]
 800c980:	2b2a      	cmp	r3, #42	@ 0x2a
 800c982:	d132      	bne.n	800c9ea <_svfiprintf_r+0x186>
 800c984:	9b03      	ldr	r3, [sp, #12]
 800c986:	1d1a      	adds	r2, r3, #4
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	9203      	str	r2, [sp, #12]
 800c98c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c990:	3402      	adds	r4, #2
 800c992:	9305      	str	r3, [sp, #20]
 800c994:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ca58 <_svfiprintf_r+0x1f4>
 800c998:	7821      	ldrb	r1, [r4, #0]
 800c99a:	2203      	movs	r2, #3
 800c99c:	4650      	mov	r0, sl
 800c99e:	f7f3 fc47 	bl	8000230 <memchr>
 800c9a2:	b138      	cbz	r0, 800c9b4 <_svfiprintf_r+0x150>
 800c9a4:	9b04      	ldr	r3, [sp, #16]
 800c9a6:	eba0 000a 	sub.w	r0, r0, sl
 800c9aa:	2240      	movs	r2, #64	@ 0x40
 800c9ac:	4082      	lsls	r2, r0
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	3401      	adds	r4, #1
 800c9b2:	9304      	str	r3, [sp, #16]
 800c9b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9b8:	4824      	ldr	r0, [pc, #144]	@ (800ca4c <_svfiprintf_r+0x1e8>)
 800c9ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c9be:	2206      	movs	r2, #6
 800c9c0:	f7f3 fc36 	bl	8000230 <memchr>
 800c9c4:	2800      	cmp	r0, #0
 800c9c6:	d036      	beq.n	800ca36 <_svfiprintf_r+0x1d2>
 800c9c8:	4b21      	ldr	r3, [pc, #132]	@ (800ca50 <_svfiprintf_r+0x1ec>)
 800c9ca:	bb1b      	cbnz	r3, 800ca14 <_svfiprintf_r+0x1b0>
 800c9cc:	9b03      	ldr	r3, [sp, #12]
 800c9ce:	3307      	adds	r3, #7
 800c9d0:	f023 0307 	bic.w	r3, r3, #7
 800c9d4:	3308      	adds	r3, #8
 800c9d6:	9303      	str	r3, [sp, #12]
 800c9d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9da:	4433      	add	r3, r6
 800c9dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9de:	e76a      	b.n	800c8b6 <_svfiprintf_r+0x52>
 800c9e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9e4:	460c      	mov	r4, r1
 800c9e6:	2001      	movs	r0, #1
 800c9e8:	e7a8      	b.n	800c93c <_svfiprintf_r+0xd8>
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	3401      	adds	r4, #1
 800c9ee:	9305      	str	r3, [sp, #20]
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	f04f 0c0a 	mov.w	ip, #10
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9fc:	3a30      	subs	r2, #48	@ 0x30
 800c9fe:	2a09      	cmp	r2, #9
 800ca00:	d903      	bls.n	800ca0a <_svfiprintf_r+0x1a6>
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d0c6      	beq.n	800c994 <_svfiprintf_r+0x130>
 800ca06:	9105      	str	r1, [sp, #20]
 800ca08:	e7c4      	b.n	800c994 <_svfiprintf_r+0x130>
 800ca0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca0e:	4604      	mov	r4, r0
 800ca10:	2301      	movs	r3, #1
 800ca12:	e7f0      	b.n	800c9f6 <_svfiprintf_r+0x192>
 800ca14:	ab03      	add	r3, sp, #12
 800ca16:	9300      	str	r3, [sp, #0]
 800ca18:	462a      	mov	r2, r5
 800ca1a:	4b0e      	ldr	r3, [pc, #56]	@ (800ca54 <_svfiprintf_r+0x1f0>)
 800ca1c:	a904      	add	r1, sp, #16
 800ca1e:	4638      	mov	r0, r7
 800ca20:	f7fd f956 	bl	8009cd0 <_printf_float>
 800ca24:	1c42      	adds	r2, r0, #1
 800ca26:	4606      	mov	r6, r0
 800ca28:	d1d6      	bne.n	800c9d8 <_svfiprintf_r+0x174>
 800ca2a:	89ab      	ldrh	r3, [r5, #12]
 800ca2c:	065b      	lsls	r3, r3, #25
 800ca2e:	f53f af2d 	bmi.w	800c88c <_svfiprintf_r+0x28>
 800ca32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ca34:	e72c      	b.n	800c890 <_svfiprintf_r+0x2c>
 800ca36:	ab03      	add	r3, sp, #12
 800ca38:	9300      	str	r3, [sp, #0]
 800ca3a:	462a      	mov	r2, r5
 800ca3c:	4b05      	ldr	r3, [pc, #20]	@ (800ca54 <_svfiprintf_r+0x1f0>)
 800ca3e:	a904      	add	r1, sp, #16
 800ca40:	4638      	mov	r0, r7
 800ca42:	f7fd fbdd 	bl	800a200 <_printf_i>
 800ca46:	e7ed      	b.n	800ca24 <_svfiprintf_r+0x1c0>
 800ca48:	0800da20 	.word	0x0800da20
 800ca4c:	0800da2a 	.word	0x0800da2a
 800ca50:	08009cd1 	.word	0x08009cd1
 800ca54:	0800c7af 	.word	0x0800c7af
 800ca58:	0800da26 	.word	0x0800da26

0800ca5c <__sflush_r>:
 800ca5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca64:	0716      	lsls	r6, r2, #28
 800ca66:	4605      	mov	r5, r0
 800ca68:	460c      	mov	r4, r1
 800ca6a:	d454      	bmi.n	800cb16 <__sflush_r+0xba>
 800ca6c:	684b      	ldr	r3, [r1, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	dc02      	bgt.n	800ca78 <__sflush_r+0x1c>
 800ca72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	dd48      	ble.n	800cb0a <__sflush_r+0xae>
 800ca78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca7a:	2e00      	cmp	r6, #0
 800ca7c:	d045      	beq.n	800cb0a <__sflush_r+0xae>
 800ca7e:	2300      	movs	r3, #0
 800ca80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ca84:	682f      	ldr	r7, [r5, #0]
 800ca86:	6a21      	ldr	r1, [r4, #32]
 800ca88:	602b      	str	r3, [r5, #0]
 800ca8a:	d030      	beq.n	800caee <__sflush_r+0x92>
 800ca8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ca8e:	89a3      	ldrh	r3, [r4, #12]
 800ca90:	0759      	lsls	r1, r3, #29
 800ca92:	d505      	bpl.n	800caa0 <__sflush_r+0x44>
 800ca94:	6863      	ldr	r3, [r4, #4]
 800ca96:	1ad2      	subs	r2, r2, r3
 800ca98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ca9a:	b10b      	cbz	r3, 800caa0 <__sflush_r+0x44>
 800ca9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ca9e:	1ad2      	subs	r2, r2, r3
 800caa0:	2300      	movs	r3, #0
 800caa2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800caa4:	6a21      	ldr	r1, [r4, #32]
 800caa6:	4628      	mov	r0, r5
 800caa8:	47b0      	blx	r6
 800caaa:	1c43      	adds	r3, r0, #1
 800caac:	89a3      	ldrh	r3, [r4, #12]
 800caae:	d106      	bne.n	800cabe <__sflush_r+0x62>
 800cab0:	6829      	ldr	r1, [r5, #0]
 800cab2:	291d      	cmp	r1, #29
 800cab4:	d82b      	bhi.n	800cb0e <__sflush_r+0xb2>
 800cab6:	4a2a      	ldr	r2, [pc, #168]	@ (800cb60 <__sflush_r+0x104>)
 800cab8:	410a      	asrs	r2, r1
 800caba:	07d6      	lsls	r6, r2, #31
 800cabc:	d427      	bmi.n	800cb0e <__sflush_r+0xb2>
 800cabe:	2200      	movs	r2, #0
 800cac0:	6062      	str	r2, [r4, #4]
 800cac2:	04d9      	lsls	r1, r3, #19
 800cac4:	6922      	ldr	r2, [r4, #16]
 800cac6:	6022      	str	r2, [r4, #0]
 800cac8:	d504      	bpl.n	800cad4 <__sflush_r+0x78>
 800caca:	1c42      	adds	r2, r0, #1
 800cacc:	d101      	bne.n	800cad2 <__sflush_r+0x76>
 800cace:	682b      	ldr	r3, [r5, #0]
 800cad0:	b903      	cbnz	r3, 800cad4 <__sflush_r+0x78>
 800cad2:	6560      	str	r0, [r4, #84]	@ 0x54
 800cad4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cad6:	602f      	str	r7, [r5, #0]
 800cad8:	b1b9      	cbz	r1, 800cb0a <__sflush_r+0xae>
 800cada:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cade:	4299      	cmp	r1, r3
 800cae0:	d002      	beq.n	800cae8 <__sflush_r+0x8c>
 800cae2:	4628      	mov	r0, r5
 800cae4:	f7fe fd58 	bl	800b598 <_free_r>
 800cae8:	2300      	movs	r3, #0
 800caea:	6363      	str	r3, [r4, #52]	@ 0x34
 800caec:	e00d      	b.n	800cb0a <__sflush_r+0xae>
 800caee:	2301      	movs	r3, #1
 800caf0:	4628      	mov	r0, r5
 800caf2:	47b0      	blx	r6
 800caf4:	4602      	mov	r2, r0
 800caf6:	1c50      	adds	r0, r2, #1
 800caf8:	d1c9      	bne.n	800ca8e <__sflush_r+0x32>
 800cafa:	682b      	ldr	r3, [r5, #0]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d0c6      	beq.n	800ca8e <__sflush_r+0x32>
 800cb00:	2b1d      	cmp	r3, #29
 800cb02:	d001      	beq.n	800cb08 <__sflush_r+0xac>
 800cb04:	2b16      	cmp	r3, #22
 800cb06:	d11e      	bne.n	800cb46 <__sflush_r+0xea>
 800cb08:	602f      	str	r7, [r5, #0]
 800cb0a:	2000      	movs	r0, #0
 800cb0c:	e022      	b.n	800cb54 <__sflush_r+0xf8>
 800cb0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb12:	b21b      	sxth	r3, r3
 800cb14:	e01b      	b.n	800cb4e <__sflush_r+0xf2>
 800cb16:	690f      	ldr	r7, [r1, #16]
 800cb18:	2f00      	cmp	r7, #0
 800cb1a:	d0f6      	beq.n	800cb0a <__sflush_r+0xae>
 800cb1c:	0793      	lsls	r3, r2, #30
 800cb1e:	680e      	ldr	r6, [r1, #0]
 800cb20:	bf08      	it	eq
 800cb22:	694b      	ldreq	r3, [r1, #20]
 800cb24:	600f      	str	r7, [r1, #0]
 800cb26:	bf18      	it	ne
 800cb28:	2300      	movne	r3, #0
 800cb2a:	eba6 0807 	sub.w	r8, r6, r7
 800cb2e:	608b      	str	r3, [r1, #8]
 800cb30:	f1b8 0f00 	cmp.w	r8, #0
 800cb34:	dde9      	ble.n	800cb0a <__sflush_r+0xae>
 800cb36:	6a21      	ldr	r1, [r4, #32]
 800cb38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cb3a:	4643      	mov	r3, r8
 800cb3c:	463a      	mov	r2, r7
 800cb3e:	4628      	mov	r0, r5
 800cb40:	47b0      	blx	r6
 800cb42:	2800      	cmp	r0, #0
 800cb44:	dc08      	bgt.n	800cb58 <__sflush_r+0xfc>
 800cb46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb4e:	81a3      	strh	r3, [r4, #12]
 800cb50:	f04f 30ff 	mov.w	r0, #4294967295
 800cb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb58:	4407      	add	r7, r0
 800cb5a:	eba8 0800 	sub.w	r8, r8, r0
 800cb5e:	e7e7      	b.n	800cb30 <__sflush_r+0xd4>
 800cb60:	dfbffffe 	.word	0xdfbffffe

0800cb64 <_fflush_r>:
 800cb64:	b538      	push	{r3, r4, r5, lr}
 800cb66:	690b      	ldr	r3, [r1, #16]
 800cb68:	4605      	mov	r5, r0
 800cb6a:	460c      	mov	r4, r1
 800cb6c:	b913      	cbnz	r3, 800cb74 <_fflush_r+0x10>
 800cb6e:	2500      	movs	r5, #0
 800cb70:	4628      	mov	r0, r5
 800cb72:	bd38      	pop	{r3, r4, r5, pc}
 800cb74:	b118      	cbz	r0, 800cb7e <_fflush_r+0x1a>
 800cb76:	6a03      	ldr	r3, [r0, #32]
 800cb78:	b90b      	cbnz	r3, 800cb7e <_fflush_r+0x1a>
 800cb7a:	f7fd fced 	bl	800a558 <__sinit>
 800cb7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d0f3      	beq.n	800cb6e <_fflush_r+0xa>
 800cb86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cb88:	07d0      	lsls	r0, r2, #31
 800cb8a:	d404      	bmi.n	800cb96 <_fflush_r+0x32>
 800cb8c:	0599      	lsls	r1, r3, #22
 800cb8e:	d402      	bmi.n	800cb96 <_fflush_r+0x32>
 800cb90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb92:	f7fd fe7a 	bl	800a88a <__retarget_lock_acquire_recursive>
 800cb96:	4628      	mov	r0, r5
 800cb98:	4621      	mov	r1, r4
 800cb9a:	f7ff ff5f 	bl	800ca5c <__sflush_r>
 800cb9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cba0:	07da      	lsls	r2, r3, #31
 800cba2:	4605      	mov	r5, r0
 800cba4:	d4e4      	bmi.n	800cb70 <_fflush_r+0xc>
 800cba6:	89a3      	ldrh	r3, [r4, #12]
 800cba8:	059b      	lsls	r3, r3, #22
 800cbaa:	d4e1      	bmi.n	800cb70 <_fflush_r+0xc>
 800cbac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cbae:	f7fd fe6d 	bl	800a88c <__retarget_lock_release_recursive>
 800cbb2:	e7dd      	b.n	800cb70 <_fflush_r+0xc>

0800cbb4 <fiprintf>:
 800cbb4:	b40e      	push	{r1, r2, r3}
 800cbb6:	b503      	push	{r0, r1, lr}
 800cbb8:	4601      	mov	r1, r0
 800cbba:	ab03      	add	r3, sp, #12
 800cbbc:	4805      	ldr	r0, [pc, #20]	@ (800cbd4 <fiprintf+0x20>)
 800cbbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbc2:	6800      	ldr	r0, [r0, #0]
 800cbc4:	9301      	str	r3, [sp, #4]
 800cbc6:	f000 f8a3 	bl	800cd10 <_vfiprintf_r>
 800cbca:	b002      	add	sp, #8
 800cbcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbd0:	b003      	add	sp, #12
 800cbd2:	4770      	bx	lr
 800cbd4:	20000184 	.word	0x20000184

0800cbd8 <memmove>:
 800cbd8:	4288      	cmp	r0, r1
 800cbda:	b510      	push	{r4, lr}
 800cbdc:	eb01 0402 	add.w	r4, r1, r2
 800cbe0:	d902      	bls.n	800cbe8 <memmove+0x10>
 800cbe2:	4284      	cmp	r4, r0
 800cbe4:	4623      	mov	r3, r4
 800cbe6:	d807      	bhi.n	800cbf8 <memmove+0x20>
 800cbe8:	1e43      	subs	r3, r0, #1
 800cbea:	42a1      	cmp	r1, r4
 800cbec:	d008      	beq.n	800cc00 <memmove+0x28>
 800cbee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cbf6:	e7f8      	b.n	800cbea <memmove+0x12>
 800cbf8:	4402      	add	r2, r0
 800cbfa:	4601      	mov	r1, r0
 800cbfc:	428a      	cmp	r2, r1
 800cbfe:	d100      	bne.n	800cc02 <memmove+0x2a>
 800cc00:	bd10      	pop	{r4, pc}
 800cc02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc0a:	e7f7      	b.n	800cbfc <memmove+0x24>

0800cc0c <_sbrk_r>:
 800cc0c:	b538      	push	{r3, r4, r5, lr}
 800cc0e:	4d06      	ldr	r5, [pc, #24]	@ (800cc28 <_sbrk_r+0x1c>)
 800cc10:	2300      	movs	r3, #0
 800cc12:	4604      	mov	r4, r0
 800cc14:	4608      	mov	r0, r1
 800cc16:	602b      	str	r3, [r5, #0]
 800cc18:	f7f7 fa8a 	bl	8004130 <_sbrk>
 800cc1c:	1c43      	adds	r3, r0, #1
 800cc1e:	d102      	bne.n	800cc26 <_sbrk_r+0x1a>
 800cc20:	682b      	ldr	r3, [r5, #0]
 800cc22:	b103      	cbz	r3, 800cc26 <_sbrk_r+0x1a>
 800cc24:	6023      	str	r3, [r4, #0]
 800cc26:	bd38      	pop	{r3, r4, r5, pc}
 800cc28:	20000f2c 	.word	0x20000f2c

0800cc2c <abort>:
 800cc2c:	b508      	push	{r3, lr}
 800cc2e:	2006      	movs	r0, #6
 800cc30:	f000 fa42 	bl	800d0b8 <raise>
 800cc34:	2001      	movs	r0, #1
 800cc36:	f7f7 fa03 	bl	8004040 <_exit>

0800cc3a <_calloc_r>:
 800cc3a:	b570      	push	{r4, r5, r6, lr}
 800cc3c:	fba1 5402 	umull	r5, r4, r1, r2
 800cc40:	b93c      	cbnz	r4, 800cc52 <_calloc_r+0x18>
 800cc42:	4629      	mov	r1, r5
 800cc44:	f7ff f856 	bl	800bcf4 <_malloc_r>
 800cc48:	4606      	mov	r6, r0
 800cc4a:	b928      	cbnz	r0, 800cc58 <_calloc_r+0x1e>
 800cc4c:	2600      	movs	r6, #0
 800cc4e:	4630      	mov	r0, r6
 800cc50:	bd70      	pop	{r4, r5, r6, pc}
 800cc52:	220c      	movs	r2, #12
 800cc54:	6002      	str	r2, [r0, #0]
 800cc56:	e7f9      	b.n	800cc4c <_calloc_r+0x12>
 800cc58:	462a      	mov	r2, r5
 800cc5a:	4621      	mov	r1, r4
 800cc5c:	f7fd fd29 	bl	800a6b2 <memset>
 800cc60:	e7f5      	b.n	800cc4e <_calloc_r+0x14>

0800cc62 <_realloc_r>:
 800cc62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc66:	4680      	mov	r8, r0
 800cc68:	4615      	mov	r5, r2
 800cc6a:	460c      	mov	r4, r1
 800cc6c:	b921      	cbnz	r1, 800cc78 <_realloc_r+0x16>
 800cc6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc72:	4611      	mov	r1, r2
 800cc74:	f7ff b83e 	b.w	800bcf4 <_malloc_r>
 800cc78:	b92a      	cbnz	r2, 800cc86 <_realloc_r+0x24>
 800cc7a:	f7fe fc8d 	bl	800b598 <_free_r>
 800cc7e:	2400      	movs	r4, #0
 800cc80:	4620      	mov	r0, r4
 800cc82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc86:	f000 fa33 	bl	800d0f0 <_malloc_usable_size_r>
 800cc8a:	4285      	cmp	r5, r0
 800cc8c:	4606      	mov	r6, r0
 800cc8e:	d802      	bhi.n	800cc96 <_realloc_r+0x34>
 800cc90:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cc94:	d8f4      	bhi.n	800cc80 <_realloc_r+0x1e>
 800cc96:	4629      	mov	r1, r5
 800cc98:	4640      	mov	r0, r8
 800cc9a:	f7ff f82b 	bl	800bcf4 <_malloc_r>
 800cc9e:	4607      	mov	r7, r0
 800cca0:	2800      	cmp	r0, #0
 800cca2:	d0ec      	beq.n	800cc7e <_realloc_r+0x1c>
 800cca4:	42b5      	cmp	r5, r6
 800cca6:	462a      	mov	r2, r5
 800cca8:	4621      	mov	r1, r4
 800ccaa:	bf28      	it	cs
 800ccac:	4632      	movcs	r2, r6
 800ccae:	f7fd fdee 	bl	800a88e <memcpy>
 800ccb2:	4621      	mov	r1, r4
 800ccb4:	4640      	mov	r0, r8
 800ccb6:	f7fe fc6f 	bl	800b598 <_free_r>
 800ccba:	463c      	mov	r4, r7
 800ccbc:	e7e0      	b.n	800cc80 <_realloc_r+0x1e>

0800ccbe <__sfputc_r>:
 800ccbe:	6893      	ldr	r3, [r2, #8]
 800ccc0:	3b01      	subs	r3, #1
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	b410      	push	{r4}
 800ccc6:	6093      	str	r3, [r2, #8]
 800ccc8:	da08      	bge.n	800ccdc <__sfputc_r+0x1e>
 800ccca:	6994      	ldr	r4, [r2, #24]
 800cccc:	42a3      	cmp	r3, r4
 800ccce:	db01      	blt.n	800ccd4 <__sfputc_r+0x16>
 800ccd0:	290a      	cmp	r1, #10
 800ccd2:	d103      	bne.n	800ccdc <__sfputc_r+0x1e>
 800ccd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccd8:	f000 b932 	b.w	800cf40 <__swbuf_r>
 800ccdc:	6813      	ldr	r3, [r2, #0]
 800ccde:	1c58      	adds	r0, r3, #1
 800cce0:	6010      	str	r0, [r2, #0]
 800cce2:	7019      	strb	r1, [r3, #0]
 800cce4:	4608      	mov	r0, r1
 800cce6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccea:	4770      	bx	lr

0800ccec <__sfputs_r>:
 800ccec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccee:	4606      	mov	r6, r0
 800ccf0:	460f      	mov	r7, r1
 800ccf2:	4614      	mov	r4, r2
 800ccf4:	18d5      	adds	r5, r2, r3
 800ccf6:	42ac      	cmp	r4, r5
 800ccf8:	d101      	bne.n	800ccfe <__sfputs_r+0x12>
 800ccfa:	2000      	movs	r0, #0
 800ccfc:	e007      	b.n	800cd0e <__sfputs_r+0x22>
 800ccfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd02:	463a      	mov	r2, r7
 800cd04:	4630      	mov	r0, r6
 800cd06:	f7ff ffda 	bl	800ccbe <__sfputc_r>
 800cd0a:	1c43      	adds	r3, r0, #1
 800cd0c:	d1f3      	bne.n	800ccf6 <__sfputs_r+0xa>
 800cd0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cd10 <_vfiprintf_r>:
 800cd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd14:	460d      	mov	r5, r1
 800cd16:	b09d      	sub	sp, #116	@ 0x74
 800cd18:	4614      	mov	r4, r2
 800cd1a:	4698      	mov	r8, r3
 800cd1c:	4606      	mov	r6, r0
 800cd1e:	b118      	cbz	r0, 800cd28 <_vfiprintf_r+0x18>
 800cd20:	6a03      	ldr	r3, [r0, #32]
 800cd22:	b90b      	cbnz	r3, 800cd28 <_vfiprintf_r+0x18>
 800cd24:	f7fd fc18 	bl	800a558 <__sinit>
 800cd28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd2a:	07d9      	lsls	r1, r3, #31
 800cd2c:	d405      	bmi.n	800cd3a <_vfiprintf_r+0x2a>
 800cd2e:	89ab      	ldrh	r3, [r5, #12]
 800cd30:	059a      	lsls	r2, r3, #22
 800cd32:	d402      	bmi.n	800cd3a <_vfiprintf_r+0x2a>
 800cd34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd36:	f7fd fda8 	bl	800a88a <__retarget_lock_acquire_recursive>
 800cd3a:	89ab      	ldrh	r3, [r5, #12]
 800cd3c:	071b      	lsls	r3, r3, #28
 800cd3e:	d501      	bpl.n	800cd44 <_vfiprintf_r+0x34>
 800cd40:	692b      	ldr	r3, [r5, #16]
 800cd42:	b99b      	cbnz	r3, 800cd6c <_vfiprintf_r+0x5c>
 800cd44:	4629      	mov	r1, r5
 800cd46:	4630      	mov	r0, r6
 800cd48:	f000 f938 	bl	800cfbc <__swsetup_r>
 800cd4c:	b170      	cbz	r0, 800cd6c <_vfiprintf_r+0x5c>
 800cd4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd50:	07dc      	lsls	r4, r3, #31
 800cd52:	d504      	bpl.n	800cd5e <_vfiprintf_r+0x4e>
 800cd54:	f04f 30ff 	mov.w	r0, #4294967295
 800cd58:	b01d      	add	sp, #116	@ 0x74
 800cd5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd5e:	89ab      	ldrh	r3, [r5, #12]
 800cd60:	0598      	lsls	r0, r3, #22
 800cd62:	d4f7      	bmi.n	800cd54 <_vfiprintf_r+0x44>
 800cd64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd66:	f7fd fd91 	bl	800a88c <__retarget_lock_release_recursive>
 800cd6a:	e7f3      	b.n	800cd54 <_vfiprintf_r+0x44>
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd70:	2320      	movs	r3, #32
 800cd72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd76:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd7a:	2330      	movs	r3, #48	@ 0x30
 800cd7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cf2c <_vfiprintf_r+0x21c>
 800cd80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd84:	f04f 0901 	mov.w	r9, #1
 800cd88:	4623      	mov	r3, r4
 800cd8a:	469a      	mov	sl, r3
 800cd8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd90:	b10a      	cbz	r2, 800cd96 <_vfiprintf_r+0x86>
 800cd92:	2a25      	cmp	r2, #37	@ 0x25
 800cd94:	d1f9      	bne.n	800cd8a <_vfiprintf_r+0x7a>
 800cd96:	ebba 0b04 	subs.w	fp, sl, r4
 800cd9a:	d00b      	beq.n	800cdb4 <_vfiprintf_r+0xa4>
 800cd9c:	465b      	mov	r3, fp
 800cd9e:	4622      	mov	r2, r4
 800cda0:	4629      	mov	r1, r5
 800cda2:	4630      	mov	r0, r6
 800cda4:	f7ff ffa2 	bl	800ccec <__sfputs_r>
 800cda8:	3001      	adds	r0, #1
 800cdaa:	f000 80a7 	beq.w	800cefc <_vfiprintf_r+0x1ec>
 800cdae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdb0:	445a      	add	r2, fp
 800cdb2:	9209      	str	r2, [sp, #36]	@ 0x24
 800cdb4:	f89a 3000 	ldrb.w	r3, [sl]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	f000 809f 	beq.w	800cefc <_vfiprintf_r+0x1ec>
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	f04f 32ff 	mov.w	r2, #4294967295
 800cdc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdc8:	f10a 0a01 	add.w	sl, sl, #1
 800cdcc:	9304      	str	r3, [sp, #16]
 800cdce:	9307      	str	r3, [sp, #28]
 800cdd0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cdd4:	931a      	str	r3, [sp, #104]	@ 0x68
 800cdd6:	4654      	mov	r4, sl
 800cdd8:	2205      	movs	r2, #5
 800cdda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdde:	4853      	ldr	r0, [pc, #332]	@ (800cf2c <_vfiprintf_r+0x21c>)
 800cde0:	f7f3 fa26 	bl	8000230 <memchr>
 800cde4:	9a04      	ldr	r2, [sp, #16]
 800cde6:	b9d8      	cbnz	r0, 800ce20 <_vfiprintf_r+0x110>
 800cde8:	06d1      	lsls	r1, r2, #27
 800cdea:	bf44      	itt	mi
 800cdec:	2320      	movmi	r3, #32
 800cdee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdf2:	0713      	lsls	r3, r2, #28
 800cdf4:	bf44      	itt	mi
 800cdf6:	232b      	movmi	r3, #43	@ 0x2b
 800cdf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdfc:	f89a 3000 	ldrb.w	r3, [sl]
 800ce00:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce02:	d015      	beq.n	800ce30 <_vfiprintf_r+0x120>
 800ce04:	9a07      	ldr	r2, [sp, #28]
 800ce06:	4654      	mov	r4, sl
 800ce08:	2000      	movs	r0, #0
 800ce0a:	f04f 0c0a 	mov.w	ip, #10
 800ce0e:	4621      	mov	r1, r4
 800ce10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce14:	3b30      	subs	r3, #48	@ 0x30
 800ce16:	2b09      	cmp	r3, #9
 800ce18:	d94b      	bls.n	800ceb2 <_vfiprintf_r+0x1a2>
 800ce1a:	b1b0      	cbz	r0, 800ce4a <_vfiprintf_r+0x13a>
 800ce1c:	9207      	str	r2, [sp, #28]
 800ce1e:	e014      	b.n	800ce4a <_vfiprintf_r+0x13a>
 800ce20:	eba0 0308 	sub.w	r3, r0, r8
 800ce24:	fa09 f303 	lsl.w	r3, r9, r3
 800ce28:	4313      	orrs	r3, r2
 800ce2a:	9304      	str	r3, [sp, #16]
 800ce2c:	46a2      	mov	sl, r4
 800ce2e:	e7d2      	b.n	800cdd6 <_vfiprintf_r+0xc6>
 800ce30:	9b03      	ldr	r3, [sp, #12]
 800ce32:	1d19      	adds	r1, r3, #4
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	9103      	str	r1, [sp, #12]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	bfbb      	ittet	lt
 800ce3c:	425b      	neglt	r3, r3
 800ce3e:	f042 0202 	orrlt.w	r2, r2, #2
 800ce42:	9307      	strge	r3, [sp, #28]
 800ce44:	9307      	strlt	r3, [sp, #28]
 800ce46:	bfb8      	it	lt
 800ce48:	9204      	strlt	r2, [sp, #16]
 800ce4a:	7823      	ldrb	r3, [r4, #0]
 800ce4c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce4e:	d10a      	bne.n	800ce66 <_vfiprintf_r+0x156>
 800ce50:	7863      	ldrb	r3, [r4, #1]
 800ce52:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce54:	d132      	bne.n	800cebc <_vfiprintf_r+0x1ac>
 800ce56:	9b03      	ldr	r3, [sp, #12]
 800ce58:	1d1a      	adds	r2, r3, #4
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	9203      	str	r2, [sp, #12]
 800ce5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce62:	3402      	adds	r4, #2
 800ce64:	9305      	str	r3, [sp, #20]
 800ce66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cf3c <_vfiprintf_r+0x22c>
 800ce6a:	7821      	ldrb	r1, [r4, #0]
 800ce6c:	2203      	movs	r2, #3
 800ce6e:	4650      	mov	r0, sl
 800ce70:	f7f3 f9de 	bl	8000230 <memchr>
 800ce74:	b138      	cbz	r0, 800ce86 <_vfiprintf_r+0x176>
 800ce76:	9b04      	ldr	r3, [sp, #16]
 800ce78:	eba0 000a 	sub.w	r0, r0, sl
 800ce7c:	2240      	movs	r2, #64	@ 0x40
 800ce7e:	4082      	lsls	r2, r0
 800ce80:	4313      	orrs	r3, r2
 800ce82:	3401      	adds	r4, #1
 800ce84:	9304      	str	r3, [sp, #16]
 800ce86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce8a:	4829      	ldr	r0, [pc, #164]	@ (800cf30 <_vfiprintf_r+0x220>)
 800ce8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce90:	2206      	movs	r2, #6
 800ce92:	f7f3 f9cd 	bl	8000230 <memchr>
 800ce96:	2800      	cmp	r0, #0
 800ce98:	d03f      	beq.n	800cf1a <_vfiprintf_r+0x20a>
 800ce9a:	4b26      	ldr	r3, [pc, #152]	@ (800cf34 <_vfiprintf_r+0x224>)
 800ce9c:	bb1b      	cbnz	r3, 800cee6 <_vfiprintf_r+0x1d6>
 800ce9e:	9b03      	ldr	r3, [sp, #12]
 800cea0:	3307      	adds	r3, #7
 800cea2:	f023 0307 	bic.w	r3, r3, #7
 800cea6:	3308      	adds	r3, #8
 800cea8:	9303      	str	r3, [sp, #12]
 800ceaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceac:	443b      	add	r3, r7
 800ceae:	9309      	str	r3, [sp, #36]	@ 0x24
 800ceb0:	e76a      	b.n	800cd88 <_vfiprintf_r+0x78>
 800ceb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800ceb6:	460c      	mov	r4, r1
 800ceb8:	2001      	movs	r0, #1
 800ceba:	e7a8      	b.n	800ce0e <_vfiprintf_r+0xfe>
 800cebc:	2300      	movs	r3, #0
 800cebe:	3401      	adds	r4, #1
 800cec0:	9305      	str	r3, [sp, #20]
 800cec2:	4619      	mov	r1, r3
 800cec4:	f04f 0c0a 	mov.w	ip, #10
 800cec8:	4620      	mov	r0, r4
 800ceca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cece:	3a30      	subs	r2, #48	@ 0x30
 800ced0:	2a09      	cmp	r2, #9
 800ced2:	d903      	bls.n	800cedc <_vfiprintf_r+0x1cc>
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d0c6      	beq.n	800ce66 <_vfiprintf_r+0x156>
 800ced8:	9105      	str	r1, [sp, #20]
 800ceda:	e7c4      	b.n	800ce66 <_vfiprintf_r+0x156>
 800cedc:	fb0c 2101 	mla	r1, ip, r1, r2
 800cee0:	4604      	mov	r4, r0
 800cee2:	2301      	movs	r3, #1
 800cee4:	e7f0      	b.n	800cec8 <_vfiprintf_r+0x1b8>
 800cee6:	ab03      	add	r3, sp, #12
 800cee8:	9300      	str	r3, [sp, #0]
 800ceea:	462a      	mov	r2, r5
 800ceec:	4b12      	ldr	r3, [pc, #72]	@ (800cf38 <_vfiprintf_r+0x228>)
 800ceee:	a904      	add	r1, sp, #16
 800cef0:	4630      	mov	r0, r6
 800cef2:	f7fc feed 	bl	8009cd0 <_printf_float>
 800cef6:	4607      	mov	r7, r0
 800cef8:	1c78      	adds	r0, r7, #1
 800cefa:	d1d6      	bne.n	800ceaa <_vfiprintf_r+0x19a>
 800cefc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cefe:	07d9      	lsls	r1, r3, #31
 800cf00:	d405      	bmi.n	800cf0e <_vfiprintf_r+0x1fe>
 800cf02:	89ab      	ldrh	r3, [r5, #12]
 800cf04:	059a      	lsls	r2, r3, #22
 800cf06:	d402      	bmi.n	800cf0e <_vfiprintf_r+0x1fe>
 800cf08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf0a:	f7fd fcbf 	bl	800a88c <__retarget_lock_release_recursive>
 800cf0e:	89ab      	ldrh	r3, [r5, #12]
 800cf10:	065b      	lsls	r3, r3, #25
 800cf12:	f53f af1f 	bmi.w	800cd54 <_vfiprintf_r+0x44>
 800cf16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf18:	e71e      	b.n	800cd58 <_vfiprintf_r+0x48>
 800cf1a:	ab03      	add	r3, sp, #12
 800cf1c:	9300      	str	r3, [sp, #0]
 800cf1e:	462a      	mov	r2, r5
 800cf20:	4b05      	ldr	r3, [pc, #20]	@ (800cf38 <_vfiprintf_r+0x228>)
 800cf22:	a904      	add	r1, sp, #16
 800cf24:	4630      	mov	r0, r6
 800cf26:	f7fd f96b 	bl	800a200 <_printf_i>
 800cf2a:	e7e4      	b.n	800cef6 <_vfiprintf_r+0x1e6>
 800cf2c:	0800da20 	.word	0x0800da20
 800cf30:	0800da2a 	.word	0x0800da2a
 800cf34:	08009cd1 	.word	0x08009cd1
 800cf38:	0800cced 	.word	0x0800cced
 800cf3c:	0800da26 	.word	0x0800da26

0800cf40 <__swbuf_r>:
 800cf40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf42:	460e      	mov	r6, r1
 800cf44:	4614      	mov	r4, r2
 800cf46:	4605      	mov	r5, r0
 800cf48:	b118      	cbz	r0, 800cf52 <__swbuf_r+0x12>
 800cf4a:	6a03      	ldr	r3, [r0, #32]
 800cf4c:	b90b      	cbnz	r3, 800cf52 <__swbuf_r+0x12>
 800cf4e:	f7fd fb03 	bl	800a558 <__sinit>
 800cf52:	69a3      	ldr	r3, [r4, #24]
 800cf54:	60a3      	str	r3, [r4, #8]
 800cf56:	89a3      	ldrh	r3, [r4, #12]
 800cf58:	071a      	lsls	r2, r3, #28
 800cf5a:	d501      	bpl.n	800cf60 <__swbuf_r+0x20>
 800cf5c:	6923      	ldr	r3, [r4, #16]
 800cf5e:	b943      	cbnz	r3, 800cf72 <__swbuf_r+0x32>
 800cf60:	4621      	mov	r1, r4
 800cf62:	4628      	mov	r0, r5
 800cf64:	f000 f82a 	bl	800cfbc <__swsetup_r>
 800cf68:	b118      	cbz	r0, 800cf72 <__swbuf_r+0x32>
 800cf6a:	f04f 37ff 	mov.w	r7, #4294967295
 800cf6e:	4638      	mov	r0, r7
 800cf70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf72:	6823      	ldr	r3, [r4, #0]
 800cf74:	6922      	ldr	r2, [r4, #16]
 800cf76:	1a98      	subs	r0, r3, r2
 800cf78:	6963      	ldr	r3, [r4, #20]
 800cf7a:	b2f6      	uxtb	r6, r6
 800cf7c:	4283      	cmp	r3, r0
 800cf7e:	4637      	mov	r7, r6
 800cf80:	dc05      	bgt.n	800cf8e <__swbuf_r+0x4e>
 800cf82:	4621      	mov	r1, r4
 800cf84:	4628      	mov	r0, r5
 800cf86:	f7ff fded 	bl	800cb64 <_fflush_r>
 800cf8a:	2800      	cmp	r0, #0
 800cf8c:	d1ed      	bne.n	800cf6a <__swbuf_r+0x2a>
 800cf8e:	68a3      	ldr	r3, [r4, #8]
 800cf90:	3b01      	subs	r3, #1
 800cf92:	60a3      	str	r3, [r4, #8]
 800cf94:	6823      	ldr	r3, [r4, #0]
 800cf96:	1c5a      	adds	r2, r3, #1
 800cf98:	6022      	str	r2, [r4, #0]
 800cf9a:	701e      	strb	r6, [r3, #0]
 800cf9c:	6962      	ldr	r2, [r4, #20]
 800cf9e:	1c43      	adds	r3, r0, #1
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d004      	beq.n	800cfae <__swbuf_r+0x6e>
 800cfa4:	89a3      	ldrh	r3, [r4, #12]
 800cfa6:	07db      	lsls	r3, r3, #31
 800cfa8:	d5e1      	bpl.n	800cf6e <__swbuf_r+0x2e>
 800cfaa:	2e0a      	cmp	r6, #10
 800cfac:	d1df      	bne.n	800cf6e <__swbuf_r+0x2e>
 800cfae:	4621      	mov	r1, r4
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	f7ff fdd7 	bl	800cb64 <_fflush_r>
 800cfb6:	2800      	cmp	r0, #0
 800cfb8:	d0d9      	beq.n	800cf6e <__swbuf_r+0x2e>
 800cfba:	e7d6      	b.n	800cf6a <__swbuf_r+0x2a>

0800cfbc <__swsetup_r>:
 800cfbc:	b538      	push	{r3, r4, r5, lr}
 800cfbe:	4b29      	ldr	r3, [pc, #164]	@ (800d064 <__swsetup_r+0xa8>)
 800cfc0:	4605      	mov	r5, r0
 800cfc2:	6818      	ldr	r0, [r3, #0]
 800cfc4:	460c      	mov	r4, r1
 800cfc6:	b118      	cbz	r0, 800cfd0 <__swsetup_r+0x14>
 800cfc8:	6a03      	ldr	r3, [r0, #32]
 800cfca:	b90b      	cbnz	r3, 800cfd0 <__swsetup_r+0x14>
 800cfcc:	f7fd fac4 	bl	800a558 <__sinit>
 800cfd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfd4:	0719      	lsls	r1, r3, #28
 800cfd6:	d422      	bmi.n	800d01e <__swsetup_r+0x62>
 800cfd8:	06da      	lsls	r2, r3, #27
 800cfda:	d407      	bmi.n	800cfec <__swsetup_r+0x30>
 800cfdc:	2209      	movs	r2, #9
 800cfde:	602a      	str	r2, [r5, #0]
 800cfe0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfe4:	81a3      	strh	r3, [r4, #12]
 800cfe6:	f04f 30ff 	mov.w	r0, #4294967295
 800cfea:	e033      	b.n	800d054 <__swsetup_r+0x98>
 800cfec:	0758      	lsls	r0, r3, #29
 800cfee:	d512      	bpl.n	800d016 <__swsetup_r+0x5a>
 800cff0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cff2:	b141      	cbz	r1, 800d006 <__swsetup_r+0x4a>
 800cff4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cff8:	4299      	cmp	r1, r3
 800cffa:	d002      	beq.n	800d002 <__swsetup_r+0x46>
 800cffc:	4628      	mov	r0, r5
 800cffe:	f7fe facb 	bl	800b598 <_free_r>
 800d002:	2300      	movs	r3, #0
 800d004:	6363      	str	r3, [r4, #52]	@ 0x34
 800d006:	89a3      	ldrh	r3, [r4, #12]
 800d008:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d00c:	81a3      	strh	r3, [r4, #12]
 800d00e:	2300      	movs	r3, #0
 800d010:	6063      	str	r3, [r4, #4]
 800d012:	6923      	ldr	r3, [r4, #16]
 800d014:	6023      	str	r3, [r4, #0]
 800d016:	89a3      	ldrh	r3, [r4, #12]
 800d018:	f043 0308 	orr.w	r3, r3, #8
 800d01c:	81a3      	strh	r3, [r4, #12]
 800d01e:	6923      	ldr	r3, [r4, #16]
 800d020:	b94b      	cbnz	r3, 800d036 <__swsetup_r+0x7a>
 800d022:	89a3      	ldrh	r3, [r4, #12]
 800d024:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d02c:	d003      	beq.n	800d036 <__swsetup_r+0x7a>
 800d02e:	4621      	mov	r1, r4
 800d030:	4628      	mov	r0, r5
 800d032:	f000 f88b 	bl	800d14c <__smakebuf_r>
 800d036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d03a:	f013 0201 	ands.w	r2, r3, #1
 800d03e:	d00a      	beq.n	800d056 <__swsetup_r+0x9a>
 800d040:	2200      	movs	r2, #0
 800d042:	60a2      	str	r2, [r4, #8]
 800d044:	6962      	ldr	r2, [r4, #20]
 800d046:	4252      	negs	r2, r2
 800d048:	61a2      	str	r2, [r4, #24]
 800d04a:	6922      	ldr	r2, [r4, #16]
 800d04c:	b942      	cbnz	r2, 800d060 <__swsetup_r+0xa4>
 800d04e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d052:	d1c5      	bne.n	800cfe0 <__swsetup_r+0x24>
 800d054:	bd38      	pop	{r3, r4, r5, pc}
 800d056:	0799      	lsls	r1, r3, #30
 800d058:	bf58      	it	pl
 800d05a:	6962      	ldrpl	r2, [r4, #20]
 800d05c:	60a2      	str	r2, [r4, #8]
 800d05e:	e7f4      	b.n	800d04a <__swsetup_r+0x8e>
 800d060:	2000      	movs	r0, #0
 800d062:	e7f7      	b.n	800d054 <__swsetup_r+0x98>
 800d064:	20000184 	.word	0x20000184

0800d068 <_raise_r>:
 800d068:	291f      	cmp	r1, #31
 800d06a:	b538      	push	{r3, r4, r5, lr}
 800d06c:	4605      	mov	r5, r0
 800d06e:	460c      	mov	r4, r1
 800d070:	d904      	bls.n	800d07c <_raise_r+0x14>
 800d072:	2316      	movs	r3, #22
 800d074:	6003      	str	r3, [r0, #0]
 800d076:	f04f 30ff 	mov.w	r0, #4294967295
 800d07a:	bd38      	pop	{r3, r4, r5, pc}
 800d07c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d07e:	b112      	cbz	r2, 800d086 <_raise_r+0x1e>
 800d080:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d084:	b94b      	cbnz	r3, 800d09a <_raise_r+0x32>
 800d086:	4628      	mov	r0, r5
 800d088:	f000 f830 	bl	800d0ec <_getpid_r>
 800d08c:	4622      	mov	r2, r4
 800d08e:	4601      	mov	r1, r0
 800d090:	4628      	mov	r0, r5
 800d092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d096:	f000 b817 	b.w	800d0c8 <_kill_r>
 800d09a:	2b01      	cmp	r3, #1
 800d09c:	d00a      	beq.n	800d0b4 <_raise_r+0x4c>
 800d09e:	1c59      	adds	r1, r3, #1
 800d0a0:	d103      	bne.n	800d0aa <_raise_r+0x42>
 800d0a2:	2316      	movs	r3, #22
 800d0a4:	6003      	str	r3, [r0, #0]
 800d0a6:	2001      	movs	r0, #1
 800d0a8:	e7e7      	b.n	800d07a <_raise_r+0x12>
 800d0aa:	2100      	movs	r1, #0
 800d0ac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d0b0:	4620      	mov	r0, r4
 800d0b2:	4798      	blx	r3
 800d0b4:	2000      	movs	r0, #0
 800d0b6:	e7e0      	b.n	800d07a <_raise_r+0x12>

0800d0b8 <raise>:
 800d0b8:	4b02      	ldr	r3, [pc, #8]	@ (800d0c4 <raise+0xc>)
 800d0ba:	4601      	mov	r1, r0
 800d0bc:	6818      	ldr	r0, [r3, #0]
 800d0be:	f7ff bfd3 	b.w	800d068 <_raise_r>
 800d0c2:	bf00      	nop
 800d0c4:	20000184 	.word	0x20000184

0800d0c8 <_kill_r>:
 800d0c8:	b538      	push	{r3, r4, r5, lr}
 800d0ca:	4d07      	ldr	r5, [pc, #28]	@ (800d0e8 <_kill_r+0x20>)
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	4604      	mov	r4, r0
 800d0d0:	4608      	mov	r0, r1
 800d0d2:	4611      	mov	r1, r2
 800d0d4:	602b      	str	r3, [r5, #0]
 800d0d6:	f7f6 ffa3 	bl	8004020 <_kill>
 800d0da:	1c43      	adds	r3, r0, #1
 800d0dc:	d102      	bne.n	800d0e4 <_kill_r+0x1c>
 800d0de:	682b      	ldr	r3, [r5, #0]
 800d0e0:	b103      	cbz	r3, 800d0e4 <_kill_r+0x1c>
 800d0e2:	6023      	str	r3, [r4, #0]
 800d0e4:	bd38      	pop	{r3, r4, r5, pc}
 800d0e6:	bf00      	nop
 800d0e8:	20000f2c 	.word	0x20000f2c

0800d0ec <_getpid_r>:
 800d0ec:	f7f6 bf90 	b.w	8004010 <_getpid>

0800d0f0 <_malloc_usable_size_r>:
 800d0f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0f4:	1f18      	subs	r0, r3, #4
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	bfbc      	itt	lt
 800d0fa:	580b      	ldrlt	r3, [r1, r0]
 800d0fc:	18c0      	addlt	r0, r0, r3
 800d0fe:	4770      	bx	lr

0800d100 <__swhatbuf_r>:
 800d100:	b570      	push	{r4, r5, r6, lr}
 800d102:	460c      	mov	r4, r1
 800d104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d108:	2900      	cmp	r1, #0
 800d10a:	b096      	sub	sp, #88	@ 0x58
 800d10c:	4615      	mov	r5, r2
 800d10e:	461e      	mov	r6, r3
 800d110:	da0d      	bge.n	800d12e <__swhatbuf_r+0x2e>
 800d112:	89a3      	ldrh	r3, [r4, #12]
 800d114:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d118:	f04f 0100 	mov.w	r1, #0
 800d11c:	bf14      	ite	ne
 800d11e:	2340      	movne	r3, #64	@ 0x40
 800d120:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d124:	2000      	movs	r0, #0
 800d126:	6031      	str	r1, [r6, #0]
 800d128:	602b      	str	r3, [r5, #0]
 800d12a:	b016      	add	sp, #88	@ 0x58
 800d12c:	bd70      	pop	{r4, r5, r6, pc}
 800d12e:	466a      	mov	r2, sp
 800d130:	f000 f848 	bl	800d1c4 <_fstat_r>
 800d134:	2800      	cmp	r0, #0
 800d136:	dbec      	blt.n	800d112 <__swhatbuf_r+0x12>
 800d138:	9901      	ldr	r1, [sp, #4]
 800d13a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d13e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d142:	4259      	negs	r1, r3
 800d144:	4159      	adcs	r1, r3
 800d146:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d14a:	e7eb      	b.n	800d124 <__swhatbuf_r+0x24>

0800d14c <__smakebuf_r>:
 800d14c:	898b      	ldrh	r3, [r1, #12]
 800d14e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d150:	079d      	lsls	r5, r3, #30
 800d152:	4606      	mov	r6, r0
 800d154:	460c      	mov	r4, r1
 800d156:	d507      	bpl.n	800d168 <__smakebuf_r+0x1c>
 800d158:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d15c:	6023      	str	r3, [r4, #0]
 800d15e:	6123      	str	r3, [r4, #16]
 800d160:	2301      	movs	r3, #1
 800d162:	6163      	str	r3, [r4, #20]
 800d164:	b003      	add	sp, #12
 800d166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d168:	ab01      	add	r3, sp, #4
 800d16a:	466a      	mov	r2, sp
 800d16c:	f7ff ffc8 	bl	800d100 <__swhatbuf_r>
 800d170:	9f00      	ldr	r7, [sp, #0]
 800d172:	4605      	mov	r5, r0
 800d174:	4639      	mov	r1, r7
 800d176:	4630      	mov	r0, r6
 800d178:	f7fe fdbc 	bl	800bcf4 <_malloc_r>
 800d17c:	b948      	cbnz	r0, 800d192 <__smakebuf_r+0x46>
 800d17e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d182:	059a      	lsls	r2, r3, #22
 800d184:	d4ee      	bmi.n	800d164 <__smakebuf_r+0x18>
 800d186:	f023 0303 	bic.w	r3, r3, #3
 800d18a:	f043 0302 	orr.w	r3, r3, #2
 800d18e:	81a3      	strh	r3, [r4, #12]
 800d190:	e7e2      	b.n	800d158 <__smakebuf_r+0xc>
 800d192:	89a3      	ldrh	r3, [r4, #12]
 800d194:	6020      	str	r0, [r4, #0]
 800d196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d19a:	81a3      	strh	r3, [r4, #12]
 800d19c:	9b01      	ldr	r3, [sp, #4]
 800d19e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d1a2:	b15b      	cbz	r3, 800d1bc <__smakebuf_r+0x70>
 800d1a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1a8:	4630      	mov	r0, r6
 800d1aa:	f000 f81d 	bl	800d1e8 <_isatty_r>
 800d1ae:	b128      	cbz	r0, 800d1bc <__smakebuf_r+0x70>
 800d1b0:	89a3      	ldrh	r3, [r4, #12]
 800d1b2:	f023 0303 	bic.w	r3, r3, #3
 800d1b6:	f043 0301 	orr.w	r3, r3, #1
 800d1ba:	81a3      	strh	r3, [r4, #12]
 800d1bc:	89a3      	ldrh	r3, [r4, #12]
 800d1be:	431d      	orrs	r5, r3
 800d1c0:	81a5      	strh	r5, [r4, #12]
 800d1c2:	e7cf      	b.n	800d164 <__smakebuf_r+0x18>

0800d1c4 <_fstat_r>:
 800d1c4:	b538      	push	{r3, r4, r5, lr}
 800d1c6:	4d07      	ldr	r5, [pc, #28]	@ (800d1e4 <_fstat_r+0x20>)
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	4604      	mov	r4, r0
 800d1cc:	4608      	mov	r0, r1
 800d1ce:	4611      	mov	r1, r2
 800d1d0:	602b      	str	r3, [r5, #0]
 800d1d2:	f7f6 ff85 	bl	80040e0 <_fstat>
 800d1d6:	1c43      	adds	r3, r0, #1
 800d1d8:	d102      	bne.n	800d1e0 <_fstat_r+0x1c>
 800d1da:	682b      	ldr	r3, [r5, #0]
 800d1dc:	b103      	cbz	r3, 800d1e0 <_fstat_r+0x1c>
 800d1de:	6023      	str	r3, [r4, #0]
 800d1e0:	bd38      	pop	{r3, r4, r5, pc}
 800d1e2:	bf00      	nop
 800d1e4:	20000f2c 	.word	0x20000f2c

0800d1e8 <_isatty_r>:
 800d1e8:	b538      	push	{r3, r4, r5, lr}
 800d1ea:	4d06      	ldr	r5, [pc, #24]	@ (800d204 <_isatty_r+0x1c>)
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	4604      	mov	r4, r0
 800d1f0:	4608      	mov	r0, r1
 800d1f2:	602b      	str	r3, [r5, #0]
 800d1f4:	f7f6 ff84 	bl	8004100 <_isatty>
 800d1f8:	1c43      	adds	r3, r0, #1
 800d1fa:	d102      	bne.n	800d202 <_isatty_r+0x1a>
 800d1fc:	682b      	ldr	r3, [r5, #0]
 800d1fe:	b103      	cbz	r3, 800d202 <_isatty_r+0x1a>
 800d200:	6023      	str	r3, [r4, #0]
 800d202:	bd38      	pop	{r3, r4, r5, pc}
 800d204:	20000f2c 	.word	0x20000f2c

0800d208 <sqrt>:
 800d208:	b538      	push	{r3, r4, r5, lr}
 800d20a:	ed2d 8b02 	vpush	{d8}
 800d20e:	ec55 4b10 	vmov	r4, r5, d0
 800d212:	f000 f879 	bl	800d308 <__ieee754_sqrt>
 800d216:	4622      	mov	r2, r4
 800d218:	462b      	mov	r3, r5
 800d21a:	4620      	mov	r0, r4
 800d21c:	4629      	mov	r1, r5
 800d21e:	eeb0 8a40 	vmov.f32	s16, s0
 800d222:	eef0 8a60 	vmov.f32	s17, s1
 800d226:	f7f3 fcb1 	bl	8000b8c <__aeabi_dcmpun>
 800d22a:	b990      	cbnz	r0, 800d252 <sqrt+0x4a>
 800d22c:	2200      	movs	r2, #0
 800d22e:	2300      	movs	r3, #0
 800d230:	4620      	mov	r0, r4
 800d232:	4629      	mov	r1, r5
 800d234:	f7f3 fc82 	bl	8000b3c <__aeabi_dcmplt>
 800d238:	b158      	cbz	r0, 800d252 <sqrt+0x4a>
 800d23a:	f7fd fafb 	bl	800a834 <__errno>
 800d23e:	2321      	movs	r3, #33	@ 0x21
 800d240:	6003      	str	r3, [r0, #0]
 800d242:	2200      	movs	r2, #0
 800d244:	2300      	movs	r3, #0
 800d246:	4610      	mov	r0, r2
 800d248:	4619      	mov	r1, r3
 800d24a:	f7f3 fb2f 	bl	80008ac <__aeabi_ddiv>
 800d24e:	ec41 0b18 	vmov	d8, r0, r1
 800d252:	eeb0 0a48 	vmov.f32	s0, s16
 800d256:	eef0 0a68 	vmov.f32	s1, s17
 800d25a:	ecbd 8b02 	vpop	{d8}
 800d25e:	bd38      	pop	{r3, r4, r5, pc}

0800d260 <fmax>:
 800d260:	b508      	push	{r3, lr}
 800d262:	ed2d 8b04 	vpush	{d8-d9}
 800d266:	eeb0 8a40 	vmov.f32	s16, s0
 800d26a:	eef0 8a60 	vmov.f32	s17, s1
 800d26e:	eeb0 9a41 	vmov.f32	s18, s2
 800d272:	eef0 9a61 	vmov.f32	s19, s3
 800d276:	f000 f81d 	bl	800d2b4 <__fpclassifyd>
 800d27a:	b950      	cbnz	r0, 800d292 <fmax+0x32>
 800d27c:	eeb0 8a49 	vmov.f32	s16, s18
 800d280:	eef0 8a69 	vmov.f32	s17, s19
 800d284:	eeb0 0a48 	vmov.f32	s0, s16
 800d288:	eef0 0a68 	vmov.f32	s1, s17
 800d28c:	ecbd 8b04 	vpop	{d8-d9}
 800d290:	bd08      	pop	{r3, pc}
 800d292:	eeb0 0a49 	vmov.f32	s0, s18
 800d296:	eef0 0a69 	vmov.f32	s1, s19
 800d29a:	f000 f80b 	bl	800d2b4 <__fpclassifyd>
 800d29e:	2800      	cmp	r0, #0
 800d2a0:	d0f0      	beq.n	800d284 <fmax+0x24>
 800d2a2:	ec53 2b19 	vmov	r2, r3, d9
 800d2a6:	ec51 0b18 	vmov	r0, r1, d8
 800d2aa:	f7f3 fc65 	bl	8000b78 <__aeabi_dcmpgt>
 800d2ae:	2800      	cmp	r0, #0
 800d2b0:	d0e4      	beq.n	800d27c <fmax+0x1c>
 800d2b2:	e7e7      	b.n	800d284 <fmax+0x24>

0800d2b4 <__fpclassifyd>:
 800d2b4:	ec51 0b10 	vmov	r0, r1, d0
 800d2b8:	b510      	push	{r4, lr}
 800d2ba:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800d2be:	460b      	mov	r3, r1
 800d2c0:	d019      	beq.n	800d2f6 <__fpclassifyd+0x42>
 800d2c2:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800d2c6:	490e      	ldr	r1, [pc, #56]	@ (800d300 <__fpclassifyd+0x4c>)
 800d2c8:	428a      	cmp	r2, r1
 800d2ca:	d90e      	bls.n	800d2ea <__fpclassifyd+0x36>
 800d2cc:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800d2d0:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 800d2d4:	428a      	cmp	r2, r1
 800d2d6:	d908      	bls.n	800d2ea <__fpclassifyd+0x36>
 800d2d8:	4a0a      	ldr	r2, [pc, #40]	@ (800d304 <__fpclassifyd+0x50>)
 800d2da:	4213      	tst	r3, r2
 800d2dc:	d007      	beq.n	800d2ee <__fpclassifyd+0x3a>
 800d2de:	4294      	cmp	r4, r2
 800d2e0:	d107      	bne.n	800d2f2 <__fpclassifyd+0x3e>
 800d2e2:	fab0 f080 	clz	r0, r0
 800d2e6:	0940      	lsrs	r0, r0, #5
 800d2e8:	bd10      	pop	{r4, pc}
 800d2ea:	2004      	movs	r0, #4
 800d2ec:	e7fc      	b.n	800d2e8 <__fpclassifyd+0x34>
 800d2ee:	2003      	movs	r0, #3
 800d2f0:	e7fa      	b.n	800d2e8 <__fpclassifyd+0x34>
 800d2f2:	2000      	movs	r0, #0
 800d2f4:	e7f8      	b.n	800d2e8 <__fpclassifyd+0x34>
 800d2f6:	2800      	cmp	r0, #0
 800d2f8:	d1ee      	bne.n	800d2d8 <__fpclassifyd+0x24>
 800d2fa:	2002      	movs	r0, #2
 800d2fc:	e7f4      	b.n	800d2e8 <__fpclassifyd+0x34>
 800d2fe:	bf00      	nop
 800d300:	7fdfffff 	.word	0x7fdfffff
 800d304:	7ff00000 	.word	0x7ff00000

0800d308 <__ieee754_sqrt>:
 800d308:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d30c:	4a68      	ldr	r2, [pc, #416]	@ (800d4b0 <__ieee754_sqrt+0x1a8>)
 800d30e:	ec55 4b10 	vmov	r4, r5, d0
 800d312:	43aa      	bics	r2, r5
 800d314:	462b      	mov	r3, r5
 800d316:	4621      	mov	r1, r4
 800d318:	d110      	bne.n	800d33c <__ieee754_sqrt+0x34>
 800d31a:	4622      	mov	r2, r4
 800d31c:	4620      	mov	r0, r4
 800d31e:	4629      	mov	r1, r5
 800d320:	f7f3 f99a 	bl	8000658 <__aeabi_dmul>
 800d324:	4602      	mov	r2, r0
 800d326:	460b      	mov	r3, r1
 800d328:	4620      	mov	r0, r4
 800d32a:	4629      	mov	r1, r5
 800d32c:	f7f2 ffde 	bl	80002ec <__adddf3>
 800d330:	4604      	mov	r4, r0
 800d332:	460d      	mov	r5, r1
 800d334:	ec45 4b10 	vmov	d0, r4, r5
 800d338:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d33c:	2d00      	cmp	r5, #0
 800d33e:	dc0e      	bgt.n	800d35e <__ieee754_sqrt+0x56>
 800d340:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d344:	4322      	orrs	r2, r4
 800d346:	d0f5      	beq.n	800d334 <__ieee754_sqrt+0x2c>
 800d348:	b19d      	cbz	r5, 800d372 <__ieee754_sqrt+0x6a>
 800d34a:	4622      	mov	r2, r4
 800d34c:	4620      	mov	r0, r4
 800d34e:	4629      	mov	r1, r5
 800d350:	f7f2 ffca 	bl	80002e8 <__aeabi_dsub>
 800d354:	4602      	mov	r2, r0
 800d356:	460b      	mov	r3, r1
 800d358:	f7f3 faa8 	bl	80008ac <__aeabi_ddiv>
 800d35c:	e7e8      	b.n	800d330 <__ieee754_sqrt+0x28>
 800d35e:	152a      	asrs	r2, r5, #20
 800d360:	d115      	bne.n	800d38e <__ieee754_sqrt+0x86>
 800d362:	2000      	movs	r0, #0
 800d364:	e009      	b.n	800d37a <__ieee754_sqrt+0x72>
 800d366:	0acb      	lsrs	r3, r1, #11
 800d368:	3a15      	subs	r2, #21
 800d36a:	0549      	lsls	r1, r1, #21
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d0fa      	beq.n	800d366 <__ieee754_sqrt+0x5e>
 800d370:	e7f7      	b.n	800d362 <__ieee754_sqrt+0x5a>
 800d372:	462a      	mov	r2, r5
 800d374:	e7fa      	b.n	800d36c <__ieee754_sqrt+0x64>
 800d376:	005b      	lsls	r3, r3, #1
 800d378:	3001      	adds	r0, #1
 800d37a:	02dc      	lsls	r4, r3, #11
 800d37c:	d5fb      	bpl.n	800d376 <__ieee754_sqrt+0x6e>
 800d37e:	1e44      	subs	r4, r0, #1
 800d380:	1b12      	subs	r2, r2, r4
 800d382:	f1c0 0420 	rsb	r4, r0, #32
 800d386:	fa21 f404 	lsr.w	r4, r1, r4
 800d38a:	4323      	orrs	r3, r4
 800d38c:	4081      	lsls	r1, r0
 800d38e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d392:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d396:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d39a:	07d2      	lsls	r2, r2, #31
 800d39c:	bf5c      	itt	pl
 800d39e:	005b      	lslpl	r3, r3, #1
 800d3a0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d3a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d3a8:	bf58      	it	pl
 800d3aa:	0049      	lslpl	r1, r1, #1
 800d3ac:	2600      	movs	r6, #0
 800d3ae:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d3b2:	106d      	asrs	r5, r5, #1
 800d3b4:	0049      	lsls	r1, r1, #1
 800d3b6:	2016      	movs	r0, #22
 800d3b8:	4632      	mov	r2, r6
 800d3ba:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d3be:	1917      	adds	r7, r2, r4
 800d3c0:	429f      	cmp	r7, r3
 800d3c2:	bfde      	ittt	le
 800d3c4:	193a      	addle	r2, r7, r4
 800d3c6:	1bdb      	suble	r3, r3, r7
 800d3c8:	1936      	addle	r6, r6, r4
 800d3ca:	0fcf      	lsrs	r7, r1, #31
 800d3cc:	3801      	subs	r0, #1
 800d3ce:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d3d2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d3d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d3da:	d1f0      	bne.n	800d3be <__ieee754_sqrt+0xb6>
 800d3dc:	4604      	mov	r4, r0
 800d3de:	2720      	movs	r7, #32
 800d3e0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	eb00 0e0c 	add.w	lr, r0, ip
 800d3ea:	db02      	blt.n	800d3f2 <__ieee754_sqrt+0xea>
 800d3ec:	d113      	bne.n	800d416 <__ieee754_sqrt+0x10e>
 800d3ee:	458e      	cmp	lr, r1
 800d3f0:	d811      	bhi.n	800d416 <__ieee754_sqrt+0x10e>
 800d3f2:	f1be 0f00 	cmp.w	lr, #0
 800d3f6:	eb0e 000c 	add.w	r0, lr, ip
 800d3fa:	da42      	bge.n	800d482 <__ieee754_sqrt+0x17a>
 800d3fc:	2800      	cmp	r0, #0
 800d3fe:	db40      	blt.n	800d482 <__ieee754_sqrt+0x17a>
 800d400:	f102 0801 	add.w	r8, r2, #1
 800d404:	1a9b      	subs	r3, r3, r2
 800d406:	458e      	cmp	lr, r1
 800d408:	bf88      	it	hi
 800d40a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d40e:	eba1 010e 	sub.w	r1, r1, lr
 800d412:	4464      	add	r4, ip
 800d414:	4642      	mov	r2, r8
 800d416:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d41a:	3f01      	subs	r7, #1
 800d41c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d420:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d424:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d428:	d1dc      	bne.n	800d3e4 <__ieee754_sqrt+0xdc>
 800d42a:	4319      	orrs	r1, r3
 800d42c:	d01b      	beq.n	800d466 <__ieee754_sqrt+0x15e>
 800d42e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800d4b4 <__ieee754_sqrt+0x1ac>
 800d432:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800d4b8 <__ieee754_sqrt+0x1b0>
 800d436:	e9da 0100 	ldrd	r0, r1, [sl]
 800d43a:	e9db 2300 	ldrd	r2, r3, [fp]
 800d43e:	f7f2 ff53 	bl	80002e8 <__aeabi_dsub>
 800d442:	e9da 8900 	ldrd	r8, r9, [sl]
 800d446:	4602      	mov	r2, r0
 800d448:	460b      	mov	r3, r1
 800d44a:	4640      	mov	r0, r8
 800d44c:	4649      	mov	r1, r9
 800d44e:	f7f3 fb7f 	bl	8000b50 <__aeabi_dcmple>
 800d452:	b140      	cbz	r0, 800d466 <__ieee754_sqrt+0x15e>
 800d454:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d458:	e9da 0100 	ldrd	r0, r1, [sl]
 800d45c:	e9db 2300 	ldrd	r2, r3, [fp]
 800d460:	d111      	bne.n	800d486 <__ieee754_sqrt+0x17e>
 800d462:	3601      	adds	r6, #1
 800d464:	463c      	mov	r4, r7
 800d466:	1072      	asrs	r2, r6, #1
 800d468:	0863      	lsrs	r3, r4, #1
 800d46a:	07f1      	lsls	r1, r6, #31
 800d46c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d470:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d474:	bf48      	it	mi
 800d476:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d47a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800d47e:	4618      	mov	r0, r3
 800d480:	e756      	b.n	800d330 <__ieee754_sqrt+0x28>
 800d482:	4690      	mov	r8, r2
 800d484:	e7be      	b.n	800d404 <__ieee754_sqrt+0xfc>
 800d486:	f7f2 ff31 	bl	80002ec <__adddf3>
 800d48a:	e9da 8900 	ldrd	r8, r9, [sl]
 800d48e:	4602      	mov	r2, r0
 800d490:	460b      	mov	r3, r1
 800d492:	4640      	mov	r0, r8
 800d494:	4649      	mov	r1, r9
 800d496:	f7f3 fb51 	bl	8000b3c <__aeabi_dcmplt>
 800d49a:	b120      	cbz	r0, 800d4a6 <__ieee754_sqrt+0x19e>
 800d49c:	1ca0      	adds	r0, r4, #2
 800d49e:	bf08      	it	eq
 800d4a0:	3601      	addeq	r6, #1
 800d4a2:	3402      	adds	r4, #2
 800d4a4:	e7df      	b.n	800d466 <__ieee754_sqrt+0x15e>
 800d4a6:	1c63      	adds	r3, r4, #1
 800d4a8:	f023 0401 	bic.w	r4, r3, #1
 800d4ac:	e7db      	b.n	800d466 <__ieee754_sqrt+0x15e>
 800d4ae:	bf00      	nop
 800d4b0:	7ff00000 	.word	0x7ff00000
 800d4b4:	200001e0 	.word	0x200001e0
 800d4b8:	200001d8 	.word	0x200001d8

0800d4bc <roundf>:
 800d4bc:	ee10 0a10 	vmov	r0, s0
 800d4c0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800d4c4:	3a7f      	subs	r2, #127	@ 0x7f
 800d4c6:	2a16      	cmp	r2, #22
 800d4c8:	dc15      	bgt.n	800d4f6 <roundf+0x3a>
 800d4ca:	2a00      	cmp	r2, #0
 800d4cc:	da08      	bge.n	800d4e0 <roundf+0x24>
 800d4ce:	3201      	adds	r2, #1
 800d4d0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800d4d4:	d101      	bne.n	800d4da <roundf+0x1e>
 800d4d6:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800d4da:	ee00 3a10 	vmov	s0, r3
 800d4de:	4770      	bx	lr
 800d4e0:	4907      	ldr	r1, [pc, #28]	@ (800d500 <roundf+0x44>)
 800d4e2:	4111      	asrs	r1, r2
 800d4e4:	4201      	tst	r1, r0
 800d4e6:	d0fa      	beq.n	800d4de <roundf+0x22>
 800d4e8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d4ec:	4113      	asrs	r3, r2
 800d4ee:	4403      	add	r3, r0
 800d4f0:	ea23 0301 	bic.w	r3, r3, r1
 800d4f4:	e7f1      	b.n	800d4da <roundf+0x1e>
 800d4f6:	2a80      	cmp	r2, #128	@ 0x80
 800d4f8:	d1f1      	bne.n	800d4de <roundf+0x22>
 800d4fa:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d4fe:	4770      	bx	lr
 800d500:	007fffff 	.word	0x007fffff

0800d504 <_init>:
 800d504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d506:	bf00      	nop
 800d508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d50a:	bc08      	pop	{r3}
 800d50c:	469e      	mov	lr, r3
 800d50e:	4770      	bx	lr

0800d510 <_fini>:
 800d510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d512:	bf00      	nop
 800d514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d516:	bc08      	pop	{r3}
 800d518:	469e      	mov	lr, r3
 800d51a:	4770      	bx	lr
