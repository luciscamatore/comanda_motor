
comanda_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2e0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0800c4b0  0800c4b0  0000d4b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c96c  0800c96c  0000e208  2**0
                  CONTENTS
  4 .ARM          00000008  0800c96c  0800c96c  0000d96c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c974  0800c974  0000e208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c974  0800c974  0000d974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c978  0800c978  0000d978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800c97c  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c34  20000208  0800cb84  0000e208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000e3c  0800cb84  0000ee3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151cb  00000000  00000000  0000e238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d49  00000000  00000000  00023403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  00026150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fc1  00000000  00000000  00027568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021acd  00000000  00000000  00028529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a33  00000000  00000000  00049ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9e0d  00000000  00000000  00061a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b836  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b1c  00000000  00000000  0012b87c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00132398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000208 	.word	0x20000208
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c498 	.word	0x0800c498

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000020c 	.word	0x2000020c
 800020c:	0800c498 	.word	0x0800c498

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <rpm2pwm>:
			+ out_min;
}
int32_t percent2pwm(int x) {
	return (x - 0) * (65535 - 0) / (100 - 0) + 0;
}
int32_t rpm2pwm(int x) {
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	return (x - 0) * (65535 - 0) / (160 - 0) + 0;
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	4613      	mov	r3, r2
 8001030:	041b      	lsls	r3, r3, #16
 8001032:	1a9b      	subs	r3, r3, r2
 8001034:	4a05      	ldr	r2, [pc, #20]	@ (800104c <rpm2pwm+0x28>)
 8001036:	fb82 1203 	smull	r1, r2, r2, r3
 800103a:	1192      	asrs	r2, r2, #6
 800103c:	17db      	asrs	r3, r3, #31
 800103e:	1ad3      	subs	r3, r2, r3
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	66666667 	.word	0x66666667

08001050 <rad2rpm>:
double rad2deg(double rad) {
	return (rad * (180.0 / M_PI)) - ((int) (rad * (180.0 / M_PI) / 360) * 360);
}
float rad2rpm(float rad) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	ed87 0a01 	vstr	s0, [r7, #4]
    return roundf((rad * 60) / (2 * M_PI));
 800105a:	edd7 7a01 	vldr	s15, [r7, #4]
 800105e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80010a8 <rad2rpm+0x58>
 8001062:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001066:	ee17 0a90 	vmov	r0, s15
 800106a:	f7ff fa8d 	bl	8000588 <__aeabi_f2d>
 800106e:	a30c      	add	r3, pc, #48	@ (adr r3, 80010a0 <rad2rpm+0x50>)
 8001070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001074:	f7ff fc0a 	bl	800088c <__aeabi_ddiv>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fdd2 	bl	8000c28 <__aeabi_d2f>
 8001084:	4603      	mov	r3, r0
 8001086:	ee00 3a10 	vmov	s0, r3
 800108a:	f00b f9e1 	bl	800c450 <roundf>
 800108e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001092:	eeb0 0a67 	vmov.f32	s0, s15
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	f3af 8000 	nop.w
 80010a0:	54442d18 	.word	0x54442d18
 80010a4:	401921fb 	.word	0x401921fb
 80010a8:	42700000 	.word	0x42700000

080010ac <MOTOR_Init>:
	int32_t position, old_position;
	int speed;
	float speed_rpm, speed_rad;
}MOTOR;

void MOTOR_Init(MOTOR *motor){
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	motor->position = 0;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
	motor->old_position = 0;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	605a      	str	r2, [r3, #4]
	motor->speed = 0;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
	motor->speed_rpm = 0;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
	motor->speed_rad = 0;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <Controller_Init>:
//CONTROLLER STRUCT
typedef struct{
	int w, y, x;
}Controller;

void Controller_Init(Controller *ps4){
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
	ps4->w = 0;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
	ps4->y = 0;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	605a      	str	r2, [r3, #4]
	ps4->x = 0;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <Wheels__Init>:

typedef struct{
	double fdr, fst, sdr, sst, max_speed, scale_factor;
}WHEELS;

void Wheels__Init(WHEELS *wheels) {
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	wheels->fdr = 0;
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	f04f 0300 	mov.w	r3, #0
 800111a:	e9c1 2300 	strd	r2, r3, [r1]
	wheels->fst = 0;
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	e9c1 2302 	strd	r2, r3, [r1, #8]
	wheels->sdr = 0;
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	f04f 0300 	mov.w	r3, #0
 8001136:	e9c1 2304 	strd	r2, r3, [r1, #16]
	wheels->sst = 0;
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	f04f 0300 	mov.w	r3, #0
 8001144:	e9c1 2306 	strd	r2, r3, [r1, #24]
	wheels->max_speed = 0;
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	e9c1 2308 	strd	r2, r3, [r1, #32]
	wheels->scale_factor = 0;
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
};
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <HAL_TIM_PeriodElapsedCallback>:
	tx_buffer[MAX_BUFFER_SIZE - 1] = '\0';
}

int small_counter = 0, big_counter = 0;
MOTOR fdr, fst, sdr, sst;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	if (htim == &htim9) {
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a89      	ldr	r2, [pc, #548]	@ (80013a0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800117c:	4293      	cmp	r3, r2
 800117e:	f040 8105 	bne.w	800138c <HAL_TIM_PeriodElapsedCallback+0x21c>
		//fdr
		fdr.position = __HAL_TIM_GET_COUNTER(&htim1);
 8001182:	4b88      	ldr	r3, [pc, #544]	@ (80013a4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001188:	461a      	mov	r2, r3
 800118a:	4b87      	ldr	r3, [pc, #540]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800118c:	601a      	str	r2, [r3, #0]
		fdr.speed = fdr.position - fdr.old_position;
 800118e:	4b86      	ldr	r3, [pc, #536]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	4b85      	ldr	r3, [pc, #532]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	4a83      	ldr	r2, [pc, #524]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800119a:	6093      	str	r3, [r2, #8]
		fdr.speed_rpm = (fdr.speed * 60) / TICKS_PER_REVOLUTION;
 800119c:	4b82      	ldr	r3, [pc, #520]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	4613      	mov	r3, r2
 80011a2:	011b      	lsls	r3, r3, #4
 80011a4:	1a9b      	subs	r3, r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4a80      	ldr	r2, [pc, #512]	@ (80013ac <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80011aa:	fb82 1203 	smull	r1, r2, r2, r3
 80011ae:	441a      	add	r2, r3
 80011b0:	1292      	asrs	r2, r2, #10
 80011b2:	17db      	asrs	r3, r3, #31
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	ee07 3a90 	vmov	s15, r3
 80011ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011be:	4b7a      	ldr	r3, [pc, #488]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80011c0:	edc3 7a03 	vstr	s15, [r3, #12]
		fdr.speed_rad = (fdr.speed_rpm / 60) * 2 * M_PI;
 80011c4:	4b78      	ldr	r3, [pc, #480]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80011c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80011ca:	eddf 6a79 	vldr	s13, [pc, #484]	@ 80013b0 <HAL_TIM_PeriodElapsedCallback+0x240>
 80011ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011d6:	ee17 0a90 	vmov	r0, s15
 80011da:	f7ff f9d5 	bl	8000588 <__aeabi_f2d>
 80011de:	a36e      	add	r3, pc, #440	@ (adr r3, 8001398 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	f7ff fa28 	bl	8000638 <__aeabi_dmul>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fd1a 	bl	8000c28 <__aeabi_d2f>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a6c      	ldr	r2, [pc, #432]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80011f8:	6113      	str	r3, [r2, #16]
		fdr.old_position = fdr.position;
 80011fa:	4b6b      	ldr	r3, [pc, #428]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a6a      	ldr	r2, [pc, #424]	@ (80013a8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001200:	6053      	str	r3, [r2, #4]

		//fst
		fst.position = __HAL_TIM_GET_COUNTER(&htim1);
 8001202:	4b68      	ldr	r3, [pc, #416]	@ (80013a4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001208:	461a      	mov	r2, r3
 800120a:	4b6a      	ldr	r3, [pc, #424]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800120c:	601a      	str	r2, [r3, #0]
		fst.speed = fst.position - fst.old_position;
 800120e:	4b69      	ldr	r3, [pc, #420]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4b68      	ldr	r3, [pc, #416]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	4a66      	ldr	r2, [pc, #408]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800121a:	6093      	str	r3, [r2, #8]
		fst.speed_rpm = (fst.speed * 60) / TICKS_PER_REVOLUTION;
 800121c:	4b65      	ldr	r3, [pc, #404]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	4613      	mov	r3, r2
 8001222:	011b      	lsls	r3, r3, #4
 8001224:	1a9b      	subs	r3, r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4a60      	ldr	r2, [pc, #384]	@ (80013ac <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800122a:	fb82 1203 	smull	r1, r2, r2, r3
 800122e:	441a      	add	r2, r3
 8001230:	1292      	asrs	r2, r2, #10
 8001232:	17db      	asrs	r3, r3, #31
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	ee07 3a90 	vmov	s15, r3
 800123a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123e:	4b5d      	ldr	r3, [pc, #372]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001240:	edc3 7a03 	vstr	s15, [r3, #12]
		fst.speed_rad = (fst.speed_rpm / 60) * 2 * M_PI;
 8001244:	4b5b      	ldr	r3, [pc, #364]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001246:	ed93 7a03 	vldr	s14, [r3, #12]
 800124a:	eddf 6a59 	vldr	s13, [pc, #356]	@ 80013b0 <HAL_TIM_PeriodElapsedCallback+0x240>
 800124e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001252:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001256:	ee17 0a90 	vmov	r0, s15
 800125a:	f7ff f995 	bl	8000588 <__aeabi_f2d>
 800125e:	a34e      	add	r3, pc, #312	@ (adr r3, 8001398 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001264:	f7ff f9e8 	bl	8000638 <__aeabi_dmul>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	f7ff fcda 	bl	8000c28 <__aeabi_d2f>
 8001274:	4603      	mov	r3, r0
 8001276:	4a4f      	ldr	r2, [pc, #316]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001278:	6113      	str	r3, [r2, #16]
		fst.old_position = fst.position;
 800127a:	4b4e      	ldr	r3, [pc, #312]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a4d      	ldr	r2, [pc, #308]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001280:	6053      	str	r3, [r2, #4]

		//sdr
		sdr.position = __HAL_TIM_GET_COUNTER(&htim1);
 8001282:	4b48      	ldr	r3, [pc, #288]	@ (80013a4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001288:	461a      	mov	r2, r3
 800128a:	4b4b      	ldr	r3, [pc, #300]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800128c:	601a      	str	r2, [r3, #0]
		sdr.speed = sdr.position - sdr.old_position;
 800128e:	4b4a      	ldr	r3, [pc, #296]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	4b49      	ldr	r3, [pc, #292]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	4a47      	ldr	r2, [pc, #284]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800129a:	6093      	str	r3, [r2, #8]
		sdr.speed_rpm = (sdr.speed * 60) / TICKS_PER_REVOLUTION;
 800129c:	4b46      	ldr	r3, [pc, #280]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	4613      	mov	r3, r2
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	1a9b      	subs	r3, r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4a40      	ldr	r2, [pc, #256]	@ (80013ac <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80012aa:	fb82 1203 	smull	r1, r2, r2, r3
 80012ae:	441a      	add	r2, r3
 80012b0:	1292      	asrs	r2, r2, #10
 80012b2:	17db      	asrs	r3, r3, #31
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	ee07 3a90 	vmov	s15, r3
 80012ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012be:	4b3e      	ldr	r3, [pc, #248]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80012c0:	edc3 7a03 	vstr	s15, [r3, #12]
		sdr.speed_rad = (sdr.speed_rpm / 60) * 2 * M_PI;
 80012c4:	4b3c      	ldr	r3, [pc, #240]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80012c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80012ca:	eddf 6a39 	vldr	s13, [pc, #228]	@ 80013b0 <HAL_TIM_PeriodElapsedCallback+0x240>
 80012ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012d6:	ee17 0a90 	vmov	r0, s15
 80012da:	f7ff f955 	bl	8000588 <__aeabi_f2d>
 80012de:	a32e      	add	r3, pc, #184	@ (adr r3, 8001398 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	f7ff f9a8 	bl	8000638 <__aeabi_dmul>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	f7ff fc9a 	bl	8000c28 <__aeabi_d2f>
 80012f4:	4603      	mov	r3, r0
 80012f6:	4a30      	ldr	r2, [pc, #192]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80012f8:	6113      	str	r3, [r2, #16]
		sdr.old_position = sdr.position;
 80012fa:	4b2f      	ldr	r3, [pc, #188]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a2e      	ldr	r2, [pc, #184]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001300:	6053      	str	r3, [r2, #4]

		//sst
		sst.position = __HAL_TIM_GET_COUNTER(&htim1);
 8001302:	4b28      	ldr	r3, [pc, #160]	@ (80013a4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001308:	461a      	mov	r2, r3
 800130a:	4b2c      	ldr	r3, [pc, #176]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800130c:	601a      	str	r2, [r3, #0]
		sst.speed = sst.position - sst.old_position;
 800130e:	4b2b      	ldr	r3, [pc, #172]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4b2a      	ldr	r3, [pc, #168]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	4a28      	ldr	r2, [pc, #160]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800131a:	6093      	str	r3, [r2, #8]
		sst.speed_rpm = (sst.speed * 60) / TICKS_PER_REVOLUTION;
 800131c:	4b27      	ldr	r3, [pc, #156]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	4613      	mov	r3, r2
 8001322:	011b      	lsls	r3, r3, #4
 8001324:	1a9b      	subs	r3, r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4a20      	ldr	r2, [pc, #128]	@ (80013ac <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800132a:	fb82 1203 	smull	r1, r2, r2, r3
 800132e:	441a      	add	r2, r3
 8001330:	1292      	asrs	r2, r2, #10
 8001332:	17db      	asrs	r3, r3, #31
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	ee07 3a90 	vmov	s15, r3
 800133a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800133e:	4b1f      	ldr	r3, [pc, #124]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001340:	edc3 7a03 	vstr	s15, [r3, #12]
		sst.speed_rad = (sst.speed_rpm / 60) * 2 * M_PI;
 8001344:	4b1d      	ldr	r3, [pc, #116]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001346:	ed93 7a03 	vldr	s14, [r3, #12]
 800134a:	eddf 6a19 	vldr	s13, [pc, #100]	@ 80013b0 <HAL_TIM_PeriodElapsedCallback+0x240>
 800134e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001352:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001356:	ee17 0a90 	vmov	r0, s15
 800135a:	f7ff f915 	bl	8000588 <__aeabi_f2d>
 800135e:	a30e      	add	r3, pc, #56	@ (adr r3, 8001398 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001364:	f7ff f968 	bl	8000638 <__aeabi_dmul>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fc5a 	bl	8000c28 <__aeabi_d2f>
 8001374:	4603      	mov	r3, r0
 8001376:	4a11      	ldr	r2, [pc, #68]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001378:	6113      	str	r3, [r2, #16]
		sst.old_position = sst.position;
 800137a:	4b10      	ldr	r3, [pc, #64]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a0f      	ldr	r2, [pc, #60]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001380:	6053      	str	r3, [r2, #4]
		small_counter++;
 8001382:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	4a0d      	ldr	r2, [pc, #52]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800138a:	6013      	str	r3, [r2, #0]
	if(htim == &htim12){
//		process_data();
//		HAL_UART_Transmit(&huart2, (uint8_t *) tx_buffer, 25, HAL_MAX_DELAY);
//		big_counter++;
	}
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	f3af 8000 	nop.w
 8001398:	54442d18 	.word	0x54442d18
 800139c:	400921fb 	.word	0x400921fb
 80013a0:	2000042c 	.word	0x2000042c
 80013a4:	2000027c 	.word	0x2000027c
 80013a8:	20000c54 	.word	0x20000c54
 80013ac:	ea0ea0eb 	.word	0xea0ea0eb
 80013b0:	42700000 	.word	0x42700000
 80013b4:	20000c68 	.word	0x20000c68
 80013b8:	20000c7c 	.word	0x20000c7c
 80013bc:	20000c90 	.word	0x20000c90
 80013c0:	20000c50 	.word	0x20000c50

080013c4 <HAL_UART_TxCpltCallback>:


int delay = 1000;
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
//		process_data();
//		HAL_UART_Transmit_DMA(&huart2, (uint8_t*) tx_buffer,25);
//		big_counter++;
//		HAL_Delay(delay);
//	}
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b091      	sub	sp, #68	@ 0x44
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) { //ESP32
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a5d      	ldr	r2, [pc, #372]	@ (8001558 <HAL_UART_RxCpltCallback+0x180>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d12c      	bne.n	8001442 <HAL_UART_RxCpltCallback+0x6a>
		HAL_UART_Receive_DMA(&huart2, controller_buffer, 15);
 80013e8:	220f      	movs	r2, #15
 80013ea:	495c      	ldr	r1, [pc, #368]	@ (800155c <HAL_UART_RxCpltCallback+0x184>)
 80013ec:	485a      	ldr	r0, [pc, #360]	@ (8001558 <HAL_UART_RxCpltCallback+0x180>)
 80013ee:	f005 fb39 	bl	8006a64 <HAL_UART_Receive_DMA>
		int joystick_values[3];
		int index = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		char *token;

		token = strtok((char*) controller_buffer, ",");
 80013f6:	495a      	ldr	r1, [pc, #360]	@ (8001560 <HAL_UART_RxCpltCallback+0x188>)
 80013f8:	4858      	ldr	r0, [pc, #352]	@ (800155c <HAL_UART_RxCpltCallback+0x184>)
 80013fa:	f008 fae5 	bl	80099c8 <strtok>
 80013fe:	63b8      	str	r0, [r7, #56]	@ 0x38
		while (token != NULL && index < 3) {
 8001400:	e010      	b.n	8001424 <HAL_UART_RxCpltCallback+0x4c>
			joystick_values[index++] = atoi(token);
 8001402:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 8001404:	1c63      	adds	r3, r4, #1
 8001406:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001408:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800140a:	f006 fece 	bl	80081aa <atoi>
 800140e:	4602      	mov	r2, r0
 8001410:	00a3      	lsls	r3, r4, #2
 8001412:	3340      	adds	r3, #64	@ 0x40
 8001414:	443b      	add	r3, r7
 8001416:	f843 2c1c 	str.w	r2, [r3, #-28]
			token = strtok(NULL, ",");
 800141a:	4951      	ldr	r1, [pc, #324]	@ (8001560 <HAL_UART_RxCpltCallback+0x188>)
 800141c:	2000      	movs	r0, #0
 800141e:	f008 fad3 	bl	80099c8 <strtok>
 8001422:	63b8      	str	r0, [r7, #56]	@ 0x38
		while (token != NULL && index < 3) {
 8001424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001426:	2b00      	cmp	r3, #0
 8001428:	d002      	beq.n	8001430 <HAL_UART_RxCpltCallback+0x58>
 800142a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800142c:	2b02      	cmp	r3, #2
 800142e:	dde8      	ble.n	8001402 <HAL_UART_RxCpltCallback+0x2a>
		}
		ps4.w = joystick_values[0]; //lx - w
 8001430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001432:	4a4c      	ldr	r2, [pc, #304]	@ (8001564 <HAL_UART_RxCpltCallback+0x18c>)
 8001434:	6013      	str	r3, [r2, #0]
		ps4.y = joystick_values[1]; //rx - y
 8001436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001438:	4a4a      	ldr	r2, [pc, #296]	@ (8001564 <HAL_UART_RxCpltCallback+0x18c>)
 800143a:	6053      	str	r3, [r2, #4]
		ps4.x = joystick_values[2]; //ry - x
 800143c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800143e:	4a49      	ldr	r2, [pc, #292]	@ (8001564 <HAL_UART_RxCpltCallback+0x18c>)
 8001440:	6093      	str	r3, [r2, #8]
	}
	if (huart == &huart6) { //BLUEPILL
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a48      	ldr	r2, [pc, #288]	@ (8001568 <HAL_UART_RxCpltCallback+0x190>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d179      	bne.n	800153e <HAL_UART_RxCpltCallback+0x166>
		HAL_UART_Receive_DMA(&huart6, odometry_buffer, 25);
 800144a:	2219      	movs	r2, #25
 800144c:	4947      	ldr	r1, [pc, #284]	@ (800156c <HAL_UART_RxCpltCallback+0x194>)
 800144e:	4846      	ldr	r0, [pc, #280]	@ (8001568 <HAL_UART_RxCpltCallback+0x190>)
 8001450:	f005 fb08 	bl	8006a64 <HAL_UART_Receive_DMA>
		double coordinates[3];
		int index = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	637b      	str	r3, [r7, #52]	@ 0x34
		char *token;

		token = strtok((char*) odometry_buffer, ",");
 8001458:	4941      	ldr	r1, [pc, #260]	@ (8001560 <HAL_UART_RxCpltCallback+0x188>)
 800145a:	4844      	ldr	r0, [pc, #272]	@ (800156c <HAL_UART_RxCpltCallback+0x194>)
 800145c:	f008 fab4 	bl	80099c8 <strtok>
 8001460:	6338      	str	r0, [r7, #48]	@ 0x30
		while (token != NULL && index < 3) {
 8001462:	e015      	b.n	8001490 <HAL_UART_RxCpltCallback+0xb8>
			coordinates[index++] = strtod(token, NULL);
 8001464:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8001466:	1c63      	adds	r3, r4, #1
 8001468:	637b      	str	r3, [r7, #52]	@ 0x34
 800146a:	2100      	movs	r1, #0
 800146c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800146e:	f007 fca3 	bl	8008db8 <strtod>
 8001472:	eeb0 7a40 	vmov.f32	s14, s0
 8001476:	eef0 7a60 	vmov.f32	s15, s1
 800147a:	00e3      	lsls	r3, r4, #3
 800147c:	3340      	adds	r3, #64	@ 0x40
 800147e:	443b      	add	r3, r7
 8001480:	3b38      	subs	r3, #56	@ 0x38
 8001482:	ed83 7b00 	vstr	d7, [r3]
			token = strtok(NULL, ",");
 8001486:	4936      	ldr	r1, [pc, #216]	@ (8001560 <HAL_UART_RxCpltCallback+0x188>)
 8001488:	2000      	movs	r0, #0
 800148a:	f008 fa9d 	bl	80099c8 <strtok>
 800148e:	6338      	str	r0, [r7, #48]	@ 0x30
		while (token != NULL && index < 3) {
 8001490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001492:	2b00      	cmp	r3, #0
 8001494:	d002      	beq.n	800149c <HAL_UART_RxCpltCallback+0xc4>
 8001496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001498:	2b02      	cmp	r3, #2
 800149a:	dde3      	ble.n	8001464 <HAL_UART_RxCpltCallback+0x8c>
		}
		current_x = (double) ((int) (coordinates[0] * 100)) / 100;
 800149c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	4b32      	ldr	r3, [pc, #200]	@ (8001570 <HAL_UART_RxCpltCallback+0x198>)
 80014a6:	f7ff f8c7 	bl	8000638 <__aeabi_dmul>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	f7ff fb71 	bl	8000b98 <__aeabi_d2iz>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f853 	bl	8000564 <__aeabi_i2d>
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001570 <HAL_UART_RxCpltCallback+0x198>)
 80014c4:	f7ff f9e2 	bl	800088c <__aeabi_ddiv>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4929      	ldr	r1, [pc, #164]	@ (8001574 <HAL_UART_RxCpltCallback+0x19c>)
 80014ce:	e9c1 2300 	strd	r2, r3, [r1]
		current_y = (double) ((int) (coordinates[1] * 100)) / 100;
 80014d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	4b25      	ldr	r3, [pc, #148]	@ (8001570 <HAL_UART_RxCpltCallback+0x198>)
 80014dc:	f7ff f8ac 	bl	8000638 <__aeabi_dmul>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff fb56 	bl	8000b98 <__aeabi_d2iz>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f838 	bl	8000564 <__aeabi_i2d>
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001570 <HAL_UART_RxCpltCallback+0x198>)
 80014fa:	f7ff f9c7 	bl	800088c <__aeabi_ddiv>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	491d      	ldr	r1, [pc, #116]	@ (8001578 <HAL_UART_RxCpltCallback+0x1a0>)
 8001504:	e9c1 2300 	strd	r2, r3, [r1]
		current_h = (double) ((int) (coordinates[2] * 100)) / 100;
 8001508:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	4b17      	ldr	r3, [pc, #92]	@ (8001570 <HAL_UART_RxCpltCallback+0x198>)
 8001512:	f7ff f891 	bl	8000638 <__aeabi_dmul>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f7ff fb3b 	bl	8000b98 <__aeabi_d2iz>
 8001522:	4603      	mov	r3, r0
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f81d 	bl	8000564 <__aeabi_i2d>
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <HAL_UART_RxCpltCallback+0x198>)
 8001530:	f7ff f9ac 	bl	800088c <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4910      	ldr	r1, [pc, #64]	@ (800157c <HAL_UART_RxCpltCallback+0x1a4>)
 800153a:	e9c1 2300 	strd	r2, r3, [r1]
//		process_data();
//		HAL_UART_Transmit(&huart2, (uint8_t*) tx_buffer,25, HAL_MAX_DELAY);
	}
	if (huart == &huart3) {
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a0f      	ldr	r2, [pc, #60]	@ (8001580 <HAL_UART_RxCpltCallback+0x1a8>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d104      	bne.n	8001550 <HAL_UART_RxCpltCallback+0x178>
		HAL_UART_Receive_DMA(&huart3, live_follower_buffer, 25);
 8001546:	2219      	movs	r2, #25
 8001548:	490e      	ldr	r1, [pc, #56]	@ (8001584 <HAL_UART_RxCpltCallback+0x1ac>)
 800154a:	480d      	ldr	r0, [pc, #52]	@ (8001580 <HAL_UART_RxCpltCallback+0x1a8>)
 800154c:	f005 fa8a 	bl	8006a64 <HAL_UART_Receive_DMA>
	}
}
 8001550:	bf00      	nop
 8001552:	3744      	adds	r7, #68	@ 0x44
 8001554:	46bd      	mov	sp, r7
 8001556:	bd90      	pop	{r4, r7, pc}
 8001558:	20000504 	.word	0x20000504
 800155c:	20000c08 	.word	0x20000c08
 8001560:	0800c4c4 	.word	0x0800c4c4
 8001564:	20000bfc 	.word	0x20000bfc
 8001568:	20000594 	.word	0x20000594
 800156c:	20000c18 	.word	0x20000c18
 8001570:	40590000 	.word	0x40590000
 8001574:	20000c38 	.word	0x20000c38
 8001578:	20000c40 	.word	0x20000c40
 800157c:	20000c48 	.word	0x20000c48
 8001580:	2000054c 	.word	0x2000054c
 8001584:	20000be0 	.word	0x20000be0

08001588 <fdr_set_pwm>:

//MOTORS MOVEMENT
void fdr_set_pwm(int32_t pwm_value) {
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	if (pwm_value > 0) {
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	dd06      	ble.n	80015a4 <fdr_set_pwm+0x1c>
		TIM4->CCR3 = 0; // L
 8001596:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <fdr_set_pwm+0x50>)
 8001598:	2200      	movs	r2, #0
 800159a:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM4->CCR4 = pwm_value; // R
 800159c:	4a0e      	ldr	r2, [pc, #56]	@ (80015d8 <fdr_set_pwm+0x50>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM4->CCR3 = pwm_value * -1; // L
	} else if (pwm_value == 0) {
		TIM4->CCR4 = 0; // R
		TIM4->CCR3 = 0; // L
	}
}
 80015a2:	e013      	b.n	80015cc <fdr_set_pwm+0x44>
	} else if (pwm_value < 0) {
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	da07      	bge.n	80015ba <fdr_set_pwm+0x32>
		TIM4->CCR4 = 0; // R
 80015aa:	4b0b      	ldr	r3, [pc, #44]	@ (80015d8 <fdr_set_pwm+0x50>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM4->CCR3 = pwm_value * -1; // L
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	425a      	negs	r2, r3
 80015b4:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <fdr_set_pwm+0x50>)
 80015b6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80015b8:	e008      	b.n	80015cc <fdr_set_pwm+0x44>
	} else if (pwm_value == 0) {
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d105      	bne.n	80015cc <fdr_set_pwm+0x44>
		TIM4->CCR4 = 0; // R
 80015c0:	4b05      	ldr	r3, [pc, #20]	@ (80015d8 <fdr_set_pwm+0x50>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM4->CCR3 = 0; // L
 80015c6:	4b04      	ldr	r3, [pc, #16]	@ (80015d8 <fdr_set_pwm+0x50>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	40000800 	.word	0x40000800

080015dc <fst_set_pwm>:
void fst_set_pwm(int32_t pwm_value) {
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	if (pwm_value > 0) {
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	dd06      	ble.n	80015f8 <fst_set_pwm+0x1c>
		TIM4->CCR2 = 0; // L
 80015ea:	4b10      	ldr	r3, [pc, #64]	@ (800162c <fst_set_pwm+0x50>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM4->CCR1 = pwm_value; // R
 80015f0:	4a0e      	ldr	r2, [pc, #56]	@ (800162c <fst_set_pwm+0x50>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM4->CCR2 = pwm_value * -1; // L
	} else if (pwm_value == 0) {
		TIM4->CCR1 = 0; // R
		TIM4->CCR2 = 0; // L
	}
}
 80015f6:	e013      	b.n	8001620 <fst_set_pwm+0x44>
	} else if (pwm_value < 0) {
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	da07      	bge.n	800160e <fst_set_pwm+0x32>
		TIM4->CCR1 = 0; // R
 80015fe:	4b0b      	ldr	r3, [pc, #44]	@ (800162c <fst_set_pwm+0x50>)
 8001600:	2200      	movs	r2, #0
 8001602:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM4->CCR2 = pwm_value * -1; // L
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	425a      	negs	r2, r3
 8001608:	4b08      	ldr	r3, [pc, #32]	@ (800162c <fst_set_pwm+0x50>)
 800160a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800160c:	e008      	b.n	8001620 <fst_set_pwm+0x44>
	} else if (pwm_value == 0) {
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d105      	bne.n	8001620 <fst_set_pwm+0x44>
		TIM4->CCR1 = 0; // R
 8001614:	4b05      	ldr	r3, [pc, #20]	@ (800162c <fst_set_pwm+0x50>)
 8001616:	2200      	movs	r2, #0
 8001618:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM4->CCR2 = 0; // L
 800161a:	4b04      	ldr	r3, [pc, #16]	@ (800162c <fst_set_pwm+0x50>)
 800161c:	2200      	movs	r2, #0
 800161e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	40000800 	.word	0x40000800

08001630 <sdr_set_pwm>:
void sdr_set_pwm(int32_t pwm_value) {
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	if (pwm_value > 0) {
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	dd06      	ble.n	800164c <sdr_set_pwm+0x1c>
		TIM8->CCR3 = 0; // R
 800163e:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <sdr_set_pwm+0x50>)
 8001640:	2200      	movs	r2, #0
 8001642:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM8->CCR4 = pwm_value; // L
 8001644:	4a0e      	ldr	r2, [pc, #56]	@ (8001680 <sdr_set_pwm+0x50>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6413      	str	r3, [r2, #64]	@ 0x40
		TIM8->CCR3 = pwm_value * -1; // R
	} else if (pwm_value == 0) {
		TIM8->CCR4 = 0; // R
		TIM8->CCR3 = 0; // L
	}
}
 800164a:	e013      	b.n	8001674 <sdr_set_pwm+0x44>
	} else if (pwm_value < 0) {
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	da07      	bge.n	8001662 <sdr_set_pwm+0x32>
		TIM8->CCR4 = 0; // L
 8001652:	4b0b      	ldr	r3, [pc, #44]	@ (8001680 <sdr_set_pwm+0x50>)
 8001654:	2200      	movs	r2, #0
 8001656:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM8->CCR3 = pwm_value * -1; // R
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	425a      	negs	r2, r3
 800165c:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <sdr_set_pwm+0x50>)
 800165e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001660:	e008      	b.n	8001674 <sdr_set_pwm+0x44>
	} else if (pwm_value == 0) {
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d105      	bne.n	8001674 <sdr_set_pwm+0x44>
		TIM8->CCR4 = 0; // R
 8001668:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <sdr_set_pwm+0x50>)
 800166a:	2200      	movs	r2, #0
 800166c:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM8->CCR3 = 0; // L
 800166e:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <sdr_set_pwm+0x50>)
 8001670:	2200      	movs	r2, #0
 8001672:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	40010400 	.word	0x40010400

08001684 <sst_set_pwm>:
void sst_set_pwm(int32_t pwm_value) {
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	if (pwm_value > 0) {
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	dd06      	ble.n	80016a0 <sst_set_pwm+0x1c>
		TIM8->CCR2 = 0; // L
 8001692:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <sst_set_pwm+0x50>)
 8001694:	2200      	movs	r2, #0
 8001696:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM8->CCR1 = pwm_value; // R
 8001698:	4a0e      	ldr	r2, [pc, #56]	@ (80016d4 <sst_set_pwm+0x50>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM8->CCR2 = pwm_value * -1; // L
	} else if (pwm_value == 0) {
		TIM8->CCR1 = 0; // R
		TIM8->CCR2 = 0; // L
	}
}
 800169e:	e013      	b.n	80016c8 <sst_set_pwm+0x44>
	} else if (pwm_value < 0) {
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	da07      	bge.n	80016b6 <sst_set_pwm+0x32>
		TIM8->CCR1 = 0; // R
 80016a6:	4b0b      	ldr	r3, [pc, #44]	@ (80016d4 <sst_set_pwm+0x50>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM8->CCR2 = pwm_value * -1; // L
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	425a      	negs	r2, r3
 80016b0:	4b08      	ldr	r3, [pc, #32]	@ (80016d4 <sst_set_pwm+0x50>)
 80016b2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80016b4:	e008      	b.n	80016c8 <sst_set_pwm+0x44>
	} else if (pwm_value == 0) {
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d105      	bne.n	80016c8 <sst_set_pwm+0x44>
		TIM8->CCR1 = 0; // R
 80016bc:	4b05      	ldr	r3, [pc, #20]	@ (80016d4 <sst_set_pwm+0x50>)
 80016be:	2200      	movs	r2, #0
 80016c0:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM8->CCR2 = 0; // L
 80016c2:	4b04      	ldr	r3, [pc, #16]	@ (80016d4 <sst_set_pwm+0x50>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	40010400 	.word	0x40010400

080016d8 <run_motors>:
void run_motors(double fdr_rpm, double sdr_rpm, double fst_rpm, double sst_rpm) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0
 80016de:	ed87 0b06 	vstr	d0, [r7, #24]
 80016e2:	ed87 1b04 	vstr	d1, [r7, #16]
 80016e6:	ed87 2b02 	vstr	d2, [r7, #8]
 80016ea:	ed87 3b00 	vstr	d3, [r7]
	fdr_set_pwm(rpm2pwm(fdr_rpm));
 80016ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016f2:	f7ff fa51 	bl	8000b98 <__aeabi_d2iz>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fc93 	bl	8001024 <rpm2pwm>
 80016fe:	4603      	mov	r3, r0
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff41 	bl	8001588 <fdr_set_pwm>
	sdr_set_pwm(rpm2pwm(sdr_rpm));
 8001706:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800170a:	f7ff fa45 	bl	8000b98 <__aeabi_d2iz>
 800170e:	4603      	mov	r3, r0
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fc87 	bl	8001024 <rpm2pwm>
 8001716:	4603      	mov	r3, r0
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff89 	bl	8001630 <sdr_set_pwm>
	fst_set_pwm(rpm2pwm(fst_rpm));
 800171e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001722:	f7ff fa39 	bl	8000b98 <__aeabi_d2iz>
 8001726:	4603      	mov	r3, r0
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fc7b 	bl	8001024 <rpm2pwm>
 800172e:	4603      	mov	r3, r0
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff53 	bl	80015dc <fst_set_pwm>
	sst_set_pwm(rpm2pwm(sst_rpm));
 8001736:	e9d7 0100 	ldrd	r0, r1, [r7]
 800173a:	f7ff fa2d 	bl	8000b98 <__aeabi_d2iz>
 800173e:	4603      	mov	r3, r0
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fc6f 	bl	8001024 <rpm2pwm>
 8001746:	4603      	mov	r3, r0
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff9b 	bl	8001684 <sst_set_pwm>
}
 800174e:	bf00      	nop
 8001750:	3720      	adds	r7, #32
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <stop_motors>:
void stop_motors() {
 8001756:	b580      	push	{r7, lr}
 8001758:	af00      	add	r7, sp, #0
	fdr_set_pwm(0);
 800175a:	2000      	movs	r0, #0
 800175c:	f7ff ff14 	bl	8001588 <fdr_set_pwm>
	sdr_set_pwm(0);
 8001760:	2000      	movs	r0, #0
 8001762:	f7ff ff65 	bl	8001630 <sdr_set_pwm>
	fst_set_pwm(0);
 8001766:	2000      	movs	r0, #0
 8001768:	f7ff ff38 	bl	80015dc <fst_set_pwm>
	sst_set_pwm(0);
 800176c:	2000      	movs	r0, #0
 800176e:	f7ff ff89 	bl	8001684 <sst_set_pwm>
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <calculate_speed>:
double final_x = 0, final_y = 0;
double points[2][2] = { { 100, 0.0 },
						{ 100, 100.0 } };

WHEELS wheels;
void calculate_speed(double Vx, double Vy, double Wz){
 8001778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800177c:	ed2d 8b02 	vpush	{d8}
 8001780:	b08e      	sub	sp, #56	@ 0x38
 8001782:	af00      	add	r7, sp, #0
 8001784:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8001788:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 800178c:	ed87 2b08 	vstr	d2, [r7, #32]
	//pentru directia rotilor ne luam dupa asta https://www.itm-conferences.org/articles/itmconf/pdf/2020/05/itmconf_itee2020_04001.pdf
	wheels.fst = ((1 / R) * (Vx - Vy - ((LX + LY) * Wz))) / 40;
 8001790:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001794:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001798:	f7fe fd96 	bl	80002c8 <__aeabi_dsub>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4614      	mov	r4, r2
 80017a2:	461d      	mov	r5, r3
 80017a4:	a3a4      	add	r3, pc, #656	@ (adr r3, 8001a38 <calculate_speed+0x2c0>)
 80017a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017aa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017ae:	f7fe ff43 	bl	8000638 <__aeabi_dmul>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4620      	mov	r0, r4
 80017b8:	4629      	mov	r1, r5
 80017ba:	f7fe fd85 	bl	80002c8 <__aeabi_dsub>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	4b9d      	ldr	r3, [pc, #628]	@ (8001a40 <calculate_speed+0x2c8>)
 80017cc:	f7fe ff34 	bl	8000638 <__aeabi_dmul>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	4b99      	ldr	r3, [pc, #612]	@ (8001a44 <calculate_speed+0x2cc>)
 80017de:	f7ff f855 	bl	800088c <__aeabi_ddiv>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	4b97      	ldr	r3, [pc, #604]	@ (8001a48 <calculate_speed+0x2d0>)
 80017ec:	e9c3 0102 	strd	r0, r1, [r3, #8]
	wheels.fdr = ((1 / R) * (Vx + Vy + ((LX + LY) * Wz))) / 40;
 80017f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80017f4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80017f8:	f7fe fd68 	bl	80002cc <__adddf3>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4614      	mov	r4, r2
 8001802:	461d      	mov	r5, r3
 8001804:	a38c      	add	r3, pc, #560	@ (adr r3, 8001a38 <calculate_speed+0x2c0>)
 8001806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800180e:	f7fe ff13 	bl	8000638 <__aeabi_dmul>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4620      	mov	r0, r4
 8001818:	4629      	mov	r1, r5
 800181a:	f7fe fd57 	bl	80002cc <__adddf3>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4610      	mov	r0, r2
 8001824:	4619      	mov	r1, r3
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	4b85      	ldr	r3, [pc, #532]	@ (8001a40 <calculate_speed+0x2c8>)
 800182c:	f7fe ff04 	bl	8000638 <__aeabi_dmul>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	4b81      	ldr	r3, [pc, #516]	@ (8001a44 <calculate_speed+0x2cc>)
 800183e:	f7ff f825 	bl	800088c <__aeabi_ddiv>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a48 <calculate_speed+0x2d0>)
 800184c:	e9c3 0100 	strd	r0, r1, [r3]
	wheels.sst = ((1 / R) * (Vx + Vy - ((LX + LY) * Wz))) / 40;
 8001850:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001854:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001858:	f7fe fd38 	bl	80002cc <__adddf3>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4614      	mov	r4, r2
 8001862:	461d      	mov	r5, r3
 8001864:	a374      	add	r3, pc, #464	@ (adr r3, 8001a38 <calculate_speed+0x2c0>)
 8001866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800186e:	f7fe fee3 	bl	8000638 <__aeabi_dmul>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4620      	mov	r0, r4
 8001878:	4629      	mov	r1, r5
 800187a:	f7fe fd25 	bl	80002c8 <__aeabi_dsub>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4610      	mov	r0, r2
 8001884:	4619      	mov	r1, r3
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	4b6d      	ldr	r3, [pc, #436]	@ (8001a40 <calculate_speed+0x2c8>)
 800188c:	f7fe fed4 	bl	8000638 <__aeabi_dmul>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4610      	mov	r0, r2
 8001896:	4619      	mov	r1, r3
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	4b69      	ldr	r3, [pc, #420]	@ (8001a44 <calculate_speed+0x2cc>)
 800189e:	f7fe fff5 	bl	800088c <__aeabi_ddiv>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	4b67      	ldr	r3, [pc, #412]	@ (8001a48 <calculate_speed+0x2d0>)
 80018ac:	e9c3 0106 	strd	r0, r1, [r3, #24]
	wheels.sdr = ((1 / R) * (Vx - Vy + ((LX + LY) * Wz))) / 40;
 80018b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80018b4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80018b8:	f7fe fd06 	bl	80002c8 <__aeabi_dsub>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4614      	mov	r4, r2
 80018c2:	461d      	mov	r5, r3
 80018c4:	a35c      	add	r3, pc, #368	@ (adr r3, 8001a38 <calculate_speed+0x2c0>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018ce:	f7fe feb3 	bl	8000638 <__aeabi_dmul>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4620      	mov	r0, r4
 80018d8:	4629      	mov	r1, r5
 80018da:	f7fe fcf7 	bl	80002cc <__adddf3>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	4b55      	ldr	r3, [pc, #340]	@ (8001a40 <calculate_speed+0x2c8>)
 80018ec:	f7fe fea4 	bl	8000638 <__aeabi_dmul>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	4b51      	ldr	r3, [pc, #324]	@ (8001a44 <calculate_speed+0x2cc>)
 80018fe:	f7fe ffc5 	bl	800088c <__aeabi_ddiv>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	4b4f      	ldr	r3, [pc, #316]	@ (8001a48 <calculate_speed+0x2d0>)
 800190c:	e9c3 0104 	strd	r0, r1, [r3, #16]

	wheels.max_speed = fmax(fmax(fabs(wheels.fst), fabs(wheels.fdr)), fmax(fabs(wheels.sst), fabs(wheels.sdr)));
 8001910:	4b4d      	ldr	r3, [pc, #308]	@ (8001a48 <calculate_speed+0x2d0>)
 8001912:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001916:	61ba      	str	r2, [r7, #24]
 8001918:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	4b4a      	ldr	r3, [pc, #296]	@ (8001a48 <calculate_speed+0x2d0>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	613a      	str	r2, [r7, #16]
 8001926:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	ed97 1b04 	vldr	d1, [r7, #16]
 8001930:	ed97 0b06 	vldr	d0, [r7, #24]
 8001934:	f00a fc5e 	bl	800c1f4 <fmax>
 8001938:	eeb0 8a40 	vmov.f32	s16, s0
 800193c:	eef0 8a60 	vmov.f32	s17, s1
 8001940:	4b41      	ldr	r3, [pc, #260]	@ (8001a48 <calculate_speed+0x2d0>)
 8001942:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001946:	60ba      	str	r2, [r7, #8]
 8001948:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a48 <calculate_speed+0x2d0>)
 8001950:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001954:	603a      	str	r2, [r7, #0]
 8001956:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	ed97 1b00 	vldr	d1, [r7]
 8001960:	ed97 0b02 	vldr	d0, [r7, #8]
 8001964:	f00a fc46 	bl	800c1f4 <fmax>
 8001968:	eeb0 7a40 	vmov.f32	s14, s0
 800196c:	eef0 7a60 	vmov.f32	s15, s1
 8001970:	eeb0 1a47 	vmov.f32	s2, s14
 8001974:	eef0 1a67 	vmov.f32	s3, s15
 8001978:	eeb0 0a48 	vmov.f32	s0, s16
 800197c:	eef0 0a68 	vmov.f32	s1, s17
 8001980:	f00a fc38 	bl	800c1f4 <fmax>
 8001984:	eeb0 7a40 	vmov.f32	s14, s0
 8001988:	eef0 7a60 	vmov.f32	s15, s1
 800198c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a48 <calculate_speed+0x2d0>)
 800198e:	ed83 7b08 	vstr	d7, [r3, #32]
	if( wheels.max_speed > MAX_SPEED){
 8001992:	4b2d      	ldr	r3, [pc, #180]	@ (8001a48 <calculate_speed+0x2d0>)
 8001994:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	4b2b      	ldr	r3, [pc, #172]	@ (8001a4c <calculate_speed+0x2d4>)
 800199e:	f7ff f8db 	bl	8000b58 <__aeabi_dcmpgt>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d053      	beq.n	8001a50 <calculate_speed+0x2d8>
		wheels.scale_factor = fabs(MAX_SPEED / wheels.max_speed);
 80019a8:	4b27      	ldr	r3, [pc, #156]	@ (8001a48 <calculate_speed+0x2d0>)
 80019aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80019ae:	f04f 0000 	mov.w	r0, #0
 80019b2:	4926      	ldr	r1, [pc, #152]	@ (8001a4c <calculate_speed+0x2d4>)
 80019b4:	f7fe ff6a 	bl	800088c <__aeabi_ddiv>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4692      	mov	sl, r2
 80019be:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 80019c2:	4b21      	ldr	r3, [pc, #132]	@ (8001a48 <calculate_speed+0x2d0>)
 80019c4:	e9c3 ab0a 	strd	sl, fp, [r3, #40]	@ 0x28
		wheels.fst *= wheels.scale_factor;
 80019c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a48 <calculate_speed+0x2d0>)
 80019ca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80019ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001a48 <calculate_speed+0x2d0>)
 80019d0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80019d4:	f7fe fe30 	bl	8000638 <__aeabi_dmul>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	491a      	ldr	r1, [pc, #104]	@ (8001a48 <calculate_speed+0x2d0>)
 80019de:	e9c1 2302 	strd	r2, r3, [r1, #8]
		wheels.fdr *= wheels.scale_factor;
 80019e2:	4b19      	ldr	r3, [pc, #100]	@ (8001a48 <calculate_speed+0x2d0>)
 80019e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019e8:	4b17      	ldr	r3, [pc, #92]	@ (8001a48 <calculate_speed+0x2d0>)
 80019ea:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80019ee:	f7fe fe23 	bl	8000638 <__aeabi_dmul>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4914      	ldr	r1, [pc, #80]	@ (8001a48 <calculate_speed+0x2d0>)
 80019f8:	e9c1 2300 	strd	r2, r3, [r1]
		wheels.sst *= wheels.scale_factor;
 80019fc:	4b12      	ldr	r3, [pc, #72]	@ (8001a48 <calculate_speed+0x2d0>)
 80019fe:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001a02:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <calculate_speed+0x2d0>)
 8001a04:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001a08:	f7fe fe16 	bl	8000638 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	490d      	ldr	r1, [pc, #52]	@ (8001a48 <calculate_speed+0x2d0>)
 8001a12:	e9c1 2306 	strd	r2, r3, [r1, #24]
		wheels.sdr *= wheels.scale_factor;
 8001a16:	4b0c      	ldr	r3, [pc, #48]	@ (8001a48 <calculate_speed+0x2d0>)
 8001a18:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a48 <calculate_speed+0x2d0>)
 8001a1e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001a22:	f7fe fe09 	bl	8000638 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4907      	ldr	r1, [pc, #28]	@ (8001a48 <calculate_speed+0x2d0>)
 8001a2c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001a30:	e05d      	b.n	8001aee <calculate_speed+0x376>
 8001a32:	bf00      	nop
 8001a34:	f3af 8000 	nop.w
 8001a38:	c28f5c29 	.word	0xc28f5c29
 8001a3c:	3fcc28f5 	.word	0x3fcc28f5
 8001a40:	40340000 	.word	0x40340000
 8001a44:	40440000 	.word	0x40440000
 8001a48:	20000ca8 	.word	0x20000ca8
 8001a4c:	40290000 	.word	0x40290000
	}else if(wheels.max_speed < MIN_SPEED){
 8001a50:	4b56      	ldr	r3, [pc, #344]	@ (8001bac <calculate_speed+0x434>)
 8001a52:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	4b55      	ldr	r3, [pc, #340]	@ (8001bb0 <calculate_speed+0x438>)
 8001a5c:	f7ff f85e 	bl	8000b1c <__aeabi_dcmplt>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d043      	beq.n	8001aee <calculate_speed+0x376>
		wheels.scale_factor = fabs(MIN_SPEED / wheels.max_speed);
 8001a66:	4b51      	ldr	r3, [pc, #324]	@ (8001bac <calculate_speed+0x434>)
 8001a68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001a6c:	f04f 0000 	mov.w	r0, #0
 8001a70:	494f      	ldr	r1, [pc, #316]	@ (8001bb0 <calculate_speed+0x438>)
 8001a72:	f7fe ff0b 	bl	800088c <__aeabi_ddiv>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4690      	mov	r8, r2
 8001a7c:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001a80:	4b4a      	ldr	r3, [pc, #296]	@ (8001bac <calculate_speed+0x434>)
 8001a82:	e9c3 890a 	strd	r8, r9, [r3, #40]	@ 0x28
		wheels.fst *= wheels.scale_factor;
 8001a86:	4b49      	ldr	r3, [pc, #292]	@ (8001bac <calculate_speed+0x434>)
 8001a88:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a8c:	4b47      	ldr	r3, [pc, #284]	@ (8001bac <calculate_speed+0x434>)
 8001a8e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001a92:	f7fe fdd1 	bl	8000638 <__aeabi_dmul>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4944      	ldr	r1, [pc, #272]	@ (8001bac <calculate_speed+0x434>)
 8001a9c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		wheels.fdr *= wheels.scale_factor;
 8001aa0:	4b42      	ldr	r3, [pc, #264]	@ (8001bac <calculate_speed+0x434>)
 8001aa2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aa6:	4b41      	ldr	r3, [pc, #260]	@ (8001bac <calculate_speed+0x434>)
 8001aa8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001aac:	f7fe fdc4 	bl	8000638 <__aeabi_dmul>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	493d      	ldr	r1, [pc, #244]	@ (8001bac <calculate_speed+0x434>)
 8001ab6:	e9c1 2300 	strd	r2, r3, [r1]
		wheels.sst *= wheels.scale_factor;
 8001aba:	4b3c      	ldr	r3, [pc, #240]	@ (8001bac <calculate_speed+0x434>)
 8001abc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001ac0:	4b3a      	ldr	r3, [pc, #232]	@ (8001bac <calculate_speed+0x434>)
 8001ac2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001ac6:	f7fe fdb7 	bl	8000638 <__aeabi_dmul>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4937      	ldr	r1, [pc, #220]	@ (8001bac <calculate_speed+0x434>)
 8001ad0:	e9c1 2306 	strd	r2, r3, [r1, #24]
		wheels.sdr *= wheels.scale_factor;
 8001ad4:	4b35      	ldr	r3, [pc, #212]	@ (8001bac <calculate_speed+0x434>)
 8001ad6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001ada:	4b34      	ldr	r3, [pc, #208]	@ (8001bac <calculate_speed+0x434>)
 8001adc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001ae0:	f7fe fdaa 	bl	8000638 <__aeabi_dmul>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4930      	ldr	r1, [pc, #192]	@ (8001bac <calculate_speed+0x434>)
 8001aea:	e9c1 2304 	strd	r2, r3, [r1, #16]

	}

	wheels.fst = rad2rpm(wheels.fst);
 8001aee:	4b2f      	ldr	r3, [pc, #188]	@ (8001bac <calculate_speed+0x434>)
 8001af0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	f7ff f896 	bl	8000c28 <__aeabi_d2f>
 8001afc:	4603      	mov	r3, r0
 8001afe:	ee00 3a10 	vmov	s0, r3
 8001b02:	f7ff faa5 	bl	8001050 <rad2rpm>
 8001b06:	ee10 3a10 	vmov	r3, s0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd3c 	bl	8000588 <__aeabi_f2d>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4925      	ldr	r1, [pc, #148]	@ (8001bac <calculate_speed+0x434>)
 8001b16:	e9c1 2302 	strd	r2, r3, [r1, #8]
	wheels.fdr = rad2rpm(wheels.fdr);
 8001b1a:	4b24      	ldr	r3, [pc, #144]	@ (8001bac <calculate_speed+0x434>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f7ff f880 	bl	8000c28 <__aeabi_d2f>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	ee00 3a10 	vmov	s0, r3
 8001b2e:	f7ff fa8f 	bl	8001050 <rad2rpm>
 8001b32:	ee10 3a10 	vmov	r3, s0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fd26 	bl	8000588 <__aeabi_f2d>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	491a      	ldr	r1, [pc, #104]	@ (8001bac <calculate_speed+0x434>)
 8001b42:	e9c1 2300 	strd	r2, r3, [r1]
	wheels.sst = rad2rpm(wheels.sst);
 8001b46:	4b19      	ldr	r3, [pc, #100]	@ (8001bac <calculate_speed+0x434>)
 8001b48:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f7ff f86a 	bl	8000c28 <__aeabi_d2f>
 8001b54:	4603      	mov	r3, r0
 8001b56:	ee00 3a10 	vmov	s0, r3
 8001b5a:	f7ff fa79 	bl	8001050 <rad2rpm>
 8001b5e:	ee10 3a10 	vmov	r3, s0
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fd10 	bl	8000588 <__aeabi_f2d>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	490f      	ldr	r1, [pc, #60]	@ (8001bac <calculate_speed+0x434>)
 8001b6e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	wheels.sdr = rad2rpm(wheels.sdr);
 8001b72:	4b0e      	ldr	r3, [pc, #56]	@ (8001bac <calculate_speed+0x434>)
 8001b74:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7ff f854 	bl	8000c28 <__aeabi_d2f>
 8001b80:	4603      	mov	r3, r0
 8001b82:	ee00 3a10 	vmov	s0, r3
 8001b86:	f7ff fa63 	bl	8001050 <rad2rpm>
 8001b8a:	ee10 3a10 	vmov	r3, s0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fcfa 	bl	8000588 <__aeabi_f2d>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4904      	ldr	r1, [pc, #16]	@ (8001bac <calculate_speed+0x434>)
 8001b9a:	e9c1 2304 	strd	r2, r3, [r1, #16]


}
 8001b9e:	bf00      	nop
 8001ba0:	3738      	adds	r7, #56	@ 0x38
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	ecbd 8b02 	vpop	{d8}
 8001ba8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bac:	20000ca8 	.word	0x20000ca8
 8001bb0:	40200000 	.word	0x40200000
 8001bb4:	00000000 	.word	0x00000000

08001bb8 <follow_line>:
/*TODO: Movement error corection*/
double Vx = 0, Vy = 0;
void follow_line(double final_x, double final_y) {
 8001bb8:	b5b0      	push	{r4, r5, r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	ed87 0b02 	vstr	d0, [r7, #8]
 8001bc2:	ed87 1b00 	vstr	d1, [r7]
	HAL_UART_Receive_DMA(&huart6, odometry_buffer, 25);
 8001bc6:	2219      	movs	r2, #25
 8001bc8:	4945      	ldr	r1, [pc, #276]	@ (8001ce0 <follow_line+0x128>)
 8001bca:	4846      	ldr	r0, [pc, #280]	@ (8001ce4 <follow_line+0x12c>)
 8001bcc:	f004 ff4a 	bl	8006a64 <HAL_UART_Receive_DMA>
	while (true) {
		Vx = final_x - current_x;
 8001bd0:	4b45      	ldr	r3, [pc, #276]	@ (8001ce8 <follow_line+0x130>)
 8001bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bda:	f7fe fb75 	bl	80002c8 <__aeabi_dsub>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4942      	ldr	r1, [pc, #264]	@ (8001cec <follow_line+0x134>)
 8001be4:	e9c1 2300 	strd	r2, r3, [r1]
		Vy = final_y - current_y;
 8001be8:	4b41      	ldr	r3, [pc, #260]	@ (8001cf0 <follow_line+0x138>)
 8001bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bf2:	f7fe fb69 	bl	80002c8 <__aeabi_dsub>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	493e      	ldr	r1, [pc, #248]	@ (8001cf4 <follow_line+0x13c>)
 8001bfc:	e9c1 2300 	strd	r2, r3, [r1]

		double distance_to_target = sqrt(Vx * Vx + Vy * Vy);
 8001c00:	4b3a      	ldr	r3, [pc, #232]	@ (8001cec <follow_line+0x134>)
 8001c02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c06:	4b39      	ldr	r3, [pc, #228]	@ (8001cec <follow_line+0x134>)
 8001c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0c:	f7fe fd14 	bl	8000638 <__aeabi_dmul>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4614      	mov	r4, r2
 8001c16:	461d      	mov	r5, r3
 8001c18:	4b36      	ldr	r3, [pc, #216]	@ (8001cf4 <follow_line+0x13c>)
 8001c1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c1e:	4b35      	ldr	r3, [pc, #212]	@ (8001cf4 <follow_line+0x13c>)
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	f7fe fd08 	bl	8000638 <__aeabi_dmul>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	4629      	mov	r1, r5
 8001c30:	f7fe fb4c 	bl	80002cc <__adddf3>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	ec43 2b17 	vmov	d7, r2, r3
 8001c3c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c40:	eef0 0a67 	vmov.f32	s1, s15
 8001c44:	f00a faaa 	bl	800c19c <sqrt>
 8001c48:	ed87 0b04 	vstr	d0, [r7, #16]

		if (distance_to_target < DISTANCE_THRESHOLD) {
 8001c4c:	a320      	add	r3, pc, #128	@ (adr r3, 8001cd0 <follow_line+0x118>)
 8001c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c56:	f7fe ff61 	bl	8000b1c <__aeabi_dcmplt>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d130      	bne.n	8001cc2 <follow_line+0x10a>
			break;
		}

		calculate_speed(Vx, Vy, 0);
 8001c60:	4b22      	ldr	r3, [pc, #136]	@ (8001cec <follow_line+0x134>)
 8001c62:	ed93 7b00 	vldr	d7, [r3]
 8001c66:	4b23      	ldr	r3, [pc, #140]	@ (8001cf4 <follow_line+0x13c>)
 8001c68:	ed93 6b00 	vldr	d6, [r3]
 8001c6c:	ed9f 2b1a 	vldr	d2, [pc, #104]	@ 8001cd8 <follow_line+0x120>
 8001c70:	eeb0 1a46 	vmov.f32	s2, s12
 8001c74:	eef0 1a66 	vmov.f32	s3, s13
 8001c78:	eeb0 0a47 	vmov.f32	s0, s14
 8001c7c:	eef0 0a67 	vmov.f32	s1, s15
 8001c80:	f7ff fd7a 	bl	8001778 <calculate_speed>
		run_motors(wheels.fdr, wheels.sdr, wheels.fst, wheels.sst);
 8001c84:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf8 <follow_line+0x140>)
 8001c86:	ed93 7b00 	vldr	d7, [r3]
 8001c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf8 <follow_line+0x140>)
 8001c8c:	ed93 6b04 	vldr	d6, [r3, #16]
 8001c90:	4b19      	ldr	r3, [pc, #100]	@ (8001cf8 <follow_line+0x140>)
 8001c92:	ed93 5b02 	vldr	d5, [r3, #8]
 8001c96:	4b18      	ldr	r3, [pc, #96]	@ (8001cf8 <follow_line+0x140>)
 8001c98:	ed93 4b06 	vldr	d4, [r3, #24]
 8001c9c:	eeb0 3a44 	vmov.f32	s6, s8
 8001ca0:	eef0 3a64 	vmov.f32	s7, s9
 8001ca4:	eeb0 2a45 	vmov.f32	s4, s10
 8001ca8:	eef0 2a65 	vmov.f32	s5, s11
 8001cac:	eeb0 1a46 	vmov.f32	s2, s12
 8001cb0:	eef0 1a66 	vmov.f32	s3, s13
 8001cb4:	eeb0 0a47 	vmov.f32	s0, s14
 8001cb8:	eef0 0a67 	vmov.f32	s1, s15
 8001cbc:	f7ff fd0c 	bl	80016d8 <run_motors>
	while (true) {
 8001cc0:	e786      	b.n	8001bd0 <follow_line+0x18>
			break;
 8001cc2:	bf00      	nop
	}
	stop_motors();
 8001cc4:	f7ff fd47 	bl	8001756 <stop_motors>
}
 8001cc8:	bf00      	nop
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd0:	9999999a 	.word	0x9999999a
 8001cd4:	3fb99999 	.word	0x3fb99999
	...
 8001ce0:	20000c18 	.word	0x20000c18
 8001ce4:	20000594 	.word	0x20000594
 8001ce8:	20000c38 	.word	0x20000c38
 8001cec:	20000cd8 	.word	0x20000cd8
 8001cf0:	20000c40 	.word	0x20000c40
 8001cf4:	20000ce0 	.word	0x20000ce0
 8001cf8:	20000ca8 	.word	0x20000ca8

08001cfc <follow_trajectory>:

void follow_trajectory() {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart6, odometry_buffer, 25);
 8001d02:	2219      	movs	r2, #25
 8001d04:	4914      	ldr	r1, [pc, #80]	@ (8001d58 <follow_trajectory+0x5c>)
 8001d06:	4815      	ldr	r0, [pc, #84]	@ (8001d5c <follow_trajectory+0x60>)
 8001d08:	f004 feac 	bl	8006a64 <HAL_UART_Receive_DMA>
	for (int i = 0; i < 2; i++) {
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	607b      	str	r3, [r7, #4]
 8001d10:	e019      	b.n	8001d46 <follow_trajectory+0x4a>
		follow_line(points[i][0], points[i][1]);
 8001d12:	4a13      	ldr	r2, [pc, #76]	@ (8001d60 <follow_trajectory+0x64>)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	4413      	add	r3, r2
 8001d1a:	ed93 7b00 	vldr	d7, [r3]
 8001d1e:	4a10      	ldr	r2, [pc, #64]	@ (8001d60 <follow_trajectory+0x64>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	011b      	lsls	r3, r3, #4
 8001d24:	4413      	add	r3, r2
 8001d26:	3308      	adds	r3, #8
 8001d28:	ed93 6b00 	vldr	d6, [r3]
 8001d2c:	eeb0 1a46 	vmov.f32	s2, s12
 8001d30:	eef0 1a66 	vmov.f32	s3, s13
 8001d34:	eeb0 0a47 	vmov.f32	s0, s14
 8001d38:	eef0 0a67 	vmov.f32	s1, s15
 8001d3c:	f7ff ff3c 	bl	8001bb8 <follow_line>
	for (int i = 0; i < 2; i++) {
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3301      	adds	r3, #1
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	dde2      	ble.n	8001d12 <follow_trajectory+0x16>
	}
}
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000c18 	.word	0x20000c18
 8001d5c:	20000594 	.word	0x20000594
 8001d60:	20000000 	.word	0x20000000

08001d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d68:	f001 fcd0 	bl	800370c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d6c:	f000 f88a 	bl	8001e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d70:	f000 fd50 	bl	8002814 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d74:	f000 fd10 	bl	8002798 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001d78:	f000 fc8a 	bl	8002690 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d7c:	f000 fcdc 	bl	8002738 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 8001d80:	f000 fa2c 	bl	80021dc <MX_TIM4_Init>
  MX_TIM1_Init();
 8001d84:	f000 f91e 	bl	8001fc4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001d88:	f000 f978 	bl	800207c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d8c:	f000 f9ce 	bl	800212c <MX_TIM3_Init>
  MX_TIM5_Init();
 8001d90:	f000 fabc 	bl	800230c <MX_TIM5_Init>
  MX_TIM8_Init();
 8001d94:	f000 fb12 	bl	80023bc <MX_TIM8_Init>
  MX_TIM9_Init();
 8001d98:	f000 fbb8 	bl	800250c <MX_TIM9_Init>
  MX_USART2_UART_Init();
 8001d9c:	f000 fc4e 	bl	800263c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001da0:	f000 fca0 	bl	80026e4 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8001da4:	f000 f8da 	bl	8001f5c <MX_SPI2_Init>
  MX_TIM10_Init();
 8001da8:	f000 fbea 	bl	8002580 <MX_TIM10_Init>
  MX_TIM12_Init();
 8001dac:	f000 fc0c 	bl	80025c8 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001db0:	2100      	movs	r1, #0
 8001db2:	4826      	ldr	r0, [pc, #152]	@ (8001e4c <main+0xe8>)
 8001db4:	f003 fd6a 	bl	800588c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001db8:	2104      	movs	r1, #4
 8001dba:	4824      	ldr	r0, [pc, #144]	@ (8001e4c <main+0xe8>)
 8001dbc:	f003 fd66 	bl	800588c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001dc0:	2108      	movs	r1, #8
 8001dc2:	4822      	ldr	r0, [pc, #136]	@ (8001e4c <main+0xe8>)
 8001dc4:	f003 fd62 	bl	800588c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001dc8:	210c      	movs	r1, #12
 8001dca:	4820      	ldr	r0, [pc, #128]	@ (8001e4c <main+0xe8>)
 8001dcc:	f003 fd5e 	bl	800588c <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	481f      	ldr	r0, [pc, #124]	@ (8001e50 <main+0xec>)
 8001dd4:	f003 fd5a 	bl	800588c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001dd8:	2104      	movs	r1, #4
 8001dda:	481d      	ldr	r0, [pc, #116]	@ (8001e50 <main+0xec>)
 8001ddc:	f003 fd56 	bl	800588c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001de0:	2108      	movs	r1, #8
 8001de2:	481b      	ldr	r0, [pc, #108]	@ (8001e50 <main+0xec>)
 8001de4:	f003 fd52 	bl	800588c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001de8:	210c      	movs	r1, #12
 8001dea:	4819      	ldr	r0, [pc, #100]	@ (8001e50 <main+0xec>)
 8001dec:	f003 fd4e 	bl	800588c <HAL_TIM_PWM_Start>

	HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001df0:	2018      	movs	r0, #24
 8001df2:	f001 fe18 	bl	8003a26 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001df6:	2019      	movs	r0, #25
 8001df8:	f001 fe15 	bl	8003a26 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001dfc:	202b      	movs	r0, #43	@ 0x2b
 8001dfe:	f001 fe12 	bl	8003a26 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim9);
 8001e02:	4814      	ldr	r0, [pc, #80]	@ (8001e54 <main+0xf0>)
 8001e04:	f003 fc82 	bl	800570c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim12);
 8001e08:	4813      	ldr	r0, [pc, #76]	@ (8001e58 <main+0xf4>)
 8001e0a:	f003 fc7f 	bl	800570c <HAL_TIM_Base_Start_IT>

	MOTOR_Init(&fdr);
 8001e0e:	4813      	ldr	r0, [pc, #76]	@ (8001e5c <main+0xf8>)
 8001e10:	f7ff f94c 	bl	80010ac <MOTOR_Init>
	MOTOR_Init(&fst);
 8001e14:	4812      	ldr	r0, [pc, #72]	@ (8001e60 <main+0xfc>)
 8001e16:	f7ff f949 	bl	80010ac <MOTOR_Init>
	MOTOR_Init(&sdr);
 8001e1a:	4812      	ldr	r0, [pc, #72]	@ (8001e64 <main+0x100>)
 8001e1c:	f7ff f946 	bl	80010ac <MOTOR_Init>
	MOTOR_Init(&sst);
 8001e20:	4811      	ldr	r0, [pc, #68]	@ (8001e68 <main+0x104>)
 8001e22:	f7ff f943 	bl	80010ac <MOTOR_Init>
	Controller_Init(&ps4);
 8001e26:	4811      	ldr	r0, [pc, #68]	@ (8001e6c <main+0x108>)
 8001e28:	f7ff f95b 	bl	80010e2 <Controller_Init>
	Wheels__Init(&wheels);
 8001e2c:	4810      	ldr	r0, [pc, #64]	@ (8001e70 <main+0x10c>)
 8001e2e:	f7ff f96b 	bl	8001108 <Wheels__Init>

	HAL_UART_Receive_DMA(&huart6, odometry_buffer, 25);
 8001e32:	2219      	movs	r2, #25
 8001e34:	490f      	ldr	r1, [pc, #60]	@ (8001e74 <main+0x110>)
 8001e36:	4810      	ldr	r0, [pc, #64]	@ (8001e78 <main+0x114>)
 8001e38:	f004 fe14 	bl	8006a64 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart3, live_follower_buffer, 15);
 8001e3c:	220f      	movs	r2, #15
 8001e3e:	490f      	ldr	r1, [pc, #60]	@ (8001e7c <main+0x118>)
 8001e40:	480f      	ldr	r0, [pc, #60]	@ (8001e80 <main+0x11c>)
 8001e42:	f004 fe0f 	bl	8006a64 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	/*TODO: Implement mode switching*/

	while (1) {
		follow_trajectory();
 8001e46:	f7ff ff59 	bl	8001cfc <follow_trajectory>
 8001e4a:	e7fc      	b.n	8001e46 <main+0xe2>
 8001e4c:	20000354 	.word	0x20000354
 8001e50:	200003e4 	.word	0x200003e4
 8001e54:	2000042c 	.word	0x2000042c
 8001e58:	200004bc 	.word	0x200004bc
 8001e5c:	20000c54 	.word	0x20000c54
 8001e60:	20000c68 	.word	0x20000c68
 8001e64:	20000c7c 	.word	0x20000c7c
 8001e68:	20000c90 	.word	0x20000c90
 8001e6c:	20000bfc 	.word	0x20000bfc
 8001e70:	20000ca8 	.word	0x20000ca8
 8001e74:	20000c18 	.word	0x20000c18
 8001e78:	20000594 	.word	0x20000594
 8001e7c:	20000be0 	.word	0x20000be0
 8001e80:	2000054c 	.word	0x2000054c

08001e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b094      	sub	sp, #80	@ 0x50
 8001e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e8a:	f107 031c 	add.w	r3, r7, #28
 8001e8e:	2234      	movs	r2, #52	@ 0x34
 8001e90:	2100      	movs	r1, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f007 fd7d 	bl	8009992 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e98:	f107 0308 	add.w	r3, r7, #8
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	4b29      	ldr	r3, [pc, #164]	@ (8001f54 <SystemClock_Config+0xd0>)
 8001eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb0:	4a28      	ldr	r2, [pc, #160]	@ (8001f54 <SystemClock_Config+0xd0>)
 8001eb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eb8:	4b26      	ldr	r3, [pc, #152]	@ (8001f54 <SystemClock_Config+0xd0>)
 8001eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	4b23      	ldr	r3, [pc, #140]	@ (8001f58 <SystemClock_Config+0xd4>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a22      	ldr	r2, [pc, #136]	@ (8001f58 <SystemClock_Config+0xd4>)
 8001ece:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	4b20      	ldr	r3, [pc, #128]	@ (8001f58 <SystemClock_Config+0xd4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001edc:	603b      	str	r3, [r7, #0]
 8001ede:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ee4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ee8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eea:	2302      	movs	r3, #2
 8001eec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ef4:	2308      	movs	r3, #8
 8001ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8001ef8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001efc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001efe:	2304      	movs	r3, #4
 8001f00:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001f02:	2308      	movs	r3, #8
 8001f04:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f06:	2302      	movs	r3, #2
 8001f08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f0a:	f107 031c 	add.w	r3, r7, #28
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f003 f8a0 	bl	8005054 <HAL_RCC_OscConfig>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001f1a:	f000 fdb3 	bl	8002a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f1e:	230f      	movs	r3, #15
 8001f20:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f22:	2302      	movs	r3, #2
 8001f24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f34:	f107 0308 	add.w	r3, r7, #8
 8001f38:	2103      	movs	r1, #3
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f002 fc9c 	bl	8004878 <HAL_RCC_ClockConfig>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001f46:	f000 fd9d 	bl	8002a84 <Error_Handler>
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	3750      	adds	r7, #80	@ 0x50
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40007000 	.word	0x40007000

08001f5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f60:	4b16      	ldr	r3, [pc, #88]	@ (8001fbc <MX_SPI2_Init+0x60>)
 8001f62:	4a17      	ldr	r2, [pc, #92]	@ (8001fc0 <MX_SPI2_Init+0x64>)
 8001f64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8001f66:	4b15      	ldr	r3, [pc, #84]	@ (8001fbc <MX_SPI2_Init+0x60>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001f6c:	4b13      	ldr	r3, [pc, #76]	@ (8001fbc <MX_SPI2_Init+0x60>)
 8001f6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f74:	4b11      	ldr	r3, [pc, #68]	@ (8001fbc <MX_SPI2_Init+0x60>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <MX_SPI2_Init+0x60>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f80:	4b0e      	ldr	r3, [pc, #56]	@ (8001fbc <MX_SPI2_Init+0x60>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f86:	4b0d      	ldr	r3, [pc, #52]	@ (8001fbc <MX_SPI2_Init+0x60>)
 8001f88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fbc <MX_SPI2_Init+0x60>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f94:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <MX_SPI2_Init+0x60>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f9a:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <MX_SPI2_Init+0x60>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <MX_SPI2_Init+0x60>)
 8001fa2:	220a      	movs	r2, #10
 8001fa4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fa6:	4805      	ldr	r0, [pc, #20]	@ (8001fbc <MX_SPI2_Init+0x60>)
 8001fa8:	f003 fad8 	bl	800555c <HAL_SPI_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_SPI2_Init+0x5a>
  {
    Error_Handler();
 8001fb2:	f000 fd67 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000224 	.word	0x20000224
 8001fc0:	40003800 	.word	0x40003800

08001fc4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08c      	sub	sp, #48	@ 0x30
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fca:	f107 030c 	add.w	r3, r7, #12
 8001fce:	2224      	movs	r2, #36	@ 0x24
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f007 fcdd 	bl	8009992 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fe0:	4b24      	ldr	r3, [pc, #144]	@ (8002074 <MX_TIM1_Init+0xb0>)
 8001fe2:	4a25      	ldr	r2, [pc, #148]	@ (8002078 <MX_TIM1_Init+0xb4>)
 8001fe4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001fe6:	4b23      	ldr	r3, [pc, #140]	@ (8002074 <MX_TIM1_Init+0xb0>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fec:	4b21      	ldr	r3, [pc, #132]	@ (8002074 <MX_TIM1_Init+0xb0>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ff2:	4b20      	ldr	r3, [pc, #128]	@ (8002074 <MX_TIM1_Init+0xb0>)
 8001ff4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ff8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8002074 <MX_TIM1_Init+0xb0>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002000:	4b1c      	ldr	r3, [pc, #112]	@ (8002074 <MX_TIM1_Init+0xb0>)
 8002002:	2200      	movs	r2, #0
 8002004:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002006:	4b1b      	ldr	r3, [pc, #108]	@ (8002074 <MX_TIM1_Init+0xb0>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800200c:	2303      	movs	r3, #3
 800200e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002010:	2300      	movs	r3, #0
 8002012:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002014:	2301      	movs	r3, #1
 8002016:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002020:	2300      	movs	r3, #0
 8002022:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002024:	2301      	movs	r3, #1
 8002026:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002028:	2300      	movs	r3, #0
 800202a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002030:	f107 030c 	add.w	r3, r7, #12
 8002034:	4619      	mov	r1, r3
 8002036:	480f      	ldr	r0, [pc, #60]	@ (8002074 <MX_TIM1_Init+0xb0>)
 8002038:	f003 fcf0 	bl	8005a1c <HAL_TIM_Encoder_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002042:	f000 fd1f 	bl	8002a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002046:	2300      	movs	r3, #0
 8002048:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800204e:	1d3b      	adds	r3, r7, #4
 8002050:	4619      	mov	r1, r3
 8002052:	4808      	ldr	r0, [pc, #32]	@ (8002074 <MX_TIM1_Init+0xb0>)
 8002054:	f004 fbd4 	bl	8006800 <HAL_TIMEx_MasterConfigSynchronization>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800205e:	f000 fd11 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002062:	213c      	movs	r1, #60	@ 0x3c
 8002064:	4803      	ldr	r0, [pc, #12]	@ (8002074 <MX_TIM1_Init+0xb0>)
 8002066:	f003 fd7f 	bl	8005b68 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM1_Init 2 */

}
 800206a:	bf00      	nop
 800206c:	3730      	adds	r7, #48	@ 0x30
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	2000027c 	.word	0x2000027c
 8002078:	40010000 	.word	0x40010000

0800207c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08c      	sub	sp, #48	@ 0x30
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002082:	f107 030c 	add.w	r3, r7, #12
 8002086:	2224      	movs	r2, #36	@ 0x24
 8002088:	2100      	movs	r1, #0
 800208a:	4618      	mov	r0, r3
 800208c:	f007 fc81 	bl	8009992 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002090:	1d3b      	adds	r3, r7, #4
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002098:	4b23      	ldr	r3, [pc, #140]	@ (8002128 <MX_TIM2_Init+0xac>)
 800209a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800209e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020a0:	4b21      	ldr	r3, [pc, #132]	@ (8002128 <MX_TIM2_Init+0xac>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a6:	4b20      	ldr	r3, [pc, #128]	@ (8002128 <MX_TIM2_Init+0xac>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80020ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002128 <MX_TIM2_Init+0xac>)
 80020ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002128 <MX_TIM2_Init+0xac>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002128 <MX_TIM2_Init+0xac>)
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020c0:	2303      	movs	r3, #3
 80020c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020c4:	2300      	movs	r3, #0
 80020c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020c8:	2301      	movs	r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020d4:	2300      	movs	r3, #0
 80020d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020d8:	2301      	movs	r3, #1
 80020da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020dc:	2300      	movs	r3, #0
 80020de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80020e4:	f107 030c 	add.w	r3, r7, #12
 80020e8:	4619      	mov	r1, r3
 80020ea:	480f      	ldr	r0, [pc, #60]	@ (8002128 <MX_TIM2_Init+0xac>)
 80020ec:	f003 fc96 	bl	8005a1c <HAL_TIM_Encoder_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80020f6:	f000 fcc5 	bl	8002a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020fa:	2300      	movs	r3, #0
 80020fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	4619      	mov	r1, r3
 8002106:	4808      	ldr	r0, [pc, #32]	@ (8002128 <MX_TIM2_Init+0xac>)
 8002108:	f004 fb7a 	bl	8006800 <HAL_TIMEx_MasterConfigSynchronization>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002112:	f000 fcb7 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002116:	213c      	movs	r1, #60	@ 0x3c
 8002118:	4803      	ldr	r0, [pc, #12]	@ (8002128 <MX_TIM2_Init+0xac>)
 800211a:	f003 fd25 	bl	8005b68 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM2_Init 2 */

}
 800211e:	bf00      	nop
 8002120:	3730      	adds	r7, #48	@ 0x30
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200002c4 	.word	0x200002c4

0800212c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08c      	sub	sp, #48	@ 0x30
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002132:	f107 030c 	add.w	r3, r7, #12
 8002136:	2224      	movs	r2, #36	@ 0x24
 8002138:	2100      	movs	r1, #0
 800213a:	4618      	mov	r0, r3
 800213c:	f007 fc29 	bl	8009992 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002140:	1d3b      	adds	r3, r7, #4
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002148:	4b22      	ldr	r3, [pc, #136]	@ (80021d4 <MX_TIM3_Init+0xa8>)
 800214a:	4a23      	ldr	r2, [pc, #140]	@ (80021d8 <MX_TIM3_Init+0xac>)
 800214c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800214e:	4b21      	ldr	r3, [pc, #132]	@ (80021d4 <MX_TIM3_Init+0xa8>)
 8002150:	2200      	movs	r2, #0
 8002152:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002154:	4b1f      	ldr	r3, [pc, #124]	@ (80021d4 <MX_TIM3_Init+0xa8>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800215a:	4b1e      	ldr	r3, [pc, #120]	@ (80021d4 <MX_TIM3_Init+0xa8>)
 800215c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002160:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002162:	4b1c      	ldr	r3, [pc, #112]	@ (80021d4 <MX_TIM3_Init+0xa8>)
 8002164:	2200      	movs	r2, #0
 8002166:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002168:	4b1a      	ldr	r3, [pc, #104]	@ (80021d4 <MX_TIM3_Init+0xa8>)
 800216a:	2200      	movs	r2, #0
 800216c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800216e:	2303      	movs	r3, #3
 8002170:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002176:	2301      	movs	r3, #1
 8002178:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800217a:	2300      	movs	r3, #0
 800217c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002182:	2300      	movs	r3, #0
 8002184:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002186:	2301      	movs	r3, #1
 8002188:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800218a:	2300      	movs	r3, #0
 800218c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002192:	f107 030c 	add.w	r3, r7, #12
 8002196:	4619      	mov	r1, r3
 8002198:	480e      	ldr	r0, [pc, #56]	@ (80021d4 <MX_TIM3_Init+0xa8>)
 800219a:	f003 fc3f 	bl	8005a1c <HAL_TIM_Encoder_Init>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80021a4:	f000 fc6e 	bl	8002a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021a8:	2300      	movs	r3, #0
 80021aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021b0:	1d3b      	adds	r3, r7, #4
 80021b2:	4619      	mov	r1, r3
 80021b4:	4807      	ldr	r0, [pc, #28]	@ (80021d4 <MX_TIM3_Init+0xa8>)
 80021b6:	f004 fb23 	bl	8006800 <HAL_TIMEx_MasterConfigSynchronization>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80021c0:	f000 fc60 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80021c4:	213c      	movs	r1, #60	@ 0x3c
 80021c6:	4803      	ldr	r0, [pc, #12]	@ (80021d4 <MX_TIM3_Init+0xa8>)
 80021c8:	f003 fcce 	bl	8005b68 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM3_Init 2 */

}
 80021cc:	bf00      	nop
 80021ce:	3730      	adds	r7, #48	@ 0x30
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	2000030c 	.word	0x2000030c
 80021d8:	40000400 	.word	0x40000400

080021dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08e      	sub	sp, #56	@ 0x38
 80021e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	605a      	str	r2, [r3, #4]
 80021ec:	609a      	str	r2, [r3, #8]
 80021ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f0:	f107 0320 	add.w	r3, r7, #32
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
 8002208:	615a      	str	r2, [r3, #20]
 800220a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800220c:	4b3d      	ldr	r3, [pc, #244]	@ (8002304 <MX_TIM4_Init+0x128>)
 800220e:	4a3e      	ldr	r2, [pc, #248]	@ (8002308 <MX_TIM4_Init+0x12c>)
 8002210:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002212:	4b3c      	ldr	r3, [pc, #240]	@ (8002304 <MX_TIM4_Init+0x128>)
 8002214:	2200      	movs	r2, #0
 8002216:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002218:	4b3a      	ldr	r3, [pc, #232]	@ (8002304 <MX_TIM4_Init+0x128>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800221e:	4b39      	ldr	r3, [pc, #228]	@ (8002304 <MX_TIM4_Init+0x128>)
 8002220:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002224:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002226:	4b37      	ldr	r3, [pc, #220]	@ (8002304 <MX_TIM4_Init+0x128>)
 8002228:	2200      	movs	r2, #0
 800222a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800222c:	4b35      	ldr	r3, [pc, #212]	@ (8002304 <MX_TIM4_Init+0x128>)
 800222e:	2200      	movs	r2, #0
 8002230:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002232:	4834      	ldr	r0, [pc, #208]	@ (8002304 <MX_TIM4_Init+0x128>)
 8002234:	f003 fa1b 	bl	800566e <HAL_TIM_Base_Init>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800223e:	f000 fc21 	bl	8002a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002242:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002246:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002248:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800224c:	4619      	mov	r1, r3
 800224e:	482d      	ldr	r0, [pc, #180]	@ (8002304 <MX_TIM4_Init+0x128>)
 8002250:	f003 feca 	bl	8005fe8 <HAL_TIM_ConfigClockSource>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800225a:	f000 fc13 	bl	8002a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800225e:	4829      	ldr	r0, [pc, #164]	@ (8002304 <MX_TIM4_Init+0x128>)
 8002260:	f003 fac4 	bl	80057ec <HAL_TIM_PWM_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800226a:	f000 fc0b 	bl	8002a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800226e:	2300      	movs	r3, #0
 8002270:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002272:	2300      	movs	r3, #0
 8002274:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002276:	f107 0320 	add.w	r3, r7, #32
 800227a:	4619      	mov	r1, r3
 800227c:	4821      	ldr	r0, [pc, #132]	@ (8002304 <MX_TIM4_Init+0x128>)
 800227e:	f004 fabf 	bl	8006800 <HAL_TIMEx_MasterConfigSynchronization>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002288:	f000 fbfc 	bl	8002a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800228c:	2360      	movs	r3, #96	@ 0x60
 800228e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002294:	2300      	movs	r3, #0
 8002296:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800229c:	1d3b      	adds	r3, r7, #4
 800229e:	2200      	movs	r2, #0
 80022a0:	4619      	mov	r1, r3
 80022a2:	4818      	ldr	r0, [pc, #96]	@ (8002304 <MX_TIM4_Init+0x128>)
 80022a4:	f003 fdde 	bl	8005e64 <HAL_TIM_PWM_ConfigChannel>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80022ae:	f000 fbe9 	bl	8002a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	2204      	movs	r2, #4
 80022b6:	4619      	mov	r1, r3
 80022b8:	4812      	ldr	r0, [pc, #72]	@ (8002304 <MX_TIM4_Init+0x128>)
 80022ba:	f003 fdd3 	bl	8005e64 <HAL_TIM_PWM_ConfigChannel>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80022c4:	f000 fbde 	bl	8002a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022c8:	1d3b      	adds	r3, r7, #4
 80022ca:	2208      	movs	r2, #8
 80022cc:	4619      	mov	r1, r3
 80022ce:	480d      	ldr	r0, [pc, #52]	@ (8002304 <MX_TIM4_Init+0x128>)
 80022d0:	f003 fdc8 	bl	8005e64 <HAL_TIM_PWM_ConfigChannel>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80022da:	f000 fbd3 	bl	8002a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022de:	1d3b      	adds	r3, r7, #4
 80022e0:	220c      	movs	r2, #12
 80022e2:	4619      	mov	r1, r3
 80022e4:	4807      	ldr	r0, [pc, #28]	@ (8002304 <MX_TIM4_Init+0x128>)
 80022e6:	f003 fdbd 	bl	8005e64 <HAL_TIM_PWM_ConfigChannel>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 80022f0:	f000 fbc8 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80022f4:	4803      	ldr	r0, [pc, #12]	@ (8002304 <MX_TIM4_Init+0x128>)
 80022f6:	f000 fe13 	bl	8002f20 <HAL_TIM_MspPostInit>

}
 80022fa:	bf00      	nop
 80022fc:	3738      	adds	r7, #56	@ 0x38
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000354 	.word	0x20000354
 8002308:	40000800 	.word	0x40000800

0800230c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08c      	sub	sp, #48	@ 0x30
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002312:	f107 030c 	add.w	r3, r7, #12
 8002316:	2224      	movs	r2, #36	@ 0x24
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f007 fb39 	bl	8009992 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002320:	1d3b      	adds	r3, r7, #4
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002328:	4b22      	ldr	r3, [pc, #136]	@ (80023b4 <MX_TIM5_Init+0xa8>)
 800232a:	4a23      	ldr	r2, [pc, #140]	@ (80023b8 <MX_TIM5_Init+0xac>)
 800232c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800232e:	4b21      	ldr	r3, [pc, #132]	@ (80023b4 <MX_TIM5_Init+0xa8>)
 8002330:	2200      	movs	r2, #0
 8002332:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002334:	4b1f      	ldr	r3, [pc, #124]	@ (80023b4 <MX_TIM5_Init+0xa8>)
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800233a:	4b1e      	ldr	r3, [pc, #120]	@ (80023b4 <MX_TIM5_Init+0xa8>)
 800233c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002340:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002342:	4b1c      	ldr	r3, [pc, #112]	@ (80023b4 <MX_TIM5_Init+0xa8>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002348:	4b1a      	ldr	r3, [pc, #104]	@ (80023b4 <MX_TIM5_Init+0xa8>)
 800234a:	2200      	movs	r2, #0
 800234c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800234e:	2303      	movs	r3, #3
 8002350:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002356:	2301      	movs	r3, #1
 8002358:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800235a:	2300      	movs	r3, #0
 800235c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002362:	2300      	movs	r3, #0
 8002364:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002366:	2301      	movs	r3, #1
 8002368:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800236a:	2300      	movs	r3, #0
 800236c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002372:	f107 030c 	add.w	r3, r7, #12
 8002376:	4619      	mov	r1, r3
 8002378:	480e      	ldr	r0, [pc, #56]	@ (80023b4 <MX_TIM5_Init+0xa8>)
 800237a:	f003 fb4f 	bl	8005a1c <HAL_TIM_Encoder_Init>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002384:	f000 fb7e 	bl	8002a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002388:	2300      	movs	r3, #0
 800238a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800238c:	2300      	movs	r3, #0
 800238e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002390:	1d3b      	adds	r3, r7, #4
 8002392:	4619      	mov	r1, r3
 8002394:	4807      	ldr	r0, [pc, #28]	@ (80023b4 <MX_TIM5_Init+0xa8>)
 8002396:	f004 fa33 	bl	8006800 <HAL_TIMEx_MasterConfigSynchronization>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80023a0:	f000 fb70 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80023a4:	213c      	movs	r1, #60	@ 0x3c
 80023a6:	4803      	ldr	r0, [pc, #12]	@ (80023b4 <MX_TIM5_Init+0xa8>)
 80023a8:	f003 fbde 	bl	8005b68 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM5_Init 2 */

}
 80023ac:	bf00      	nop
 80023ae:	3730      	adds	r7, #48	@ 0x30
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	2000039c 	.word	0x2000039c
 80023b8:	40000c00 	.word	0x40000c00

080023bc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b092      	sub	sp, #72	@ 0x48
 80023c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
 80023dc:	615a      	str	r2, [r3, #20]
 80023de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023e0:	1d3b      	adds	r3, r7, #4
 80023e2:	2220      	movs	r2, #32
 80023e4:	2100      	movs	r1, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f007 fad3 	bl	8009992 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80023ec:	4b45      	ldr	r3, [pc, #276]	@ (8002504 <MX_TIM8_Init+0x148>)
 80023ee:	4a46      	ldr	r2, [pc, #280]	@ (8002508 <MX_TIM8_Init+0x14c>)
 80023f0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80023f2:	4b44      	ldr	r3, [pc, #272]	@ (8002504 <MX_TIM8_Init+0x148>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023f8:	4b42      	ldr	r3, [pc, #264]	@ (8002504 <MX_TIM8_Init+0x148>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80023fe:	4b41      	ldr	r3, [pc, #260]	@ (8002504 <MX_TIM8_Init+0x148>)
 8002400:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002404:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002406:	4b3f      	ldr	r3, [pc, #252]	@ (8002504 <MX_TIM8_Init+0x148>)
 8002408:	2200      	movs	r2, #0
 800240a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800240c:	4b3d      	ldr	r3, [pc, #244]	@ (8002504 <MX_TIM8_Init+0x148>)
 800240e:	2200      	movs	r2, #0
 8002410:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002412:	4b3c      	ldr	r3, [pc, #240]	@ (8002504 <MX_TIM8_Init+0x148>)
 8002414:	2200      	movs	r2, #0
 8002416:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002418:	483a      	ldr	r0, [pc, #232]	@ (8002504 <MX_TIM8_Init+0x148>)
 800241a:	f003 f9e7 	bl	80057ec <HAL_TIM_PWM_Init>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002424:	f000 fb2e 	bl	8002a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002428:	2300      	movs	r3, #0
 800242a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800242c:	2300      	movs	r3, #0
 800242e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002430:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002434:	4619      	mov	r1, r3
 8002436:	4833      	ldr	r0, [pc, #204]	@ (8002504 <MX_TIM8_Init+0x148>)
 8002438:	f004 f9e2 	bl	8006800 <HAL_TIMEx_MasterConfigSynchronization>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002442:	f000 fb1f 	bl	8002a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002446:	2360      	movs	r3, #96	@ 0x60
 8002448:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800244e:	2300      	movs	r3, #0
 8002450:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002452:	2300      	movs	r3, #0
 8002454:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002456:	2300      	movs	r3, #0
 8002458:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800245a:	2300      	movs	r3, #0
 800245c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800245e:	2300      	movs	r3, #0
 8002460:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002462:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002466:	2200      	movs	r2, #0
 8002468:	4619      	mov	r1, r3
 800246a:	4826      	ldr	r0, [pc, #152]	@ (8002504 <MX_TIM8_Init+0x148>)
 800246c:	f003 fcfa 	bl	8005e64 <HAL_TIM_PWM_ConfigChannel>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002476:	f000 fb05 	bl	8002a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800247a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800247e:	2204      	movs	r2, #4
 8002480:	4619      	mov	r1, r3
 8002482:	4820      	ldr	r0, [pc, #128]	@ (8002504 <MX_TIM8_Init+0x148>)
 8002484:	f003 fcee 	bl	8005e64 <HAL_TIM_PWM_ConfigChannel>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800248e:	f000 faf9 	bl	8002a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002492:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002496:	2208      	movs	r2, #8
 8002498:	4619      	mov	r1, r3
 800249a:	481a      	ldr	r0, [pc, #104]	@ (8002504 <MX_TIM8_Init+0x148>)
 800249c:	f003 fce2 	bl	8005e64 <HAL_TIM_PWM_ConfigChannel>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 80024a6:	f000 faed 	bl	8002a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024ae:	220c      	movs	r2, #12
 80024b0:	4619      	mov	r1, r3
 80024b2:	4814      	ldr	r0, [pc, #80]	@ (8002504 <MX_TIM8_Init+0x148>)
 80024b4:	f003 fcd6 	bl	8005e64 <HAL_TIM_PWM_ConfigChannel>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 80024be:	f000 fae1 	bl	8002a84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024c6:	2300      	movs	r3, #0
 80024c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024dc:	2300      	movs	r3, #0
 80024de:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80024e0:	1d3b      	adds	r3, r7, #4
 80024e2:	4619      	mov	r1, r3
 80024e4:	4807      	ldr	r0, [pc, #28]	@ (8002504 <MX_TIM8_Init+0x148>)
 80024e6:	f004 fa07 	bl	80068f8 <HAL_TIMEx_ConfigBreakDeadTime>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 80024f0:	f000 fac8 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80024f4:	4803      	ldr	r0, [pc, #12]	@ (8002504 <MX_TIM8_Init+0x148>)
 80024f6:	f000 fd13 	bl	8002f20 <HAL_TIM_MspPostInit>

}
 80024fa:	bf00      	nop
 80024fc:	3748      	adds	r7, #72	@ 0x48
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	200003e4 	.word	0x200003e4
 8002508:	40010400 	.word	0x40010400

0800250c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002512:	463b      	mov	r3, r7
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800251e:	4b16      	ldr	r3, [pc, #88]	@ (8002578 <MX_TIM9_Init+0x6c>)
 8002520:	4a16      	ldr	r2, [pc, #88]	@ (800257c <MX_TIM9_Init+0x70>)
 8002522:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 146;
 8002524:	4b14      	ldr	r3, [pc, #80]	@ (8002578 <MX_TIM9_Init+0x6c>)
 8002526:	2292      	movs	r2, #146	@ 0x92
 8002528:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800252a:	4b13      	ldr	r3, [pc, #76]	@ (8002578 <MX_TIM9_Init+0x6c>)
 800252c:	2200      	movs	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8002530:	4b11      	ldr	r3, [pc, #68]	@ (8002578 <MX_TIM9_Init+0x6c>)
 8002532:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002536:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002538:	4b0f      	ldr	r3, [pc, #60]	@ (8002578 <MX_TIM9_Init+0x6c>)
 800253a:	2200      	movs	r2, #0
 800253c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800253e:	4b0e      	ldr	r3, [pc, #56]	@ (8002578 <MX_TIM9_Init+0x6c>)
 8002540:	2200      	movs	r2, #0
 8002542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002544:	480c      	ldr	r0, [pc, #48]	@ (8002578 <MX_TIM9_Init+0x6c>)
 8002546:	f003 f892 	bl	800566e <HAL_TIM_Base_Init>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8002550:	f000 fa98 	bl	8002a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002554:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002558:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800255a:	463b      	mov	r3, r7
 800255c:	4619      	mov	r1, r3
 800255e:	4806      	ldr	r0, [pc, #24]	@ (8002578 <MX_TIM9_Init+0x6c>)
 8002560:	f003 fd42 	bl	8005fe8 <HAL_TIM_ConfigClockSource>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800256a:	f000 fa8b 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	2000042c 	.word	0x2000042c
 800257c:	40014000 	.word	0x40014000

08002580 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002584:	4b0e      	ldr	r3, [pc, #56]	@ (80025c0 <MX_TIM10_Init+0x40>)
 8002586:	4a0f      	ldr	r2, [pc, #60]	@ (80025c4 <MX_TIM10_Init+0x44>)
 8002588:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1500;
 800258a:	4b0d      	ldr	r3, [pc, #52]	@ (80025c0 <MX_TIM10_Init+0x40>)
 800258c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002590:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002592:	4b0b      	ldr	r3, [pc, #44]	@ (80025c0 <MX_TIM10_Init+0x40>)
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002598:	4b09      	ldr	r3, [pc, #36]	@ (80025c0 <MX_TIM10_Init+0x40>)
 800259a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800259e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a0:	4b07      	ldr	r3, [pc, #28]	@ (80025c0 <MX_TIM10_Init+0x40>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a6:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <MX_TIM10_Init+0x40>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80025ac:	4804      	ldr	r0, [pc, #16]	@ (80025c0 <MX_TIM10_Init+0x40>)
 80025ae:	f003 f85e 	bl	800566e <HAL_TIM_Base_Init>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80025b8:	f000 fa64 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80025bc:	bf00      	nop
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000474 	.word	0x20000474
 80025c4:	40014400 	.word	0x40014400

080025c8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ce:	463b      	mov	r3, r7
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80025da:	4b16      	ldr	r3, [pc, #88]	@ (8002634 <MX_TIM12_Init+0x6c>)
 80025dc:	4a16      	ldr	r2, [pc, #88]	@ (8002638 <MX_TIM12_Init+0x70>)
 80025de:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1500;
 80025e0:	4b14      	ldr	r3, [pc, #80]	@ (8002634 <MX_TIM12_Init+0x6c>)
 80025e2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80025e6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e8:	4b12      	ldr	r3, [pc, #72]	@ (8002634 <MX_TIM12_Init+0x6c>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80025ee:	4b11      	ldr	r3, [pc, #68]	@ (8002634 <MX_TIM12_Init+0x6c>)
 80025f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025f4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002634 <MX_TIM12_Init+0x6c>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002634 <MX_TIM12_Init+0x6c>)
 80025fe:	2200      	movs	r2, #0
 8002600:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002602:	480c      	ldr	r0, [pc, #48]	@ (8002634 <MX_TIM12_Init+0x6c>)
 8002604:	f003 f833 	bl	800566e <HAL_TIM_Base_Init>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 800260e:	f000 fa39 	bl	8002a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002612:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002616:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002618:	463b      	mov	r3, r7
 800261a:	4619      	mov	r1, r3
 800261c:	4805      	ldr	r0, [pc, #20]	@ (8002634 <MX_TIM12_Init+0x6c>)
 800261e:	f003 fce3 	bl	8005fe8 <HAL_TIM_ConfigClockSource>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8002628:	f000 fa2c 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800262c:	bf00      	nop
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	200004bc 	.word	0x200004bc
 8002638:	40001800 	.word	0x40001800

0800263c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002640:	4b11      	ldr	r3, [pc, #68]	@ (8002688 <MX_USART2_UART_Init+0x4c>)
 8002642:	4a12      	ldr	r2, [pc, #72]	@ (800268c <MX_USART2_UART_Init+0x50>)
 8002644:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002646:	4b10      	ldr	r3, [pc, #64]	@ (8002688 <MX_USART2_UART_Init+0x4c>)
 8002648:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800264c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800264e:	4b0e      	ldr	r3, [pc, #56]	@ (8002688 <MX_USART2_UART_Init+0x4c>)
 8002650:	2200      	movs	r2, #0
 8002652:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002654:	4b0c      	ldr	r3, [pc, #48]	@ (8002688 <MX_USART2_UART_Init+0x4c>)
 8002656:	2200      	movs	r2, #0
 8002658:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800265a:	4b0b      	ldr	r3, [pc, #44]	@ (8002688 <MX_USART2_UART_Init+0x4c>)
 800265c:	2200      	movs	r2, #0
 800265e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002660:	4b09      	ldr	r3, [pc, #36]	@ (8002688 <MX_USART2_UART_Init+0x4c>)
 8002662:	220c      	movs	r2, #12
 8002664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002666:	4b08      	ldr	r3, [pc, #32]	@ (8002688 <MX_USART2_UART_Init+0x4c>)
 8002668:	2200      	movs	r2, #0
 800266a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800266c:	4b06      	ldr	r3, [pc, #24]	@ (8002688 <MX_USART2_UART_Init+0x4c>)
 800266e:	2200      	movs	r2, #0
 8002670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002672:	4805      	ldr	r0, [pc, #20]	@ (8002688 <MX_USART2_UART_Init+0x4c>)
 8002674:	f004 f9a6 	bl	80069c4 <HAL_UART_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800267e:	f000 fa01 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000504 	.word	0x20000504
 800268c:	40004400 	.word	0x40004400

08002690 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002694:	4b11      	ldr	r3, [pc, #68]	@ (80026dc <MX_USART3_UART_Init+0x4c>)
 8002696:	4a12      	ldr	r2, [pc, #72]	@ (80026e0 <MX_USART3_UART_Init+0x50>)
 8002698:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800269a:	4b10      	ldr	r3, [pc, #64]	@ (80026dc <MX_USART3_UART_Init+0x4c>)
 800269c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80026a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026a2:	4b0e      	ldr	r3, [pc, #56]	@ (80026dc <MX_USART3_UART_Init+0x4c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026a8:	4b0c      	ldr	r3, [pc, #48]	@ (80026dc <MX_USART3_UART_Init+0x4c>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026ae:	4b0b      	ldr	r3, [pc, #44]	@ (80026dc <MX_USART3_UART_Init+0x4c>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026b4:	4b09      	ldr	r3, [pc, #36]	@ (80026dc <MX_USART3_UART_Init+0x4c>)
 80026b6:	220c      	movs	r2, #12
 80026b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ba:	4b08      	ldr	r3, [pc, #32]	@ (80026dc <MX_USART3_UART_Init+0x4c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c0:	4b06      	ldr	r3, [pc, #24]	@ (80026dc <MX_USART3_UART_Init+0x4c>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026c6:	4805      	ldr	r0, [pc, #20]	@ (80026dc <MX_USART3_UART_Init+0x4c>)
 80026c8:	f004 f97c 	bl	80069c4 <HAL_UART_Init>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80026d2:	f000 f9d7 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	2000054c 	.word	0x2000054c
 80026e0:	40004800 	.word	0x40004800

080026e4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80026e8:	4b11      	ldr	r3, [pc, #68]	@ (8002730 <MX_USART6_UART_Init+0x4c>)
 80026ea:	4a12      	ldr	r2, [pc, #72]	@ (8002734 <MX_USART6_UART_Init+0x50>)
 80026ec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80026ee:	4b10      	ldr	r3, [pc, #64]	@ (8002730 <MX_USART6_UART_Init+0x4c>)
 80026f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026f4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80026f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002730 <MX_USART6_UART_Init+0x4c>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80026fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002730 <MX_USART6_UART_Init+0x4c>)
 80026fe:	2200      	movs	r2, #0
 8002700:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002702:	4b0b      	ldr	r3, [pc, #44]	@ (8002730 <MX_USART6_UART_Init+0x4c>)
 8002704:	2200      	movs	r2, #0
 8002706:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002708:	4b09      	ldr	r3, [pc, #36]	@ (8002730 <MX_USART6_UART_Init+0x4c>)
 800270a:	220c      	movs	r2, #12
 800270c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800270e:	4b08      	ldr	r3, [pc, #32]	@ (8002730 <MX_USART6_UART_Init+0x4c>)
 8002710:	2200      	movs	r2, #0
 8002712:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002714:	4b06      	ldr	r3, [pc, #24]	@ (8002730 <MX_USART6_UART_Init+0x4c>)
 8002716:	2200      	movs	r2, #0
 8002718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800271a:	4805      	ldr	r0, [pc, #20]	@ (8002730 <MX_USART6_UART_Init+0x4c>)
 800271c:	f004 f952 	bl	80069c4 <HAL_UART_Init>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002726:	f000 f9ad 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20000594 	.word	0x20000594
 8002734:	40011400 	.word	0x40011400

08002738 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800273c:	4b15      	ldr	r3, [pc, #84]	@ (8002794 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800273e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002742:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002744:	4b13      	ldr	r3, [pc, #76]	@ (8002794 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002746:	2206      	movs	r2, #6
 8002748:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800274a:	4b12      	ldr	r3, [pc, #72]	@ (8002794 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800274c:	2202      	movs	r2, #2
 800274e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002750:	4b10      	ldr	r3, [pc, #64]	@ (8002794 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002752:	2200      	movs	r2, #0
 8002754:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002756:	4b0f      	ldr	r3, [pc, #60]	@ (8002794 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002758:	2202      	movs	r2, #2
 800275a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800275c:	4b0d      	ldr	r3, [pc, #52]	@ (8002794 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800275e:	2201      	movs	r2, #1
 8002760:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002762:	4b0c      	ldr	r3, [pc, #48]	@ (8002794 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002764:	2200      	movs	r2, #0
 8002766:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002768:	4b0a      	ldr	r3, [pc, #40]	@ (8002794 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800276a:	2200      	movs	r2, #0
 800276c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800276e:	4b09      	ldr	r3, [pc, #36]	@ (8002794 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002770:	2201      	movs	r2, #1
 8002772:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002774:	4b07      	ldr	r3, [pc, #28]	@ (8002794 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002776:	2201      	movs	r2, #1
 8002778:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800277a:	4b06      	ldr	r3, [pc, #24]	@ (8002794 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800277c:	2200      	movs	r2, #0
 800277e:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002780:	4804      	ldr	r0, [pc, #16]	@ (8002794 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002782:	f001 ff3e 	bl	8004602 <HAL_PCD_Init>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 800278c:	f000 f97a 	bl	8002a84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002790:	bf00      	nop
 8002792:	bd80      	pop	{r7, pc}
 8002794:	200006fc 	.word	0x200006fc

08002798 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	607b      	str	r3, [r7, #4]
 80027a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002810 <MX_DMA_Init+0x78>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002810 <MX_DMA_Init+0x78>)
 80027a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ae:	4b18      	ldr	r3, [pc, #96]	@ (8002810 <MX_DMA_Init+0x78>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027b6:	607b      	str	r3, [r7, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	603b      	str	r3, [r7, #0]
 80027be:	4b14      	ldr	r3, [pc, #80]	@ (8002810 <MX_DMA_Init+0x78>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c2:	4a13      	ldr	r2, [pc, #76]	@ (8002810 <MX_DMA_Init+0x78>)
 80027c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ca:	4b11      	ldr	r3, [pc, #68]	@ (8002810 <MX_DMA_Init+0x78>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2100      	movs	r1, #0
 80027da:	200c      	movs	r0, #12
 80027dc:	f001 f907 	bl	80039ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80027e0:	200c      	movs	r0, #12
 80027e2:	f001 f920 	bl	8003a26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80027e6:	2200      	movs	r2, #0
 80027e8:	2100      	movs	r1, #0
 80027ea:	2010      	movs	r0, #16
 80027ec:	f001 f8ff 	bl	80039ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80027f0:	2010      	movs	r0, #16
 80027f2:	f001 f918 	bl	8003a26 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2100      	movs	r1, #0
 80027fa:	2039      	movs	r0, #57	@ 0x39
 80027fc:	f001 f8f7 	bl	80039ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002800:	2039      	movs	r0, #57	@ 0x39
 8002802:	f001 f910 	bl	8003a26 <HAL_NVIC_EnableIRQ>

}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800

08002814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08e      	sub	sp, #56	@ 0x38
 8002818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	605a      	str	r2, [r3, #4]
 8002824:	609a      	str	r2, [r3, #8]
 8002826:	60da      	str	r2, [r3, #12]
 8002828:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	623b      	str	r3, [r7, #32]
 800282e:	4b8e      	ldr	r3, [pc, #568]	@ (8002a68 <MX_GPIO_Init+0x254>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	4a8d      	ldr	r2, [pc, #564]	@ (8002a68 <MX_GPIO_Init+0x254>)
 8002834:	f043 0304 	orr.w	r3, r3, #4
 8002838:	6313      	str	r3, [r2, #48]	@ 0x30
 800283a:	4b8b      	ldr	r3, [pc, #556]	@ (8002a68 <MX_GPIO_Init+0x254>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	623b      	str	r3, [r7, #32]
 8002844:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	4b87      	ldr	r3, [pc, #540]	@ (8002a68 <MX_GPIO_Init+0x254>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284e:	4a86      	ldr	r2, [pc, #536]	@ (8002a68 <MX_GPIO_Init+0x254>)
 8002850:	f043 0320 	orr.w	r3, r3, #32
 8002854:	6313      	str	r3, [r2, #48]	@ 0x30
 8002856:	4b84      	ldr	r3, [pc, #528]	@ (8002a68 <MX_GPIO_Init+0x254>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285a:	f003 0320 	and.w	r3, r3, #32
 800285e:	61fb      	str	r3, [r7, #28]
 8002860:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	61bb      	str	r3, [r7, #24]
 8002866:	4b80      	ldr	r3, [pc, #512]	@ (8002a68 <MX_GPIO_Init+0x254>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286a:	4a7f      	ldr	r2, [pc, #508]	@ (8002a68 <MX_GPIO_Init+0x254>)
 800286c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002870:	6313      	str	r3, [r2, #48]	@ 0x30
 8002872:	4b7d      	ldr	r3, [pc, #500]	@ (8002a68 <MX_GPIO_Init+0x254>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800287a:	61bb      	str	r3, [r7, #24]
 800287c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	4b79      	ldr	r3, [pc, #484]	@ (8002a68 <MX_GPIO_Init+0x254>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002886:	4a78      	ldr	r2, [pc, #480]	@ (8002a68 <MX_GPIO_Init+0x254>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6313      	str	r3, [r2, #48]	@ 0x30
 800288e:	4b76      	ldr	r3, [pc, #472]	@ (8002a68 <MX_GPIO_Init+0x254>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	4b72      	ldr	r3, [pc, #456]	@ (8002a68 <MX_GPIO_Init+0x254>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a2:	4a71      	ldr	r2, [pc, #452]	@ (8002a68 <MX_GPIO_Init+0x254>)
 80028a4:	f043 0310 	orr.w	r3, r3, #16
 80028a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028aa:	4b6f      	ldr	r3, [pc, #444]	@ (8002a68 <MX_GPIO_Init+0x254>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ae:	f003 0310 	and.w	r3, r3, #16
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	4b6b      	ldr	r3, [pc, #428]	@ (8002a68 <MX_GPIO_Init+0x254>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028be:	4a6a      	ldr	r2, [pc, #424]	@ (8002a68 <MX_GPIO_Init+0x254>)
 80028c0:	f043 0302 	orr.w	r3, r3, #2
 80028c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c6:	4b68      	ldr	r3, [pc, #416]	@ (8002a68 <MX_GPIO_Init+0x254>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	4b64      	ldr	r3, [pc, #400]	@ (8002a68 <MX_GPIO_Init+0x254>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	4a63      	ldr	r2, [pc, #396]	@ (8002a68 <MX_GPIO_Init+0x254>)
 80028dc:	f043 0308 	orr.w	r3, r3, #8
 80028e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028e2:	4b61      	ldr	r3, [pc, #388]	@ (8002a68 <MX_GPIO_Init+0x254>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	607b      	str	r3, [r7, #4]
 80028f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002a68 <MX_GPIO_Init+0x254>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	4a5c      	ldr	r2, [pc, #368]	@ (8002a68 <MX_GPIO_Init+0x254>)
 80028f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028fe:	4b5a      	ldr	r3, [pc, #360]	@ (8002a68 <MX_GPIO_Init+0x254>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002906:	607b      	str	r3, [r7, #4]
 8002908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 800290a:	2200      	movs	r2, #0
 800290c:	2180      	movs	r1, #128	@ 0x80
 800290e:	4857      	ldr	r0, [pc, #348]	@ (8002a6c <MX_GPIO_Init+0x258>)
 8002910:	f001 fe3a 	bl	8004588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002914:	2200      	movs	r2, #0
 8002916:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 800291a:	4855      	ldr	r0, [pc, #340]	@ (8002a70 <MX_GPIO_Init+0x25c>)
 800291c:	f001 fe34 	bl	8004588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8002920:	2200      	movs	r2, #0
 8002922:	2140      	movs	r1, #64	@ 0x40
 8002924:	4853      	ldr	r0, [pc, #332]	@ (8002a74 <MX_GPIO_Init+0x260>)
 8002926:	f001 fe2f 	bl	8004588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800292a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800292e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002930:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002934:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800293a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800293e:	4619      	mov	r1, r3
 8002940:	484d      	ldr	r0, [pc, #308]	@ (8002a78 <MX_GPIO_Init+0x264>)
 8002942:	f001 fc8d 	bl	8004260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002946:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800294a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800294c:	2300      	movs	r3, #0
 800294e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002954:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002958:	4619      	mov	r1, r3
 800295a:	4848      	ldr	r0, [pc, #288]	@ (8002a7c <MX_GPIO_Init+0x268>)
 800295c:	f001 fc80 	bl	8004260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002960:	2380      	movs	r3, #128	@ 0x80
 8002962:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002964:	2301      	movs	r3, #1
 8002966:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296c:	2300      	movs	r3, #0
 800296e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002970:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002974:	4619      	mov	r1, r3
 8002976:	483d      	ldr	r0, [pc, #244]	@ (8002a6c <MX_GPIO_Init+0x258>)
 8002978:	f001 fc72 	bl	8004260 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800297c:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8002980:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002982:	2301      	movs	r3, #1
 8002984:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	2300      	movs	r3, #0
 8002988:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298a:	2300      	movs	r3, #0
 800298c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002992:	4619      	mov	r1, r3
 8002994:	4836      	ldr	r0, [pc, #216]	@ (8002a70 <MX_GPIO_Init+0x25c>)
 8002996:	f001 fc63 	bl	8004260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800299a:	230c      	movs	r3, #12
 800299c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800299e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80029a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029ac:	4619      	mov	r1, r3
 80029ae:	4831      	ldr	r0, [pc, #196]	@ (8002a74 <MX_GPIO_Init+0x260>)
 80029b0:	f001 fc56 	bl	8004260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029b4:	2340      	movs	r3, #64	@ 0x40
 80029b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b8:	2301      	movs	r3, #1
 80029ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c0:	2300      	movs	r3, #0
 80029c2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029c8:	4619      	mov	r1, r3
 80029ca:	482a      	ldr	r0, [pc, #168]	@ (8002a74 <MX_GPIO_Init+0x260>)
 80029cc:	f001 fc48 	bl	8004260 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80029d0:	2380      	movs	r3, #128	@ 0x80
 80029d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029d4:	2300      	movs	r3, #0
 80029d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80029dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029e0:	4619      	mov	r1, r3
 80029e2:	4824      	ldr	r0, [pc, #144]	@ (8002a74 <MX_GPIO_Init+0x260>)
 80029e4:	f001 fc3c 	bl	8004260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80029e8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80029ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80029ee:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80029f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029fc:	4619      	mov	r1, r3
 80029fe:	481e      	ldr	r0, [pc, #120]	@ (8002a78 <MX_GPIO_Init+0x264>)
 8002a00:	f001 fc2e 	bl	8004260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a04:	23c0      	movs	r3, #192	@ 0xc0
 8002a06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002a08:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a16:	4619      	mov	r1, r3
 8002a18:	4819      	ldr	r0, [pc, #100]	@ (8002a80 <MX_GPIO_Init+0x26c>)
 8002a1a:	f001 fc21 	bl	8004260 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2100      	movs	r1, #0
 8002a22:	2008      	movs	r0, #8
 8002a24:	f000 ffe3 	bl	80039ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002a28:	2008      	movs	r0, #8
 8002a2a:	f000 fffc 	bl	8003a26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2100      	movs	r1, #0
 8002a32:	2009      	movs	r0, #9
 8002a34:	f000 ffdb 	bl	80039ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002a38:	2009      	movs	r0, #9
 8002a3a:	f000 fff4 	bl	8003a26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2100      	movs	r1, #0
 8002a42:	2017      	movs	r0, #23
 8002a44:	f000 ffd3 	bl	80039ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002a48:	2017      	movs	r0, #23
 8002a4a:	f000 ffec 	bl	8003a26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2100      	movs	r1, #0
 8002a52:	2028      	movs	r0, #40	@ 0x28
 8002a54:	f000 ffcb 	bl	80039ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a58:	2028      	movs	r0, #40	@ 0x28
 8002a5a:	f000 ffe4 	bl	8003a26 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a5e:	bf00      	nop
 8002a60:	3738      	adds	r7, #56	@ 0x38
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40020400 	.word	0x40020400
 8002a74:	40021800 	.word	0x40021800
 8002a78:	40020800 	.word	0x40020800
 8002a7c:	40021400 	.word	0x40021400
 8002a80:	40020c00 	.word	0x40020c00

08002a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a88:	b672      	cpsid	i
}
 8002a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a8c:	bf00      	nop
 8002a8e:	e7fd      	b.n	8002a8c <Error_Handler+0x8>

08002a90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	607b      	str	r3, [r7, #4]
 8002a9a:	4b10      	ldr	r3, [pc, #64]	@ (8002adc <HAL_MspInit+0x4c>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9e:	4a0f      	ldr	r2, [pc, #60]	@ (8002adc <HAL_MspInit+0x4c>)
 8002aa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8002adc <HAL_MspInit+0x4c>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aae:	607b      	str	r3, [r7, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	4b09      	ldr	r3, [pc, #36]	@ (8002adc <HAL_MspInit+0x4c>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	4a08      	ldr	r2, [pc, #32]	@ (8002adc <HAL_MspInit+0x4c>)
 8002abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ac0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ac2:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <HAL_MspInit+0x4c>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800

08002ae0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08a      	sub	sp, #40	@ 0x28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae8:	f107 0314 	add.w	r3, r7, #20
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a28      	ldr	r2, [pc, #160]	@ (8002ba0 <HAL_SPI_MspInit+0xc0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d14a      	bne.n	8002b98 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	4b27      	ldr	r3, [pc, #156]	@ (8002ba4 <HAL_SPI_MspInit+0xc4>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0a:	4a26      	ldr	r2, [pc, #152]	@ (8002ba4 <HAL_SPI_MspInit+0xc4>)
 8002b0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b12:	4b24      	ldr	r3, [pc, #144]	@ (8002ba4 <HAL_SPI_MspInit+0xc4>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	4b20      	ldr	r3, [pc, #128]	@ (8002ba4 <HAL_SPI_MspInit+0xc4>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b26:	4a1f      	ldr	r2, [pc, #124]	@ (8002ba4 <HAL_SPI_MspInit+0xc4>)
 8002b28:	f043 0304 	orr.w	r3, r3, #4
 8002b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba4 <HAL_SPI_MspInit+0xc4>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	4b19      	ldr	r3, [pc, #100]	@ (8002ba4 <HAL_SPI_MspInit+0xc4>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b42:	4a18      	ldr	r2, [pc, #96]	@ (8002ba4 <HAL_SPI_MspInit+0xc4>)
 8002b44:	f043 0302 	orr.w	r3, r3, #2
 8002b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b4a:	4b16      	ldr	r3, [pc, #88]	@ (8002ba4 <HAL_SPI_MspInit+0xc4>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b56:	2308      	movs	r3, #8
 8002b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b62:	2303      	movs	r3, #3
 8002b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b66:	2305      	movs	r3, #5
 8002b68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b6a:	f107 0314 	add.w	r3, r7, #20
 8002b6e:	4619      	mov	r1, r3
 8002b70:	480d      	ldr	r0, [pc, #52]	@ (8002ba8 <HAL_SPI_MspInit+0xc8>)
 8002b72:	f001 fb75 	bl	8004260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b84:	2303      	movs	r3, #3
 8002b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b88:	2305      	movs	r3, #5
 8002b8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8c:	f107 0314 	add.w	r3, r7, #20
 8002b90:	4619      	mov	r1, r3
 8002b92:	4806      	ldr	r0, [pc, #24]	@ (8002bac <HAL_SPI_MspInit+0xcc>)
 8002b94:	f001 fb64 	bl	8004260 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002b98:	bf00      	nop
 8002b9a:	3728      	adds	r7, #40	@ 0x28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40003800 	.word	0x40003800
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40020800 	.word	0x40020800
 8002bac:	40020400 	.word	0x40020400

08002bb0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b090      	sub	sp, #64	@ 0x40
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	60da      	str	r2, [r3, #12]
 8002bc6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a7b      	ldr	r2, [pc, #492]	@ (8002dbc <HAL_TIM_Encoder_MspInit+0x20c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d13d      	bne.n	8002c4e <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bd6:	4b7a      	ldr	r3, [pc, #488]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x210>)
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bda:	4a79      	ldr	r2, [pc, #484]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x210>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002be2:	4b77      	ldr	r3, [pc, #476]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x210>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bf2:	4b73      	ldr	r3, [pc, #460]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x210>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	4a72      	ldr	r2, [pc, #456]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x210>)
 8002bf8:	f043 0310 	orr.w	r3, r3, #16
 8002bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bfe:	4b70      	ldr	r3, [pc, #448]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x210>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002c0a:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c10:	2302      	movs	r3, #2
 8002c12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c24:	4619      	mov	r1, r3
 8002c26:	4867      	ldr	r0, [pc, #412]	@ (8002dc4 <HAL_TIM_Encoder_MspInit+0x214>)
 8002c28:	f001 fb1a 	bl	8004260 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2100      	movs	r1, #0
 8002c30:	2018      	movs	r0, #24
 8002c32:	f000 fedc 	bl	80039ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002c36:	2018      	movs	r0, #24
 8002c38:	f000 fef5 	bl	8003a26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2100      	movs	r1, #0
 8002c40:	2019      	movs	r0, #25
 8002c42:	f000 fed4 	bl	80039ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002c46:	2019      	movs	r0, #25
 8002c48:	f000 feed 	bl	8003a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002c4c:	e0b2      	b.n	8002db4 <HAL_TIM_Encoder_MspInit+0x204>
  else if(htim_encoder->Instance==TIM2)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c56:	d12c      	bne.n	8002cb2 <HAL_TIM_Encoder_MspInit+0x102>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c58:	2300      	movs	r3, #0
 8002c5a:	623b      	str	r3, [r7, #32]
 8002c5c:	4b58      	ldr	r3, [pc, #352]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x210>)
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c60:	4a57      	ldr	r2, [pc, #348]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x210>)
 8002c62:	f043 0301 	orr.w	r3, r3, #1
 8002c66:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c68:	4b55      	ldr	r3, [pc, #340]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x210>)
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	623b      	str	r3, [r7, #32]
 8002c72:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c74:	2300      	movs	r3, #0
 8002c76:	61fb      	str	r3, [r7, #28]
 8002c78:	4b51      	ldr	r3, [pc, #324]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x210>)
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7c:	4a50      	ldr	r2, [pc, #320]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x210>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c84:	4b4e      	ldr	r3, [pc, #312]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x210>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	61fb      	str	r3, [r7, #28]
 8002c8e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c90:	2303      	movs	r3, #3
 8002c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c94:	2302      	movs	r3, #2
 8002c96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4847      	ldr	r0, [pc, #284]	@ (8002dc8 <HAL_TIM_Encoder_MspInit+0x218>)
 8002cac:	f001 fad8 	bl	8004260 <HAL_GPIO_Init>
}
 8002cb0:	e080      	b.n	8002db4 <HAL_TIM_Encoder_MspInit+0x204>
  else if(htim_encoder->Instance==TIM3)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a45      	ldr	r2, [pc, #276]	@ (8002dcc <HAL_TIM_Encoder_MspInit+0x21c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d14a      	bne.n	8002d52 <HAL_TIM_Encoder_MspInit+0x1a2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	61bb      	str	r3, [r7, #24]
 8002cc0:	4b3f      	ldr	r3, [pc, #252]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x210>)
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc4:	4a3e      	ldr	r2, [pc, #248]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x210>)
 8002cc6:	f043 0302 	orr.w	r3, r3, #2
 8002cca:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ccc:	4b3c      	ldr	r3, [pc, #240]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x210>)
 8002cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	61bb      	str	r3, [r7, #24]
 8002cd6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	4b38      	ldr	r3, [pc, #224]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x210>)
 8002cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce0:	4a37      	ldr	r2, [pc, #220]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x210>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ce8:	4b35      	ldr	r3, [pc, #212]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x210>)
 8002cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	4b31      	ldr	r3, [pc, #196]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x210>)
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfc:	4a30      	ldr	r2, [pc, #192]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x210>)
 8002cfe:	f043 0302 	orr.w	r3, r3, #2
 8002d02:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d04:	4b2e      	ldr	r3, [pc, #184]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x210>)
 8002d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d10:	2340      	movs	r3, #64	@ 0x40
 8002d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d14:	2302      	movs	r3, #2
 8002d16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d20:	2302      	movs	r3, #2
 8002d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4827      	ldr	r0, [pc, #156]	@ (8002dc8 <HAL_TIM_Encoder_MspInit+0x218>)
 8002d2c:	f001 fa98 	bl	8004260 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002d30:	2320      	movs	r3, #32
 8002d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d34:	2302      	movs	r3, #2
 8002d36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d40:	2302      	movs	r3, #2
 8002d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4821      	ldr	r0, [pc, #132]	@ (8002dd0 <HAL_TIM_Encoder_MspInit+0x220>)
 8002d4c:	f001 fa88 	bl	8004260 <HAL_GPIO_Init>
}
 8002d50:	e030      	b.n	8002db4 <HAL_TIM_Encoder_MspInit+0x204>
  else if(htim_encoder->Instance==TIM5)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a1f      	ldr	r2, [pc, #124]	@ (8002dd4 <HAL_TIM_Encoder_MspInit+0x224>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d12b      	bne.n	8002db4 <HAL_TIM_Encoder_MspInit+0x204>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	4b17      	ldr	r3, [pc, #92]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x210>)
 8002d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d64:	4a16      	ldr	r2, [pc, #88]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x210>)
 8002d66:	f043 0308 	orr.w	r3, r3, #8
 8002d6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d6c:	4b14      	ldr	r3, [pc, #80]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x210>)
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	4b10      	ldr	r3, [pc, #64]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x210>)
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d80:	4a0f      	ldr	r2, [pc, #60]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x210>)
 8002d82:	f043 0320 	orr.w	r3, r3, #32
 8002d86:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d88:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc0 <HAL_TIM_Encoder_MspInit+0x210>)
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8c:	f003 0320 	and.w	r3, r3, #32
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002d94:	2318      	movs	r3, #24
 8002d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da0:	2300      	movs	r3, #0
 8002da2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002da4:	2302      	movs	r3, #2
 8002da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002da8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dac:	4619      	mov	r1, r3
 8002dae:	480a      	ldr	r0, [pc, #40]	@ (8002dd8 <HAL_TIM_Encoder_MspInit+0x228>)
 8002db0:	f001 fa56 	bl	8004260 <HAL_GPIO_Init>
}
 8002db4:	bf00      	nop
 8002db6:	3740      	adds	r7, #64	@ 0x40
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40010000 	.word	0x40010000
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40020000 	.word	0x40020000
 8002dcc:	40000400 	.word	0x40000400
 8002dd0:	40020400 	.word	0x40020400
 8002dd4:	40000c00 	.word	0x40000c00
 8002dd8:	40021400 	.word	0x40021400

08002ddc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a34      	ldr	r2, [pc, #208]	@ (8002ebc <HAL_TIM_Base_MspInit+0xe0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d10e      	bne.n	8002e0c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	4b33      	ldr	r3, [pc, #204]	@ (8002ec0 <HAL_TIM_Base_MspInit+0xe4>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df6:	4a32      	ldr	r2, [pc, #200]	@ (8002ec0 <HAL_TIM_Base_MspInit+0xe4>)
 8002df8:	f043 0304 	orr.w	r3, r3, #4
 8002dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dfe:	4b30      	ldr	r3, [pc, #192]	@ (8002ec0 <HAL_TIM_Base_MspInit+0xe4>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002e0a:	e052      	b.n	8002eb2 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM9)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a2c      	ldr	r2, [pc, #176]	@ (8002ec4 <HAL_TIM_Base_MspInit+0xe8>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d116      	bne.n	8002e44 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	4b29      	ldr	r3, [pc, #164]	@ (8002ec0 <HAL_TIM_Base_MspInit+0xe4>)
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1e:	4a28      	ldr	r2, [pc, #160]	@ (8002ec0 <HAL_TIM_Base_MspInit+0xe4>)
 8002e20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e24:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e26:	4b26      	ldr	r3, [pc, #152]	@ (8002ec0 <HAL_TIM_Base_MspInit+0xe4>)
 8002e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002e32:	2200      	movs	r2, #0
 8002e34:	2100      	movs	r1, #0
 8002e36:	2018      	movs	r0, #24
 8002e38:	f000 fdd9 	bl	80039ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002e3c:	2018      	movs	r0, #24
 8002e3e:	f000 fdf2 	bl	8003a26 <HAL_NVIC_EnableIRQ>
}
 8002e42:	e036      	b.n	8002eb2 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM10)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec8 <HAL_TIM_Base_MspInit+0xec>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d116      	bne.n	8002e7c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec0 <HAL_TIM_Base_MspInit+0xe4>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e56:	4a1a      	ldr	r2, [pc, #104]	@ (8002ec0 <HAL_TIM_Base_MspInit+0xe4>)
 8002e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e5e:	4b18      	ldr	r3, [pc, #96]	@ (8002ec0 <HAL_TIM_Base_MspInit+0xe4>)
 8002e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	2019      	movs	r0, #25
 8002e70:	f000 fdbd 	bl	80039ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002e74:	2019      	movs	r0, #25
 8002e76:	f000 fdd6 	bl	8003a26 <HAL_NVIC_EnableIRQ>
}
 8002e7a:	e01a      	b.n	8002eb2 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM12)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a12      	ldr	r2, [pc, #72]	@ (8002ecc <HAL_TIM_Base_MspInit+0xf0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d115      	bne.n	8002eb2 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec0 <HAL_TIM_Base_MspInit+0xe4>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ec0 <HAL_TIM_Base_MspInit+0xe4>)
 8002e90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e96:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec0 <HAL_TIM_Base_MspInit+0xe4>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	202b      	movs	r0, #43	@ 0x2b
 8002ea8:	f000 fda1 	bl	80039ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002eac:	202b      	movs	r0, #43	@ 0x2b
 8002eae:	f000 fdba 	bl	8003a26 <HAL_NVIC_EnableIRQ>
}
 8002eb2:	bf00      	nop
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40000800 	.word	0x40000800
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40014000 	.word	0x40014000
 8002ec8:	40014400 	.word	0x40014400
 8002ecc:	40001800 	.word	0x40001800

08002ed0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a0e      	ldr	r2, [pc, #56]	@ (8002f18 <HAL_TIM_PWM_MspInit+0x48>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d115      	bne.n	8002f0e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8002f1c <HAL_TIM_PWM_MspInit+0x4c>)
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eea:	4a0c      	ldr	r2, [pc, #48]	@ (8002f1c <HAL_TIM_PWM_MspInit+0x4c>)
 8002eec:	f043 0302 	orr.w	r3, r3, #2
 8002ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8002f1c <HAL_TIM_PWM_MspInit+0x4c>)
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	68fb      	ldr	r3, [r7, #12]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002efe:	2200      	movs	r2, #0
 8002f00:	2100      	movs	r1, #0
 8002f02:	202b      	movs	r0, #43	@ 0x2b
 8002f04:	f000 fd73 	bl	80039ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002f08:	202b      	movs	r0, #43	@ 0x2b
 8002f0a:	f000 fd8c 	bl	8003a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002f0e:	bf00      	nop
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40010400 	.word	0x40010400
 8002f1c:	40023800 	.word	0x40023800

08002f20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08a      	sub	sp, #40	@ 0x28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f28:	f107 0314 	add.w	r3, r7, #20
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	60da      	str	r2, [r3, #12]
 8002f36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a25      	ldr	r2, [pc, #148]	@ (8002fd4 <HAL_TIM_MspPostInit+0xb4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d11f      	bne.n	8002f82 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	4b24      	ldr	r3, [pc, #144]	@ (8002fd8 <HAL_TIM_MspPostInit+0xb8>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4a:	4a23      	ldr	r2, [pc, #140]	@ (8002fd8 <HAL_TIM_MspPostInit+0xb8>)
 8002f4c:	f043 0308 	orr.w	r3, r3, #8
 8002f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f52:	4b21      	ldr	r3, [pc, #132]	@ (8002fd8 <HAL_TIM_MspPostInit+0xb8>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	693b      	ldr	r3, [r7, #16]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002f5e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f64:	2302      	movs	r3, #2
 8002f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f70:	2302      	movs	r3, #2
 8002f72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f74:	f107 0314 	add.w	r3, r7, #20
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4818      	ldr	r0, [pc, #96]	@ (8002fdc <HAL_TIM_MspPostInit+0xbc>)
 8002f7c:	f001 f970 	bl	8004260 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002f80:	e023      	b.n	8002fca <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a16      	ldr	r2, [pc, #88]	@ (8002fe0 <HAL_TIM_MspPostInit+0xc0>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d11e      	bne.n	8002fca <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	4b11      	ldr	r3, [pc, #68]	@ (8002fd8 <HAL_TIM_MspPostInit+0xb8>)
 8002f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f94:	4a10      	ldr	r2, [pc, #64]	@ (8002fd8 <HAL_TIM_MspPostInit+0xb8>)
 8002f96:	f043 0304 	orr.w	r3, r3, #4
 8002f9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd8 <HAL_TIM_MspPostInit+0xb8>)
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002fa8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fbe:	f107 0314 	add.w	r3, r7, #20
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4807      	ldr	r0, [pc, #28]	@ (8002fe4 <HAL_TIM_MspPostInit+0xc4>)
 8002fc6:	f001 f94b 	bl	8004260 <HAL_GPIO_Init>
}
 8002fca:	bf00      	nop
 8002fcc:	3728      	adds	r7, #40	@ 0x28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40000800 	.word	0x40000800
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	40020c00 	.word	0x40020c00
 8002fe0:	40010400 	.word	0x40010400
 8002fe4:	40020800 	.word	0x40020800

08002fe8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08e      	sub	sp, #56	@ 0x38
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	60da      	str	r2, [r3, #12]
 8002ffe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a9d      	ldr	r2, [pc, #628]	@ (800327c <HAL_UART_MspInit+0x294>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d162      	bne.n	80030d0 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	623b      	str	r3, [r7, #32]
 800300e:	4b9c      	ldr	r3, [pc, #624]	@ (8003280 <HAL_UART_MspInit+0x298>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003012:	4a9b      	ldr	r2, [pc, #620]	@ (8003280 <HAL_UART_MspInit+0x298>)
 8003014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003018:	6413      	str	r3, [r2, #64]	@ 0x40
 800301a:	4b99      	ldr	r3, [pc, #612]	@ (8003280 <HAL_UART_MspInit+0x298>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003022:	623b      	str	r3, [r7, #32]
 8003024:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	61fb      	str	r3, [r7, #28]
 800302a:	4b95      	ldr	r3, [pc, #596]	@ (8003280 <HAL_UART_MspInit+0x298>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302e:	4a94      	ldr	r2, [pc, #592]	@ (8003280 <HAL_UART_MspInit+0x298>)
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	6313      	str	r3, [r2, #48]	@ 0x30
 8003036:	4b92      	ldr	r3, [pc, #584]	@ (8003280 <HAL_UART_MspInit+0x298>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	61fb      	str	r3, [r7, #28]
 8003040:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003042:	230c      	movs	r3, #12
 8003044:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003046:	2302      	movs	r3, #2
 8003048:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304a:	2300      	movs	r3, #0
 800304c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800304e:	2303      	movs	r3, #3
 8003050:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003052:	2307      	movs	r3, #7
 8003054:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003056:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800305a:	4619      	mov	r1, r3
 800305c:	4889      	ldr	r0, [pc, #548]	@ (8003284 <HAL_UART_MspInit+0x29c>)
 800305e:	f001 f8ff 	bl	8004260 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003062:	4b89      	ldr	r3, [pc, #548]	@ (8003288 <HAL_UART_MspInit+0x2a0>)
 8003064:	4a89      	ldr	r2, [pc, #548]	@ (800328c <HAL_UART_MspInit+0x2a4>)
 8003066:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003068:	4b87      	ldr	r3, [pc, #540]	@ (8003288 <HAL_UART_MspInit+0x2a0>)
 800306a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800306e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003070:	4b85      	ldr	r3, [pc, #532]	@ (8003288 <HAL_UART_MspInit+0x2a0>)
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003076:	4b84      	ldr	r3, [pc, #528]	@ (8003288 <HAL_UART_MspInit+0x2a0>)
 8003078:	2200      	movs	r2, #0
 800307a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800307c:	4b82      	ldr	r3, [pc, #520]	@ (8003288 <HAL_UART_MspInit+0x2a0>)
 800307e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003082:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003084:	4b80      	ldr	r3, [pc, #512]	@ (8003288 <HAL_UART_MspInit+0x2a0>)
 8003086:	2200      	movs	r2, #0
 8003088:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800308a:	4b7f      	ldr	r3, [pc, #508]	@ (8003288 <HAL_UART_MspInit+0x2a0>)
 800308c:	2200      	movs	r2, #0
 800308e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003090:	4b7d      	ldr	r3, [pc, #500]	@ (8003288 <HAL_UART_MspInit+0x2a0>)
 8003092:	2200      	movs	r2, #0
 8003094:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003096:	4b7c      	ldr	r3, [pc, #496]	@ (8003288 <HAL_UART_MspInit+0x2a0>)
 8003098:	2200      	movs	r2, #0
 800309a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800309c:	4b7a      	ldr	r3, [pc, #488]	@ (8003288 <HAL_UART_MspInit+0x2a0>)
 800309e:	2200      	movs	r2, #0
 80030a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80030a2:	4879      	ldr	r0, [pc, #484]	@ (8003288 <HAL_UART_MspInit+0x2a0>)
 80030a4:	f000 fcda 	bl	8003a5c <HAL_DMA_Init>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80030ae:	f7ff fce9 	bl	8002a84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a74      	ldr	r2, [pc, #464]	@ (8003288 <HAL_UART_MspInit+0x2a0>)
 80030b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80030b8:	4a73      	ldr	r2, [pc, #460]	@ (8003288 <HAL_UART_MspInit+0x2a0>)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80030be:	2200      	movs	r2, #0
 80030c0:	2100      	movs	r1, #0
 80030c2:	2026      	movs	r0, #38	@ 0x26
 80030c4:	f000 fc93 	bl	80039ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80030c8:	2026      	movs	r0, #38	@ 0x26
 80030ca:	f000 fcac 	bl	8003a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80030ce:	e0d0      	b.n	8003272 <HAL_UART_MspInit+0x28a>
  else if(huart->Instance==USART3)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a6e      	ldr	r2, [pc, #440]	@ (8003290 <HAL_UART_MspInit+0x2a8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d163      	bne.n	80031a2 <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART3_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	4b68      	ldr	r3, [pc, #416]	@ (8003280 <HAL_UART_MspInit+0x298>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	4a67      	ldr	r2, [pc, #412]	@ (8003280 <HAL_UART_MspInit+0x298>)
 80030e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ea:	4b65      	ldr	r3, [pc, #404]	@ (8003280 <HAL_UART_MspInit+0x298>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030f2:	61bb      	str	r3, [r7, #24]
 80030f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	4b61      	ldr	r3, [pc, #388]	@ (8003280 <HAL_UART_MspInit+0x298>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fe:	4a60      	ldr	r2, [pc, #384]	@ (8003280 <HAL_UART_MspInit+0x298>)
 8003100:	f043 0308 	orr.w	r3, r3, #8
 8003104:	6313      	str	r3, [r2, #48]	@ 0x30
 8003106:	4b5e      	ldr	r3, [pc, #376]	@ (8003280 <HAL_UART_MspInit+0x298>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003112:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003116:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003118:	2302      	movs	r3, #2
 800311a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311c:	2300      	movs	r3, #0
 800311e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003120:	2303      	movs	r3, #3
 8003122:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003124:	2307      	movs	r3, #7
 8003126:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003128:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800312c:	4619      	mov	r1, r3
 800312e:	4859      	ldr	r0, [pc, #356]	@ (8003294 <HAL_UART_MspInit+0x2ac>)
 8003130:	f001 f896 	bl	8004260 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003134:	4b58      	ldr	r3, [pc, #352]	@ (8003298 <HAL_UART_MspInit+0x2b0>)
 8003136:	4a59      	ldr	r2, [pc, #356]	@ (800329c <HAL_UART_MspInit+0x2b4>)
 8003138:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800313a:	4b57      	ldr	r3, [pc, #348]	@ (8003298 <HAL_UART_MspInit+0x2b0>)
 800313c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003140:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003142:	4b55      	ldr	r3, [pc, #340]	@ (8003298 <HAL_UART_MspInit+0x2b0>)
 8003144:	2200      	movs	r2, #0
 8003146:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003148:	4b53      	ldr	r3, [pc, #332]	@ (8003298 <HAL_UART_MspInit+0x2b0>)
 800314a:	2200      	movs	r2, #0
 800314c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800314e:	4b52      	ldr	r3, [pc, #328]	@ (8003298 <HAL_UART_MspInit+0x2b0>)
 8003150:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003154:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003156:	4b50      	ldr	r3, [pc, #320]	@ (8003298 <HAL_UART_MspInit+0x2b0>)
 8003158:	2200      	movs	r2, #0
 800315a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800315c:	4b4e      	ldr	r3, [pc, #312]	@ (8003298 <HAL_UART_MspInit+0x2b0>)
 800315e:	2200      	movs	r2, #0
 8003160:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003162:	4b4d      	ldr	r3, [pc, #308]	@ (8003298 <HAL_UART_MspInit+0x2b0>)
 8003164:	2200      	movs	r2, #0
 8003166:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003168:	4b4b      	ldr	r3, [pc, #300]	@ (8003298 <HAL_UART_MspInit+0x2b0>)
 800316a:	2200      	movs	r2, #0
 800316c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800316e:	4b4a      	ldr	r3, [pc, #296]	@ (8003298 <HAL_UART_MspInit+0x2b0>)
 8003170:	2200      	movs	r2, #0
 8003172:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003174:	4848      	ldr	r0, [pc, #288]	@ (8003298 <HAL_UART_MspInit+0x2b0>)
 8003176:	f000 fc71 	bl	8003a5c <HAL_DMA_Init>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8003180:	f7ff fc80 	bl	8002a84 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a44      	ldr	r2, [pc, #272]	@ (8003298 <HAL_UART_MspInit+0x2b0>)
 8003188:	63da      	str	r2, [r3, #60]	@ 0x3c
 800318a:	4a43      	ldr	r2, [pc, #268]	@ (8003298 <HAL_UART_MspInit+0x2b0>)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003190:	2200      	movs	r2, #0
 8003192:	2100      	movs	r1, #0
 8003194:	2027      	movs	r0, #39	@ 0x27
 8003196:	f000 fc2a 	bl	80039ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800319a:	2027      	movs	r0, #39	@ 0x27
 800319c:	f000 fc43 	bl	8003a26 <HAL_NVIC_EnableIRQ>
}
 80031a0:	e067      	b.n	8003272 <HAL_UART_MspInit+0x28a>
  else if(huart->Instance==USART6)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a3e      	ldr	r2, [pc, #248]	@ (80032a0 <HAL_UART_MspInit+0x2b8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d162      	bne.n	8003272 <HAL_UART_MspInit+0x28a>
    __HAL_RCC_USART6_CLK_ENABLE();
 80031ac:	2300      	movs	r3, #0
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	4b33      	ldr	r3, [pc, #204]	@ (8003280 <HAL_UART_MspInit+0x298>)
 80031b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b4:	4a32      	ldr	r2, [pc, #200]	@ (8003280 <HAL_UART_MspInit+0x298>)
 80031b6:	f043 0320 	orr.w	r3, r3, #32
 80031ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80031bc:	4b30      	ldr	r3, [pc, #192]	@ (8003280 <HAL_UART_MspInit+0x298>)
 80031be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c0:	f003 0320 	and.w	r3, r3, #32
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80031c8:	2300      	movs	r3, #0
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	4b2c      	ldr	r3, [pc, #176]	@ (8003280 <HAL_UART_MspInit+0x298>)
 80031ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003280 <HAL_UART_MspInit+0x298>)
 80031d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80031d8:	4b29      	ldr	r3, [pc, #164]	@ (8003280 <HAL_UART_MspInit+0x298>)
 80031da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80031e4:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80031e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ea:	2302      	movs	r3, #2
 80031ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f2:	2303      	movs	r3, #3
 80031f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80031f6:	2308      	movs	r3, #8
 80031f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031fe:	4619      	mov	r1, r3
 8003200:	4828      	ldr	r0, [pc, #160]	@ (80032a4 <HAL_UART_MspInit+0x2bc>)
 8003202:	f001 f82d 	bl	8004260 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003206:	4b28      	ldr	r3, [pc, #160]	@ (80032a8 <HAL_UART_MspInit+0x2c0>)
 8003208:	4a28      	ldr	r2, [pc, #160]	@ (80032ac <HAL_UART_MspInit+0x2c4>)
 800320a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800320c:	4b26      	ldr	r3, [pc, #152]	@ (80032a8 <HAL_UART_MspInit+0x2c0>)
 800320e:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003212:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003214:	4b24      	ldr	r3, [pc, #144]	@ (80032a8 <HAL_UART_MspInit+0x2c0>)
 8003216:	2200      	movs	r2, #0
 8003218:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800321a:	4b23      	ldr	r3, [pc, #140]	@ (80032a8 <HAL_UART_MspInit+0x2c0>)
 800321c:	2200      	movs	r2, #0
 800321e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003220:	4b21      	ldr	r3, [pc, #132]	@ (80032a8 <HAL_UART_MspInit+0x2c0>)
 8003222:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003226:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003228:	4b1f      	ldr	r3, [pc, #124]	@ (80032a8 <HAL_UART_MspInit+0x2c0>)
 800322a:	2200      	movs	r2, #0
 800322c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800322e:	4b1e      	ldr	r3, [pc, #120]	@ (80032a8 <HAL_UART_MspInit+0x2c0>)
 8003230:	2200      	movs	r2, #0
 8003232:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003234:	4b1c      	ldr	r3, [pc, #112]	@ (80032a8 <HAL_UART_MspInit+0x2c0>)
 8003236:	2200      	movs	r2, #0
 8003238:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800323a:	4b1b      	ldr	r3, [pc, #108]	@ (80032a8 <HAL_UART_MspInit+0x2c0>)
 800323c:	2200      	movs	r2, #0
 800323e:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003240:	4b19      	ldr	r3, [pc, #100]	@ (80032a8 <HAL_UART_MspInit+0x2c0>)
 8003242:	2200      	movs	r2, #0
 8003244:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003246:	4818      	ldr	r0, [pc, #96]	@ (80032a8 <HAL_UART_MspInit+0x2c0>)
 8003248:	f000 fc08 	bl	8003a5c <HAL_DMA_Init>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_UART_MspInit+0x26e>
      Error_Handler();
 8003252:	f7ff fc17 	bl	8002a84 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a13      	ldr	r2, [pc, #76]	@ (80032a8 <HAL_UART_MspInit+0x2c0>)
 800325a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800325c:	4a12      	ldr	r2, [pc, #72]	@ (80032a8 <HAL_UART_MspInit+0x2c0>)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003262:	2200      	movs	r2, #0
 8003264:	2100      	movs	r1, #0
 8003266:	2047      	movs	r0, #71	@ 0x47
 8003268:	f000 fbc1 	bl	80039ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800326c:	2047      	movs	r0, #71	@ 0x47
 800326e:	f000 fbda 	bl	8003a26 <HAL_NVIC_EnableIRQ>
}
 8003272:	bf00      	nop
 8003274:	3738      	adds	r7, #56	@ 0x38
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40004400 	.word	0x40004400
 8003280:	40023800 	.word	0x40023800
 8003284:	40020000 	.word	0x40020000
 8003288:	200005dc 	.word	0x200005dc
 800328c:	40026088 	.word	0x40026088
 8003290:	40004800 	.word	0x40004800
 8003294:	40020c00 	.word	0x40020c00
 8003298:	2000063c 	.word	0x2000063c
 800329c:	40026028 	.word	0x40026028
 80032a0:	40011400 	.word	0x40011400
 80032a4:	40021800 	.word	0x40021800
 80032a8:	2000069c 	.word	0x2000069c
 80032ac:	40026428 	.word	0x40026428

080032b0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b098      	sub	sp, #96	@ 0x60
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	605a      	str	r2, [r3, #4]
 80032c2:	609a      	str	r2, [r3, #8]
 80032c4:	60da      	str	r2, [r3, #12]
 80032c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032c8:	f107 0310 	add.w	r3, r7, #16
 80032cc:	223c      	movs	r2, #60	@ 0x3c
 80032ce:	2100      	movs	r1, #0
 80032d0:	4618      	mov	r0, r3
 80032d2:	f006 fb5e 	bl	8009992 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032de:	d14d      	bne.n	800337c <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80032e0:	2320      	movs	r3, #32
 80032e2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80032e4:	2300      	movs	r3, #0
 80032e6:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032e8:	f107 0310 	add.w	r3, r7, #16
 80032ec:	4618      	mov	r0, r3
 80032ee:	f001 fce3 	bl	8004cb8 <HAL_RCCEx_PeriphCLKConfig>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 80032f8:	f7ff fbc4 	bl	8002a84 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	4b20      	ldr	r3, [pc, #128]	@ (8003384 <HAL_PCD_MspInit+0xd4>)
 8003302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003304:	4a1f      	ldr	r2, [pc, #124]	@ (8003384 <HAL_PCD_MspInit+0xd4>)
 8003306:	f043 0301 	orr.w	r3, r3, #1
 800330a:	6313      	str	r3, [r2, #48]	@ 0x30
 800330c:	4b1d      	ldr	r3, [pc, #116]	@ (8003384 <HAL_PCD_MspInit+0xd4>)
 800330e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003318:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800331c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331e:	2302      	movs	r3, #2
 8003320:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003322:	2300      	movs	r3, #0
 8003324:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003326:	2303      	movs	r3, #3
 8003328:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800332a:	230a      	movs	r3, #10
 800332c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800332e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003332:	4619      	mov	r1, r3
 8003334:	4814      	ldr	r0, [pc, #80]	@ (8003388 <HAL_PCD_MspInit+0xd8>)
 8003336:	f000 ff93 	bl	8004260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800333a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800333e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003340:	2300      	movs	r3, #0
 8003342:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003344:	2300      	movs	r3, #0
 8003346:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003348:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800334c:	4619      	mov	r1, r3
 800334e:	480e      	ldr	r0, [pc, #56]	@ (8003388 <HAL_PCD_MspInit+0xd8>)
 8003350:	f000 ff86 	bl	8004260 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003354:	4b0b      	ldr	r3, [pc, #44]	@ (8003384 <HAL_PCD_MspInit+0xd4>)
 8003356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003358:	4a0a      	ldr	r2, [pc, #40]	@ (8003384 <HAL_PCD_MspInit+0xd4>)
 800335a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800335e:	6353      	str	r3, [r2, #52]	@ 0x34
 8003360:	2300      	movs	r3, #0
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	4b07      	ldr	r3, [pc, #28]	@ (8003384 <HAL_PCD_MspInit+0xd4>)
 8003366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003368:	4a06      	ldr	r2, [pc, #24]	@ (8003384 <HAL_PCD_MspInit+0xd4>)
 800336a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800336e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003370:	4b04      	ldr	r3, [pc, #16]	@ (8003384 <HAL_PCD_MspInit+0xd4>)
 8003372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003374:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800337c:	bf00      	nop
 800337e:	3760      	adds	r7, #96	@ 0x60
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40023800 	.word	0x40023800
 8003388:	40020000 	.word	0x40020000

0800338c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003390:	bf00      	nop
 8003392:	e7fd      	b.n	8003390 <NMI_Handler+0x4>

08003394 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003398:	bf00      	nop
 800339a:	e7fd      	b.n	8003398 <HardFault_Handler+0x4>

0800339c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033a0:	bf00      	nop
 80033a2:	e7fd      	b.n	80033a0 <MemManage_Handler+0x4>

080033a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033a8:	bf00      	nop
 80033aa:	e7fd      	b.n	80033a8 <BusFault_Handler+0x4>

080033ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033b0:	bf00      	nop
 80033b2:	e7fd      	b.n	80033b0 <UsageFault_Handler+0x4>

080033b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033b8:	bf00      	nop
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033c2:	b480      	push	{r7}
 80033c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033d4:	bf00      	nop
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033e2:	f000 f9e5 	bl	80037b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}

080033ea <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80033ee:	2004      	movs	r0, #4
 80033f0:	f001 f8e4 	bl	80045bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80033f4:	bf00      	nop
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80033fc:	2008      	movs	r0, #8
 80033fe:	f001 f8dd 	bl	80045bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800340c:	4802      	ldr	r0, [pc, #8]	@ (8003418 <DMA1_Stream1_IRQHandler+0x10>)
 800340e:	f000 fcbd 	bl	8003d8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	2000063c 	.word	0x2000063c

0800341c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003420:	4802      	ldr	r0, [pc, #8]	@ (800342c <DMA1_Stream5_IRQHandler+0x10>)
 8003422:	f000 fcb3 	bl	8003d8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	200005dc 	.word	0x200005dc

08003430 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003434:	2040      	movs	r0, #64	@ 0x40
 8003436:	f001 f8c1 	bl	80045bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800343a:	2080      	movs	r0, #128	@ 0x80
 800343c:	f001 f8be 	bl	80045bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003440:	bf00      	nop
 8003442:	bd80      	pop	{r7, pc}

08003444 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003448:	4803      	ldr	r0, [pc, #12]	@ (8003458 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800344a:	f002 fc1b 	bl	8005c84 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800344e:	4803      	ldr	r0, [pc, #12]	@ (800345c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8003450:	f002 fc18 	bl	8005c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003454:	bf00      	nop
 8003456:	bd80      	pop	{r7, pc}
 8003458:	2000027c 	.word	0x2000027c
 800345c:	2000042c 	.word	0x2000042c

08003460 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003464:	4803      	ldr	r0, [pc, #12]	@ (8003474 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003466:	f002 fc0d 	bl	8005c84 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800346a:	4803      	ldr	r0, [pc, #12]	@ (8003478 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800346c:	f002 fc0a 	bl	8005c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003470:	bf00      	nop
 8003472:	bd80      	pop	{r7, pc}
 8003474:	2000027c 	.word	0x2000027c
 8003478:	20000474 	.word	0x20000474

0800347c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003480:	4802      	ldr	r0, [pc, #8]	@ (800348c <USART2_IRQHandler+0x10>)
 8003482:	f003 fb15 	bl	8006ab0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000504 	.word	0x20000504

08003490 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003494:	4802      	ldr	r0, [pc, #8]	@ (80034a0 <USART3_IRQHandler+0x10>)
 8003496:	f003 fb0b 	bl	8006ab0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800349a:	bf00      	nop
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	2000054c 	.word	0x2000054c

080034a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80034a8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80034ac:	f001 f886 	bl	80045bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80034b0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80034b4:	f001 f882 	bl	80045bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80034b8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80034bc:	f001 f87e 	bl	80045bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80034c0:	bf00      	nop
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80034c8:	4803      	ldr	r0, [pc, #12]	@ (80034d8 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80034ca:	f002 fbdb 	bl	8005c84 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80034ce:	4803      	ldr	r0, [pc, #12]	@ (80034dc <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80034d0:	f002 fbd8 	bl	8005c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80034d4:	bf00      	nop
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	200003e4 	.word	0x200003e4
 80034dc:	200004bc 	.word	0x200004bc

080034e0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80034e4:	4802      	ldr	r0, [pc, #8]	@ (80034f0 <DMA2_Stream1_IRQHandler+0x10>)
 80034e6:	f000 fc51 	bl	8003d8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	2000069c 	.word	0x2000069c

080034f4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80034f8:	4802      	ldr	r0, [pc, #8]	@ (8003504 <USART6_IRQHandler+0x10>)
 80034fa:	f003 fad9 	bl	8006ab0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20000594 	.word	0x20000594

08003508 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  return 1;
 800350c:	2301      	movs	r3, #1
}
 800350e:	4618      	mov	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <_kill>:

int _kill(int pid, int sig)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003522:	f006 faf7 	bl	8009b14 <__errno>
 8003526:	4603      	mov	r3, r0
 8003528:	2216      	movs	r2, #22
 800352a:	601a      	str	r2, [r3, #0]
  return -1;
 800352c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <_exit>:

void _exit (int status)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003540:	f04f 31ff 	mov.w	r1, #4294967295
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7ff ffe7 	bl	8003518 <_kill>
  while (1) {}    /* Make sure we hang here */
 800354a:	bf00      	nop
 800354c:	e7fd      	b.n	800354a <_exit+0x12>

0800354e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b086      	sub	sp, #24
 8003552:	af00      	add	r7, sp, #0
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]
 800355e:	e00a      	b.n	8003576 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003560:	f3af 8000 	nop.w
 8003564:	4601      	mov	r1, r0
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	60ba      	str	r2, [r7, #8]
 800356c:	b2ca      	uxtb	r2, r1
 800356e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	3301      	adds	r3, #1
 8003574:	617b      	str	r3, [r7, #20]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	429a      	cmp	r2, r3
 800357c:	dbf0      	blt.n	8003560 <_read+0x12>
  }

  return len;
 800357e:	687b      	ldr	r3, [r7, #4]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003594:	2300      	movs	r3, #0
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	e009      	b.n	80035ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	60ba      	str	r2, [r7, #8]
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	3301      	adds	r3, #1
 80035ac:	617b      	str	r3, [r7, #20]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	dbf1      	blt.n	800359a <_write+0x12>
  }
  return len;
 80035b6:	687b      	ldr	r3, [r7, #4]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <_close>:

int _close(int file)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035e8:	605a      	str	r2, [r3, #4]
  return 0;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <_isatty>:

int _isatty(int file)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003600:	2301      	movs	r3, #1
}
 8003602:	4618      	mov	r0, r3
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800360e:	b480      	push	{r7}
 8003610:	b085      	sub	sp, #20
 8003612:	af00      	add	r7, sp, #0
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003630:	4a14      	ldr	r2, [pc, #80]	@ (8003684 <_sbrk+0x5c>)
 8003632:	4b15      	ldr	r3, [pc, #84]	@ (8003688 <_sbrk+0x60>)
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800363c:	4b13      	ldr	r3, [pc, #76]	@ (800368c <_sbrk+0x64>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d102      	bne.n	800364a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003644:	4b11      	ldr	r3, [pc, #68]	@ (800368c <_sbrk+0x64>)
 8003646:	4a12      	ldr	r2, [pc, #72]	@ (8003690 <_sbrk+0x68>)
 8003648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800364a:	4b10      	ldr	r3, [pc, #64]	@ (800368c <_sbrk+0x64>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4413      	add	r3, r2
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	429a      	cmp	r2, r3
 8003656:	d207      	bcs.n	8003668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003658:	f006 fa5c 	bl	8009b14 <__errno>
 800365c:	4603      	mov	r3, r0
 800365e:	220c      	movs	r2, #12
 8003660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003662:	f04f 33ff 	mov.w	r3, #4294967295
 8003666:	e009      	b.n	800367c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003668:	4b08      	ldr	r3, [pc, #32]	@ (800368c <_sbrk+0x64>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800366e:	4b07      	ldr	r3, [pc, #28]	@ (800368c <_sbrk+0x64>)
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4413      	add	r3, r2
 8003676:	4a05      	ldr	r2, [pc, #20]	@ (800368c <_sbrk+0x64>)
 8003678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800367a:	68fb      	ldr	r3, [r7, #12]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	20040000 	.word	0x20040000
 8003688:	00000400 	.word	0x00000400
 800368c:	20000ce8 	.word	0x20000ce8
 8003690:	20000e40 	.word	0x20000e40

08003694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003698:	4b06      	ldr	r3, [pc, #24]	@ (80036b4 <SystemInit+0x20>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800369e:	4a05      	ldr	r2, [pc, #20]	@ (80036b4 <SystemInit+0x20>)
 80036a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036a8:	bf00      	nop
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	e000ed00 	.word	0xe000ed00

080036b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80036b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036bc:	480d      	ldr	r0, [pc, #52]	@ (80036f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80036be:	490e      	ldr	r1, [pc, #56]	@ (80036f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80036c0:	4a0e      	ldr	r2, [pc, #56]	@ (80036fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80036c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036c4:	e002      	b.n	80036cc <LoopCopyDataInit>

080036c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036ca:	3304      	adds	r3, #4

080036cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036d0:	d3f9      	bcc.n	80036c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036d2:	4a0b      	ldr	r2, [pc, #44]	@ (8003700 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80036d4:	4c0b      	ldr	r4, [pc, #44]	@ (8003704 <LoopFillZerobss+0x26>)
  movs r3, #0
 80036d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036d8:	e001      	b.n	80036de <LoopFillZerobss>

080036da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036dc:	3204      	adds	r2, #4

080036de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036e0:	d3fb      	bcc.n	80036da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036e2:	f7ff ffd7 	bl	8003694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036e6:	f006 fa1b 	bl	8009b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036ea:	f7fe fb3b 	bl	8001d64 <main>
  bx  lr    
 80036ee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80036f0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80036f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036f8:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80036fc:	0800c97c 	.word	0x0800c97c
  ldr r2, =_sbss
 8003700:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8003704:	20000e3c 	.word	0x20000e3c

08003708 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003708:	e7fe      	b.n	8003708 <ADC_IRQHandler>
	...

0800370c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003710:	4b0e      	ldr	r3, [pc, #56]	@ (800374c <HAL_Init+0x40>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a0d      	ldr	r2, [pc, #52]	@ (800374c <HAL_Init+0x40>)
 8003716:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800371a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800371c:	4b0b      	ldr	r3, [pc, #44]	@ (800374c <HAL_Init+0x40>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a0a      	ldr	r2, [pc, #40]	@ (800374c <HAL_Init+0x40>)
 8003722:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003726:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003728:	4b08      	ldr	r3, [pc, #32]	@ (800374c <HAL_Init+0x40>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a07      	ldr	r2, [pc, #28]	@ (800374c <HAL_Init+0x40>)
 800372e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003732:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003734:	2003      	movs	r0, #3
 8003736:	f000 f94f 	bl	80039d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800373a:	2000      	movs	r0, #0
 800373c:	f000 f808 	bl	8003750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003740:	f7ff f9a6 	bl	8002a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40023c00 	.word	0x40023c00

08003750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003758:	4b12      	ldr	r3, [pc, #72]	@ (80037a4 <HAL_InitTick+0x54>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	4b12      	ldr	r3, [pc, #72]	@ (80037a8 <HAL_InitTick+0x58>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	4619      	mov	r1, r3
 8003762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003766:	fbb3 f3f1 	udiv	r3, r3, r1
 800376a:	fbb2 f3f3 	udiv	r3, r2, r3
 800376e:	4618      	mov	r0, r3
 8003770:	f000 f967 	bl	8003a42 <HAL_SYSTICK_Config>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e00e      	b.n	800379c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b0f      	cmp	r3, #15
 8003782:	d80a      	bhi.n	800379a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003784:	2200      	movs	r2, #0
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	f04f 30ff 	mov.w	r0, #4294967295
 800378c:	f000 f92f 	bl	80039ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003790:	4a06      	ldr	r2, [pc, #24]	@ (80037ac <HAL_InitTick+0x5c>)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	e000      	b.n	800379c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
}
 800379c:	4618      	mov	r0, r3
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20000020 	.word	0x20000020
 80037a8:	20000028 	.word	0x20000028
 80037ac:	20000024 	.word	0x20000024

080037b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037b4:	4b06      	ldr	r3, [pc, #24]	@ (80037d0 <HAL_IncTick+0x20>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	4b06      	ldr	r3, [pc, #24]	@ (80037d4 <HAL_IncTick+0x24>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4413      	add	r3, r2
 80037c0:	4a04      	ldr	r2, [pc, #16]	@ (80037d4 <HAL_IncTick+0x24>)
 80037c2:	6013      	str	r3, [r2, #0]
}
 80037c4:	bf00      	nop
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	20000028 	.word	0x20000028
 80037d4:	20000cec 	.word	0x20000cec

080037d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  return uwTick;
 80037dc:	4b03      	ldr	r3, [pc, #12]	@ (80037ec <HAL_GetTick+0x14>)
 80037de:	681b      	ldr	r3, [r3, #0]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	20000cec 	.word	0x20000cec

080037f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037f8:	f7ff ffee 	bl	80037d8 <HAL_GetTick>
 80037fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003808:	d005      	beq.n	8003816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800380a:	4b0a      	ldr	r3, [pc, #40]	@ (8003834 <HAL_Delay+0x44>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4413      	add	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003816:	bf00      	nop
 8003818:	f7ff ffde 	bl	80037d8 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	429a      	cmp	r2, r3
 8003826:	d8f7      	bhi.n	8003818 <HAL_Delay+0x28>
  {
  }
}
 8003828:	bf00      	nop
 800382a:	bf00      	nop
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000028 	.word	0x20000028

08003838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003848:	4b0c      	ldr	r3, [pc, #48]	@ (800387c <__NVIC_SetPriorityGrouping+0x44>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003854:	4013      	ands	r3, r2
 8003856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003860:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800386a:	4a04      	ldr	r2, [pc, #16]	@ (800387c <__NVIC_SetPriorityGrouping+0x44>)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	60d3      	str	r3, [r2, #12]
}
 8003870:	bf00      	nop
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	e000ed00 	.word	0xe000ed00

08003880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003884:	4b04      	ldr	r3, [pc, #16]	@ (8003898 <__NVIC_GetPriorityGrouping+0x18>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	0a1b      	lsrs	r3, r3, #8
 800388a:	f003 0307 	and.w	r3, r3, #7
}
 800388e:	4618      	mov	r0, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	e000ed00 	.word	0xe000ed00

0800389c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	db0b      	blt.n	80038c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ae:	79fb      	ldrb	r3, [r7, #7]
 80038b0:	f003 021f 	and.w	r2, r3, #31
 80038b4:	4907      	ldr	r1, [pc, #28]	@ (80038d4 <__NVIC_EnableIRQ+0x38>)
 80038b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	2001      	movs	r0, #1
 80038be:	fa00 f202 	lsl.w	r2, r0, r2
 80038c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	e000e100 	.word	0xe000e100

080038d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	6039      	str	r1, [r7, #0]
 80038e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	db0a      	blt.n	8003902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	490c      	ldr	r1, [pc, #48]	@ (8003924 <__NVIC_SetPriority+0x4c>)
 80038f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f6:	0112      	lsls	r2, r2, #4
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	440b      	add	r3, r1
 80038fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003900:	e00a      	b.n	8003918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	b2da      	uxtb	r2, r3
 8003906:	4908      	ldr	r1, [pc, #32]	@ (8003928 <__NVIC_SetPriority+0x50>)
 8003908:	79fb      	ldrb	r3, [r7, #7]
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	3b04      	subs	r3, #4
 8003910:	0112      	lsls	r2, r2, #4
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	440b      	add	r3, r1
 8003916:	761a      	strb	r2, [r3, #24]
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	e000e100 	.word	0xe000e100
 8003928:	e000ed00 	.word	0xe000ed00

0800392c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800392c:	b480      	push	{r7}
 800392e:	b089      	sub	sp, #36	@ 0x24
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	f1c3 0307 	rsb	r3, r3, #7
 8003946:	2b04      	cmp	r3, #4
 8003948:	bf28      	it	cs
 800394a:	2304      	movcs	r3, #4
 800394c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	3304      	adds	r3, #4
 8003952:	2b06      	cmp	r3, #6
 8003954:	d902      	bls.n	800395c <NVIC_EncodePriority+0x30>
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	3b03      	subs	r3, #3
 800395a:	e000      	b.n	800395e <NVIC_EncodePriority+0x32>
 800395c:	2300      	movs	r3, #0
 800395e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003960:	f04f 32ff 	mov.w	r2, #4294967295
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	43da      	mvns	r2, r3
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	401a      	ands	r2, r3
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003974:	f04f 31ff 	mov.w	r1, #4294967295
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	fa01 f303 	lsl.w	r3, r1, r3
 800397e:	43d9      	mvns	r1, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003984:	4313      	orrs	r3, r2
         );
}
 8003986:	4618      	mov	r0, r3
 8003988:	3724      	adds	r7, #36	@ 0x24
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
	...

08003994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3b01      	subs	r3, #1
 80039a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039a4:	d301      	bcc.n	80039aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039a6:	2301      	movs	r3, #1
 80039a8:	e00f      	b.n	80039ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039aa:	4a0a      	ldr	r2, [pc, #40]	@ (80039d4 <SysTick_Config+0x40>)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039b2:	210f      	movs	r1, #15
 80039b4:	f04f 30ff 	mov.w	r0, #4294967295
 80039b8:	f7ff ff8e 	bl	80038d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039bc:	4b05      	ldr	r3, [pc, #20]	@ (80039d4 <SysTick_Config+0x40>)
 80039be:	2200      	movs	r2, #0
 80039c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039c2:	4b04      	ldr	r3, [pc, #16]	@ (80039d4 <SysTick_Config+0x40>)
 80039c4:	2207      	movs	r2, #7
 80039c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	e000e010 	.word	0xe000e010

080039d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff ff29 	bl	8003838 <__NVIC_SetPriorityGrouping>
}
 80039e6:	bf00      	nop
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b086      	sub	sp, #24
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	4603      	mov	r3, r0
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
 80039fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a00:	f7ff ff3e 	bl	8003880 <__NVIC_GetPriorityGrouping>
 8003a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	68b9      	ldr	r1, [r7, #8]
 8003a0a:	6978      	ldr	r0, [r7, #20]
 8003a0c:	f7ff ff8e 	bl	800392c <NVIC_EncodePriority>
 8003a10:	4602      	mov	r2, r0
 8003a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a16:	4611      	mov	r1, r2
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7ff ff5d 	bl	80038d8 <__NVIC_SetPriority>
}
 8003a1e:	bf00      	nop
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b082      	sub	sp, #8
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff ff31 	bl	800389c <__NVIC_EnableIRQ>
}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b082      	sub	sp, #8
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff ffa2 	bl	8003994 <SysTick_Config>
 8003a50:	4603      	mov	r3, r0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a68:	f7ff feb6 	bl	80037d8 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e099      	b.n	8003bac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0201 	bic.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a98:	e00f      	b.n	8003aba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a9a:	f7ff fe9d 	bl	80037d8 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b05      	cmp	r3, #5
 8003aa6:	d908      	bls.n	8003aba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2203      	movs	r2, #3
 8003ab2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e078      	b.n	8003bac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e8      	bne.n	8003a9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	4b38      	ldr	r3, [pc, #224]	@ (8003bb4 <HAL_DMA_Init+0x158>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003afe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b10:	2b04      	cmp	r3, #4
 8003b12:	d107      	bne.n	8003b24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f023 0307 	bic.w	r3, r3, #7
 8003b3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d117      	bne.n	8003b7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00e      	beq.n	8003b7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fb01 	bl	8004168 <DMA_CheckFifoParam>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d008      	beq.n	8003b7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2240      	movs	r2, #64	@ 0x40
 8003b70:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e016      	b.n	8003bac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 fab8 	bl	80040fc <DMA_CalcBaseAndBitshift>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b94:	223f      	movs	r2, #63	@ 0x3f
 8003b96:	409a      	lsls	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	f010803f 	.word	0xf010803f

08003bb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d101      	bne.n	8003bde <HAL_DMA_Start_IT+0x26>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	e040      	b.n	8003c60 <HAL_DMA_Start_IT+0xa8>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d12f      	bne.n	8003c52 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	68b9      	ldr	r1, [r7, #8]
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 fa4a 	bl	80040a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c10:	223f      	movs	r2, #63	@ 0x3f
 8003c12:	409a      	lsls	r2, r3
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0216 	orr.w	r2, r2, #22
 8003c26:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d007      	beq.n	8003c40 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0208 	orr.w	r2, r2, #8
 8003c3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0201 	orr.w	r2, r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	e005      	b.n	8003c5e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c76:	f7ff fdaf 	bl	80037d8 <HAL_GetTick>
 8003c7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d008      	beq.n	8003c9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2280      	movs	r2, #128	@ 0x80
 8003c8c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e052      	b.n	8003d40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0216 	bic.w	r2, r2, #22
 8003ca8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695a      	ldr	r2, [r3, #20]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cb8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d103      	bne.n	8003cca <HAL_DMA_Abort+0x62>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d007      	beq.n	8003cda <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0208 	bic.w	r2, r2, #8
 8003cd8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0201 	bic.w	r2, r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cea:	e013      	b.n	8003d14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cec:	f7ff fd74 	bl	80037d8 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b05      	cmp	r3, #5
 8003cf8:	d90c      	bls.n	8003d14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2203      	movs	r2, #3
 8003d04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e015      	b.n	8003d40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1e4      	bne.n	8003cec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d26:	223f      	movs	r2, #63	@ 0x3f
 8003d28:	409a      	lsls	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d004      	beq.n	8003d66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2280      	movs	r2, #128	@ 0x80
 8003d60:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e00c      	b.n	8003d80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2205      	movs	r2, #5
 8003d6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0201 	bic.w	r2, r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d98:	4b8e      	ldr	r3, [pc, #568]	@ (8003fd4 <HAL_DMA_IRQHandler+0x248>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a8e      	ldr	r2, [pc, #568]	@ (8003fd8 <HAL_DMA_IRQHandler+0x24c>)
 8003d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003da2:	0a9b      	lsrs	r3, r3, #10
 8003da4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003daa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db6:	2208      	movs	r2, #8
 8003db8:	409a      	lsls	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d01a      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d013      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0204 	bic.w	r2, r2, #4
 8003dde:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de4:	2208      	movs	r2, #8
 8003de6:	409a      	lsls	r2, r3
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df0:	f043 0201 	orr.w	r2, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d012      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00b      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	409a      	lsls	r2, r3
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e26:	f043 0202 	orr.w	r2, r3, #2
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e32:	2204      	movs	r2, #4
 8003e34:	409a      	lsls	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d012      	beq.n	8003e64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00b      	beq.n	8003e64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e50:	2204      	movs	r2, #4
 8003e52:	409a      	lsls	r2, r3
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e5c:	f043 0204 	orr.w	r2, r3, #4
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e68:	2210      	movs	r2, #16
 8003e6a:	409a      	lsls	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d043      	beq.n	8003efc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d03c      	beq.n	8003efc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e86:	2210      	movs	r2, #16
 8003e88:	409a      	lsls	r2, r3
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d018      	beq.n	8003ece <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d108      	bne.n	8003ebc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d024      	beq.n	8003efc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	4798      	blx	r3
 8003eba:	e01f      	b.n	8003efc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d01b      	beq.n	8003efc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	4798      	blx	r3
 8003ecc:	e016      	b.n	8003efc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d107      	bne.n	8003eec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0208 	bic.w	r2, r2, #8
 8003eea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f00:	2220      	movs	r2, #32
 8003f02:	409a      	lsls	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4013      	ands	r3, r2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 808f 	beq.w	800402c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 8087 	beq.w	800402c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f22:	2220      	movs	r2, #32
 8003f24:	409a      	lsls	r2, r3
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b05      	cmp	r3, #5
 8003f34:	d136      	bne.n	8003fa4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0216 	bic.w	r2, r2, #22
 8003f44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695a      	ldr	r2, [r3, #20]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d103      	bne.n	8003f66 <HAL_DMA_IRQHandler+0x1da>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d007      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0208 	bic.w	r2, r2, #8
 8003f74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f7a:	223f      	movs	r2, #63	@ 0x3f
 8003f7c:	409a      	lsls	r2, r3
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d07e      	beq.n	8004098 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	4798      	blx	r3
        }
        return;
 8003fa2:	e079      	b.n	8004098 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d01d      	beq.n	8003fee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10d      	bne.n	8003fdc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d031      	beq.n	800402c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	4798      	blx	r3
 8003fd0:	e02c      	b.n	800402c <HAL_DMA_IRQHandler+0x2a0>
 8003fd2:	bf00      	nop
 8003fd4:	20000020 	.word	0x20000020
 8003fd8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d023      	beq.n	800402c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	4798      	blx	r3
 8003fec:	e01e      	b.n	800402c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10f      	bne.n	800401c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0210 	bic.w	r2, r2, #16
 800400a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004030:	2b00      	cmp	r3, #0
 8004032:	d032      	beq.n	800409a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d022      	beq.n	8004086 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2205      	movs	r2, #5
 8004044:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0201 	bic.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	3301      	adds	r3, #1
 800405c:	60bb      	str	r3, [r7, #8]
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	429a      	cmp	r2, r3
 8004062:	d307      	bcc.n	8004074 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f2      	bne.n	8004058 <HAL_DMA_IRQHandler+0x2cc>
 8004072:	e000      	b.n	8004076 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004074:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800408a:	2b00      	cmp	r3, #0
 800408c:	d005      	beq.n	800409a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	4798      	blx	r3
 8004096:	e000      	b.n	800409a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004098:	bf00      	nop
    }
  }
}
 800409a:	3718      	adds	r7, #24
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80040bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b40      	cmp	r3, #64	@ 0x40
 80040cc:	d108      	bne.n	80040e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80040de:	e007      	b.n	80040f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	60da      	str	r2, [r3, #12]
}
 80040f0:	bf00      	nop
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	b2db      	uxtb	r3, r3
 800410a:	3b10      	subs	r3, #16
 800410c:	4a14      	ldr	r2, [pc, #80]	@ (8004160 <DMA_CalcBaseAndBitshift+0x64>)
 800410e:	fba2 2303 	umull	r2, r3, r2, r3
 8004112:	091b      	lsrs	r3, r3, #4
 8004114:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004116:	4a13      	ldr	r2, [pc, #76]	@ (8004164 <DMA_CalcBaseAndBitshift+0x68>)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4413      	add	r3, r2
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2b03      	cmp	r3, #3
 8004128:	d909      	bls.n	800413e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004132:	f023 0303 	bic.w	r3, r3, #3
 8004136:	1d1a      	adds	r2, r3, #4
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	659a      	str	r2, [r3, #88]	@ 0x58
 800413c:	e007      	b.n	800414e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004146:	f023 0303 	bic.w	r3, r3, #3
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	aaaaaaab 	.word	0xaaaaaaab
 8004164:	0800c4e0 	.word	0x0800c4e0

08004168 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004178:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d11f      	bne.n	80041c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	2b03      	cmp	r3, #3
 8004186:	d856      	bhi.n	8004236 <DMA_CheckFifoParam+0xce>
 8004188:	a201      	add	r2, pc, #4	@ (adr r2, 8004190 <DMA_CheckFifoParam+0x28>)
 800418a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418e:	bf00      	nop
 8004190:	080041a1 	.word	0x080041a1
 8004194:	080041b3 	.word	0x080041b3
 8004198:	080041a1 	.word	0x080041a1
 800419c:	08004237 	.word	0x08004237
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d046      	beq.n	800423a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041b0:	e043      	b.n	800423a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80041ba:	d140      	bne.n	800423e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c0:	e03d      	b.n	800423e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041ca:	d121      	bne.n	8004210 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b03      	cmp	r3, #3
 80041d0:	d837      	bhi.n	8004242 <DMA_CheckFifoParam+0xda>
 80041d2:	a201      	add	r2, pc, #4	@ (adr r2, 80041d8 <DMA_CheckFifoParam+0x70>)
 80041d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d8:	080041e9 	.word	0x080041e9
 80041dc:	080041ef 	.word	0x080041ef
 80041e0:	080041e9 	.word	0x080041e9
 80041e4:	08004201 	.word	0x08004201
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	73fb      	strb	r3, [r7, #15]
      break;
 80041ec:	e030      	b.n	8004250 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d025      	beq.n	8004246 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041fe:	e022      	b.n	8004246 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004204:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004208:	d11f      	bne.n	800424a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800420e:	e01c      	b.n	800424a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d903      	bls.n	800421e <DMA_CheckFifoParam+0xb6>
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2b03      	cmp	r3, #3
 800421a:	d003      	beq.n	8004224 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800421c:	e018      	b.n	8004250 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	73fb      	strb	r3, [r7, #15]
      break;
 8004222:	e015      	b.n	8004250 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004228:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00e      	beq.n	800424e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	73fb      	strb	r3, [r7, #15]
      break;
 8004234:	e00b      	b.n	800424e <DMA_CheckFifoParam+0xe6>
      break;
 8004236:	bf00      	nop
 8004238:	e00a      	b.n	8004250 <DMA_CheckFifoParam+0xe8>
      break;
 800423a:	bf00      	nop
 800423c:	e008      	b.n	8004250 <DMA_CheckFifoParam+0xe8>
      break;
 800423e:	bf00      	nop
 8004240:	e006      	b.n	8004250 <DMA_CheckFifoParam+0xe8>
      break;
 8004242:	bf00      	nop
 8004244:	e004      	b.n	8004250 <DMA_CheckFifoParam+0xe8>
      break;
 8004246:	bf00      	nop
 8004248:	e002      	b.n	8004250 <DMA_CheckFifoParam+0xe8>
      break;   
 800424a:	bf00      	nop
 800424c:	e000      	b.n	8004250 <DMA_CheckFifoParam+0xe8>
      break;
 800424e:	bf00      	nop
    }
  } 
  
  return status; 
 8004250:	7bfb      	ldrb	r3, [r7, #15]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop

08004260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004260:	b480      	push	{r7}
 8004262:	b089      	sub	sp, #36	@ 0x24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800426e:	2300      	movs	r3, #0
 8004270:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004272:	2300      	movs	r3, #0
 8004274:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004276:	2300      	movs	r3, #0
 8004278:	61fb      	str	r3, [r7, #28]
 800427a:	e165      	b.n	8004548 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800427c:	2201      	movs	r2, #1
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4013      	ands	r3, r2
 800428e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	429a      	cmp	r2, r3
 8004296:	f040 8154 	bne.w	8004542 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d005      	beq.n	80042b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d130      	bne.n	8004314 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	2203      	movs	r2, #3
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	43db      	mvns	r3, r3
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	4013      	ands	r3, r2
 80042c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	4313      	orrs	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042e8:	2201      	movs	r2, #1
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	43db      	mvns	r3, r3
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4013      	ands	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	091b      	lsrs	r3, r3, #4
 80042fe:	f003 0201 	and.w	r2, r3, #1
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	fa02 f303 	lsl.w	r3, r2, r3
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	4313      	orrs	r3, r2
 800430c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f003 0303 	and.w	r3, r3, #3
 800431c:	2b03      	cmp	r3, #3
 800431e:	d017      	beq.n	8004350 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	2203      	movs	r2, #3
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	43db      	mvns	r3, r3
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	4013      	ands	r3, r2
 8004336:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	4313      	orrs	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f003 0303 	and.w	r3, r3, #3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d123      	bne.n	80043a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	08da      	lsrs	r2, r3, #3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3208      	adds	r2, #8
 8004364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004368:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	220f      	movs	r2, #15
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	43db      	mvns	r3, r3
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	4013      	ands	r3, r2
 800437e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	4313      	orrs	r3, r2
 8004394:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	08da      	lsrs	r2, r3, #3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3208      	adds	r2, #8
 800439e:	69b9      	ldr	r1, [r7, #24]
 80043a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	2203      	movs	r2, #3
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	43db      	mvns	r3, r3
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	4013      	ands	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f003 0203 	and.w	r2, r3, #3
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 80ae 	beq.w	8004542 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043e6:	2300      	movs	r3, #0
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	4b5d      	ldr	r3, [pc, #372]	@ (8004560 <HAL_GPIO_Init+0x300>)
 80043ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ee:	4a5c      	ldr	r2, [pc, #368]	@ (8004560 <HAL_GPIO_Init+0x300>)
 80043f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80043f6:	4b5a      	ldr	r3, [pc, #360]	@ (8004560 <HAL_GPIO_Init+0x300>)
 80043f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004402:	4a58      	ldr	r2, [pc, #352]	@ (8004564 <HAL_GPIO_Init+0x304>)
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	089b      	lsrs	r3, r3, #2
 8004408:	3302      	adds	r3, #2
 800440a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800440e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	220f      	movs	r2, #15
 800441a:	fa02 f303 	lsl.w	r3, r2, r3
 800441e:	43db      	mvns	r3, r3
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	4013      	ands	r3, r2
 8004424:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a4f      	ldr	r2, [pc, #316]	@ (8004568 <HAL_GPIO_Init+0x308>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d025      	beq.n	800447a <HAL_GPIO_Init+0x21a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a4e      	ldr	r2, [pc, #312]	@ (800456c <HAL_GPIO_Init+0x30c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d01f      	beq.n	8004476 <HAL_GPIO_Init+0x216>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a4d      	ldr	r2, [pc, #308]	@ (8004570 <HAL_GPIO_Init+0x310>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d019      	beq.n	8004472 <HAL_GPIO_Init+0x212>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a4c      	ldr	r2, [pc, #304]	@ (8004574 <HAL_GPIO_Init+0x314>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d013      	beq.n	800446e <HAL_GPIO_Init+0x20e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a4b      	ldr	r2, [pc, #300]	@ (8004578 <HAL_GPIO_Init+0x318>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d00d      	beq.n	800446a <HAL_GPIO_Init+0x20a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a4a      	ldr	r2, [pc, #296]	@ (800457c <HAL_GPIO_Init+0x31c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d007      	beq.n	8004466 <HAL_GPIO_Init+0x206>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a49      	ldr	r2, [pc, #292]	@ (8004580 <HAL_GPIO_Init+0x320>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d101      	bne.n	8004462 <HAL_GPIO_Init+0x202>
 800445e:	2306      	movs	r3, #6
 8004460:	e00c      	b.n	800447c <HAL_GPIO_Init+0x21c>
 8004462:	2307      	movs	r3, #7
 8004464:	e00a      	b.n	800447c <HAL_GPIO_Init+0x21c>
 8004466:	2305      	movs	r3, #5
 8004468:	e008      	b.n	800447c <HAL_GPIO_Init+0x21c>
 800446a:	2304      	movs	r3, #4
 800446c:	e006      	b.n	800447c <HAL_GPIO_Init+0x21c>
 800446e:	2303      	movs	r3, #3
 8004470:	e004      	b.n	800447c <HAL_GPIO_Init+0x21c>
 8004472:	2302      	movs	r3, #2
 8004474:	e002      	b.n	800447c <HAL_GPIO_Init+0x21c>
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <HAL_GPIO_Init+0x21c>
 800447a:	2300      	movs	r3, #0
 800447c:	69fa      	ldr	r2, [r7, #28]
 800447e:	f002 0203 	and.w	r2, r2, #3
 8004482:	0092      	lsls	r2, r2, #2
 8004484:	4093      	lsls	r3, r2
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	4313      	orrs	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800448c:	4935      	ldr	r1, [pc, #212]	@ (8004564 <HAL_GPIO_Init+0x304>)
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	089b      	lsrs	r3, r3, #2
 8004492:	3302      	adds	r3, #2
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800449a:	4b3a      	ldr	r3, [pc, #232]	@ (8004584 <HAL_GPIO_Init+0x324>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	43db      	mvns	r3, r3
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	4013      	ands	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044be:	4a31      	ldr	r2, [pc, #196]	@ (8004584 <HAL_GPIO_Init+0x324>)
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044c4:	4b2f      	ldr	r3, [pc, #188]	@ (8004584 <HAL_GPIO_Init+0x324>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	43db      	mvns	r3, r3
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	4013      	ands	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044e8:	4a26      	ldr	r2, [pc, #152]	@ (8004584 <HAL_GPIO_Init+0x324>)
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044ee:	4b25      	ldr	r3, [pc, #148]	@ (8004584 <HAL_GPIO_Init+0x324>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	43db      	mvns	r3, r3
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	4013      	ands	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	4313      	orrs	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004512:	4a1c      	ldr	r2, [pc, #112]	@ (8004584 <HAL_GPIO_Init+0x324>)
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004518:	4b1a      	ldr	r3, [pc, #104]	@ (8004584 <HAL_GPIO_Init+0x324>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	43db      	mvns	r3, r3
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	4013      	ands	r3, r2
 8004526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	4313      	orrs	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800453c:	4a11      	ldr	r2, [pc, #68]	@ (8004584 <HAL_GPIO_Init+0x324>)
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	3301      	adds	r3, #1
 8004546:	61fb      	str	r3, [r7, #28]
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	2b0f      	cmp	r3, #15
 800454c:	f67f ae96 	bls.w	800427c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004550:	bf00      	nop
 8004552:	bf00      	nop
 8004554:	3724      	adds	r7, #36	@ 0x24
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	40023800 	.word	0x40023800
 8004564:	40013800 	.word	0x40013800
 8004568:	40020000 	.word	0x40020000
 800456c:	40020400 	.word	0x40020400
 8004570:	40020800 	.word	0x40020800
 8004574:	40020c00 	.word	0x40020c00
 8004578:	40021000 	.word	0x40021000
 800457c:	40021400 	.word	0x40021400
 8004580:	40021800 	.word	0x40021800
 8004584:	40013c00 	.word	0x40013c00

08004588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	807b      	strh	r3, [r7, #2]
 8004594:	4613      	mov	r3, r2
 8004596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004598:	787b      	ldrb	r3, [r7, #1]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800459e:	887a      	ldrh	r2, [r7, #2]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045a4:	e003      	b.n	80045ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045a6:	887b      	ldrh	r3, [r7, #2]
 80045a8:	041a      	lsls	r2, r3, #16
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	619a      	str	r2, [r3, #24]
}
 80045ae:	bf00      	nop
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
	...

080045bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	4603      	mov	r3, r0
 80045c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80045c6:	4b08      	ldr	r3, [pc, #32]	@ (80045e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045c8:	695a      	ldr	r2, [r3, #20]
 80045ca:	88fb      	ldrh	r3, [r7, #6]
 80045cc:	4013      	ands	r3, r2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d006      	beq.n	80045e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045d2:	4a05      	ldr	r2, [pc, #20]	@ (80045e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045d4:	88fb      	ldrh	r3, [r7, #6]
 80045d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045d8:	88fb      	ldrh	r3, [r7, #6]
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 f806 	bl	80045ec <HAL_GPIO_EXTI_Callback>
  }
}
 80045e0:	bf00      	nop
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40013c00 	.word	0x40013c00

080045ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	4603      	mov	r3, r0
 80045f4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b086      	sub	sp, #24
 8004606:	af02      	add	r7, sp, #8
 8004608:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e108      	b.n	8004826 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fe fe3e 	bl	80032b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2203      	movs	r2, #3
 8004638:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004642:	d102      	bne.n	800464a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f003 fb16 	bl	8007c80 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6818      	ldr	r0, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	7c1a      	ldrb	r2, [r3, #16]
 800465c:	f88d 2000 	strb.w	r2, [sp]
 8004660:	3304      	adds	r3, #4
 8004662:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004664:	f003 faa8 	bl	8007bb8 <USB_CoreInit>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d005      	beq.n	800467a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2202      	movs	r2, #2
 8004672:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e0d5      	b.n	8004826 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2100      	movs	r1, #0
 8004680:	4618      	mov	r0, r3
 8004682:	f003 fb0e 	bl	8007ca2 <USB_SetCurrentMode>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d005      	beq.n	8004698 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e0c6      	b.n	8004826 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004698:	2300      	movs	r3, #0
 800469a:	73fb      	strb	r3, [r7, #15]
 800469c:	e04a      	b.n	8004734 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800469e:	7bfa      	ldrb	r2, [r7, #15]
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	4613      	mov	r3, r2
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	4413      	add	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	3315      	adds	r3, #21
 80046ae:	2201      	movs	r2, #1
 80046b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80046b2:	7bfa      	ldrb	r2, [r7, #15]
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	4613      	mov	r3, r2
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	4413      	add	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	440b      	add	r3, r1
 80046c0:	3314      	adds	r3, #20
 80046c2:	7bfa      	ldrb	r2, [r7, #15]
 80046c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80046c6:	7bfa      	ldrb	r2, [r7, #15]
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
 80046ca:	b298      	uxth	r0, r3
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	4613      	mov	r3, r2
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	4413      	add	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	440b      	add	r3, r1
 80046d8:	332e      	adds	r3, #46	@ 0x2e
 80046da:	4602      	mov	r2, r0
 80046dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80046de:	7bfa      	ldrb	r2, [r7, #15]
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	4613      	mov	r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	4413      	add	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	440b      	add	r3, r1
 80046ec:	3318      	adds	r3, #24
 80046ee:	2200      	movs	r2, #0
 80046f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80046f2:	7bfa      	ldrb	r2, [r7, #15]
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	4613      	mov	r3, r2
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	4413      	add	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	440b      	add	r3, r1
 8004700:	331c      	adds	r3, #28
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004706:	7bfa      	ldrb	r2, [r7, #15]
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	4613      	mov	r3, r2
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	4413      	add	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	440b      	add	r3, r1
 8004714:	3320      	adds	r3, #32
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800471a:	7bfa      	ldrb	r2, [r7, #15]
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	4613      	mov	r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	440b      	add	r3, r1
 8004728:	3324      	adds	r3, #36	@ 0x24
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800472e:	7bfb      	ldrb	r3, [r7, #15]
 8004730:	3301      	adds	r3, #1
 8004732:	73fb      	strb	r3, [r7, #15]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	791b      	ldrb	r3, [r3, #4]
 8004738:	7bfa      	ldrb	r2, [r7, #15]
 800473a:	429a      	cmp	r2, r3
 800473c:	d3af      	bcc.n	800469e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800473e:	2300      	movs	r3, #0
 8004740:	73fb      	strb	r3, [r7, #15]
 8004742:	e044      	b.n	80047ce <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004744:	7bfa      	ldrb	r2, [r7, #15]
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	4613      	mov	r3, r2
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	4413      	add	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004756:	2200      	movs	r2, #0
 8004758:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800475a:	7bfa      	ldrb	r2, [r7, #15]
 800475c:	6879      	ldr	r1, [r7, #4]
 800475e:	4613      	mov	r3, r2
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	4413      	add	r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	440b      	add	r3, r1
 8004768:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800476c:	7bfa      	ldrb	r2, [r7, #15]
 800476e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004770:	7bfa      	ldrb	r2, [r7, #15]
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	4613      	mov	r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	4413      	add	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004782:	2200      	movs	r2, #0
 8004784:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004786:	7bfa      	ldrb	r2, [r7, #15]
 8004788:	6879      	ldr	r1, [r7, #4]
 800478a:	4613      	mov	r3, r2
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	4413      	add	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	440b      	add	r3, r1
 8004794:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800479c:	7bfa      	ldrb	r2, [r7, #15]
 800479e:	6879      	ldr	r1, [r7, #4]
 80047a0:	4613      	mov	r3, r2
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	4413      	add	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	440b      	add	r3, r1
 80047aa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80047ae:	2200      	movs	r2, #0
 80047b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80047b2:	7bfa      	ldrb	r2, [r7, #15]
 80047b4:	6879      	ldr	r1, [r7, #4]
 80047b6:	4613      	mov	r3, r2
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	4413      	add	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	440b      	add	r3, r1
 80047c0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
 80047ca:	3301      	adds	r3, #1
 80047cc:	73fb      	strb	r3, [r7, #15]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	791b      	ldrb	r3, [r3, #4]
 80047d2:	7bfa      	ldrb	r2, [r7, #15]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d3b5      	bcc.n	8004744 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6818      	ldr	r0, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	7c1a      	ldrb	r2, [r3, #16]
 80047e0:	f88d 2000 	strb.w	r2, [sp]
 80047e4:	3304      	adds	r3, #4
 80047e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047e8:	f003 faa8 	bl	8007d3c <USB_DevInit>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d005      	beq.n	80047fe <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2202      	movs	r2, #2
 80047f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e013      	b.n	8004826 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	7b1b      	ldrb	r3, [r3, #12]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d102      	bne.n	800481a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f80a 	bl	800482e <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f003 fc63 	bl	80080ea <USB_DevDisconnect>

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800482e:	b480      	push	{r7}
 8004830:	b085      	sub	sp, #20
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004860:	f043 0303 	orr.w	r3, r3, #3
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
	...

08004878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e0cc      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800488c:	4b68      	ldr	r3, [pc, #416]	@ (8004a30 <HAL_RCC_ClockConfig+0x1b8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d90c      	bls.n	80048b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489a:	4b65      	ldr	r3, [pc, #404]	@ (8004a30 <HAL_RCC_ClockConfig+0x1b8>)
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a2:	4b63      	ldr	r3, [pc, #396]	@ (8004a30 <HAL_RCC_ClockConfig+0x1b8>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d001      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e0b8      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d020      	beq.n	8004902 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d005      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048cc:	4b59      	ldr	r3, [pc, #356]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	4a58      	ldr	r2, [pc, #352]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d005      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048e4:	4b53      	ldr	r3, [pc, #332]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	4a52      	ldr	r2, [pc, #328]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80048ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048f0:	4b50      	ldr	r3, [pc, #320]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	494d      	ldr	r1, [pc, #308]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d044      	beq.n	8004998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d107      	bne.n	8004926 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004916:	4b47      	ldr	r3, [pc, #284]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d119      	bne.n	8004956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e07f      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b02      	cmp	r3, #2
 800492c:	d003      	beq.n	8004936 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004932:	2b03      	cmp	r3, #3
 8004934:	d107      	bne.n	8004946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004936:	4b3f      	ldr	r3, [pc, #252]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d109      	bne.n	8004956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e06f      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004946:	4b3b      	ldr	r3, [pc, #236]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e067      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004956:	4b37      	ldr	r3, [pc, #220]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f023 0203 	bic.w	r2, r3, #3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	4934      	ldr	r1, [pc, #208]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004964:	4313      	orrs	r3, r2
 8004966:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004968:	f7fe ff36 	bl	80037d8 <HAL_GetTick>
 800496c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496e:	e00a      	b.n	8004986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004970:	f7fe ff32 	bl	80037d8 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800497e:	4293      	cmp	r3, r2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e04f      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004986:	4b2b      	ldr	r3, [pc, #172]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 020c 	and.w	r2, r3, #12
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	429a      	cmp	r2, r3
 8004996:	d1eb      	bne.n	8004970 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004998:	4b25      	ldr	r3, [pc, #148]	@ (8004a30 <HAL_RCC_ClockConfig+0x1b8>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0307 	and.w	r3, r3, #7
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d20c      	bcs.n	80049c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a6:	4b22      	ldr	r3, [pc, #136]	@ (8004a30 <HAL_RCC_ClockConfig+0x1b8>)
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ae:	4b20      	ldr	r3, [pc, #128]	@ (8004a30 <HAL_RCC_ClockConfig+0x1b8>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0307 	and.w	r3, r3, #7
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d001      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e032      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d008      	beq.n	80049de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049cc:	4b19      	ldr	r3, [pc, #100]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	4916      	ldr	r1, [pc, #88]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d009      	beq.n	80049fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049ea:	4b12      	ldr	r3, [pc, #72]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	490e      	ldr	r1, [pc, #56]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049fe:	f000 f821 	bl	8004a44 <HAL_RCC_GetSysClockFreq>
 8004a02:	4602      	mov	r2, r0
 8004a04:	4b0b      	ldr	r3, [pc, #44]	@ (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	091b      	lsrs	r3, r3, #4
 8004a0a:	f003 030f 	and.w	r3, r3, #15
 8004a0e:	490a      	ldr	r1, [pc, #40]	@ (8004a38 <HAL_RCC_ClockConfig+0x1c0>)
 8004a10:	5ccb      	ldrb	r3, [r1, r3]
 8004a12:	fa22 f303 	lsr.w	r3, r2, r3
 8004a16:	4a09      	ldr	r2, [pc, #36]	@ (8004a3c <HAL_RCC_ClockConfig+0x1c4>)
 8004a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a1a:	4b09      	ldr	r3, [pc, #36]	@ (8004a40 <HAL_RCC_ClockConfig+0x1c8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fe fe96 	bl	8003750 <HAL_InitTick>

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40023c00 	.word	0x40023c00
 8004a34:	40023800 	.word	0x40023800
 8004a38:	0800c4c8 	.word	0x0800c4c8
 8004a3c:	20000020 	.word	0x20000020
 8004a40:	20000024 	.word	0x20000024

08004a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a48:	b094      	sub	sp, #80	@ 0x50
 8004a4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a50:	2300      	movs	r3, #0
 8004a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a54:	2300      	movs	r3, #0
 8004a56:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a5c:	4b79      	ldr	r3, [pc, #484]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f003 030c 	and.w	r3, r3, #12
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d00d      	beq.n	8004a84 <HAL_RCC_GetSysClockFreq+0x40>
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	f200 80e1 	bhi.w	8004c30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <HAL_RCC_GetSysClockFreq+0x34>
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d003      	beq.n	8004a7e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a76:	e0db      	b.n	8004c30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a78:	4b73      	ldr	r3, [pc, #460]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004a7c:	e0db      	b.n	8004c36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a7e:	4b73      	ldr	r3, [pc, #460]	@ (8004c4c <HAL_RCC_GetSysClockFreq+0x208>)
 8004a80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a82:	e0d8      	b.n	8004c36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a84:	4b6f      	ldr	r3, [pc, #444]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a8c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a8e:	4b6d      	ldr	r3, [pc, #436]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d063      	beq.n	8004b62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a9a:	4b6a      	ldr	r3, [pc, #424]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	099b      	lsrs	r3, r3, #6
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004aa4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aac:	633b      	str	r3, [r7, #48]	@ 0x30
 8004aae:	2300      	movs	r3, #0
 8004ab0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ab2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004ab6:	4622      	mov	r2, r4
 8004ab8:	462b      	mov	r3, r5
 8004aba:	f04f 0000 	mov.w	r0, #0
 8004abe:	f04f 0100 	mov.w	r1, #0
 8004ac2:	0159      	lsls	r1, r3, #5
 8004ac4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ac8:	0150      	lsls	r0, r2, #5
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	4621      	mov	r1, r4
 8004ad0:	1a51      	subs	r1, r2, r1
 8004ad2:	6139      	str	r1, [r7, #16]
 8004ad4:	4629      	mov	r1, r5
 8004ad6:	eb63 0301 	sbc.w	r3, r3, r1
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	f04f 0300 	mov.w	r3, #0
 8004ae4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ae8:	4659      	mov	r1, fp
 8004aea:	018b      	lsls	r3, r1, #6
 8004aec:	4651      	mov	r1, sl
 8004aee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004af2:	4651      	mov	r1, sl
 8004af4:	018a      	lsls	r2, r1, #6
 8004af6:	4651      	mov	r1, sl
 8004af8:	ebb2 0801 	subs.w	r8, r2, r1
 8004afc:	4659      	mov	r1, fp
 8004afe:	eb63 0901 	sbc.w	r9, r3, r1
 8004b02:	f04f 0200 	mov.w	r2, #0
 8004b06:	f04f 0300 	mov.w	r3, #0
 8004b0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b16:	4690      	mov	r8, r2
 8004b18:	4699      	mov	r9, r3
 8004b1a:	4623      	mov	r3, r4
 8004b1c:	eb18 0303 	adds.w	r3, r8, r3
 8004b20:	60bb      	str	r3, [r7, #8]
 8004b22:	462b      	mov	r3, r5
 8004b24:	eb49 0303 	adc.w	r3, r9, r3
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b36:	4629      	mov	r1, r5
 8004b38:	024b      	lsls	r3, r1, #9
 8004b3a:	4621      	mov	r1, r4
 8004b3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b40:	4621      	mov	r1, r4
 8004b42:	024a      	lsls	r2, r1, #9
 8004b44:	4610      	mov	r0, r2
 8004b46:	4619      	mov	r1, r3
 8004b48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b54:	f7fc f8b8 	bl	8000cc8 <__aeabi_uldivmod>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b60:	e058      	b.n	8004c14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b62:	4b38      	ldr	r3, [pc, #224]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	099b      	lsrs	r3, r3, #6
 8004b68:	2200      	movs	r2, #0
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	4611      	mov	r1, r2
 8004b6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b72:	623b      	str	r3, [r7, #32]
 8004b74:	2300      	movs	r3, #0
 8004b76:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	464b      	mov	r3, r9
 8004b80:	f04f 0000 	mov.w	r0, #0
 8004b84:	f04f 0100 	mov.w	r1, #0
 8004b88:	0159      	lsls	r1, r3, #5
 8004b8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b8e:	0150      	lsls	r0, r2, #5
 8004b90:	4602      	mov	r2, r0
 8004b92:	460b      	mov	r3, r1
 8004b94:	4641      	mov	r1, r8
 8004b96:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b9a:	4649      	mov	r1, r9
 8004b9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bb4:	ebb2 040a 	subs.w	r4, r2, sl
 8004bb8:	eb63 050b 	sbc.w	r5, r3, fp
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	00eb      	lsls	r3, r5, #3
 8004bc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bca:	00e2      	lsls	r2, r4, #3
 8004bcc:	4614      	mov	r4, r2
 8004bce:	461d      	mov	r5, r3
 8004bd0:	4643      	mov	r3, r8
 8004bd2:	18e3      	adds	r3, r4, r3
 8004bd4:	603b      	str	r3, [r7, #0]
 8004bd6:	464b      	mov	r3, r9
 8004bd8:	eb45 0303 	adc.w	r3, r5, r3
 8004bdc:	607b      	str	r3, [r7, #4]
 8004bde:	f04f 0200 	mov.w	r2, #0
 8004be2:	f04f 0300 	mov.w	r3, #0
 8004be6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bea:	4629      	mov	r1, r5
 8004bec:	028b      	lsls	r3, r1, #10
 8004bee:	4621      	mov	r1, r4
 8004bf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bf4:	4621      	mov	r1, r4
 8004bf6:	028a      	lsls	r2, r1, #10
 8004bf8:	4610      	mov	r0, r2
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bfe:	2200      	movs	r2, #0
 8004c00:	61bb      	str	r3, [r7, #24]
 8004c02:	61fa      	str	r2, [r7, #28]
 8004c04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c08:	f7fc f85e 	bl	8000cc8 <__aeabi_uldivmod>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4613      	mov	r3, r2
 8004c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c14:	4b0b      	ldr	r3, [pc, #44]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	0c1b      	lsrs	r3, r3, #16
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	3301      	adds	r3, #1
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004c24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c2e:	e002      	b.n	8004c36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c30:	4b05      	ldr	r3, [pc, #20]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3750      	adds	r7, #80	@ 0x50
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c42:	bf00      	nop
 8004c44:	40023800 	.word	0x40023800
 8004c48:	00f42400 	.word	0x00f42400
 8004c4c:	007a1200 	.word	0x007a1200

08004c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c54:	4b03      	ldr	r3, [pc, #12]	@ (8004c64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c56:	681b      	ldr	r3, [r3, #0]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	20000020 	.word	0x20000020

08004c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c6c:	f7ff fff0 	bl	8004c50 <HAL_RCC_GetHCLKFreq>
 8004c70:	4602      	mov	r2, r0
 8004c72:	4b05      	ldr	r3, [pc, #20]	@ (8004c88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	0a9b      	lsrs	r3, r3, #10
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	4903      	ldr	r1, [pc, #12]	@ (8004c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c7e:	5ccb      	ldrb	r3, [r1, r3]
 8004c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40023800 	.word	0x40023800
 8004c8c:	0800c4d8 	.word	0x0800c4d8

08004c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c94:	f7ff ffdc 	bl	8004c50 <HAL_RCC_GetHCLKFreq>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	4b05      	ldr	r3, [pc, #20]	@ (8004cb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	0b5b      	lsrs	r3, r3, #13
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	4903      	ldr	r1, [pc, #12]	@ (8004cb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ca6:	5ccb      	ldrb	r3, [r1, r3]
 8004ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	0800c4d8 	.word	0x0800c4d8

08004cb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d010      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004cd8:	4b87      	ldr	r3, [pc, #540]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cde:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	4984      	ldr	r1, [pc, #528]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d010      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004d06:	4b7c      	ldr	r3, [pc, #496]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d0c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	4978      	ldr	r1, [pc, #480]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8004d24:	2301      	movs	r3, #1
 8004d26:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0308 	and.w	r3, r3, #8
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 8083 	beq.w	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d36:	2300      	movs	r3, #0
 8004d38:	60bb      	str	r3, [r7, #8]
 8004d3a:	4b6f      	ldr	r3, [pc, #444]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3e:	4a6e      	ldr	r2, [pc, #440]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d44:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d46:	4b6c      	ldr	r3, [pc, #432]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d4e:	60bb      	str	r3, [r7, #8]
 8004d50:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d52:	4b6a      	ldr	r3, [pc, #424]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a69      	ldr	r2, [pc, #420]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004d58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d5c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d5e:	f7fe fd3b 	bl	80037d8 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d64:	e008      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d66:	f7fe fd37 	bl	80037d8 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e162      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d78:	4b60      	ldr	r3, [pc, #384]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0f0      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d84:	4b5c      	ldr	r3, [pc, #368]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d8c:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d02f      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d028      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004da2:	4b55      	ldr	r3, [pc, #340]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004daa:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dac:	4b54      	ldr	r3, [pc, #336]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004dae:	2201      	movs	r2, #1
 8004db0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004db2:	4b53      	ldr	r3, [pc, #332]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004db8:	4a4f      	ldr	r2, [pc, #316]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004dbe:	4b4e      	ldr	r3, [pc, #312]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d114      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004dca:	f7fe fd05 	bl	80037d8 <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd0:	e00a      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dd2:	f7fe fd01 	bl	80037d8 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e12a      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de8:	4b43      	ldr	r3, [pc, #268]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0ee      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e00:	d10d      	bne.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004e02:	4b3d      	ldr	r3, [pc, #244]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004e12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e16:	4938      	ldr	r1, [pc, #224]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	608b      	str	r3, [r1, #8]
 8004e1c:	e005      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004e1e:	4b36      	ldr	r3, [pc, #216]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	4a35      	ldr	r2, [pc, #212]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e24:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004e28:	6093      	str	r3, [r2, #8]
 8004e2a:	4b33      	ldr	r3, [pc, #204]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e2c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e36:	4930      	ldr	r1, [pc, #192]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d004      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8004e4e:	4b2d      	ldr	r3, [pc, #180]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004e50:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0310 	and.w	r3, r3, #16
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004e5e:	4b26      	ldr	r3, [pc, #152]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e64:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6c:	4922      	ldr	r1, [pc, #136]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0320 	and.w	r3, r3, #32
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d011      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e80:	4b1d      	ldr	r3, [pc, #116]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e86:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e8e:	491a      	ldr	r1, [pc, #104]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e9e:	d101      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004eb0:	4b11      	ldr	r3, [pc, #68]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004eb6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	490e      	ldr	r1, [pc, #56]	@ (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d004      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b80      	cmp	r3, #128	@ 0x80
 8004ed2:	f040 8091 	bne.w	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004edc:	f7fe fc7c 	bl	80037d8 <HAL_GetTick>
 8004ee0:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ee2:	e013      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ee4:	f7fe fc78 	bl	80037d8 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d90c      	bls.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e0a3      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004ef6:	bf00      	nop
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	40007000 	.word	0x40007000
 8004f00:	42470e40 	.word	0x42470e40
 8004f04:	424711e0 	.word	0x424711e0
 8004f08:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f0c:	4b4e      	ldr	r3, [pc, #312]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1e5      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8004f18:	4a4c      	ldr	r2, [pc, #304]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f1e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d023      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d003      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d019      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d004      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f5c:	d00e      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d019      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d115      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f7a:	d110      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	019b      	lsls	r3, r3, #6
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	061b      	lsls	r3, r3, #24
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	071b      	lsls	r3, r3, #28
 8004f96:	492c      	ldr	r1, [pc, #176]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d010      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	019b      	lsls	r3, r3, #6
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	061b      	lsls	r3, r3, #24
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	071b      	lsls	r3, r3, #28
 8004fc4:	4920      	ldr	r1, [pc, #128]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fcc:	4b20      	ldr	r3, [pc, #128]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004fce:	2201      	movs	r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fd2:	f7fe fc01 	bl	80037d8 <HAL_GetTick>
 8004fd6:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fd8:	e008      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fda:	f7fe fbfd 	bl	80037d8 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e028      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fec:	4b16      	ldr	r3, [pc, #88]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0f0      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00a      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005004:	4b10      	ldr	r3, [pc, #64]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005006:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800500a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005012:	490d      	ldr	r1, [pc, #52]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005014:	4313      	orrs	r3, r2
 8005016:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00a      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005026:	4b08      	ldr	r3, [pc, #32]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005028:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800502c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005034:	4904      	ldr	r1, [pc, #16]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3718      	adds	r7, #24
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	40023800 	.word	0x40023800
 800504c:	424710d8 	.word	0x424710d8
 8005050:	42470068 	.word	0x42470068

08005054 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e273      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d075      	beq.n	800515e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005072:	4b88      	ldr	r3, [pc, #544]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 030c 	and.w	r3, r3, #12
 800507a:	2b04      	cmp	r3, #4
 800507c:	d00c      	beq.n	8005098 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800507e:	4b85      	ldr	r3, [pc, #532]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005086:	2b08      	cmp	r3, #8
 8005088:	d112      	bne.n	80050b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800508a:	4b82      	ldr	r3, [pc, #520]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005092:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005096:	d10b      	bne.n	80050b0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005098:	4b7e      	ldr	r3, [pc, #504]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d05b      	beq.n	800515c <HAL_RCC_OscConfig+0x108>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d157      	bne.n	800515c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e24e      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050b8:	d106      	bne.n	80050c8 <HAL_RCC_OscConfig+0x74>
 80050ba:	4b76      	ldr	r3, [pc, #472]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a75      	ldr	r2, [pc, #468]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	e01d      	b.n	8005104 <HAL_RCC_OscConfig+0xb0>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050d0:	d10c      	bne.n	80050ec <HAL_RCC_OscConfig+0x98>
 80050d2:	4b70      	ldr	r3, [pc, #448]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a6f      	ldr	r2, [pc, #444]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	4b6d      	ldr	r3, [pc, #436]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a6c      	ldr	r2, [pc, #432]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	e00b      	b.n	8005104 <HAL_RCC_OscConfig+0xb0>
 80050ec:	4b69      	ldr	r3, [pc, #420]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a68      	ldr	r2, [pc, #416]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	4b66      	ldr	r3, [pc, #408]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a65      	ldr	r2, [pc, #404]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80050fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005102:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d013      	beq.n	8005134 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510c:	f7fe fb64 	bl	80037d8 <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005114:	f7fe fb60 	bl	80037d8 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b64      	cmp	r3, #100	@ 0x64
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e213      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005126:	4b5b      	ldr	r3, [pc, #364]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f0      	beq.n	8005114 <HAL_RCC_OscConfig+0xc0>
 8005132:	e014      	b.n	800515e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005134:	f7fe fb50 	bl	80037d8 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800513c:	f7fe fb4c 	bl	80037d8 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b64      	cmp	r3, #100	@ 0x64
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e1ff      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800514e:	4b51      	ldr	r3, [pc, #324]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f0      	bne.n	800513c <HAL_RCC_OscConfig+0xe8>
 800515a:	e000      	b.n	800515e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800515c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d063      	beq.n	8005232 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800516a:	4b4a      	ldr	r3, [pc, #296]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 030c 	and.w	r3, r3, #12
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00b      	beq.n	800518e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005176:	4b47      	ldr	r3, [pc, #284]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800517e:	2b08      	cmp	r3, #8
 8005180:	d11c      	bne.n	80051bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005182:	4b44      	ldr	r3, [pc, #272]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d116      	bne.n	80051bc <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800518e:	4b41      	ldr	r3, [pc, #260]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d005      	beq.n	80051a6 <HAL_RCC_OscConfig+0x152>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d001      	beq.n	80051a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e1d3      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051a6:	4b3b      	ldr	r3, [pc, #236]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	4937      	ldr	r1, [pc, #220]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ba:	e03a      	b.n	8005232 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d020      	beq.n	8005206 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051c4:	4b34      	ldr	r3, [pc, #208]	@ (8005298 <HAL_RCC_OscConfig+0x244>)
 80051c6:	2201      	movs	r2, #1
 80051c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ca:	f7fe fb05 	bl	80037d8 <HAL_GetTick>
 80051ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051d0:	e008      	b.n	80051e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051d2:	f7fe fb01 	bl	80037d8 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d901      	bls.n	80051e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e1b4      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e4:	4b2b      	ldr	r3, [pc, #172]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0f0      	beq.n	80051d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051f0:	4b28      	ldr	r3, [pc, #160]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	4925      	ldr	r1, [pc, #148]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005200:	4313      	orrs	r3, r2
 8005202:	600b      	str	r3, [r1, #0]
 8005204:	e015      	b.n	8005232 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005206:	4b24      	ldr	r3, [pc, #144]	@ (8005298 <HAL_RCC_OscConfig+0x244>)
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520c:	f7fe fae4 	bl	80037d8 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005214:	f7fe fae0 	bl	80037d8 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e193      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005226:	4b1b      	ldr	r3, [pc, #108]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f0      	bne.n	8005214 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d036      	beq.n	80052ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d016      	beq.n	8005274 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005246:	4b15      	ldr	r3, [pc, #84]	@ (800529c <HAL_RCC_OscConfig+0x248>)
 8005248:	2201      	movs	r2, #1
 800524a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800524c:	f7fe fac4 	bl	80037d8 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005254:	f7fe fac0 	bl	80037d8 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e173      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005266:	4b0b      	ldr	r3, [pc, #44]	@ (8005294 <HAL_RCC_OscConfig+0x240>)
 8005268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0f0      	beq.n	8005254 <HAL_RCC_OscConfig+0x200>
 8005272:	e01b      	b.n	80052ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005274:	4b09      	ldr	r3, [pc, #36]	@ (800529c <HAL_RCC_OscConfig+0x248>)
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800527a:	f7fe faad 	bl	80037d8 <HAL_GetTick>
 800527e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005280:	e00e      	b.n	80052a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005282:	f7fe faa9 	bl	80037d8 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d907      	bls.n	80052a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e15c      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
 8005294:	40023800 	.word	0x40023800
 8005298:	42470000 	.word	0x42470000
 800529c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052a0:	4b8a      	ldr	r3, [pc, #552]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 80052a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1ea      	bne.n	8005282 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 8097 	beq.w	80053e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ba:	2300      	movs	r3, #0
 80052bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052be:	4b83      	ldr	r3, [pc, #524]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 80052c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10f      	bne.n	80052ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ca:	2300      	movs	r3, #0
 80052cc:	60bb      	str	r3, [r7, #8]
 80052ce:	4b7f      	ldr	r3, [pc, #508]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 80052d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d2:	4a7e      	ldr	r2, [pc, #504]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 80052d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80052da:	4b7c      	ldr	r3, [pc, #496]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 80052dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052e2:	60bb      	str	r3, [r7, #8]
 80052e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052e6:	2301      	movs	r3, #1
 80052e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ea:	4b79      	ldr	r3, [pc, #484]	@ (80054d0 <HAL_RCC_OscConfig+0x47c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d118      	bne.n	8005328 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052f6:	4b76      	ldr	r3, [pc, #472]	@ (80054d0 <HAL_RCC_OscConfig+0x47c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a75      	ldr	r2, [pc, #468]	@ (80054d0 <HAL_RCC_OscConfig+0x47c>)
 80052fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005302:	f7fe fa69 	bl	80037d8 <HAL_GetTick>
 8005306:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005308:	e008      	b.n	800531c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800530a:	f7fe fa65 	bl	80037d8 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e118      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800531c:	4b6c      	ldr	r3, [pc, #432]	@ (80054d0 <HAL_RCC_OscConfig+0x47c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0f0      	beq.n	800530a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d106      	bne.n	800533e <HAL_RCC_OscConfig+0x2ea>
 8005330:	4b66      	ldr	r3, [pc, #408]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 8005332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005334:	4a65      	ldr	r2, [pc, #404]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 8005336:	f043 0301 	orr.w	r3, r3, #1
 800533a:	6713      	str	r3, [r2, #112]	@ 0x70
 800533c:	e01c      	b.n	8005378 <HAL_RCC_OscConfig+0x324>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	2b05      	cmp	r3, #5
 8005344:	d10c      	bne.n	8005360 <HAL_RCC_OscConfig+0x30c>
 8005346:	4b61      	ldr	r3, [pc, #388]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 8005348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800534a:	4a60      	ldr	r2, [pc, #384]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 800534c:	f043 0304 	orr.w	r3, r3, #4
 8005350:	6713      	str	r3, [r2, #112]	@ 0x70
 8005352:	4b5e      	ldr	r3, [pc, #376]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 8005354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005356:	4a5d      	ldr	r2, [pc, #372]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 8005358:	f043 0301 	orr.w	r3, r3, #1
 800535c:	6713      	str	r3, [r2, #112]	@ 0x70
 800535e:	e00b      	b.n	8005378 <HAL_RCC_OscConfig+0x324>
 8005360:	4b5a      	ldr	r3, [pc, #360]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 8005362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005364:	4a59      	ldr	r2, [pc, #356]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 8005366:	f023 0301 	bic.w	r3, r3, #1
 800536a:	6713      	str	r3, [r2, #112]	@ 0x70
 800536c:	4b57      	ldr	r3, [pc, #348]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 800536e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005370:	4a56      	ldr	r2, [pc, #344]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 8005372:	f023 0304 	bic.w	r3, r3, #4
 8005376:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d015      	beq.n	80053ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005380:	f7fe fa2a 	bl	80037d8 <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005386:	e00a      	b.n	800539e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005388:	f7fe fa26 	bl	80037d8 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005396:	4293      	cmp	r3, r2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e0d7      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800539e:	4b4b      	ldr	r3, [pc, #300]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 80053a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0ee      	beq.n	8005388 <HAL_RCC_OscConfig+0x334>
 80053aa:	e014      	b.n	80053d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ac:	f7fe fa14 	bl	80037d8 <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053b2:	e00a      	b.n	80053ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053b4:	f7fe fa10 	bl	80037d8 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e0c1      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053ca:	4b40      	ldr	r3, [pc, #256]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 80053cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1ee      	bne.n	80053b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053d6:	7dfb      	ldrb	r3, [r7, #23]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d105      	bne.n	80053e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053dc:	4b3b      	ldr	r3, [pc, #236]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 80053de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e0:	4a3a      	ldr	r2, [pc, #232]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 80053e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 80ad 	beq.w	800554c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053f2:	4b36      	ldr	r3, [pc, #216]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f003 030c 	and.w	r3, r3, #12
 80053fa:	2b08      	cmp	r3, #8
 80053fc:	d060      	beq.n	80054c0 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	2b02      	cmp	r3, #2
 8005404:	d145      	bne.n	8005492 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005406:	4b33      	ldr	r3, [pc, #204]	@ (80054d4 <HAL_RCC_OscConfig+0x480>)
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540c:	f7fe f9e4 	bl	80037d8 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005414:	f7fe f9e0 	bl	80037d8 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e093      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005426:	4b29      	ldr	r3, [pc, #164]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1f0      	bne.n	8005414 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69da      	ldr	r2, [r3, #28]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005440:	019b      	lsls	r3, r3, #6
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005448:	085b      	lsrs	r3, r3, #1
 800544a:	3b01      	subs	r3, #1
 800544c:	041b      	lsls	r3, r3, #16
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005454:	061b      	lsls	r3, r3, #24
 8005456:	431a      	orrs	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800545c:	071b      	lsls	r3, r3, #28
 800545e:	491b      	ldr	r1, [pc, #108]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 8005460:	4313      	orrs	r3, r2
 8005462:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005464:	4b1b      	ldr	r3, [pc, #108]	@ (80054d4 <HAL_RCC_OscConfig+0x480>)
 8005466:	2201      	movs	r2, #1
 8005468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546a:	f7fe f9b5 	bl	80037d8 <HAL_GetTick>
 800546e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005470:	e008      	b.n	8005484 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005472:	f7fe f9b1 	bl	80037d8 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	2b02      	cmp	r3, #2
 800547e:	d901      	bls.n	8005484 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e064      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005484:	4b11      	ldr	r3, [pc, #68]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d0f0      	beq.n	8005472 <HAL_RCC_OscConfig+0x41e>
 8005490:	e05c      	b.n	800554c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005492:	4b10      	ldr	r3, [pc, #64]	@ (80054d4 <HAL_RCC_OscConfig+0x480>)
 8005494:	2200      	movs	r2, #0
 8005496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005498:	f7fe f99e 	bl	80037d8 <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054a0:	f7fe f99a 	bl	80037d8 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e04d      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054b2:	4b06      	ldr	r3, [pc, #24]	@ (80054cc <HAL_RCC_OscConfig+0x478>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1f0      	bne.n	80054a0 <HAL_RCC_OscConfig+0x44c>
 80054be:	e045      	b.n	800554c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d107      	bne.n	80054d8 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e040      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
 80054cc:	40023800 	.word	0x40023800
 80054d0:	40007000 	.word	0x40007000
 80054d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054d8:	4b1f      	ldr	r3, [pc, #124]	@ (8005558 <HAL_RCC_OscConfig+0x504>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d030      	beq.n	8005548 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d129      	bne.n	8005548 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054fe:	429a      	cmp	r2, r3
 8005500:	d122      	bne.n	8005548 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005508:	4013      	ands	r3, r2
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800550e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005510:	4293      	cmp	r3, r2
 8005512:	d119      	bne.n	8005548 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800551e:	085b      	lsrs	r3, r3, #1
 8005520:	3b01      	subs	r3, #1
 8005522:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005524:	429a      	cmp	r2, r3
 8005526:	d10f      	bne.n	8005548 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005532:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005534:	429a      	cmp	r2, r3
 8005536:	d107      	bne.n	8005548 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005542:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005544:	429a      	cmp	r2, r3
 8005546:	d001      	beq.n	800554c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e000      	b.n	800554e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	40023800 	.word	0x40023800

0800555c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e07b      	b.n	8005666 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005572:	2b00      	cmp	r3, #0
 8005574:	d108      	bne.n	8005588 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800557e:	d009      	beq.n	8005594 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	61da      	str	r2, [r3, #28]
 8005586:	e005      	b.n	8005594 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fd fa96 	bl	8002ae0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80055dc:	431a      	orrs	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	431a      	orrs	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005604:	431a      	orrs	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800560e:	431a      	orrs	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005618:	ea42 0103 	orr.w	r1, r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005620:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	0c1b      	lsrs	r3, r3, #16
 8005632:	f003 0104 	and.w	r1, r3, #4
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563a:	f003 0210 	and.w	r2, r3, #16
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	69da      	ldr	r2, [r3, #28]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005654:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b082      	sub	sp, #8
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e041      	b.n	8005704 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	d106      	bne.n	800569a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7fd fba1 	bl	8002ddc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2202      	movs	r2, #2
 800569e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	3304      	adds	r3, #4
 80056aa:	4619      	mov	r1, r3
 80056ac:	4610      	mov	r0, r2
 80056ae:	f000 fd8b 	bl	80061c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b01      	cmp	r3, #1
 800571e:	d001      	beq.n	8005724 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e04e      	b.n	80057c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0201 	orr.w	r2, r2, #1
 800573a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a23      	ldr	r2, [pc, #140]	@ (80057d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d022      	beq.n	800578c <HAL_TIM_Base_Start_IT+0x80>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800574e:	d01d      	beq.n	800578c <HAL_TIM_Base_Start_IT+0x80>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a1f      	ldr	r2, [pc, #124]	@ (80057d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d018      	beq.n	800578c <HAL_TIM_Base_Start_IT+0x80>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a1e      	ldr	r2, [pc, #120]	@ (80057d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d013      	beq.n	800578c <HAL_TIM_Base_Start_IT+0x80>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a1c      	ldr	r2, [pc, #112]	@ (80057dc <HAL_TIM_Base_Start_IT+0xd0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00e      	beq.n	800578c <HAL_TIM_Base_Start_IT+0x80>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a1b      	ldr	r2, [pc, #108]	@ (80057e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d009      	beq.n	800578c <HAL_TIM_Base_Start_IT+0x80>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a19      	ldr	r2, [pc, #100]	@ (80057e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d004      	beq.n	800578c <HAL_TIM_Base_Start_IT+0x80>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a18      	ldr	r2, [pc, #96]	@ (80057e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d111      	bne.n	80057b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 0307 	and.w	r3, r3, #7
 8005796:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2b06      	cmp	r3, #6
 800579c:	d010      	beq.n	80057c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f042 0201 	orr.w	r2, r2, #1
 80057ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ae:	e007      	b.n	80057c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0201 	orr.w	r2, r2, #1
 80057be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	40010000 	.word	0x40010000
 80057d4:	40000400 	.word	0x40000400
 80057d8:	40000800 	.word	0x40000800
 80057dc:	40000c00 	.word	0x40000c00
 80057e0:	40010400 	.word	0x40010400
 80057e4:	40014000 	.word	0x40014000
 80057e8:	40001800 	.word	0x40001800

080057ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e041      	b.n	8005882 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d106      	bne.n	8005818 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7fd fb5c 	bl	8002ed0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3304      	adds	r3, #4
 8005828:	4619      	mov	r1, r3
 800582a:	4610      	mov	r0, r2
 800582c:	f000 fccc 	bl	80061c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
	...

0800588c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d109      	bne.n	80058b0 <HAL_TIM_PWM_Start+0x24>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	bf14      	ite	ne
 80058a8:	2301      	movne	r3, #1
 80058aa:	2300      	moveq	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	e022      	b.n	80058f6 <HAL_TIM_PWM_Start+0x6a>
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	d109      	bne.n	80058ca <HAL_TIM_PWM_Start+0x3e>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b01      	cmp	r3, #1
 80058c0:	bf14      	ite	ne
 80058c2:	2301      	movne	r3, #1
 80058c4:	2300      	moveq	r3, #0
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	e015      	b.n	80058f6 <HAL_TIM_PWM_Start+0x6a>
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d109      	bne.n	80058e4 <HAL_TIM_PWM_Start+0x58>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b01      	cmp	r3, #1
 80058da:	bf14      	ite	ne
 80058dc:	2301      	movne	r3, #1
 80058de:	2300      	moveq	r3, #0
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	e008      	b.n	80058f6 <HAL_TIM_PWM_Start+0x6a>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	bf14      	ite	ne
 80058f0:	2301      	movne	r3, #1
 80058f2:	2300      	moveq	r3, #0
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e07c      	b.n	80059f8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d104      	bne.n	800590e <HAL_TIM_PWM_Start+0x82>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800590c:	e013      	b.n	8005936 <HAL_TIM_PWM_Start+0xaa>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b04      	cmp	r3, #4
 8005912:	d104      	bne.n	800591e <HAL_TIM_PWM_Start+0x92>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800591c:	e00b      	b.n	8005936 <HAL_TIM_PWM_Start+0xaa>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b08      	cmp	r3, #8
 8005922:	d104      	bne.n	800592e <HAL_TIM_PWM_Start+0xa2>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2202      	movs	r2, #2
 8005928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800592c:	e003      	b.n	8005936 <HAL_TIM_PWM_Start+0xaa>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2202      	movs	r2, #2
 8005932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2201      	movs	r2, #1
 800593c:	6839      	ldr	r1, [r7, #0]
 800593e:	4618      	mov	r0, r3
 8005940:	f000 ff38 	bl	80067b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a2d      	ldr	r2, [pc, #180]	@ (8005a00 <HAL_TIM_PWM_Start+0x174>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d004      	beq.n	8005958 <HAL_TIM_PWM_Start+0xcc>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a2c      	ldr	r2, [pc, #176]	@ (8005a04 <HAL_TIM_PWM_Start+0x178>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d101      	bne.n	800595c <HAL_TIM_PWM_Start+0xd0>
 8005958:	2301      	movs	r3, #1
 800595a:	e000      	b.n	800595e <HAL_TIM_PWM_Start+0xd2>
 800595c:	2300      	movs	r3, #0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d007      	beq.n	8005972 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005970:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a22      	ldr	r2, [pc, #136]	@ (8005a00 <HAL_TIM_PWM_Start+0x174>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d022      	beq.n	80059c2 <HAL_TIM_PWM_Start+0x136>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005984:	d01d      	beq.n	80059c2 <HAL_TIM_PWM_Start+0x136>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a1f      	ldr	r2, [pc, #124]	@ (8005a08 <HAL_TIM_PWM_Start+0x17c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d018      	beq.n	80059c2 <HAL_TIM_PWM_Start+0x136>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a1d      	ldr	r2, [pc, #116]	@ (8005a0c <HAL_TIM_PWM_Start+0x180>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d013      	beq.n	80059c2 <HAL_TIM_PWM_Start+0x136>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a1c      	ldr	r2, [pc, #112]	@ (8005a10 <HAL_TIM_PWM_Start+0x184>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00e      	beq.n	80059c2 <HAL_TIM_PWM_Start+0x136>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a16      	ldr	r2, [pc, #88]	@ (8005a04 <HAL_TIM_PWM_Start+0x178>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d009      	beq.n	80059c2 <HAL_TIM_PWM_Start+0x136>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a18      	ldr	r2, [pc, #96]	@ (8005a14 <HAL_TIM_PWM_Start+0x188>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d004      	beq.n	80059c2 <HAL_TIM_PWM_Start+0x136>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a16      	ldr	r2, [pc, #88]	@ (8005a18 <HAL_TIM_PWM_Start+0x18c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d111      	bne.n	80059e6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f003 0307 	and.w	r3, r3, #7
 80059cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2b06      	cmp	r3, #6
 80059d2:	d010      	beq.n	80059f6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f042 0201 	orr.w	r2, r2, #1
 80059e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e4:	e007      	b.n	80059f6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f042 0201 	orr.w	r2, r2, #1
 80059f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	40010000 	.word	0x40010000
 8005a04:	40010400 	.word	0x40010400
 8005a08:	40000400 	.word	0x40000400
 8005a0c:	40000800 	.word	0x40000800
 8005a10:	40000c00 	.word	0x40000c00
 8005a14:	40014000 	.word	0x40014000
 8005a18:	40001800 	.word	0x40001800

08005a1c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e097      	b.n	8005b60 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d106      	bne.n	8005a4a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7fd f8b3 	bl	8002bb0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6812      	ldr	r2, [r2, #0]
 8005a5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a60:	f023 0307 	bic.w	r3, r3, #7
 8005a64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4610      	mov	r0, r2
 8005a72:	f000 fba9 	bl	80061c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a9e:	f023 0303 	bic.w	r3, r3, #3
 8005aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	021b      	lsls	r3, r3, #8
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005abc:	f023 030c 	bic.w	r3, r3, #12
 8005ac0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ac8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005acc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	68da      	ldr	r2, [r3, #12]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	021b      	lsls	r3, r3, #8
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	011a      	lsls	r2, r3, #4
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	031b      	lsls	r3, r3, #12
 8005aec:	4313      	orrs	r3, r2
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005afa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005b02:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3718      	adds	r7, #24
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b78:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b80:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b88:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005b90:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d110      	bne.n	8005bba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d102      	bne.n	8005ba4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b9e:	7b7b      	ldrb	r3, [r7, #13]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d001      	beq.n	8005ba8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e069      	b.n	8005c7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bb8:	e031      	b.n	8005c1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b04      	cmp	r3, #4
 8005bbe:	d110      	bne.n	8005be2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bc0:	7bbb      	ldrb	r3, [r7, #14]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d102      	bne.n	8005bcc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bc6:	7b3b      	ldrb	r3, [r7, #12]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d001      	beq.n	8005bd0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e055      	b.n	8005c7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005be0:	e01d      	b.n	8005c1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005be2:	7bfb      	ldrb	r3, [r7, #15]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d108      	bne.n	8005bfa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005be8:	7bbb      	ldrb	r3, [r7, #14]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d105      	bne.n	8005bfa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bee:	7b7b      	ldrb	r3, [r7, #13]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d102      	bne.n	8005bfa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bf4:	7b3b      	ldrb	r3, [r7, #12]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d001      	beq.n	8005bfe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e03e      	b.n	8005c7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2202      	movs	r2, #2
 8005c02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2202      	movs	r2, #2
 8005c0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2202      	movs	r2, #2
 8005c12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2202      	movs	r2, #2
 8005c1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <HAL_TIM_Encoder_Start+0xc4>
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d008      	beq.n	8005c3c <HAL_TIM_Encoder_Start+0xd4>
 8005c2a:	e00f      	b.n	8005c4c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2201      	movs	r2, #1
 8005c32:	2100      	movs	r1, #0
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 fdbd 	bl	80067b4 <TIM_CCxChannelCmd>
      break;
 8005c3a:	e016      	b.n	8005c6a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2201      	movs	r2, #1
 8005c42:	2104      	movs	r1, #4
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 fdb5 	bl	80067b4 <TIM_CCxChannelCmd>
      break;
 8005c4a:	e00e      	b.n	8005c6a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2201      	movs	r2, #1
 8005c52:	2100      	movs	r1, #0
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 fdad 	bl	80067b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	2104      	movs	r1, #4
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 fda6 	bl	80067b4 <TIM_CCxChannelCmd>
      break;
 8005c68:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0201 	orr.w	r2, r2, #1
 8005c78:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d020      	beq.n	8005ce8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d01b      	beq.n	8005ce8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f06f 0202 	mvn.w	r2, #2
 8005cb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	f003 0303 	and.w	r3, r3, #3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fa5b 	bl	800618a <HAL_TIM_IC_CaptureCallback>
 8005cd4:	e005      	b.n	8005ce2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fa4d 	bl	8006176 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 fa5e 	bl	800619e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f003 0304 	and.w	r3, r3, #4
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d020      	beq.n	8005d34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f003 0304 	and.w	r3, r3, #4
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d01b      	beq.n	8005d34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f06f 0204 	mvn.w	r2, #4
 8005d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2202      	movs	r2, #2
 8005d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fa35 	bl	800618a <HAL_TIM_IC_CaptureCallback>
 8005d20:	e005      	b.n	8005d2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fa27 	bl	8006176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 fa38 	bl	800619e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f003 0308 	and.w	r3, r3, #8
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d020      	beq.n	8005d80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f003 0308 	and.w	r3, r3, #8
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d01b      	beq.n	8005d80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f06f 0208 	mvn.w	r2, #8
 8005d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2204      	movs	r2, #4
 8005d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	f003 0303 	and.w	r3, r3, #3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 fa0f 	bl	800618a <HAL_TIM_IC_CaptureCallback>
 8005d6c:	e005      	b.n	8005d7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fa01 	bl	8006176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 fa12 	bl	800619e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f003 0310 	and.w	r3, r3, #16
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d020      	beq.n	8005dcc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f003 0310 	and.w	r3, r3, #16
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01b      	beq.n	8005dcc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f06f 0210 	mvn.w	r2, #16
 8005d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2208      	movs	r2, #8
 8005da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f9e9 	bl	800618a <HAL_TIM_IC_CaptureCallback>
 8005db8:	e005      	b.n	8005dc6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f9db 	bl	8006176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f9ec 	bl	800619e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00c      	beq.n	8005df0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d007      	beq.n	8005df0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f06f 0201 	mvn.w	r2, #1
 8005de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fb f9c0 	bl	8001170 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00c      	beq.n	8005e14 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d007      	beq.n	8005e14 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fdce 	bl	80069b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00c      	beq.n	8005e38 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d007      	beq.n	8005e38 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f9bd 	bl	80061b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f003 0320 	and.w	r3, r3, #32
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00c      	beq.n	8005e5c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f003 0320 	and.w	r3, r3, #32
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d007      	beq.n	8005e5c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f06f 0220 	mvn.w	r2, #32
 8005e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fda0 	bl	800699c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e5c:	bf00      	nop
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e70:	2300      	movs	r3, #0
 8005e72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d101      	bne.n	8005e82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e7e:	2302      	movs	r3, #2
 8005e80:	e0ae      	b.n	8005fe0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2b0c      	cmp	r3, #12
 8005e8e:	f200 809f 	bhi.w	8005fd0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e92:	a201      	add	r2, pc, #4	@ (adr r2, 8005e98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e98:	08005ecd 	.word	0x08005ecd
 8005e9c:	08005fd1 	.word	0x08005fd1
 8005ea0:	08005fd1 	.word	0x08005fd1
 8005ea4:	08005fd1 	.word	0x08005fd1
 8005ea8:	08005f0d 	.word	0x08005f0d
 8005eac:	08005fd1 	.word	0x08005fd1
 8005eb0:	08005fd1 	.word	0x08005fd1
 8005eb4:	08005fd1 	.word	0x08005fd1
 8005eb8:	08005f4f 	.word	0x08005f4f
 8005ebc:	08005fd1 	.word	0x08005fd1
 8005ec0:	08005fd1 	.word	0x08005fd1
 8005ec4:	08005fd1 	.word	0x08005fd1
 8005ec8:	08005f8f 	.word	0x08005f8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68b9      	ldr	r1, [r7, #8]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 fa24 	bl	8006320 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	699a      	ldr	r2, [r3, #24]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f042 0208 	orr.w	r2, r2, #8
 8005ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	699a      	ldr	r2, [r3, #24]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 0204 	bic.w	r2, r2, #4
 8005ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6999      	ldr	r1, [r3, #24]
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	691a      	ldr	r2, [r3, #16]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	619a      	str	r2, [r3, #24]
      break;
 8005f0a:	e064      	b.n	8005fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68b9      	ldr	r1, [r7, #8]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 fa74 	bl	8006400 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699a      	ldr	r2, [r3, #24]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699a      	ldr	r2, [r3, #24]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6999      	ldr	r1, [r3, #24]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	021a      	lsls	r2, r3, #8
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	619a      	str	r2, [r3, #24]
      break;
 8005f4c:	e043      	b.n	8005fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68b9      	ldr	r1, [r7, #8]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 fac9 	bl	80064ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69da      	ldr	r2, [r3, #28]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f042 0208 	orr.w	r2, r2, #8
 8005f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	69da      	ldr	r2, [r3, #28]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 0204 	bic.w	r2, r2, #4
 8005f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69d9      	ldr	r1, [r3, #28]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	691a      	ldr	r2, [r3, #16]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	61da      	str	r2, [r3, #28]
      break;
 8005f8c:	e023      	b.n	8005fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68b9      	ldr	r1, [r7, #8]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 fb1d 	bl	80065d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69da      	ldr	r2, [r3, #28]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69da      	ldr	r2, [r3, #28]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69d9      	ldr	r1, [r3, #28]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	021a      	lsls	r2, r3, #8
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	61da      	str	r2, [r3, #28]
      break;
 8005fce:	e002      	b.n	8005fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8005fd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d101      	bne.n	8006004 <HAL_TIM_ConfigClockSource+0x1c>
 8006000:	2302      	movs	r3, #2
 8006002:	e0b4      	b.n	800616e <HAL_TIM_ConfigClockSource+0x186>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2202      	movs	r2, #2
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800602a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800603c:	d03e      	beq.n	80060bc <HAL_TIM_ConfigClockSource+0xd4>
 800603e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006042:	f200 8087 	bhi.w	8006154 <HAL_TIM_ConfigClockSource+0x16c>
 8006046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800604a:	f000 8086 	beq.w	800615a <HAL_TIM_ConfigClockSource+0x172>
 800604e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006052:	d87f      	bhi.n	8006154 <HAL_TIM_ConfigClockSource+0x16c>
 8006054:	2b70      	cmp	r3, #112	@ 0x70
 8006056:	d01a      	beq.n	800608e <HAL_TIM_ConfigClockSource+0xa6>
 8006058:	2b70      	cmp	r3, #112	@ 0x70
 800605a:	d87b      	bhi.n	8006154 <HAL_TIM_ConfigClockSource+0x16c>
 800605c:	2b60      	cmp	r3, #96	@ 0x60
 800605e:	d050      	beq.n	8006102 <HAL_TIM_ConfigClockSource+0x11a>
 8006060:	2b60      	cmp	r3, #96	@ 0x60
 8006062:	d877      	bhi.n	8006154 <HAL_TIM_ConfigClockSource+0x16c>
 8006064:	2b50      	cmp	r3, #80	@ 0x50
 8006066:	d03c      	beq.n	80060e2 <HAL_TIM_ConfigClockSource+0xfa>
 8006068:	2b50      	cmp	r3, #80	@ 0x50
 800606a:	d873      	bhi.n	8006154 <HAL_TIM_ConfigClockSource+0x16c>
 800606c:	2b40      	cmp	r3, #64	@ 0x40
 800606e:	d058      	beq.n	8006122 <HAL_TIM_ConfigClockSource+0x13a>
 8006070:	2b40      	cmp	r3, #64	@ 0x40
 8006072:	d86f      	bhi.n	8006154 <HAL_TIM_ConfigClockSource+0x16c>
 8006074:	2b30      	cmp	r3, #48	@ 0x30
 8006076:	d064      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0x15a>
 8006078:	2b30      	cmp	r3, #48	@ 0x30
 800607a:	d86b      	bhi.n	8006154 <HAL_TIM_ConfigClockSource+0x16c>
 800607c:	2b20      	cmp	r3, #32
 800607e:	d060      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0x15a>
 8006080:	2b20      	cmp	r3, #32
 8006082:	d867      	bhi.n	8006154 <HAL_TIM_ConfigClockSource+0x16c>
 8006084:	2b00      	cmp	r3, #0
 8006086:	d05c      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0x15a>
 8006088:	2b10      	cmp	r3, #16
 800608a:	d05a      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0x15a>
 800608c:	e062      	b.n	8006154 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800609e:	f000 fb69 	bl	8006774 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80060b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	609a      	str	r2, [r3, #8]
      break;
 80060ba:	e04f      	b.n	800615c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060cc:	f000 fb52 	bl	8006774 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060de:	609a      	str	r2, [r3, #8]
      break;
 80060e0:	e03c      	b.n	800615c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ee:	461a      	mov	r2, r3
 80060f0:	f000 fac6 	bl	8006680 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2150      	movs	r1, #80	@ 0x50
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 fb1f 	bl	800673e <TIM_ITRx_SetConfig>
      break;
 8006100:	e02c      	b.n	800615c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800610e:	461a      	mov	r2, r3
 8006110:	f000 fae5 	bl	80066de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2160      	movs	r1, #96	@ 0x60
 800611a:	4618      	mov	r0, r3
 800611c:	f000 fb0f 	bl	800673e <TIM_ITRx_SetConfig>
      break;
 8006120:	e01c      	b.n	800615c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800612e:	461a      	mov	r2, r3
 8006130:	f000 faa6 	bl	8006680 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2140      	movs	r1, #64	@ 0x40
 800613a:	4618      	mov	r0, r3
 800613c:	f000 faff 	bl	800673e <TIM_ITRx_SetConfig>
      break;
 8006140:	e00c      	b.n	800615c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4619      	mov	r1, r3
 800614c:	4610      	mov	r0, r2
 800614e:	f000 faf6 	bl	800673e <TIM_ITRx_SetConfig>
      break;
 8006152:	e003      	b.n	800615c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	73fb      	strb	r3, [r7, #15]
      break;
 8006158:	e000      	b.n	800615c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800615a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800616c:	7bfb      	ldrb	r3, [r7, #15]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800617e:	bf00      	nop
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006192:	bf00      	nop
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b083      	sub	sp, #12
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061ba:	bf00      	nop
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
	...

080061c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a46      	ldr	r2, [pc, #280]	@ (80062f4 <TIM_Base_SetConfig+0x12c>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d013      	beq.n	8006208 <TIM_Base_SetConfig+0x40>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061e6:	d00f      	beq.n	8006208 <TIM_Base_SetConfig+0x40>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a43      	ldr	r2, [pc, #268]	@ (80062f8 <TIM_Base_SetConfig+0x130>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d00b      	beq.n	8006208 <TIM_Base_SetConfig+0x40>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a42      	ldr	r2, [pc, #264]	@ (80062fc <TIM_Base_SetConfig+0x134>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d007      	beq.n	8006208 <TIM_Base_SetConfig+0x40>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a41      	ldr	r2, [pc, #260]	@ (8006300 <TIM_Base_SetConfig+0x138>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d003      	beq.n	8006208 <TIM_Base_SetConfig+0x40>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a40      	ldr	r2, [pc, #256]	@ (8006304 <TIM_Base_SetConfig+0x13c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d108      	bne.n	800621a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800620e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a35      	ldr	r2, [pc, #212]	@ (80062f4 <TIM_Base_SetConfig+0x12c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d02b      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006228:	d027      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a32      	ldr	r2, [pc, #200]	@ (80062f8 <TIM_Base_SetConfig+0x130>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d023      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a31      	ldr	r2, [pc, #196]	@ (80062fc <TIM_Base_SetConfig+0x134>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d01f      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a30      	ldr	r2, [pc, #192]	@ (8006300 <TIM_Base_SetConfig+0x138>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d01b      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a2f      	ldr	r2, [pc, #188]	@ (8006304 <TIM_Base_SetConfig+0x13c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d017      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a2e      	ldr	r2, [pc, #184]	@ (8006308 <TIM_Base_SetConfig+0x140>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d013      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a2d      	ldr	r2, [pc, #180]	@ (800630c <TIM_Base_SetConfig+0x144>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d00f      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a2c      	ldr	r2, [pc, #176]	@ (8006310 <TIM_Base_SetConfig+0x148>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00b      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a2b      	ldr	r2, [pc, #172]	@ (8006314 <TIM_Base_SetConfig+0x14c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d007      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a2a      	ldr	r2, [pc, #168]	@ (8006318 <TIM_Base_SetConfig+0x150>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d003      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a29      	ldr	r2, [pc, #164]	@ (800631c <TIM_Base_SetConfig+0x154>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d108      	bne.n	800628c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	4313      	orrs	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	4313      	orrs	r3, r2
 8006298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a10      	ldr	r2, [pc, #64]	@ (80062f4 <TIM_Base_SetConfig+0x12c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d003      	beq.n	80062c0 <TIM_Base_SetConfig+0xf8>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a12      	ldr	r2, [pc, #72]	@ (8006304 <TIM_Base_SetConfig+0x13c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d103      	bne.n	80062c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	691a      	ldr	r2, [r3, #16]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d105      	bne.n	80062e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	f023 0201 	bic.w	r2, r3, #1
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	611a      	str	r2, [r3, #16]
  }
}
 80062e6:	bf00      	nop
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	40010000 	.word	0x40010000
 80062f8:	40000400 	.word	0x40000400
 80062fc:	40000800 	.word	0x40000800
 8006300:	40000c00 	.word	0x40000c00
 8006304:	40010400 	.word	0x40010400
 8006308:	40014000 	.word	0x40014000
 800630c:	40014400 	.word	0x40014400
 8006310:	40014800 	.word	0x40014800
 8006314:	40001800 	.word	0x40001800
 8006318:	40001c00 	.word	0x40001c00
 800631c:	40002000 	.word	0x40002000

08006320 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	f023 0201 	bic.w	r2, r3, #1
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800634e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f023 0303 	bic.w	r3, r3, #3
 8006356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4313      	orrs	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f023 0302 	bic.w	r3, r3, #2
 8006368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	4313      	orrs	r3, r2
 8006372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a20      	ldr	r2, [pc, #128]	@ (80063f8 <TIM_OC1_SetConfig+0xd8>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d003      	beq.n	8006384 <TIM_OC1_SetConfig+0x64>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a1f      	ldr	r2, [pc, #124]	@ (80063fc <TIM_OC1_SetConfig+0xdc>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d10c      	bne.n	800639e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f023 0308 	bic.w	r3, r3, #8
 800638a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	4313      	orrs	r3, r2
 8006394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f023 0304 	bic.w	r3, r3, #4
 800639c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a15      	ldr	r2, [pc, #84]	@ (80063f8 <TIM_OC1_SetConfig+0xd8>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d003      	beq.n	80063ae <TIM_OC1_SetConfig+0x8e>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a14      	ldr	r2, [pc, #80]	@ (80063fc <TIM_OC1_SetConfig+0xdc>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d111      	bne.n	80063d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	621a      	str	r2, [r3, #32]
}
 80063ec:	bf00      	nop
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	40010000 	.word	0x40010000
 80063fc:	40010400 	.word	0x40010400

08006400 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006400:	b480      	push	{r7}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	f023 0210 	bic.w	r2, r3, #16
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800642e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	021b      	lsls	r3, r3, #8
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	4313      	orrs	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f023 0320 	bic.w	r3, r3, #32
 800644a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	011b      	lsls	r3, r3, #4
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	4313      	orrs	r3, r2
 8006456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a22      	ldr	r2, [pc, #136]	@ (80064e4 <TIM_OC2_SetConfig+0xe4>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d003      	beq.n	8006468 <TIM_OC2_SetConfig+0x68>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a21      	ldr	r2, [pc, #132]	@ (80064e8 <TIM_OC2_SetConfig+0xe8>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d10d      	bne.n	8006484 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800646e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	011b      	lsls	r3, r3, #4
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	4313      	orrs	r3, r2
 800647a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006482:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a17      	ldr	r2, [pc, #92]	@ (80064e4 <TIM_OC2_SetConfig+0xe4>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d003      	beq.n	8006494 <TIM_OC2_SetConfig+0x94>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a16      	ldr	r2, [pc, #88]	@ (80064e8 <TIM_OC2_SetConfig+0xe8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d113      	bne.n	80064bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800649a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	621a      	str	r2, [r3, #32]
}
 80064d6:	bf00      	nop
 80064d8:	371c      	adds	r7, #28
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	40010000 	.word	0x40010000
 80064e8:	40010400 	.word	0x40010400

080064ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800651a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f023 0303 	bic.w	r3, r3, #3
 8006522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	4313      	orrs	r3, r2
 800652c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	021b      	lsls	r3, r3, #8
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	4313      	orrs	r3, r2
 8006540:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a21      	ldr	r2, [pc, #132]	@ (80065cc <TIM_OC3_SetConfig+0xe0>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d003      	beq.n	8006552 <TIM_OC3_SetConfig+0x66>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a20      	ldr	r2, [pc, #128]	@ (80065d0 <TIM_OC3_SetConfig+0xe4>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d10d      	bne.n	800656e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006558:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	021b      	lsls	r3, r3, #8
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	4313      	orrs	r3, r2
 8006564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800656c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a16      	ldr	r2, [pc, #88]	@ (80065cc <TIM_OC3_SetConfig+0xe0>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d003      	beq.n	800657e <TIM_OC3_SetConfig+0x92>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a15      	ldr	r2, [pc, #84]	@ (80065d0 <TIM_OC3_SetConfig+0xe4>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d113      	bne.n	80065a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800658c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	011b      	lsls	r3, r3, #4
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	4313      	orrs	r3, r2
 8006598:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	011b      	lsls	r3, r3, #4
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	621a      	str	r2, [r3, #32]
}
 80065c0:	bf00      	nop
 80065c2:	371c      	adds	r7, #28
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	40010000 	.word	0x40010000
 80065d0:	40010400 	.word	0x40010400

080065d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b087      	sub	sp, #28
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800660a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	021b      	lsls	r3, r3, #8
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	4313      	orrs	r3, r2
 8006616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800661e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	031b      	lsls	r3, r3, #12
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	4313      	orrs	r3, r2
 800662a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a12      	ldr	r2, [pc, #72]	@ (8006678 <TIM_OC4_SetConfig+0xa4>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d003      	beq.n	800663c <TIM_OC4_SetConfig+0x68>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a11      	ldr	r2, [pc, #68]	@ (800667c <TIM_OC4_SetConfig+0xa8>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d109      	bne.n	8006650 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006642:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	019b      	lsls	r3, r3, #6
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	4313      	orrs	r3, r2
 800664e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	621a      	str	r2, [r3, #32]
}
 800666a:	bf00      	nop
 800666c:	371c      	adds	r7, #28
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	40010000 	.word	0x40010000
 800667c:	40010400 	.word	0x40010400

08006680 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	f023 0201 	bic.w	r2, r3, #1
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	011b      	lsls	r3, r3, #4
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f023 030a 	bic.w	r3, r3, #10
 80066bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	621a      	str	r2, [r3, #32]
}
 80066d2:	bf00      	nop
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066de:	b480      	push	{r7}
 80066e0:	b087      	sub	sp, #28
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	60f8      	str	r0, [r7, #12]
 80066e6:	60b9      	str	r1, [r7, #8]
 80066e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	f023 0210 	bic.w	r2, r3, #16
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006708:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	031b      	lsls	r3, r3, #12
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	4313      	orrs	r3, r2
 8006712:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800671a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	011b      	lsls	r3, r3, #4
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	4313      	orrs	r3, r2
 8006724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	621a      	str	r2, [r3, #32]
}
 8006732:	bf00      	nop
 8006734:	371c      	adds	r7, #28
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800673e:	b480      	push	{r7}
 8006740:	b085      	sub	sp, #20
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006754:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4313      	orrs	r3, r2
 800675c:	f043 0307 	orr.w	r3, r3, #7
 8006760:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	609a      	str	r2, [r3, #8]
}
 8006768:	bf00      	nop
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
 8006780:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800678e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	021a      	lsls	r2, r3, #8
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	431a      	orrs	r2, r3
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	4313      	orrs	r3, r2
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	4313      	orrs	r3, r2
 80067a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	609a      	str	r2, [r3, #8]
}
 80067a8:	bf00      	nop
 80067aa:	371c      	adds	r7, #28
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	f003 031f 	and.w	r3, r3, #31
 80067c6:	2201      	movs	r2, #1
 80067c8:	fa02 f303 	lsl.w	r3, r2, r3
 80067cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6a1a      	ldr	r2, [r3, #32]
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	43db      	mvns	r3, r3
 80067d6:	401a      	ands	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6a1a      	ldr	r2, [r3, #32]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f003 031f 	and.w	r3, r3, #31
 80067e6:	6879      	ldr	r1, [r7, #4]
 80067e8:	fa01 f303 	lsl.w	r3, r1, r3
 80067ec:	431a      	orrs	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	621a      	str	r2, [r3, #32]
}
 80067f2:	bf00      	nop
 80067f4:	371c      	adds	r7, #28
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
	...

08006800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006810:	2b01      	cmp	r3, #1
 8006812:	d101      	bne.n	8006818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006814:	2302      	movs	r3, #2
 8006816:	e05a      	b.n	80068ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2202      	movs	r2, #2
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800683e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	4313      	orrs	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a21      	ldr	r2, [pc, #132]	@ (80068dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d022      	beq.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006864:	d01d      	beq.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a1d      	ldr	r2, [pc, #116]	@ (80068e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d018      	beq.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a1b      	ldr	r2, [pc, #108]	@ (80068e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d013      	beq.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a1a      	ldr	r2, [pc, #104]	@ (80068e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d00e      	beq.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a18      	ldr	r2, [pc, #96]	@ (80068ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d009      	beq.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a17      	ldr	r2, [pc, #92]	@ (80068f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d004      	beq.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a15      	ldr	r2, [pc, #84]	@ (80068f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d10c      	bne.n	80068bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	40010000 	.word	0x40010000
 80068e0:	40000400 	.word	0x40000400
 80068e4:	40000800 	.word	0x40000800
 80068e8:	40000c00 	.word	0x40000c00
 80068ec:	40010400 	.word	0x40010400
 80068f0:	40014000 	.word	0x40014000
 80068f4:	40001800 	.word	0x40001800

080068f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006902:	2300      	movs	r3, #0
 8006904:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800690c:	2b01      	cmp	r3, #1
 800690e:	d101      	bne.n	8006914 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006910:	2302      	movs	r3, #2
 8006912:	e03d      	b.n	8006990 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	4313      	orrs	r3, r2
 8006936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	4313      	orrs	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4313      	orrs	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	4313      	orrs	r3, r2
 8006960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	4313      	orrs	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	4313      	orrs	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3714      	adds	r7, #20
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e042      	b.n	8006a5c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d106      	bne.n	80069f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7fc fafc 	bl	8002fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2224      	movs	r2, #36	@ 0x24
 80069f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68da      	ldr	r2, [r3, #12]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fe61 	bl	80076d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	691a      	ldr	r2, [r3, #16]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	695a      	ldr	r2, [r3, #20]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68da      	ldr	r2, [r3, #12]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2220      	movs	r2, #32
 8006a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b20      	cmp	r3, #32
 8006a7c:	d112      	bne.n	8006aa4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d002      	beq.n	8006a8a <HAL_UART_Receive_DMA+0x26>
 8006a84:	88fb      	ldrh	r3, [r7, #6]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e00b      	b.n	8006aa6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006a94:	88fb      	ldrh	r3, [r7, #6]
 8006a96:	461a      	mov	r2, r3
 8006a98:	68b9      	ldr	r1, [r7, #8]
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f000 fbb8 	bl	8007210 <UART_Start_Receive_DMA>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	e000      	b.n	8006aa6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006aa4:	2302      	movs	r3, #2
  }
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
	...

08006ab0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b0ba      	sub	sp, #232	@ 0xe8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ae6:	f003 030f 	and.w	r3, r3, #15
 8006aea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006aee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10f      	bne.n	8006b16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006afa:	f003 0320 	and.w	r3, r3, #32
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d009      	beq.n	8006b16 <HAL_UART_IRQHandler+0x66>
 8006b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b06:	f003 0320 	and.w	r3, r3, #32
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d003      	beq.n	8006b16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fd1f 	bl	8007552 <UART_Receive_IT>
      return;
 8006b14:	e25b      	b.n	8006fce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006b16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 80de 	beq.w	8006cdc <HAL_UART_IRQHandler+0x22c>
 8006b20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d106      	bne.n	8006b3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b30:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 80d1 	beq.w	8006cdc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00b      	beq.n	8006b5e <HAL_UART_IRQHandler+0xae>
 8006b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d005      	beq.n	8006b5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b56:	f043 0201 	orr.w	r2, r3, #1
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b62:	f003 0304 	and.w	r3, r3, #4
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00b      	beq.n	8006b82 <HAL_UART_IRQHandler+0xd2>
 8006b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d005      	beq.n	8006b82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b7a:	f043 0202 	orr.w	r2, r3, #2
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00b      	beq.n	8006ba6 <HAL_UART_IRQHandler+0xf6>
 8006b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d005      	beq.n	8006ba6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b9e:	f043 0204 	orr.w	r2, r3, #4
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006baa:	f003 0308 	and.w	r3, r3, #8
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d011      	beq.n	8006bd6 <HAL_UART_IRQHandler+0x126>
 8006bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bb6:	f003 0320 	and.w	r3, r3, #32
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d105      	bne.n	8006bca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d005      	beq.n	8006bd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bce:	f043 0208 	orr.w	r2, r3, #8
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f000 81f2 	beq.w	8006fc4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006be4:	f003 0320 	and.w	r3, r3, #32
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d008      	beq.n	8006bfe <HAL_UART_IRQHandler+0x14e>
 8006bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bf0:	f003 0320 	and.w	r3, r3, #32
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fcaa 	bl	8007552 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	695b      	ldr	r3, [r3, #20]
 8006c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c08:	2b40      	cmp	r3, #64	@ 0x40
 8006c0a:	bf0c      	ite	eq
 8006c0c:	2301      	moveq	r3, #1
 8006c0e:	2300      	movne	r3, #0
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c1a:	f003 0308 	and.w	r3, r3, #8
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d103      	bne.n	8006c2a <HAL_UART_IRQHandler+0x17a>
 8006c22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d04f      	beq.n	8006cca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fbb2 	bl	8007394 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c3a:	2b40      	cmp	r3, #64	@ 0x40
 8006c3c:	d141      	bne.n	8006cc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3314      	adds	r3, #20
 8006c44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006c54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3314      	adds	r3, #20
 8006c66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006c76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006c7a:	e841 2300 	strex	r3, r2, [r1]
 8006c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1d9      	bne.n	8006c3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d013      	beq.n	8006cba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c96:	4a7e      	ldr	r2, [pc, #504]	@ (8006e90 <HAL_UART_IRQHandler+0x3e0>)
 8006c98:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fd f852 	bl	8003d48 <HAL_DMA_Abort_IT>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d016      	beq.n	8006cd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006cb4:	4610      	mov	r0, r2
 8006cb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cb8:	e00e      	b.n	8006cd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f994 	bl	8006fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc0:	e00a      	b.n	8006cd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f990 	bl	8006fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc8:	e006      	b.n	8006cd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f98c 	bl	8006fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006cd6:	e175      	b.n	8006fc4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd8:	bf00      	nop
    return;
 8006cda:	e173      	b.n	8006fc4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	f040 814f 	bne.w	8006f84 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cea:	f003 0310 	and.w	r3, r3, #16
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 8148 	beq.w	8006f84 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cf8:	f003 0310 	and.w	r3, r3, #16
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 8141 	beq.w	8006f84 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d02:	2300      	movs	r3, #0
 8006d04:	60bb      	str	r3, [r7, #8]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	60bb      	str	r3, [r7, #8]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	60bb      	str	r3, [r7, #8]
 8006d16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d22:	2b40      	cmp	r3, #64	@ 0x40
 8006d24:	f040 80b6 	bne.w	8006e94 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 8145 	beq.w	8006fc8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d46:	429a      	cmp	r2, r3
 8006d48:	f080 813e 	bcs.w	8006fc8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d52:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d58:	69db      	ldr	r3, [r3, #28]
 8006d5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d5e:	f000 8088 	beq.w	8006e72 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	330c      	adds	r3, #12
 8006d68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d70:	e853 3f00 	ldrex	r3, [r3]
 8006d74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006d78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	330c      	adds	r3, #12
 8006d8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006d8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006d92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d96:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006d9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006d9e:	e841 2300 	strex	r3, r2, [r1]
 8006da2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006da6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1d9      	bne.n	8006d62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	3314      	adds	r3, #20
 8006db4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006db8:	e853 3f00 	ldrex	r3, [r3]
 8006dbc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006dbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006dc0:	f023 0301 	bic.w	r3, r3, #1
 8006dc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	3314      	adds	r3, #20
 8006dce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006dd2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006dd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006dda:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006dde:	e841 2300 	strex	r3, r2, [r1]
 8006de2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006de4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1e1      	bne.n	8006dae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	3314      	adds	r3, #20
 8006df0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006df4:	e853 3f00 	ldrex	r3, [r3]
 8006df8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006dfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006dfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3314      	adds	r3, #20
 8006e0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006e0e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006e10:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e12:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006e14:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006e16:	e841 2300 	strex	r3, r2, [r1]
 8006e1a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006e1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1e3      	bne.n	8006dea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2220      	movs	r2, #32
 8006e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	330c      	adds	r3, #12
 8006e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e3a:	e853 3f00 	ldrex	r3, [r3]
 8006e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e42:	f023 0310 	bic.w	r3, r3, #16
 8006e46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	330c      	adds	r3, #12
 8006e50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006e54:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006e56:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e58:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e5a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e5c:	e841 2300 	strex	r3, r2, [r1]
 8006e60:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1e3      	bne.n	8006e30 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7fc fefb 	bl	8003c68 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2202      	movs	r2, #2
 8006e76:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	4619      	mov	r1, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f8b7 	bl	8006ffc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e8e:	e09b      	b.n	8006fc8 <HAL_UART_IRQHandler+0x518>
 8006e90:	0800745b 	.word	0x0800745b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f000 808e 	beq.w	8006fcc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006eb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 8089 	beq.w	8006fcc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	330c      	adds	r3, #12
 8006ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec4:	e853 3f00 	ldrex	r3, [r3]
 8006ec8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ecc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ed0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	330c      	adds	r3, #12
 8006eda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006ede:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ee0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ee4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ee6:	e841 2300 	strex	r3, r2, [r1]
 8006eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1e3      	bne.n	8006eba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3314      	adds	r3, #20
 8006ef8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efc:	e853 3f00 	ldrex	r3, [r3]
 8006f00:	623b      	str	r3, [r7, #32]
   return(result);
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	f023 0301 	bic.w	r3, r3, #1
 8006f08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	3314      	adds	r3, #20
 8006f12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006f16:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f1e:	e841 2300 	strex	r3, r2, [r1]
 8006f22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1e3      	bne.n	8006ef2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2220      	movs	r2, #32
 8006f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	330c      	adds	r3, #12
 8006f3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	e853 3f00 	ldrex	r3, [r3]
 8006f46:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 0310 	bic.w	r3, r3, #16
 8006f4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	330c      	adds	r3, #12
 8006f58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006f5c:	61fa      	str	r2, [r7, #28]
 8006f5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f60:	69b9      	ldr	r1, [r7, #24]
 8006f62:	69fa      	ldr	r2, [r7, #28]
 8006f64:	e841 2300 	strex	r3, r2, [r1]
 8006f68:	617b      	str	r3, [r7, #20]
   return(result);
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1e3      	bne.n	8006f38 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2202      	movs	r2, #2
 8006f74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f83d 	bl	8006ffc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f82:	e023      	b.n	8006fcc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d009      	beq.n	8006fa4 <HAL_UART_IRQHandler+0x4f4>
 8006f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fa70 	bl	8007482 <UART_Transmit_IT>
    return;
 8006fa2:	e014      	b.n	8006fce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00e      	beq.n	8006fce <HAL_UART_IRQHandler+0x51e>
 8006fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d008      	beq.n	8006fce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 fab0 	bl	8007522 <UART_EndTransmit_IT>
    return;
 8006fc2:	e004      	b.n	8006fce <HAL_UART_IRQHandler+0x51e>
    return;
 8006fc4:	bf00      	nop
 8006fc6:	e002      	b.n	8006fce <HAL_UART_IRQHandler+0x51e>
      return;
 8006fc8:	bf00      	nop
 8006fca:	e000      	b.n	8006fce <HAL_UART_IRQHandler+0x51e>
      return;
 8006fcc:	bf00      	nop
  }
}
 8006fce:	37e8      	adds	r7, #232	@ 0xe8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	460b      	mov	r3, r1
 8007006:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b09c      	sub	sp, #112	@ 0x70
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007020:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800702c:	2b00      	cmp	r3, #0
 800702e:	d172      	bne.n	8007116 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007030:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007032:	2200      	movs	r2, #0
 8007034:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007036:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	330c      	adds	r3, #12
 800703c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007040:	e853 3f00 	ldrex	r3, [r3]
 8007044:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007046:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007048:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800704c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800704e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	330c      	adds	r3, #12
 8007054:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007056:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007058:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800705c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800705e:	e841 2300 	strex	r3, r2, [r1]
 8007062:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007064:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1e5      	bne.n	8007036 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3314      	adds	r3, #20
 8007070:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007074:	e853 3f00 	ldrex	r3, [r3]
 8007078:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800707a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800707c:	f023 0301 	bic.w	r3, r3, #1
 8007080:	667b      	str	r3, [r7, #100]	@ 0x64
 8007082:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	3314      	adds	r3, #20
 8007088:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800708a:	647a      	str	r2, [r7, #68]	@ 0x44
 800708c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007090:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007092:	e841 2300 	strex	r3, r2, [r1]
 8007096:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1e5      	bne.n	800706a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800709e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	3314      	adds	r3, #20
 80070a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a8:	e853 3f00 	ldrex	r3, [r3]
 80070ac:	623b      	str	r3, [r7, #32]
   return(result);
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80070b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	3314      	adds	r3, #20
 80070bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80070be:	633a      	str	r2, [r7, #48]	@ 0x30
 80070c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070c6:	e841 2300 	strex	r3, r2, [r1]
 80070ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1e5      	bne.n	800709e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80070d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070d4:	2220      	movs	r2, #32
 80070d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d119      	bne.n	8007116 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	330c      	adds	r3, #12
 80070e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	e853 3f00 	ldrex	r3, [r3]
 80070f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f023 0310 	bic.w	r3, r3, #16
 80070f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	330c      	adds	r3, #12
 8007100:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007102:	61fa      	str	r2, [r7, #28]
 8007104:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007106:	69b9      	ldr	r1, [r7, #24]
 8007108:	69fa      	ldr	r2, [r7, #28]
 800710a:	e841 2300 	strex	r3, r2, [r1]
 800710e:	617b      	str	r3, [r7, #20]
   return(result);
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1e5      	bne.n	80070e2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007116:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007118:	2200      	movs	r2, #0
 800711a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800711c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800711e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007120:	2b01      	cmp	r3, #1
 8007122:	d106      	bne.n	8007132 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007124:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007126:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007128:	4619      	mov	r1, r3
 800712a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800712c:	f7ff ff66 	bl	8006ffc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007130:	e002      	b.n	8007138 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007132:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007134:	f7fa f950 	bl	80013d8 <HAL_UART_RxCpltCallback>
}
 8007138:	bf00      	nop
 800713a:	3770      	adds	r7, #112	@ 0x70
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2201      	movs	r2, #1
 8007152:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007158:	2b01      	cmp	r3, #1
 800715a:	d108      	bne.n	800716e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007160:	085b      	lsrs	r3, r3, #1
 8007162:	b29b      	uxth	r3, r3
 8007164:	4619      	mov	r1, r3
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f7ff ff48 	bl	8006ffc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800716c:	e002      	b.n	8007174 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f7ff ff30 	bl	8006fd4 <HAL_UART_RxHalfCpltCallback>
}
 8007174:	bf00      	nop
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007184:	2300      	movs	r3, #0
 8007186:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800718c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	695b      	ldr	r3, [r3, #20]
 8007194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007198:	2b80      	cmp	r3, #128	@ 0x80
 800719a:	bf0c      	ite	eq
 800719c:	2301      	moveq	r3, #1
 800719e:	2300      	movne	r3, #0
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b21      	cmp	r3, #33	@ 0x21
 80071ae:	d108      	bne.n	80071c2 <UART_DMAError+0x46>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d005      	beq.n	80071c2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	2200      	movs	r2, #0
 80071ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80071bc:	68b8      	ldr	r0, [r7, #8]
 80071be:	f000 f8c1 	bl	8007344 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071cc:	2b40      	cmp	r3, #64	@ 0x40
 80071ce:	bf0c      	ite	eq
 80071d0:	2301      	moveq	r3, #1
 80071d2:	2300      	movne	r3, #0
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b22      	cmp	r3, #34	@ 0x22
 80071e2:	d108      	bne.n	80071f6 <UART_DMAError+0x7a>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d005      	beq.n	80071f6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	2200      	movs	r2, #0
 80071ee:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80071f0:	68b8      	ldr	r0, [r7, #8]
 80071f2:	f000 f8cf 	bl	8007394 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071fa:	f043 0210 	orr.w	r2, r3, #16
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007202:	68b8      	ldr	r0, [r7, #8]
 8007204:	f7ff fef0 	bl	8006fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007208:	bf00      	nop
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b098      	sub	sp, #96	@ 0x60
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	4613      	mov	r3, r2
 800721c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	88fa      	ldrh	r2, [r7, #6]
 8007228:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2222      	movs	r2, #34	@ 0x22
 8007234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800723c:	4a3e      	ldr	r2, [pc, #248]	@ (8007338 <UART_Start_Receive_DMA+0x128>)
 800723e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007244:	4a3d      	ldr	r2, [pc, #244]	@ (800733c <UART_Start_Receive_DMA+0x12c>)
 8007246:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800724c:	4a3c      	ldr	r2, [pc, #240]	@ (8007340 <UART_Start_Receive_DMA+0x130>)
 800724e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007254:	2200      	movs	r2, #0
 8007256:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007258:	f107 0308 	add.w	r3, r7, #8
 800725c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	3304      	adds	r3, #4
 8007268:	4619      	mov	r1, r3
 800726a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	88fb      	ldrh	r3, [r7, #6]
 8007270:	f7fc fca2 	bl	8003bb8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007274:	2300      	movs	r3, #0
 8007276:	613b      	str	r3, [r7, #16]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	613b      	str	r3, [r7, #16]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	613b      	str	r3, [r7, #16]
 8007288:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d019      	beq.n	80072c6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	330c      	adds	r3, #12
 8007298:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800729c:	e853 3f00 	ldrex	r3, [r3]
 80072a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	330c      	adds	r3, #12
 80072b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072b2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80072b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80072b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072ba:	e841 2300 	strex	r3, r2, [r1]
 80072be:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80072c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e5      	bne.n	8007292 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	3314      	adds	r3, #20
 80072cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d0:	e853 3f00 	ldrex	r3, [r3]
 80072d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d8:	f043 0301 	orr.w	r3, r3, #1
 80072dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	3314      	adds	r3, #20
 80072e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80072e6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80072e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80072ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80072ee:	e841 2300 	strex	r3, r2, [r1]
 80072f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1e5      	bne.n	80072c6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3314      	adds	r3, #20
 8007300:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	e853 3f00 	ldrex	r3, [r3]
 8007308:	617b      	str	r3, [r7, #20]
   return(result);
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007310:	653b      	str	r3, [r7, #80]	@ 0x50
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3314      	adds	r3, #20
 8007318:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800731a:	627a      	str	r2, [r7, #36]	@ 0x24
 800731c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731e:	6a39      	ldr	r1, [r7, #32]
 8007320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007322:	e841 2300 	strex	r3, r2, [r1]
 8007326:	61fb      	str	r3, [r7, #28]
   return(result);
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1e5      	bne.n	80072fa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3760      	adds	r7, #96	@ 0x60
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	08007015 	.word	0x08007015
 800733c:	08007141 	.word	0x08007141
 8007340:	0800717d 	.word	0x0800717d

08007344 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007344:	b480      	push	{r7}
 8007346:	b089      	sub	sp, #36	@ 0x24
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	330c      	adds	r3, #12
 8007352:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	e853 3f00 	ldrex	r3, [r3]
 800735a:	60bb      	str	r3, [r7, #8]
   return(result);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007362:	61fb      	str	r3, [r7, #28]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	330c      	adds	r3, #12
 800736a:	69fa      	ldr	r2, [r7, #28]
 800736c:	61ba      	str	r2, [r7, #24]
 800736e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007370:	6979      	ldr	r1, [r7, #20]
 8007372:	69ba      	ldr	r2, [r7, #24]
 8007374:	e841 2300 	strex	r3, r2, [r1]
 8007378:	613b      	str	r3, [r7, #16]
   return(result);
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1e5      	bne.n	800734c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2220      	movs	r2, #32
 8007384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007388:	bf00      	nop
 800738a:	3724      	adds	r7, #36	@ 0x24
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007394:	b480      	push	{r7}
 8007396:	b095      	sub	sp, #84	@ 0x54
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	330c      	adds	r3, #12
 80073a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073a6:	e853 3f00 	ldrex	r3, [r3]
 80073aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	330c      	adds	r3, #12
 80073ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073bc:	643a      	str	r2, [r7, #64]	@ 0x40
 80073be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073c4:	e841 2300 	strex	r3, r2, [r1]
 80073c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1e5      	bne.n	800739c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3314      	adds	r3, #20
 80073d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d8:	6a3b      	ldr	r3, [r7, #32]
 80073da:	e853 3f00 	ldrex	r3, [r3]
 80073de:	61fb      	str	r3, [r7, #28]
   return(result);
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	f023 0301 	bic.w	r3, r3, #1
 80073e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	3314      	adds	r3, #20
 80073ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073f8:	e841 2300 	strex	r3, r2, [r1]
 80073fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1e5      	bne.n	80073d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007408:	2b01      	cmp	r3, #1
 800740a:	d119      	bne.n	8007440 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	330c      	adds	r3, #12
 8007412:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	e853 3f00 	ldrex	r3, [r3]
 800741a:	60bb      	str	r3, [r7, #8]
   return(result);
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	f023 0310 	bic.w	r3, r3, #16
 8007422:	647b      	str	r3, [r7, #68]	@ 0x44
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	330c      	adds	r3, #12
 800742a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800742c:	61ba      	str	r2, [r7, #24]
 800742e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007430:	6979      	ldr	r1, [r7, #20]
 8007432:	69ba      	ldr	r2, [r7, #24]
 8007434:	e841 2300 	strex	r3, r2, [r1]
 8007438:	613b      	str	r3, [r7, #16]
   return(result);
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1e5      	bne.n	800740c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2220      	movs	r2, #32
 8007444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800744e:	bf00      	nop
 8007450:	3754      	adds	r7, #84	@ 0x54
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007466:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f7ff fdb7 	bl	8006fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800747a:	bf00      	nop
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007482:	b480      	push	{r7}
 8007484:	b085      	sub	sp, #20
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b21      	cmp	r3, #33	@ 0x21
 8007494:	d13e      	bne.n	8007514 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800749e:	d114      	bne.n	80074ca <UART_Transmit_IT+0x48>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d110      	bne.n	80074ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	881b      	ldrh	r3, [r3, #0]
 80074b2:	461a      	mov	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	1c9a      	adds	r2, r3, #2
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	621a      	str	r2, [r3, #32]
 80074c8:	e008      	b.n	80074dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	1c59      	adds	r1, r3, #1
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	6211      	str	r1, [r2, #32]
 80074d4:	781a      	ldrb	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	3b01      	subs	r3, #1
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	4619      	mov	r1, r3
 80074ea:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10f      	bne.n	8007510 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68da      	ldr	r2, [r3, #12]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80074fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68da      	ldr	r2, [r3, #12]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800750e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	e000      	b.n	8007516 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007514:	2302      	movs	r3, #2
  }
}
 8007516:	4618      	mov	r0, r3
 8007518:	3714      	adds	r7, #20
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b082      	sub	sp, #8
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68da      	ldr	r2, [r3, #12]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007538:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2220      	movs	r2, #32
 800753e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7f9 ff3e 	bl	80013c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3708      	adds	r7, #8
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b08c      	sub	sp, #48	@ 0x30
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b22      	cmp	r3, #34	@ 0x22
 8007564:	f040 80ae 	bne.w	80076c4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007570:	d117      	bne.n	80075a2 <UART_Receive_IT+0x50>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d113      	bne.n	80075a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800757a:	2300      	movs	r3, #0
 800757c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007582:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	b29b      	uxth	r3, r3
 800758c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007590:	b29a      	uxth	r2, r3
 8007592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007594:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800759a:	1c9a      	adds	r2, r3, #2
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	629a      	str	r2, [r3, #40]	@ 0x28
 80075a0:	e026      	b.n	80075f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80075a8:	2300      	movs	r3, #0
 80075aa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075b4:	d007      	beq.n	80075c6 <UART_Receive_IT+0x74>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10a      	bne.n	80075d4 <UART_Receive_IT+0x82>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d106      	bne.n	80075d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d0:	701a      	strb	r2, [r3, #0]
 80075d2:	e008      	b.n	80075e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	3b01      	subs	r3, #1
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	4619      	mov	r1, r3
 80075fe:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007600:	2b00      	cmp	r3, #0
 8007602:	d15d      	bne.n	80076c0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68da      	ldr	r2, [r3, #12]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f022 0220 	bic.w	r2, r2, #32
 8007612:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68da      	ldr	r2, [r3, #12]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007622:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	695a      	ldr	r2, [r3, #20]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f022 0201 	bic.w	r2, r2, #1
 8007632:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2220      	movs	r2, #32
 8007638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007646:	2b01      	cmp	r3, #1
 8007648:	d135      	bne.n	80076b6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	330c      	adds	r3, #12
 8007656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	e853 3f00 	ldrex	r3, [r3]
 800765e:	613b      	str	r3, [r7, #16]
   return(result);
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f023 0310 	bic.w	r3, r3, #16
 8007666:	627b      	str	r3, [r7, #36]	@ 0x24
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	330c      	adds	r3, #12
 800766e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007670:	623a      	str	r2, [r7, #32]
 8007672:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007674:	69f9      	ldr	r1, [r7, #28]
 8007676:	6a3a      	ldr	r2, [r7, #32]
 8007678:	e841 2300 	strex	r3, r2, [r1]
 800767c:	61bb      	str	r3, [r7, #24]
   return(result);
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1e5      	bne.n	8007650 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0310 	and.w	r3, r3, #16
 800768e:	2b10      	cmp	r3, #16
 8007690:	d10a      	bne.n	80076a8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007692:	2300      	movs	r3, #0
 8007694:	60fb      	str	r3, [r7, #12]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	60fb      	str	r3, [r7, #12]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	60fb      	str	r3, [r7, #12]
 80076a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80076ac:	4619      	mov	r1, r3
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7ff fca4 	bl	8006ffc <HAL_UARTEx_RxEventCallback>
 80076b4:	e002      	b.n	80076bc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f7f9 fe8e 	bl	80013d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	e002      	b.n	80076c6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	e000      	b.n	80076c6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80076c4:	2302      	movs	r3, #2
  }
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3730      	adds	r7, #48	@ 0x30
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
	...

080076d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076d4:	b0c0      	sub	sp, #256	@ 0x100
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80076e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ec:	68d9      	ldr	r1, [r3, #12]
 80076ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	ea40 0301 	orr.w	r3, r0, r1
 80076f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80076fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076fe:	689a      	ldr	r2, [r3, #8]
 8007700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	431a      	orrs	r2, r3
 8007708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	431a      	orrs	r2, r3
 8007710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007714:	69db      	ldr	r3, [r3, #28]
 8007716:	4313      	orrs	r3, r2
 8007718:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800771c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007728:	f021 010c 	bic.w	r1, r1, #12
 800772c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007736:	430b      	orrs	r3, r1
 8007738:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800773a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800774a:	6999      	ldr	r1, [r3, #24]
 800774c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	ea40 0301 	orr.w	r3, r0, r1
 8007756:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	4b8f      	ldr	r3, [pc, #572]	@ (800799c <UART_SetConfig+0x2cc>)
 8007760:	429a      	cmp	r2, r3
 8007762:	d005      	beq.n	8007770 <UART_SetConfig+0xa0>
 8007764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	4b8d      	ldr	r3, [pc, #564]	@ (80079a0 <UART_SetConfig+0x2d0>)
 800776c:	429a      	cmp	r2, r3
 800776e:	d104      	bne.n	800777a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007770:	f7fd fa8e 	bl	8004c90 <HAL_RCC_GetPCLK2Freq>
 8007774:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007778:	e003      	b.n	8007782 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800777a:	f7fd fa75 	bl	8004c68 <HAL_RCC_GetPCLK1Freq>
 800777e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007786:	69db      	ldr	r3, [r3, #28]
 8007788:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800778c:	f040 810c 	bne.w	80079a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007794:	2200      	movs	r2, #0
 8007796:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800779a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800779e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80077a2:	4622      	mov	r2, r4
 80077a4:	462b      	mov	r3, r5
 80077a6:	1891      	adds	r1, r2, r2
 80077a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80077aa:	415b      	adcs	r3, r3
 80077ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80077b2:	4621      	mov	r1, r4
 80077b4:	eb12 0801 	adds.w	r8, r2, r1
 80077b8:	4629      	mov	r1, r5
 80077ba:	eb43 0901 	adc.w	r9, r3, r1
 80077be:	f04f 0200 	mov.w	r2, #0
 80077c2:	f04f 0300 	mov.w	r3, #0
 80077c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077d2:	4690      	mov	r8, r2
 80077d4:	4699      	mov	r9, r3
 80077d6:	4623      	mov	r3, r4
 80077d8:	eb18 0303 	adds.w	r3, r8, r3
 80077dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80077e0:	462b      	mov	r3, r5
 80077e2:	eb49 0303 	adc.w	r3, r9, r3
 80077e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80077fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80077fe:	460b      	mov	r3, r1
 8007800:	18db      	adds	r3, r3, r3
 8007802:	653b      	str	r3, [r7, #80]	@ 0x50
 8007804:	4613      	mov	r3, r2
 8007806:	eb42 0303 	adc.w	r3, r2, r3
 800780a:	657b      	str	r3, [r7, #84]	@ 0x54
 800780c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007810:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007814:	f7f9 fa58 	bl	8000cc8 <__aeabi_uldivmod>
 8007818:	4602      	mov	r2, r0
 800781a:	460b      	mov	r3, r1
 800781c:	4b61      	ldr	r3, [pc, #388]	@ (80079a4 <UART_SetConfig+0x2d4>)
 800781e:	fba3 2302 	umull	r2, r3, r3, r2
 8007822:	095b      	lsrs	r3, r3, #5
 8007824:	011c      	lsls	r4, r3, #4
 8007826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800782a:	2200      	movs	r2, #0
 800782c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007830:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007834:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007838:	4642      	mov	r2, r8
 800783a:	464b      	mov	r3, r9
 800783c:	1891      	adds	r1, r2, r2
 800783e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007840:	415b      	adcs	r3, r3
 8007842:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007844:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007848:	4641      	mov	r1, r8
 800784a:	eb12 0a01 	adds.w	sl, r2, r1
 800784e:	4649      	mov	r1, r9
 8007850:	eb43 0b01 	adc.w	fp, r3, r1
 8007854:	f04f 0200 	mov.w	r2, #0
 8007858:	f04f 0300 	mov.w	r3, #0
 800785c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007860:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007864:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007868:	4692      	mov	sl, r2
 800786a:	469b      	mov	fp, r3
 800786c:	4643      	mov	r3, r8
 800786e:	eb1a 0303 	adds.w	r3, sl, r3
 8007872:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007876:	464b      	mov	r3, r9
 8007878:	eb4b 0303 	adc.w	r3, fp, r3
 800787c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800788c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007890:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007894:	460b      	mov	r3, r1
 8007896:	18db      	adds	r3, r3, r3
 8007898:	643b      	str	r3, [r7, #64]	@ 0x40
 800789a:	4613      	mov	r3, r2
 800789c:	eb42 0303 	adc.w	r3, r2, r3
 80078a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80078a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80078a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80078aa:	f7f9 fa0d 	bl	8000cc8 <__aeabi_uldivmod>
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	4611      	mov	r1, r2
 80078b4:	4b3b      	ldr	r3, [pc, #236]	@ (80079a4 <UART_SetConfig+0x2d4>)
 80078b6:	fba3 2301 	umull	r2, r3, r3, r1
 80078ba:	095b      	lsrs	r3, r3, #5
 80078bc:	2264      	movs	r2, #100	@ 0x64
 80078be:	fb02 f303 	mul.w	r3, r2, r3
 80078c2:	1acb      	subs	r3, r1, r3
 80078c4:	00db      	lsls	r3, r3, #3
 80078c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80078ca:	4b36      	ldr	r3, [pc, #216]	@ (80079a4 <UART_SetConfig+0x2d4>)
 80078cc:	fba3 2302 	umull	r2, r3, r3, r2
 80078d0:	095b      	lsrs	r3, r3, #5
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80078d8:	441c      	add	r4, r3
 80078da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078de:	2200      	movs	r2, #0
 80078e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80078e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80078e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80078ec:	4642      	mov	r2, r8
 80078ee:	464b      	mov	r3, r9
 80078f0:	1891      	adds	r1, r2, r2
 80078f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80078f4:	415b      	adcs	r3, r3
 80078f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80078fc:	4641      	mov	r1, r8
 80078fe:	1851      	adds	r1, r2, r1
 8007900:	6339      	str	r1, [r7, #48]	@ 0x30
 8007902:	4649      	mov	r1, r9
 8007904:	414b      	adcs	r3, r1
 8007906:	637b      	str	r3, [r7, #52]	@ 0x34
 8007908:	f04f 0200 	mov.w	r2, #0
 800790c:	f04f 0300 	mov.w	r3, #0
 8007910:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007914:	4659      	mov	r1, fp
 8007916:	00cb      	lsls	r3, r1, #3
 8007918:	4651      	mov	r1, sl
 800791a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800791e:	4651      	mov	r1, sl
 8007920:	00ca      	lsls	r2, r1, #3
 8007922:	4610      	mov	r0, r2
 8007924:	4619      	mov	r1, r3
 8007926:	4603      	mov	r3, r0
 8007928:	4642      	mov	r2, r8
 800792a:	189b      	adds	r3, r3, r2
 800792c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007930:	464b      	mov	r3, r9
 8007932:	460a      	mov	r2, r1
 8007934:	eb42 0303 	adc.w	r3, r2, r3
 8007938:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800793c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007948:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800794c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007950:	460b      	mov	r3, r1
 8007952:	18db      	adds	r3, r3, r3
 8007954:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007956:	4613      	mov	r3, r2
 8007958:	eb42 0303 	adc.w	r3, r2, r3
 800795c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800795e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007962:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007966:	f7f9 f9af 	bl	8000cc8 <__aeabi_uldivmod>
 800796a:	4602      	mov	r2, r0
 800796c:	460b      	mov	r3, r1
 800796e:	4b0d      	ldr	r3, [pc, #52]	@ (80079a4 <UART_SetConfig+0x2d4>)
 8007970:	fba3 1302 	umull	r1, r3, r3, r2
 8007974:	095b      	lsrs	r3, r3, #5
 8007976:	2164      	movs	r1, #100	@ 0x64
 8007978:	fb01 f303 	mul.w	r3, r1, r3
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	00db      	lsls	r3, r3, #3
 8007980:	3332      	adds	r3, #50	@ 0x32
 8007982:	4a08      	ldr	r2, [pc, #32]	@ (80079a4 <UART_SetConfig+0x2d4>)
 8007984:	fba2 2303 	umull	r2, r3, r2, r3
 8007988:	095b      	lsrs	r3, r3, #5
 800798a:	f003 0207 	and.w	r2, r3, #7
 800798e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4422      	add	r2, r4
 8007996:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007998:	e106      	b.n	8007ba8 <UART_SetConfig+0x4d8>
 800799a:	bf00      	nop
 800799c:	40011000 	.word	0x40011000
 80079a0:	40011400 	.word	0x40011400
 80079a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079ac:	2200      	movs	r2, #0
 80079ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80079b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80079b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80079ba:	4642      	mov	r2, r8
 80079bc:	464b      	mov	r3, r9
 80079be:	1891      	adds	r1, r2, r2
 80079c0:	6239      	str	r1, [r7, #32]
 80079c2:	415b      	adcs	r3, r3
 80079c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80079c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079ca:	4641      	mov	r1, r8
 80079cc:	1854      	adds	r4, r2, r1
 80079ce:	4649      	mov	r1, r9
 80079d0:	eb43 0501 	adc.w	r5, r3, r1
 80079d4:	f04f 0200 	mov.w	r2, #0
 80079d8:	f04f 0300 	mov.w	r3, #0
 80079dc:	00eb      	lsls	r3, r5, #3
 80079de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079e2:	00e2      	lsls	r2, r4, #3
 80079e4:	4614      	mov	r4, r2
 80079e6:	461d      	mov	r5, r3
 80079e8:	4643      	mov	r3, r8
 80079ea:	18e3      	adds	r3, r4, r3
 80079ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80079f0:	464b      	mov	r3, r9
 80079f2:	eb45 0303 	adc.w	r3, r5, r3
 80079f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80079fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a0a:	f04f 0200 	mov.w	r2, #0
 8007a0e:	f04f 0300 	mov.w	r3, #0
 8007a12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007a16:	4629      	mov	r1, r5
 8007a18:	008b      	lsls	r3, r1, #2
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a20:	4621      	mov	r1, r4
 8007a22:	008a      	lsls	r2, r1, #2
 8007a24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007a28:	f7f9 f94e 	bl	8000cc8 <__aeabi_uldivmod>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4b60      	ldr	r3, [pc, #384]	@ (8007bb4 <UART_SetConfig+0x4e4>)
 8007a32:	fba3 2302 	umull	r2, r3, r3, r2
 8007a36:	095b      	lsrs	r3, r3, #5
 8007a38:	011c      	lsls	r4, r3, #4
 8007a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007a48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007a4c:	4642      	mov	r2, r8
 8007a4e:	464b      	mov	r3, r9
 8007a50:	1891      	adds	r1, r2, r2
 8007a52:	61b9      	str	r1, [r7, #24]
 8007a54:	415b      	adcs	r3, r3
 8007a56:	61fb      	str	r3, [r7, #28]
 8007a58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a5c:	4641      	mov	r1, r8
 8007a5e:	1851      	adds	r1, r2, r1
 8007a60:	6139      	str	r1, [r7, #16]
 8007a62:	4649      	mov	r1, r9
 8007a64:	414b      	adcs	r3, r1
 8007a66:	617b      	str	r3, [r7, #20]
 8007a68:	f04f 0200 	mov.w	r2, #0
 8007a6c:	f04f 0300 	mov.w	r3, #0
 8007a70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a74:	4659      	mov	r1, fp
 8007a76:	00cb      	lsls	r3, r1, #3
 8007a78:	4651      	mov	r1, sl
 8007a7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a7e:	4651      	mov	r1, sl
 8007a80:	00ca      	lsls	r2, r1, #3
 8007a82:	4610      	mov	r0, r2
 8007a84:	4619      	mov	r1, r3
 8007a86:	4603      	mov	r3, r0
 8007a88:	4642      	mov	r2, r8
 8007a8a:	189b      	adds	r3, r3, r2
 8007a8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a90:	464b      	mov	r3, r9
 8007a92:	460a      	mov	r2, r1
 8007a94:	eb42 0303 	adc.w	r3, r2, r3
 8007a98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007aa6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007aa8:	f04f 0200 	mov.w	r2, #0
 8007aac:	f04f 0300 	mov.w	r3, #0
 8007ab0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007ab4:	4649      	mov	r1, r9
 8007ab6:	008b      	lsls	r3, r1, #2
 8007ab8:	4641      	mov	r1, r8
 8007aba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007abe:	4641      	mov	r1, r8
 8007ac0:	008a      	lsls	r2, r1, #2
 8007ac2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007ac6:	f7f9 f8ff 	bl	8000cc8 <__aeabi_uldivmod>
 8007aca:	4602      	mov	r2, r0
 8007acc:	460b      	mov	r3, r1
 8007ace:	4611      	mov	r1, r2
 8007ad0:	4b38      	ldr	r3, [pc, #224]	@ (8007bb4 <UART_SetConfig+0x4e4>)
 8007ad2:	fba3 2301 	umull	r2, r3, r3, r1
 8007ad6:	095b      	lsrs	r3, r3, #5
 8007ad8:	2264      	movs	r2, #100	@ 0x64
 8007ada:	fb02 f303 	mul.w	r3, r2, r3
 8007ade:	1acb      	subs	r3, r1, r3
 8007ae0:	011b      	lsls	r3, r3, #4
 8007ae2:	3332      	adds	r3, #50	@ 0x32
 8007ae4:	4a33      	ldr	r2, [pc, #204]	@ (8007bb4 <UART_SetConfig+0x4e4>)
 8007ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aea:	095b      	lsrs	r3, r3, #5
 8007aec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007af0:	441c      	add	r4, r3
 8007af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007af6:	2200      	movs	r2, #0
 8007af8:	673b      	str	r3, [r7, #112]	@ 0x70
 8007afa:	677a      	str	r2, [r7, #116]	@ 0x74
 8007afc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007b00:	4642      	mov	r2, r8
 8007b02:	464b      	mov	r3, r9
 8007b04:	1891      	adds	r1, r2, r2
 8007b06:	60b9      	str	r1, [r7, #8]
 8007b08:	415b      	adcs	r3, r3
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b10:	4641      	mov	r1, r8
 8007b12:	1851      	adds	r1, r2, r1
 8007b14:	6039      	str	r1, [r7, #0]
 8007b16:	4649      	mov	r1, r9
 8007b18:	414b      	adcs	r3, r1
 8007b1a:	607b      	str	r3, [r7, #4]
 8007b1c:	f04f 0200 	mov.w	r2, #0
 8007b20:	f04f 0300 	mov.w	r3, #0
 8007b24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b28:	4659      	mov	r1, fp
 8007b2a:	00cb      	lsls	r3, r1, #3
 8007b2c:	4651      	mov	r1, sl
 8007b2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b32:	4651      	mov	r1, sl
 8007b34:	00ca      	lsls	r2, r1, #3
 8007b36:	4610      	mov	r0, r2
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	4642      	mov	r2, r8
 8007b3e:	189b      	adds	r3, r3, r2
 8007b40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b42:	464b      	mov	r3, r9
 8007b44:	460a      	mov	r2, r1
 8007b46:	eb42 0303 	adc.w	r3, r2, r3
 8007b4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b56:	667a      	str	r2, [r7, #100]	@ 0x64
 8007b58:	f04f 0200 	mov.w	r2, #0
 8007b5c:	f04f 0300 	mov.w	r3, #0
 8007b60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007b64:	4649      	mov	r1, r9
 8007b66:	008b      	lsls	r3, r1, #2
 8007b68:	4641      	mov	r1, r8
 8007b6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b6e:	4641      	mov	r1, r8
 8007b70:	008a      	lsls	r2, r1, #2
 8007b72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007b76:	f7f9 f8a7 	bl	8000cc8 <__aeabi_uldivmod>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007bb4 <UART_SetConfig+0x4e4>)
 8007b80:	fba3 1302 	umull	r1, r3, r3, r2
 8007b84:	095b      	lsrs	r3, r3, #5
 8007b86:	2164      	movs	r1, #100	@ 0x64
 8007b88:	fb01 f303 	mul.w	r3, r1, r3
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	011b      	lsls	r3, r3, #4
 8007b90:	3332      	adds	r3, #50	@ 0x32
 8007b92:	4a08      	ldr	r2, [pc, #32]	@ (8007bb4 <UART_SetConfig+0x4e4>)
 8007b94:	fba2 2303 	umull	r2, r3, r2, r3
 8007b98:	095b      	lsrs	r3, r3, #5
 8007b9a:	f003 020f 	and.w	r2, r3, #15
 8007b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4422      	add	r2, r4
 8007ba6:	609a      	str	r2, [r3, #8]
}
 8007ba8:	bf00      	nop
 8007baa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bb4:	51eb851f 	.word	0x51eb851f

08007bb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bb8:	b084      	sub	sp, #16
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b084      	sub	sp, #16
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	f107 001c 	add.w	r0, r7, #28
 8007bc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007bca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d123      	bne.n	8007c1a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007be6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007bfa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d105      	bne.n	8007c0e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fa9a 	bl	8008148 <USB_CoreReset>
 8007c14:	4603      	mov	r3, r0
 8007c16:	73fb      	strb	r3, [r7, #15]
 8007c18:	e01b      	b.n	8007c52 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fa8e 	bl	8008148 <USB_CoreReset>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007c30:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d106      	bne.n	8007c46 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c3c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	639a      	str	r2, [r3, #56]	@ 0x38
 8007c44:	e005      	b.n	8007c52 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c4a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007c52:	7fbb      	ldrb	r3, [r7, #30]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d10b      	bne.n	8007c70 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	f043 0206 	orr.w	r2, r3, #6
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f043 0220 	orr.w	r2, r3, #32
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c7c:	b004      	add	sp, #16
 8007c7e:	4770      	bx	lr

08007c80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	f023 0201 	bic.w	r2, r3, #1
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	460b      	mov	r3, r1
 8007cac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007cbe:	78fb      	ldrb	r3, [r7, #3]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d115      	bne.n	8007cf0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007cd0:	200a      	movs	r0, #10
 8007cd2:	f7fb fd8d 	bl	80037f0 <HAL_Delay>
      ms += 10U;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	330a      	adds	r3, #10
 8007cda:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fa25 	bl	800812c <USB_GetMode>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d01e      	beq.n	8007d26 <USB_SetCurrentMode+0x84>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2bc7      	cmp	r3, #199	@ 0xc7
 8007cec:	d9f0      	bls.n	8007cd0 <USB_SetCurrentMode+0x2e>
 8007cee:	e01a      	b.n	8007d26 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007cf0:	78fb      	ldrb	r3, [r7, #3]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d115      	bne.n	8007d22 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007d02:	200a      	movs	r0, #10
 8007d04:	f7fb fd74 	bl	80037f0 <HAL_Delay>
      ms += 10U;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	330a      	adds	r3, #10
 8007d0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fa0c 	bl	800812c <USB_GetMode>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d005      	beq.n	8007d26 <USB_SetCurrentMode+0x84>
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2bc7      	cmp	r3, #199	@ 0xc7
 8007d1e:	d9f0      	bls.n	8007d02 <USB_SetCurrentMode+0x60>
 8007d20:	e001      	b.n	8007d26 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e005      	b.n	8007d32 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2bc8      	cmp	r3, #200	@ 0xc8
 8007d2a:	d101      	bne.n	8007d30 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e000      	b.n	8007d32 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
	...

08007d3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d3c:	b084      	sub	sp, #16
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b086      	sub	sp, #24
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007d4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007d56:	2300      	movs	r3, #0
 8007d58:	613b      	str	r3, [r7, #16]
 8007d5a:	e009      	b.n	8007d70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	3340      	adds	r3, #64	@ 0x40
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	4413      	add	r3, r2
 8007d66:	2200      	movs	r2, #0
 8007d68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	613b      	str	r3, [r7, #16]
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	2b0e      	cmp	r3, #14
 8007d74:	d9f2      	bls.n	8007d5c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007d76:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d11c      	bne.n	8007db8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d8c:	f043 0302 	orr.w	r3, r3, #2
 8007d90:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d96:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	601a      	str	r2, [r3, #0]
 8007db6:	e005      	b.n	8007dc4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dbc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007dca:	461a      	mov	r2, r3
 8007dcc:	2300      	movs	r3, #0
 8007dce:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007dd0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d10d      	bne.n	8007df4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d104      	bne.n	8007dea <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007de0:	2100      	movs	r1, #0
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f968 	bl	80080b8 <USB_SetDevSpeed>
 8007de8:	e008      	b.n	8007dfc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007dea:	2101      	movs	r1, #1
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f963 	bl	80080b8 <USB_SetDevSpeed>
 8007df2:	e003      	b.n	8007dfc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007df4:	2103      	movs	r1, #3
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f95e 	bl	80080b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007dfc:	2110      	movs	r1, #16
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f8fa 	bl	8007ff8 <USB_FlushTxFifo>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f924 	bl	800805c <USB_FlushRxFifo>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e24:	461a      	mov	r2, r3
 8007e26:	2300      	movs	r3, #0
 8007e28:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e30:	461a      	mov	r2, r3
 8007e32:	2300      	movs	r3, #0
 8007e34:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	2300      	movs	r3, #0
 8007e40:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e42:	2300      	movs	r3, #0
 8007e44:	613b      	str	r3, [r7, #16]
 8007e46:	e043      	b.n	8007ed0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	015a      	lsls	r2, r3, #5
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e5e:	d118      	bne.n	8007e92 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d10a      	bne.n	8007e7c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	015a      	lsls	r2, r3, #5
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e72:	461a      	mov	r2, r3
 8007e74:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007e78:	6013      	str	r3, [r2, #0]
 8007e7a:	e013      	b.n	8007ea4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	015a      	lsls	r2, r3, #5
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	4413      	add	r3, r2
 8007e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e88:	461a      	mov	r2, r3
 8007e8a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007e8e:	6013      	str	r3, [r2, #0]
 8007e90:	e008      	b.n	8007ea4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	015a      	lsls	r2, r3, #5
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	4413      	add	r3, r2
 8007e9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	015a      	lsls	r2, r3, #5
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	4413      	add	r3, r2
 8007eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	015a      	lsls	r2, r3, #5
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ec8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	613b      	str	r3, [r7, #16]
 8007ed0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d3b5      	bcc.n	8007e48 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007edc:	2300      	movs	r3, #0
 8007ede:	613b      	str	r3, [r7, #16]
 8007ee0:	e043      	b.n	8007f6a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	015a      	lsls	r2, r3, #5
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	4413      	add	r3, r2
 8007eea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ef4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ef8:	d118      	bne.n	8007f2c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10a      	bne.n	8007f16 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	015a      	lsls	r2, r3, #5
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	4413      	add	r3, r2
 8007f08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007f12:	6013      	str	r3, [r2, #0]
 8007f14:	e013      	b.n	8007f3e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	015a      	lsls	r2, r3, #5
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f22:	461a      	mov	r2, r3
 8007f24:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007f28:	6013      	str	r3, [r2, #0]
 8007f2a:	e008      	b.n	8007f3e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	015a      	lsls	r2, r3, #5
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4413      	add	r3, r2
 8007f34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f38:	461a      	mov	r2, r3
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	015a      	lsls	r2, r3, #5
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	4413      	add	r3, r2
 8007f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	015a      	lsls	r2, r3, #5
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	4413      	add	r3, r2
 8007f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007f62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	3301      	adds	r3, #1
 8007f68:	613b      	str	r3, [r7, #16]
 8007f6a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007f6e:	461a      	mov	r2, r3
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d3b5      	bcc.n	8007ee2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f88:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007f96:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007f98:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d105      	bne.n	8007fac <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	f043 0210 	orr.w	r2, r3, #16
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	699a      	ldr	r2, [r3, #24]
 8007fb0:	4b10      	ldr	r3, [pc, #64]	@ (8007ff4 <USB_DevInit+0x2b8>)
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007fb8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d005      	beq.n	8007fcc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	f043 0208 	orr.w	r2, r3, #8
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007fcc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d107      	bne.n	8007fe4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007fdc:	f043 0304 	orr.w	r3, r3, #4
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3718      	adds	r7, #24
 8007fea:	46bd      	mov	sp, r7
 8007fec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ff0:	b004      	add	sp, #16
 8007ff2:	4770      	bx	lr
 8007ff4:	803c3800 	.word	0x803c3800

08007ff8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008002:	2300      	movs	r3, #0
 8008004:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	3301      	adds	r3, #1
 800800a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008012:	d901      	bls.n	8008018 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008014:	2303      	movs	r3, #3
 8008016:	e01b      	b.n	8008050 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	2b00      	cmp	r3, #0
 800801e:	daf2      	bge.n	8008006 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008020:	2300      	movs	r3, #0
 8008022:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	019b      	lsls	r3, r3, #6
 8008028:	f043 0220 	orr.w	r2, r3, #32
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	3301      	adds	r3, #1
 8008034:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800803c:	d901      	bls.n	8008042 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800803e:	2303      	movs	r3, #3
 8008040:	e006      	b.n	8008050 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	f003 0320 	and.w	r3, r3, #32
 800804a:	2b20      	cmp	r3, #32
 800804c:	d0f0      	beq.n	8008030 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3714      	adds	r7, #20
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800805c:	b480      	push	{r7}
 800805e:	b085      	sub	sp, #20
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008064:	2300      	movs	r3, #0
 8008066:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	3301      	adds	r3, #1
 800806c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008074:	d901      	bls.n	800807a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e018      	b.n	80080ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	2b00      	cmp	r3, #0
 8008080:	daf2      	bge.n	8008068 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008082:	2300      	movs	r3, #0
 8008084:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2210      	movs	r2, #16
 800808a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	3301      	adds	r3, #1
 8008090:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008098:	d901      	bls.n	800809e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800809a:	2303      	movs	r3, #3
 800809c:	e006      	b.n	80080ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	f003 0310 	and.w	r3, r3, #16
 80080a6:	2b10      	cmp	r3, #16
 80080a8:	d0f0      	beq.n	800808c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3714      	adds	r7, #20
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	460b      	mov	r3, r1
 80080c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	78fb      	ldrb	r3, [r7, #3]
 80080d2:	68f9      	ldr	r1, [r7, #12]
 80080d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080d8:	4313      	orrs	r3, r2
 80080da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b085      	sub	sp, #20
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008104:	f023 0303 	bic.w	r3, r3, #3
 8008108:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008118:	f043 0302 	orr.w	r3, r3, #2
 800811c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	695b      	ldr	r3, [r3, #20]
 8008138:	f003 0301 	and.w	r3, r3, #1
}
 800813c:	4618      	mov	r0, r3
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008150:	2300      	movs	r3, #0
 8008152:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	3301      	adds	r3, #1
 8008158:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008160:	d901      	bls.n	8008166 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	e01b      	b.n	800819e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	2b00      	cmp	r3, #0
 800816c:	daf2      	bge.n	8008154 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800816e:	2300      	movs	r3, #0
 8008170:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	f043 0201 	orr.w	r2, r3, #1
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	3301      	adds	r3, #1
 8008182:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800818a:	d901      	bls.n	8008190 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800818c:	2303      	movs	r3, #3
 800818e:	e006      	b.n	800819e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b01      	cmp	r3, #1
 800819a:	d0f0      	beq.n	800817e <USB_CoreReset+0x36>

  return HAL_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3714      	adds	r7, #20
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <atoi>:
 80081aa:	220a      	movs	r2, #10
 80081ac:	2100      	movs	r1, #0
 80081ae:	f000 be89 	b.w	8008ec4 <strtol>

080081b2 <sulp>:
 80081b2:	b570      	push	{r4, r5, r6, lr}
 80081b4:	4604      	mov	r4, r0
 80081b6:	460d      	mov	r5, r1
 80081b8:	ec45 4b10 	vmov	d0, r4, r5
 80081bc:	4616      	mov	r6, r2
 80081be:	f003 fb1b 	bl	800b7f8 <__ulp>
 80081c2:	ec51 0b10 	vmov	r0, r1, d0
 80081c6:	b17e      	cbz	r6, 80081e8 <sulp+0x36>
 80081c8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80081cc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	dd09      	ble.n	80081e8 <sulp+0x36>
 80081d4:	051b      	lsls	r3, r3, #20
 80081d6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80081da:	2400      	movs	r4, #0
 80081dc:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80081e0:	4622      	mov	r2, r4
 80081e2:	462b      	mov	r3, r5
 80081e4:	f7f8 fa28 	bl	8000638 <__aeabi_dmul>
 80081e8:	ec41 0b10 	vmov	d0, r0, r1
 80081ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080081f0 <_strtod_l>:
 80081f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f4:	b09f      	sub	sp, #124	@ 0x7c
 80081f6:	460c      	mov	r4, r1
 80081f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80081fa:	2200      	movs	r2, #0
 80081fc:	921a      	str	r2, [sp, #104]	@ 0x68
 80081fe:	9005      	str	r0, [sp, #20]
 8008200:	f04f 0a00 	mov.w	sl, #0
 8008204:	f04f 0b00 	mov.w	fp, #0
 8008208:	460a      	mov	r2, r1
 800820a:	9219      	str	r2, [sp, #100]	@ 0x64
 800820c:	7811      	ldrb	r1, [r2, #0]
 800820e:	292b      	cmp	r1, #43	@ 0x2b
 8008210:	d04a      	beq.n	80082a8 <_strtod_l+0xb8>
 8008212:	d838      	bhi.n	8008286 <_strtod_l+0x96>
 8008214:	290d      	cmp	r1, #13
 8008216:	d832      	bhi.n	800827e <_strtod_l+0x8e>
 8008218:	2908      	cmp	r1, #8
 800821a:	d832      	bhi.n	8008282 <_strtod_l+0x92>
 800821c:	2900      	cmp	r1, #0
 800821e:	d03b      	beq.n	8008298 <_strtod_l+0xa8>
 8008220:	2200      	movs	r2, #0
 8008222:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008224:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008226:	782a      	ldrb	r2, [r5, #0]
 8008228:	2a30      	cmp	r2, #48	@ 0x30
 800822a:	f040 80b3 	bne.w	8008394 <_strtod_l+0x1a4>
 800822e:	786a      	ldrb	r2, [r5, #1]
 8008230:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008234:	2a58      	cmp	r2, #88	@ 0x58
 8008236:	d16e      	bne.n	8008316 <_strtod_l+0x126>
 8008238:	9302      	str	r3, [sp, #8]
 800823a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800823c:	9301      	str	r3, [sp, #4]
 800823e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008240:	9300      	str	r3, [sp, #0]
 8008242:	4a8e      	ldr	r2, [pc, #568]	@ (800847c <_strtod_l+0x28c>)
 8008244:	9805      	ldr	r0, [sp, #20]
 8008246:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008248:	a919      	add	r1, sp, #100	@ 0x64
 800824a:	f002 fbc7 	bl	800a9dc <__gethex>
 800824e:	f010 060f 	ands.w	r6, r0, #15
 8008252:	4604      	mov	r4, r0
 8008254:	d005      	beq.n	8008262 <_strtod_l+0x72>
 8008256:	2e06      	cmp	r6, #6
 8008258:	d128      	bne.n	80082ac <_strtod_l+0xbc>
 800825a:	3501      	adds	r5, #1
 800825c:	2300      	movs	r3, #0
 800825e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008260:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008262:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008264:	2b00      	cmp	r3, #0
 8008266:	f040 858e 	bne.w	8008d86 <_strtod_l+0xb96>
 800826a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800826c:	b1cb      	cbz	r3, 80082a2 <_strtod_l+0xb2>
 800826e:	4652      	mov	r2, sl
 8008270:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008274:	ec43 2b10 	vmov	d0, r2, r3
 8008278:	b01f      	add	sp, #124	@ 0x7c
 800827a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800827e:	2920      	cmp	r1, #32
 8008280:	d1ce      	bne.n	8008220 <_strtod_l+0x30>
 8008282:	3201      	adds	r2, #1
 8008284:	e7c1      	b.n	800820a <_strtod_l+0x1a>
 8008286:	292d      	cmp	r1, #45	@ 0x2d
 8008288:	d1ca      	bne.n	8008220 <_strtod_l+0x30>
 800828a:	2101      	movs	r1, #1
 800828c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800828e:	1c51      	adds	r1, r2, #1
 8008290:	9119      	str	r1, [sp, #100]	@ 0x64
 8008292:	7852      	ldrb	r2, [r2, #1]
 8008294:	2a00      	cmp	r2, #0
 8008296:	d1c5      	bne.n	8008224 <_strtod_l+0x34>
 8008298:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800829a:	9419      	str	r4, [sp, #100]	@ 0x64
 800829c:	2b00      	cmp	r3, #0
 800829e:	f040 8570 	bne.w	8008d82 <_strtod_l+0xb92>
 80082a2:	4652      	mov	r2, sl
 80082a4:	465b      	mov	r3, fp
 80082a6:	e7e5      	b.n	8008274 <_strtod_l+0x84>
 80082a8:	2100      	movs	r1, #0
 80082aa:	e7ef      	b.n	800828c <_strtod_l+0x9c>
 80082ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80082ae:	b13a      	cbz	r2, 80082c0 <_strtod_l+0xd0>
 80082b0:	2135      	movs	r1, #53	@ 0x35
 80082b2:	a81c      	add	r0, sp, #112	@ 0x70
 80082b4:	f003 fb9a 	bl	800b9ec <__copybits>
 80082b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082ba:	9805      	ldr	r0, [sp, #20]
 80082bc:	f002 ff68 	bl	800b190 <_Bfree>
 80082c0:	3e01      	subs	r6, #1
 80082c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80082c4:	2e04      	cmp	r6, #4
 80082c6:	d806      	bhi.n	80082d6 <_strtod_l+0xe6>
 80082c8:	e8df f006 	tbb	[pc, r6]
 80082cc:	201d0314 	.word	0x201d0314
 80082d0:	14          	.byte	0x14
 80082d1:	00          	.byte	0x00
 80082d2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80082d6:	05e1      	lsls	r1, r4, #23
 80082d8:	bf48      	it	mi
 80082da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80082de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80082e2:	0d1b      	lsrs	r3, r3, #20
 80082e4:	051b      	lsls	r3, r3, #20
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1bb      	bne.n	8008262 <_strtod_l+0x72>
 80082ea:	f001 fc13 	bl	8009b14 <__errno>
 80082ee:	2322      	movs	r3, #34	@ 0x22
 80082f0:	6003      	str	r3, [r0, #0]
 80082f2:	e7b6      	b.n	8008262 <_strtod_l+0x72>
 80082f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80082f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80082fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008300:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008304:	e7e7      	b.n	80082d6 <_strtod_l+0xe6>
 8008306:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008484 <_strtod_l+0x294>
 800830a:	e7e4      	b.n	80082d6 <_strtod_l+0xe6>
 800830c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008310:	f04f 3aff 	mov.w	sl, #4294967295
 8008314:	e7df      	b.n	80082d6 <_strtod_l+0xe6>
 8008316:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008318:	1c5a      	adds	r2, r3, #1
 800831a:	9219      	str	r2, [sp, #100]	@ 0x64
 800831c:	785b      	ldrb	r3, [r3, #1]
 800831e:	2b30      	cmp	r3, #48	@ 0x30
 8008320:	d0f9      	beq.n	8008316 <_strtod_l+0x126>
 8008322:	2b00      	cmp	r3, #0
 8008324:	d09d      	beq.n	8008262 <_strtod_l+0x72>
 8008326:	2301      	movs	r3, #1
 8008328:	9309      	str	r3, [sp, #36]	@ 0x24
 800832a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800832c:	930c      	str	r3, [sp, #48]	@ 0x30
 800832e:	2300      	movs	r3, #0
 8008330:	9308      	str	r3, [sp, #32]
 8008332:	930a      	str	r3, [sp, #40]	@ 0x28
 8008334:	461f      	mov	r7, r3
 8008336:	220a      	movs	r2, #10
 8008338:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800833a:	7805      	ldrb	r5, [r0, #0]
 800833c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008340:	b2d9      	uxtb	r1, r3
 8008342:	2909      	cmp	r1, #9
 8008344:	d928      	bls.n	8008398 <_strtod_l+0x1a8>
 8008346:	494e      	ldr	r1, [pc, #312]	@ (8008480 <_strtod_l+0x290>)
 8008348:	2201      	movs	r2, #1
 800834a:	f001 fb2a 	bl	80099a2 <strncmp>
 800834e:	2800      	cmp	r0, #0
 8008350:	d032      	beq.n	80083b8 <_strtod_l+0x1c8>
 8008352:	2000      	movs	r0, #0
 8008354:	462a      	mov	r2, r5
 8008356:	4681      	mov	r9, r0
 8008358:	463d      	mov	r5, r7
 800835a:	4603      	mov	r3, r0
 800835c:	2a65      	cmp	r2, #101	@ 0x65
 800835e:	d001      	beq.n	8008364 <_strtod_l+0x174>
 8008360:	2a45      	cmp	r2, #69	@ 0x45
 8008362:	d114      	bne.n	800838e <_strtod_l+0x19e>
 8008364:	b91d      	cbnz	r5, 800836e <_strtod_l+0x17e>
 8008366:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008368:	4302      	orrs	r2, r0
 800836a:	d095      	beq.n	8008298 <_strtod_l+0xa8>
 800836c:	2500      	movs	r5, #0
 800836e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008370:	1c62      	adds	r2, r4, #1
 8008372:	9219      	str	r2, [sp, #100]	@ 0x64
 8008374:	7862      	ldrb	r2, [r4, #1]
 8008376:	2a2b      	cmp	r2, #43	@ 0x2b
 8008378:	d077      	beq.n	800846a <_strtod_l+0x27a>
 800837a:	2a2d      	cmp	r2, #45	@ 0x2d
 800837c:	d07b      	beq.n	8008476 <_strtod_l+0x286>
 800837e:	f04f 0c00 	mov.w	ip, #0
 8008382:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008386:	2909      	cmp	r1, #9
 8008388:	f240 8082 	bls.w	8008490 <_strtod_l+0x2a0>
 800838c:	9419      	str	r4, [sp, #100]	@ 0x64
 800838e:	f04f 0800 	mov.w	r8, #0
 8008392:	e0a2      	b.n	80084da <_strtod_l+0x2ea>
 8008394:	2300      	movs	r3, #0
 8008396:	e7c7      	b.n	8008328 <_strtod_l+0x138>
 8008398:	2f08      	cmp	r7, #8
 800839a:	bfd5      	itete	le
 800839c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800839e:	9908      	ldrgt	r1, [sp, #32]
 80083a0:	fb02 3301 	mlale	r3, r2, r1, r3
 80083a4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80083a8:	f100 0001 	add.w	r0, r0, #1
 80083ac:	bfd4      	ite	le
 80083ae:	930a      	strle	r3, [sp, #40]	@ 0x28
 80083b0:	9308      	strgt	r3, [sp, #32]
 80083b2:	3701      	adds	r7, #1
 80083b4:	9019      	str	r0, [sp, #100]	@ 0x64
 80083b6:	e7bf      	b.n	8008338 <_strtod_l+0x148>
 80083b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083ba:	1c5a      	adds	r2, r3, #1
 80083bc:	9219      	str	r2, [sp, #100]	@ 0x64
 80083be:	785a      	ldrb	r2, [r3, #1]
 80083c0:	b37f      	cbz	r7, 8008422 <_strtod_l+0x232>
 80083c2:	4681      	mov	r9, r0
 80083c4:	463d      	mov	r5, r7
 80083c6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80083ca:	2b09      	cmp	r3, #9
 80083cc:	d912      	bls.n	80083f4 <_strtod_l+0x204>
 80083ce:	2301      	movs	r3, #1
 80083d0:	e7c4      	b.n	800835c <_strtod_l+0x16c>
 80083d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083d4:	1c5a      	adds	r2, r3, #1
 80083d6:	9219      	str	r2, [sp, #100]	@ 0x64
 80083d8:	785a      	ldrb	r2, [r3, #1]
 80083da:	3001      	adds	r0, #1
 80083dc:	2a30      	cmp	r2, #48	@ 0x30
 80083de:	d0f8      	beq.n	80083d2 <_strtod_l+0x1e2>
 80083e0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80083e4:	2b08      	cmp	r3, #8
 80083e6:	f200 84d3 	bhi.w	8008d90 <_strtod_l+0xba0>
 80083ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80083ee:	4681      	mov	r9, r0
 80083f0:	2000      	movs	r0, #0
 80083f2:	4605      	mov	r5, r0
 80083f4:	3a30      	subs	r2, #48	@ 0x30
 80083f6:	f100 0301 	add.w	r3, r0, #1
 80083fa:	d02a      	beq.n	8008452 <_strtod_l+0x262>
 80083fc:	4499      	add	r9, r3
 80083fe:	eb00 0c05 	add.w	ip, r0, r5
 8008402:	462b      	mov	r3, r5
 8008404:	210a      	movs	r1, #10
 8008406:	4563      	cmp	r3, ip
 8008408:	d10d      	bne.n	8008426 <_strtod_l+0x236>
 800840a:	1c69      	adds	r1, r5, #1
 800840c:	4401      	add	r1, r0
 800840e:	4428      	add	r0, r5
 8008410:	2808      	cmp	r0, #8
 8008412:	dc16      	bgt.n	8008442 <_strtod_l+0x252>
 8008414:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008416:	230a      	movs	r3, #10
 8008418:	fb03 2300 	mla	r3, r3, r0, r2
 800841c:	930a      	str	r3, [sp, #40]	@ 0x28
 800841e:	2300      	movs	r3, #0
 8008420:	e018      	b.n	8008454 <_strtod_l+0x264>
 8008422:	4638      	mov	r0, r7
 8008424:	e7da      	b.n	80083dc <_strtod_l+0x1ec>
 8008426:	2b08      	cmp	r3, #8
 8008428:	f103 0301 	add.w	r3, r3, #1
 800842c:	dc03      	bgt.n	8008436 <_strtod_l+0x246>
 800842e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008430:	434e      	muls	r6, r1
 8008432:	960a      	str	r6, [sp, #40]	@ 0x28
 8008434:	e7e7      	b.n	8008406 <_strtod_l+0x216>
 8008436:	2b10      	cmp	r3, #16
 8008438:	bfde      	ittt	le
 800843a:	9e08      	ldrle	r6, [sp, #32]
 800843c:	434e      	mulle	r6, r1
 800843e:	9608      	strle	r6, [sp, #32]
 8008440:	e7e1      	b.n	8008406 <_strtod_l+0x216>
 8008442:	280f      	cmp	r0, #15
 8008444:	dceb      	bgt.n	800841e <_strtod_l+0x22e>
 8008446:	9808      	ldr	r0, [sp, #32]
 8008448:	230a      	movs	r3, #10
 800844a:	fb03 2300 	mla	r3, r3, r0, r2
 800844e:	9308      	str	r3, [sp, #32]
 8008450:	e7e5      	b.n	800841e <_strtod_l+0x22e>
 8008452:	4629      	mov	r1, r5
 8008454:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008456:	1c50      	adds	r0, r2, #1
 8008458:	9019      	str	r0, [sp, #100]	@ 0x64
 800845a:	7852      	ldrb	r2, [r2, #1]
 800845c:	4618      	mov	r0, r3
 800845e:	460d      	mov	r5, r1
 8008460:	e7b1      	b.n	80083c6 <_strtod_l+0x1d6>
 8008462:	f04f 0900 	mov.w	r9, #0
 8008466:	2301      	movs	r3, #1
 8008468:	e77d      	b.n	8008366 <_strtod_l+0x176>
 800846a:	f04f 0c00 	mov.w	ip, #0
 800846e:	1ca2      	adds	r2, r4, #2
 8008470:	9219      	str	r2, [sp, #100]	@ 0x64
 8008472:	78a2      	ldrb	r2, [r4, #2]
 8008474:	e785      	b.n	8008382 <_strtod_l+0x192>
 8008476:	f04f 0c01 	mov.w	ip, #1
 800847a:	e7f8      	b.n	800846e <_strtod_l+0x27e>
 800847c:	0800c500 	.word	0x0800c500
 8008480:	0800c4e8 	.word	0x0800c4e8
 8008484:	7ff00000 	.word	0x7ff00000
 8008488:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800848a:	1c51      	adds	r1, r2, #1
 800848c:	9119      	str	r1, [sp, #100]	@ 0x64
 800848e:	7852      	ldrb	r2, [r2, #1]
 8008490:	2a30      	cmp	r2, #48	@ 0x30
 8008492:	d0f9      	beq.n	8008488 <_strtod_l+0x298>
 8008494:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008498:	2908      	cmp	r1, #8
 800849a:	f63f af78 	bhi.w	800838e <_strtod_l+0x19e>
 800849e:	3a30      	subs	r2, #48	@ 0x30
 80084a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80084a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80084a4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80084a6:	f04f 080a 	mov.w	r8, #10
 80084aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80084ac:	1c56      	adds	r6, r2, #1
 80084ae:	9619      	str	r6, [sp, #100]	@ 0x64
 80084b0:	7852      	ldrb	r2, [r2, #1]
 80084b2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80084b6:	f1be 0f09 	cmp.w	lr, #9
 80084ba:	d939      	bls.n	8008530 <_strtod_l+0x340>
 80084bc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80084be:	1a76      	subs	r6, r6, r1
 80084c0:	2e08      	cmp	r6, #8
 80084c2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80084c6:	dc03      	bgt.n	80084d0 <_strtod_l+0x2e0>
 80084c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80084ca:	4588      	cmp	r8, r1
 80084cc:	bfa8      	it	ge
 80084ce:	4688      	movge	r8, r1
 80084d0:	f1bc 0f00 	cmp.w	ip, #0
 80084d4:	d001      	beq.n	80084da <_strtod_l+0x2ea>
 80084d6:	f1c8 0800 	rsb	r8, r8, #0
 80084da:	2d00      	cmp	r5, #0
 80084dc:	d14e      	bne.n	800857c <_strtod_l+0x38c>
 80084de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80084e0:	4308      	orrs	r0, r1
 80084e2:	f47f aebe 	bne.w	8008262 <_strtod_l+0x72>
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f47f aed6 	bne.w	8008298 <_strtod_l+0xa8>
 80084ec:	2a69      	cmp	r2, #105	@ 0x69
 80084ee:	d028      	beq.n	8008542 <_strtod_l+0x352>
 80084f0:	dc25      	bgt.n	800853e <_strtod_l+0x34e>
 80084f2:	2a49      	cmp	r2, #73	@ 0x49
 80084f4:	d025      	beq.n	8008542 <_strtod_l+0x352>
 80084f6:	2a4e      	cmp	r2, #78	@ 0x4e
 80084f8:	f47f aece 	bne.w	8008298 <_strtod_l+0xa8>
 80084fc:	499b      	ldr	r1, [pc, #620]	@ (800876c <_strtod_l+0x57c>)
 80084fe:	a819      	add	r0, sp, #100	@ 0x64
 8008500:	f002 fc8e 	bl	800ae20 <__match>
 8008504:	2800      	cmp	r0, #0
 8008506:	f43f aec7 	beq.w	8008298 <_strtod_l+0xa8>
 800850a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	2b28      	cmp	r3, #40	@ 0x28
 8008510:	d12e      	bne.n	8008570 <_strtod_l+0x380>
 8008512:	4997      	ldr	r1, [pc, #604]	@ (8008770 <_strtod_l+0x580>)
 8008514:	aa1c      	add	r2, sp, #112	@ 0x70
 8008516:	a819      	add	r0, sp, #100	@ 0x64
 8008518:	f002 fc96 	bl	800ae48 <__hexnan>
 800851c:	2805      	cmp	r0, #5
 800851e:	d127      	bne.n	8008570 <_strtod_l+0x380>
 8008520:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008522:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008526:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800852a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800852e:	e698      	b.n	8008262 <_strtod_l+0x72>
 8008530:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008532:	fb08 2101 	mla	r1, r8, r1, r2
 8008536:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800853a:	920e      	str	r2, [sp, #56]	@ 0x38
 800853c:	e7b5      	b.n	80084aa <_strtod_l+0x2ba>
 800853e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008540:	e7da      	b.n	80084f8 <_strtod_l+0x308>
 8008542:	498c      	ldr	r1, [pc, #560]	@ (8008774 <_strtod_l+0x584>)
 8008544:	a819      	add	r0, sp, #100	@ 0x64
 8008546:	f002 fc6b 	bl	800ae20 <__match>
 800854a:	2800      	cmp	r0, #0
 800854c:	f43f aea4 	beq.w	8008298 <_strtod_l+0xa8>
 8008550:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008552:	4989      	ldr	r1, [pc, #548]	@ (8008778 <_strtod_l+0x588>)
 8008554:	3b01      	subs	r3, #1
 8008556:	a819      	add	r0, sp, #100	@ 0x64
 8008558:	9319      	str	r3, [sp, #100]	@ 0x64
 800855a:	f002 fc61 	bl	800ae20 <__match>
 800855e:	b910      	cbnz	r0, 8008566 <_strtod_l+0x376>
 8008560:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008562:	3301      	adds	r3, #1
 8008564:	9319      	str	r3, [sp, #100]	@ 0x64
 8008566:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008788 <_strtod_l+0x598>
 800856a:	f04f 0a00 	mov.w	sl, #0
 800856e:	e678      	b.n	8008262 <_strtod_l+0x72>
 8008570:	4882      	ldr	r0, [pc, #520]	@ (800877c <_strtod_l+0x58c>)
 8008572:	f001 fb0d 	bl	8009b90 <nan>
 8008576:	ec5b ab10 	vmov	sl, fp, d0
 800857a:	e672      	b.n	8008262 <_strtod_l+0x72>
 800857c:	eba8 0309 	sub.w	r3, r8, r9
 8008580:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008582:	9309      	str	r3, [sp, #36]	@ 0x24
 8008584:	2f00      	cmp	r7, #0
 8008586:	bf08      	it	eq
 8008588:	462f      	moveq	r7, r5
 800858a:	2d10      	cmp	r5, #16
 800858c:	462c      	mov	r4, r5
 800858e:	bfa8      	it	ge
 8008590:	2410      	movge	r4, #16
 8008592:	f7f7 ffd7 	bl	8000544 <__aeabi_ui2d>
 8008596:	2d09      	cmp	r5, #9
 8008598:	4682      	mov	sl, r0
 800859a:	468b      	mov	fp, r1
 800859c:	dc13      	bgt.n	80085c6 <_strtod_l+0x3d6>
 800859e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f43f ae5e 	beq.w	8008262 <_strtod_l+0x72>
 80085a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a8:	dd78      	ble.n	800869c <_strtod_l+0x4ac>
 80085aa:	2b16      	cmp	r3, #22
 80085ac:	dc5f      	bgt.n	800866e <_strtod_l+0x47e>
 80085ae:	4974      	ldr	r1, [pc, #464]	@ (8008780 <_strtod_l+0x590>)
 80085b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80085b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085b8:	4652      	mov	r2, sl
 80085ba:	465b      	mov	r3, fp
 80085bc:	f7f8 f83c 	bl	8000638 <__aeabi_dmul>
 80085c0:	4682      	mov	sl, r0
 80085c2:	468b      	mov	fp, r1
 80085c4:	e64d      	b.n	8008262 <_strtod_l+0x72>
 80085c6:	4b6e      	ldr	r3, [pc, #440]	@ (8008780 <_strtod_l+0x590>)
 80085c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085cc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80085d0:	f7f8 f832 	bl	8000638 <__aeabi_dmul>
 80085d4:	4682      	mov	sl, r0
 80085d6:	9808      	ldr	r0, [sp, #32]
 80085d8:	468b      	mov	fp, r1
 80085da:	f7f7 ffb3 	bl	8000544 <__aeabi_ui2d>
 80085de:	4602      	mov	r2, r0
 80085e0:	460b      	mov	r3, r1
 80085e2:	4650      	mov	r0, sl
 80085e4:	4659      	mov	r1, fp
 80085e6:	f7f7 fe71 	bl	80002cc <__adddf3>
 80085ea:	2d0f      	cmp	r5, #15
 80085ec:	4682      	mov	sl, r0
 80085ee:	468b      	mov	fp, r1
 80085f0:	ddd5      	ble.n	800859e <_strtod_l+0x3ae>
 80085f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085f4:	1b2c      	subs	r4, r5, r4
 80085f6:	441c      	add	r4, r3
 80085f8:	2c00      	cmp	r4, #0
 80085fa:	f340 8096 	ble.w	800872a <_strtod_l+0x53a>
 80085fe:	f014 030f 	ands.w	r3, r4, #15
 8008602:	d00a      	beq.n	800861a <_strtod_l+0x42a>
 8008604:	495e      	ldr	r1, [pc, #376]	@ (8008780 <_strtod_l+0x590>)
 8008606:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800860a:	4652      	mov	r2, sl
 800860c:	465b      	mov	r3, fp
 800860e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008612:	f7f8 f811 	bl	8000638 <__aeabi_dmul>
 8008616:	4682      	mov	sl, r0
 8008618:	468b      	mov	fp, r1
 800861a:	f034 040f 	bics.w	r4, r4, #15
 800861e:	d073      	beq.n	8008708 <_strtod_l+0x518>
 8008620:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008624:	dd48      	ble.n	80086b8 <_strtod_l+0x4c8>
 8008626:	2400      	movs	r4, #0
 8008628:	46a0      	mov	r8, r4
 800862a:	940a      	str	r4, [sp, #40]	@ 0x28
 800862c:	46a1      	mov	r9, r4
 800862e:	9a05      	ldr	r2, [sp, #20]
 8008630:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008788 <_strtod_l+0x598>
 8008634:	2322      	movs	r3, #34	@ 0x22
 8008636:	6013      	str	r3, [r2, #0]
 8008638:	f04f 0a00 	mov.w	sl, #0
 800863c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800863e:	2b00      	cmp	r3, #0
 8008640:	f43f ae0f 	beq.w	8008262 <_strtod_l+0x72>
 8008644:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008646:	9805      	ldr	r0, [sp, #20]
 8008648:	f002 fda2 	bl	800b190 <_Bfree>
 800864c:	9805      	ldr	r0, [sp, #20]
 800864e:	4649      	mov	r1, r9
 8008650:	f002 fd9e 	bl	800b190 <_Bfree>
 8008654:	9805      	ldr	r0, [sp, #20]
 8008656:	4641      	mov	r1, r8
 8008658:	f002 fd9a 	bl	800b190 <_Bfree>
 800865c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800865e:	9805      	ldr	r0, [sp, #20]
 8008660:	f002 fd96 	bl	800b190 <_Bfree>
 8008664:	9805      	ldr	r0, [sp, #20]
 8008666:	4621      	mov	r1, r4
 8008668:	f002 fd92 	bl	800b190 <_Bfree>
 800866c:	e5f9      	b.n	8008262 <_strtod_l+0x72>
 800866e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008670:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008674:	4293      	cmp	r3, r2
 8008676:	dbbc      	blt.n	80085f2 <_strtod_l+0x402>
 8008678:	4c41      	ldr	r4, [pc, #260]	@ (8008780 <_strtod_l+0x590>)
 800867a:	f1c5 050f 	rsb	r5, r5, #15
 800867e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008682:	4652      	mov	r2, sl
 8008684:	465b      	mov	r3, fp
 8008686:	e9d1 0100 	ldrd	r0, r1, [r1]
 800868a:	f7f7 ffd5 	bl	8000638 <__aeabi_dmul>
 800868e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008690:	1b5d      	subs	r5, r3, r5
 8008692:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008696:	e9d4 2300 	ldrd	r2, r3, [r4]
 800869a:	e78f      	b.n	80085bc <_strtod_l+0x3cc>
 800869c:	3316      	adds	r3, #22
 800869e:	dba8      	blt.n	80085f2 <_strtod_l+0x402>
 80086a0:	4b37      	ldr	r3, [pc, #220]	@ (8008780 <_strtod_l+0x590>)
 80086a2:	eba9 0808 	sub.w	r8, r9, r8
 80086a6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80086aa:	e9d8 2300 	ldrd	r2, r3, [r8]
 80086ae:	4650      	mov	r0, sl
 80086b0:	4659      	mov	r1, fp
 80086b2:	f7f8 f8eb 	bl	800088c <__aeabi_ddiv>
 80086b6:	e783      	b.n	80085c0 <_strtod_l+0x3d0>
 80086b8:	4b32      	ldr	r3, [pc, #200]	@ (8008784 <_strtod_l+0x594>)
 80086ba:	9308      	str	r3, [sp, #32]
 80086bc:	2300      	movs	r3, #0
 80086be:	1124      	asrs	r4, r4, #4
 80086c0:	4650      	mov	r0, sl
 80086c2:	4659      	mov	r1, fp
 80086c4:	461e      	mov	r6, r3
 80086c6:	2c01      	cmp	r4, #1
 80086c8:	dc21      	bgt.n	800870e <_strtod_l+0x51e>
 80086ca:	b10b      	cbz	r3, 80086d0 <_strtod_l+0x4e0>
 80086cc:	4682      	mov	sl, r0
 80086ce:	468b      	mov	fp, r1
 80086d0:	492c      	ldr	r1, [pc, #176]	@ (8008784 <_strtod_l+0x594>)
 80086d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80086d6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80086da:	4652      	mov	r2, sl
 80086dc:	465b      	mov	r3, fp
 80086de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086e2:	f7f7 ffa9 	bl	8000638 <__aeabi_dmul>
 80086e6:	4b28      	ldr	r3, [pc, #160]	@ (8008788 <_strtod_l+0x598>)
 80086e8:	460a      	mov	r2, r1
 80086ea:	400b      	ands	r3, r1
 80086ec:	4927      	ldr	r1, [pc, #156]	@ (800878c <_strtod_l+0x59c>)
 80086ee:	428b      	cmp	r3, r1
 80086f0:	4682      	mov	sl, r0
 80086f2:	d898      	bhi.n	8008626 <_strtod_l+0x436>
 80086f4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80086f8:	428b      	cmp	r3, r1
 80086fa:	bf86      	itte	hi
 80086fc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008790 <_strtod_l+0x5a0>
 8008700:	f04f 3aff 	movhi.w	sl, #4294967295
 8008704:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008708:	2300      	movs	r3, #0
 800870a:	9308      	str	r3, [sp, #32]
 800870c:	e07a      	b.n	8008804 <_strtod_l+0x614>
 800870e:	07e2      	lsls	r2, r4, #31
 8008710:	d505      	bpl.n	800871e <_strtod_l+0x52e>
 8008712:	9b08      	ldr	r3, [sp, #32]
 8008714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008718:	f7f7 ff8e 	bl	8000638 <__aeabi_dmul>
 800871c:	2301      	movs	r3, #1
 800871e:	9a08      	ldr	r2, [sp, #32]
 8008720:	3208      	adds	r2, #8
 8008722:	3601      	adds	r6, #1
 8008724:	1064      	asrs	r4, r4, #1
 8008726:	9208      	str	r2, [sp, #32]
 8008728:	e7cd      	b.n	80086c6 <_strtod_l+0x4d6>
 800872a:	d0ed      	beq.n	8008708 <_strtod_l+0x518>
 800872c:	4264      	negs	r4, r4
 800872e:	f014 020f 	ands.w	r2, r4, #15
 8008732:	d00a      	beq.n	800874a <_strtod_l+0x55a>
 8008734:	4b12      	ldr	r3, [pc, #72]	@ (8008780 <_strtod_l+0x590>)
 8008736:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800873a:	4650      	mov	r0, sl
 800873c:	4659      	mov	r1, fp
 800873e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008742:	f7f8 f8a3 	bl	800088c <__aeabi_ddiv>
 8008746:	4682      	mov	sl, r0
 8008748:	468b      	mov	fp, r1
 800874a:	1124      	asrs	r4, r4, #4
 800874c:	d0dc      	beq.n	8008708 <_strtod_l+0x518>
 800874e:	2c1f      	cmp	r4, #31
 8008750:	dd20      	ble.n	8008794 <_strtod_l+0x5a4>
 8008752:	2400      	movs	r4, #0
 8008754:	46a0      	mov	r8, r4
 8008756:	940a      	str	r4, [sp, #40]	@ 0x28
 8008758:	46a1      	mov	r9, r4
 800875a:	9a05      	ldr	r2, [sp, #20]
 800875c:	2322      	movs	r3, #34	@ 0x22
 800875e:	f04f 0a00 	mov.w	sl, #0
 8008762:	f04f 0b00 	mov.w	fp, #0
 8008766:	6013      	str	r3, [r2, #0]
 8008768:	e768      	b.n	800863c <_strtod_l+0x44c>
 800876a:	bf00      	nop
 800876c:	0800c64e 	.word	0x0800c64e
 8008770:	0800c4ec 	.word	0x0800c4ec
 8008774:	0800c646 	.word	0x0800c646
 8008778:	0800c72d 	.word	0x0800c72d
 800877c:	0800c729 	.word	0x0800c729
 8008780:	0800c890 	.word	0x0800c890
 8008784:	0800c868 	.word	0x0800c868
 8008788:	7ff00000 	.word	0x7ff00000
 800878c:	7ca00000 	.word	0x7ca00000
 8008790:	7fefffff 	.word	0x7fefffff
 8008794:	f014 0310 	ands.w	r3, r4, #16
 8008798:	bf18      	it	ne
 800879a:	236a      	movne	r3, #106	@ 0x6a
 800879c:	4ea9      	ldr	r6, [pc, #676]	@ (8008a44 <_strtod_l+0x854>)
 800879e:	9308      	str	r3, [sp, #32]
 80087a0:	4650      	mov	r0, sl
 80087a2:	4659      	mov	r1, fp
 80087a4:	2300      	movs	r3, #0
 80087a6:	07e2      	lsls	r2, r4, #31
 80087a8:	d504      	bpl.n	80087b4 <_strtod_l+0x5c4>
 80087aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80087ae:	f7f7 ff43 	bl	8000638 <__aeabi_dmul>
 80087b2:	2301      	movs	r3, #1
 80087b4:	1064      	asrs	r4, r4, #1
 80087b6:	f106 0608 	add.w	r6, r6, #8
 80087ba:	d1f4      	bne.n	80087a6 <_strtod_l+0x5b6>
 80087bc:	b10b      	cbz	r3, 80087c2 <_strtod_l+0x5d2>
 80087be:	4682      	mov	sl, r0
 80087c0:	468b      	mov	fp, r1
 80087c2:	9b08      	ldr	r3, [sp, #32]
 80087c4:	b1b3      	cbz	r3, 80087f4 <_strtod_l+0x604>
 80087c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80087ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	4659      	mov	r1, fp
 80087d2:	dd0f      	ble.n	80087f4 <_strtod_l+0x604>
 80087d4:	2b1f      	cmp	r3, #31
 80087d6:	dd55      	ble.n	8008884 <_strtod_l+0x694>
 80087d8:	2b34      	cmp	r3, #52	@ 0x34
 80087da:	bfde      	ittt	le
 80087dc:	f04f 33ff 	movle.w	r3, #4294967295
 80087e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80087e4:	4093      	lslle	r3, r2
 80087e6:	f04f 0a00 	mov.w	sl, #0
 80087ea:	bfcc      	ite	gt
 80087ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80087f0:	ea03 0b01 	andle.w	fp, r3, r1
 80087f4:	2200      	movs	r2, #0
 80087f6:	2300      	movs	r3, #0
 80087f8:	4650      	mov	r0, sl
 80087fa:	4659      	mov	r1, fp
 80087fc:	f7f8 f984 	bl	8000b08 <__aeabi_dcmpeq>
 8008800:	2800      	cmp	r0, #0
 8008802:	d1a6      	bne.n	8008752 <_strtod_l+0x562>
 8008804:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008806:	9300      	str	r3, [sp, #0]
 8008808:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800880a:	9805      	ldr	r0, [sp, #20]
 800880c:	462b      	mov	r3, r5
 800880e:	463a      	mov	r2, r7
 8008810:	f002 fd26 	bl	800b260 <__s2b>
 8008814:	900a      	str	r0, [sp, #40]	@ 0x28
 8008816:	2800      	cmp	r0, #0
 8008818:	f43f af05 	beq.w	8008626 <_strtod_l+0x436>
 800881c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800881e:	2a00      	cmp	r2, #0
 8008820:	eba9 0308 	sub.w	r3, r9, r8
 8008824:	bfa8      	it	ge
 8008826:	2300      	movge	r3, #0
 8008828:	9312      	str	r3, [sp, #72]	@ 0x48
 800882a:	2400      	movs	r4, #0
 800882c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008830:	9316      	str	r3, [sp, #88]	@ 0x58
 8008832:	46a0      	mov	r8, r4
 8008834:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008836:	9805      	ldr	r0, [sp, #20]
 8008838:	6859      	ldr	r1, [r3, #4]
 800883a:	f002 fc69 	bl	800b110 <_Balloc>
 800883e:	4681      	mov	r9, r0
 8008840:	2800      	cmp	r0, #0
 8008842:	f43f aef4 	beq.w	800862e <_strtod_l+0x43e>
 8008846:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008848:	691a      	ldr	r2, [r3, #16]
 800884a:	3202      	adds	r2, #2
 800884c:	f103 010c 	add.w	r1, r3, #12
 8008850:	0092      	lsls	r2, r2, #2
 8008852:	300c      	adds	r0, #12
 8008854:	f001 f98b 	bl	8009b6e <memcpy>
 8008858:	ec4b ab10 	vmov	d0, sl, fp
 800885c:	9805      	ldr	r0, [sp, #20]
 800885e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008860:	a91b      	add	r1, sp, #108	@ 0x6c
 8008862:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008866:	f003 f837 	bl	800b8d8 <__d2b>
 800886a:	901a      	str	r0, [sp, #104]	@ 0x68
 800886c:	2800      	cmp	r0, #0
 800886e:	f43f aede 	beq.w	800862e <_strtod_l+0x43e>
 8008872:	9805      	ldr	r0, [sp, #20]
 8008874:	2101      	movs	r1, #1
 8008876:	f002 fd89 	bl	800b38c <__i2b>
 800887a:	4680      	mov	r8, r0
 800887c:	b948      	cbnz	r0, 8008892 <_strtod_l+0x6a2>
 800887e:	f04f 0800 	mov.w	r8, #0
 8008882:	e6d4      	b.n	800862e <_strtod_l+0x43e>
 8008884:	f04f 32ff 	mov.w	r2, #4294967295
 8008888:	fa02 f303 	lsl.w	r3, r2, r3
 800888c:	ea03 0a0a 	and.w	sl, r3, sl
 8008890:	e7b0      	b.n	80087f4 <_strtod_l+0x604>
 8008892:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008894:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008896:	2d00      	cmp	r5, #0
 8008898:	bfab      	itete	ge
 800889a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800889c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800889e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80088a0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80088a2:	bfac      	ite	ge
 80088a4:	18ef      	addge	r7, r5, r3
 80088a6:	1b5e      	sublt	r6, r3, r5
 80088a8:	9b08      	ldr	r3, [sp, #32]
 80088aa:	1aed      	subs	r5, r5, r3
 80088ac:	4415      	add	r5, r2
 80088ae:	4b66      	ldr	r3, [pc, #408]	@ (8008a48 <_strtod_l+0x858>)
 80088b0:	3d01      	subs	r5, #1
 80088b2:	429d      	cmp	r5, r3
 80088b4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80088b8:	da50      	bge.n	800895c <_strtod_l+0x76c>
 80088ba:	1b5b      	subs	r3, r3, r5
 80088bc:	2b1f      	cmp	r3, #31
 80088be:	eba2 0203 	sub.w	r2, r2, r3
 80088c2:	f04f 0101 	mov.w	r1, #1
 80088c6:	dc3d      	bgt.n	8008944 <_strtod_l+0x754>
 80088c8:	fa01 f303 	lsl.w	r3, r1, r3
 80088cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80088ce:	2300      	movs	r3, #0
 80088d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80088d2:	18bd      	adds	r5, r7, r2
 80088d4:	9b08      	ldr	r3, [sp, #32]
 80088d6:	42af      	cmp	r7, r5
 80088d8:	4416      	add	r6, r2
 80088da:	441e      	add	r6, r3
 80088dc:	463b      	mov	r3, r7
 80088de:	bfa8      	it	ge
 80088e0:	462b      	movge	r3, r5
 80088e2:	42b3      	cmp	r3, r6
 80088e4:	bfa8      	it	ge
 80088e6:	4633      	movge	r3, r6
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	bfc2      	ittt	gt
 80088ec:	1aed      	subgt	r5, r5, r3
 80088ee:	1af6      	subgt	r6, r6, r3
 80088f0:	1aff      	subgt	r7, r7, r3
 80088f2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	dd16      	ble.n	8008926 <_strtod_l+0x736>
 80088f8:	4641      	mov	r1, r8
 80088fa:	9805      	ldr	r0, [sp, #20]
 80088fc:	461a      	mov	r2, r3
 80088fe:	f002 fe05 	bl	800b50c <__pow5mult>
 8008902:	4680      	mov	r8, r0
 8008904:	2800      	cmp	r0, #0
 8008906:	d0ba      	beq.n	800887e <_strtod_l+0x68e>
 8008908:	4601      	mov	r1, r0
 800890a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800890c:	9805      	ldr	r0, [sp, #20]
 800890e:	f002 fd53 	bl	800b3b8 <__multiply>
 8008912:	900e      	str	r0, [sp, #56]	@ 0x38
 8008914:	2800      	cmp	r0, #0
 8008916:	f43f ae8a 	beq.w	800862e <_strtod_l+0x43e>
 800891a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800891c:	9805      	ldr	r0, [sp, #20]
 800891e:	f002 fc37 	bl	800b190 <_Bfree>
 8008922:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008924:	931a      	str	r3, [sp, #104]	@ 0x68
 8008926:	2d00      	cmp	r5, #0
 8008928:	dc1d      	bgt.n	8008966 <_strtod_l+0x776>
 800892a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800892c:	2b00      	cmp	r3, #0
 800892e:	dd23      	ble.n	8008978 <_strtod_l+0x788>
 8008930:	4649      	mov	r1, r9
 8008932:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008934:	9805      	ldr	r0, [sp, #20]
 8008936:	f002 fde9 	bl	800b50c <__pow5mult>
 800893a:	4681      	mov	r9, r0
 800893c:	b9e0      	cbnz	r0, 8008978 <_strtod_l+0x788>
 800893e:	f04f 0900 	mov.w	r9, #0
 8008942:	e674      	b.n	800862e <_strtod_l+0x43e>
 8008944:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008948:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800894c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008950:	35e2      	adds	r5, #226	@ 0xe2
 8008952:	fa01 f305 	lsl.w	r3, r1, r5
 8008956:	9310      	str	r3, [sp, #64]	@ 0x40
 8008958:	9113      	str	r1, [sp, #76]	@ 0x4c
 800895a:	e7ba      	b.n	80088d2 <_strtod_l+0x6e2>
 800895c:	2300      	movs	r3, #0
 800895e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008960:	2301      	movs	r3, #1
 8008962:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008964:	e7b5      	b.n	80088d2 <_strtod_l+0x6e2>
 8008966:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008968:	9805      	ldr	r0, [sp, #20]
 800896a:	462a      	mov	r2, r5
 800896c:	f002 fe28 	bl	800b5c0 <__lshift>
 8008970:	901a      	str	r0, [sp, #104]	@ 0x68
 8008972:	2800      	cmp	r0, #0
 8008974:	d1d9      	bne.n	800892a <_strtod_l+0x73a>
 8008976:	e65a      	b.n	800862e <_strtod_l+0x43e>
 8008978:	2e00      	cmp	r6, #0
 800897a:	dd07      	ble.n	800898c <_strtod_l+0x79c>
 800897c:	4649      	mov	r1, r9
 800897e:	9805      	ldr	r0, [sp, #20]
 8008980:	4632      	mov	r2, r6
 8008982:	f002 fe1d 	bl	800b5c0 <__lshift>
 8008986:	4681      	mov	r9, r0
 8008988:	2800      	cmp	r0, #0
 800898a:	d0d8      	beq.n	800893e <_strtod_l+0x74e>
 800898c:	2f00      	cmp	r7, #0
 800898e:	dd08      	ble.n	80089a2 <_strtod_l+0x7b2>
 8008990:	4641      	mov	r1, r8
 8008992:	9805      	ldr	r0, [sp, #20]
 8008994:	463a      	mov	r2, r7
 8008996:	f002 fe13 	bl	800b5c0 <__lshift>
 800899a:	4680      	mov	r8, r0
 800899c:	2800      	cmp	r0, #0
 800899e:	f43f ae46 	beq.w	800862e <_strtod_l+0x43e>
 80089a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80089a4:	9805      	ldr	r0, [sp, #20]
 80089a6:	464a      	mov	r2, r9
 80089a8:	f002 fe92 	bl	800b6d0 <__mdiff>
 80089ac:	4604      	mov	r4, r0
 80089ae:	2800      	cmp	r0, #0
 80089b0:	f43f ae3d 	beq.w	800862e <_strtod_l+0x43e>
 80089b4:	68c3      	ldr	r3, [r0, #12]
 80089b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80089b8:	2300      	movs	r3, #0
 80089ba:	60c3      	str	r3, [r0, #12]
 80089bc:	4641      	mov	r1, r8
 80089be:	f002 fe6b 	bl	800b698 <__mcmp>
 80089c2:	2800      	cmp	r0, #0
 80089c4:	da46      	bge.n	8008a54 <_strtod_l+0x864>
 80089c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089c8:	ea53 030a 	orrs.w	r3, r3, sl
 80089cc:	d16c      	bne.n	8008aa8 <_strtod_l+0x8b8>
 80089ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d168      	bne.n	8008aa8 <_strtod_l+0x8b8>
 80089d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80089da:	0d1b      	lsrs	r3, r3, #20
 80089dc:	051b      	lsls	r3, r3, #20
 80089de:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80089e2:	d961      	bls.n	8008aa8 <_strtod_l+0x8b8>
 80089e4:	6963      	ldr	r3, [r4, #20]
 80089e6:	b913      	cbnz	r3, 80089ee <_strtod_l+0x7fe>
 80089e8:	6923      	ldr	r3, [r4, #16]
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	dd5c      	ble.n	8008aa8 <_strtod_l+0x8b8>
 80089ee:	4621      	mov	r1, r4
 80089f0:	2201      	movs	r2, #1
 80089f2:	9805      	ldr	r0, [sp, #20]
 80089f4:	f002 fde4 	bl	800b5c0 <__lshift>
 80089f8:	4641      	mov	r1, r8
 80089fa:	4604      	mov	r4, r0
 80089fc:	f002 fe4c 	bl	800b698 <__mcmp>
 8008a00:	2800      	cmp	r0, #0
 8008a02:	dd51      	ble.n	8008aa8 <_strtod_l+0x8b8>
 8008a04:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a08:	9a08      	ldr	r2, [sp, #32]
 8008a0a:	0d1b      	lsrs	r3, r3, #20
 8008a0c:	051b      	lsls	r3, r3, #20
 8008a0e:	2a00      	cmp	r2, #0
 8008a10:	d06b      	beq.n	8008aea <_strtod_l+0x8fa>
 8008a12:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008a16:	d868      	bhi.n	8008aea <_strtod_l+0x8fa>
 8008a18:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008a1c:	f67f ae9d 	bls.w	800875a <_strtod_l+0x56a>
 8008a20:	4b0a      	ldr	r3, [pc, #40]	@ (8008a4c <_strtod_l+0x85c>)
 8008a22:	4650      	mov	r0, sl
 8008a24:	4659      	mov	r1, fp
 8008a26:	2200      	movs	r2, #0
 8008a28:	f7f7 fe06 	bl	8000638 <__aeabi_dmul>
 8008a2c:	4b08      	ldr	r3, [pc, #32]	@ (8008a50 <_strtod_l+0x860>)
 8008a2e:	400b      	ands	r3, r1
 8008a30:	4682      	mov	sl, r0
 8008a32:	468b      	mov	fp, r1
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f47f ae05 	bne.w	8008644 <_strtod_l+0x454>
 8008a3a:	9a05      	ldr	r2, [sp, #20]
 8008a3c:	2322      	movs	r3, #34	@ 0x22
 8008a3e:	6013      	str	r3, [r2, #0]
 8008a40:	e600      	b.n	8008644 <_strtod_l+0x454>
 8008a42:	bf00      	nop
 8008a44:	0800c518 	.word	0x0800c518
 8008a48:	fffffc02 	.word	0xfffffc02
 8008a4c:	39500000 	.word	0x39500000
 8008a50:	7ff00000 	.word	0x7ff00000
 8008a54:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008a58:	d165      	bne.n	8008b26 <_strtod_l+0x936>
 8008a5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008a5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a60:	b35a      	cbz	r2, 8008aba <_strtod_l+0x8ca>
 8008a62:	4a9f      	ldr	r2, [pc, #636]	@ (8008ce0 <_strtod_l+0xaf0>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d12b      	bne.n	8008ac0 <_strtod_l+0x8d0>
 8008a68:	9b08      	ldr	r3, [sp, #32]
 8008a6a:	4651      	mov	r1, sl
 8008a6c:	b303      	cbz	r3, 8008ab0 <_strtod_l+0x8c0>
 8008a6e:	4b9d      	ldr	r3, [pc, #628]	@ (8008ce4 <_strtod_l+0xaf4>)
 8008a70:	465a      	mov	r2, fp
 8008a72:	4013      	ands	r3, r2
 8008a74:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008a78:	f04f 32ff 	mov.w	r2, #4294967295
 8008a7c:	d81b      	bhi.n	8008ab6 <_strtod_l+0x8c6>
 8008a7e:	0d1b      	lsrs	r3, r3, #20
 8008a80:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008a84:	fa02 f303 	lsl.w	r3, r2, r3
 8008a88:	4299      	cmp	r1, r3
 8008a8a:	d119      	bne.n	8008ac0 <_strtod_l+0x8d0>
 8008a8c:	4b96      	ldr	r3, [pc, #600]	@ (8008ce8 <_strtod_l+0xaf8>)
 8008a8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d102      	bne.n	8008a9a <_strtod_l+0x8aa>
 8008a94:	3101      	adds	r1, #1
 8008a96:	f43f adca 	beq.w	800862e <_strtod_l+0x43e>
 8008a9a:	4b92      	ldr	r3, [pc, #584]	@ (8008ce4 <_strtod_l+0xaf4>)
 8008a9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a9e:	401a      	ands	r2, r3
 8008aa0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008aa4:	f04f 0a00 	mov.w	sl, #0
 8008aa8:	9b08      	ldr	r3, [sp, #32]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1b8      	bne.n	8008a20 <_strtod_l+0x830>
 8008aae:	e5c9      	b.n	8008644 <_strtod_l+0x454>
 8008ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab4:	e7e8      	b.n	8008a88 <_strtod_l+0x898>
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	e7e6      	b.n	8008a88 <_strtod_l+0x898>
 8008aba:	ea53 030a 	orrs.w	r3, r3, sl
 8008abe:	d0a1      	beq.n	8008a04 <_strtod_l+0x814>
 8008ac0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008ac2:	b1db      	cbz	r3, 8008afc <_strtod_l+0x90c>
 8008ac4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ac6:	4213      	tst	r3, r2
 8008ac8:	d0ee      	beq.n	8008aa8 <_strtod_l+0x8b8>
 8008aca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008acc:	9a08      	ldr	r2, [sp, #32]
 8008ace:	4650      	mov	r0, sl
 8008ad0:	4659      	mov	r1, fp
 8008ad2:	b1bb      	cbz	r3, 8008b04 <_strtod_l+0x914>
 8008ad4:	f7ff fb6d 	bl	80081b2 <sulp>
 8008ad8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008adc:	ec53 2b10 	vmov	r2, r3, d0
 8008ae0:	f7f7 fbf4 	bl	80002cc <__adddf3>
 8008ae4:	4682      	mov	sl, r0
 8008ae6:	468b      	mov	fp, r1
 8008ae8:	e7de      	b.n	8008aa8 <_strtod_l+0x8b8>
 8008aea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008aee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008af2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008af6:	f04f 3aff 	mov.w	sl, #4294967295
 8008afa:	e7d5      	b.n	8008aa8 <_strtod_l+0x8b8>
 8008afc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008afe:	ea13 0f0a 	tst.w	r3, sl
 8008b02:	e7e1      	b.n	8008ac8 <_strtod_l+0x8d8>
 8008b04:	f7ff fb55 	bl	80081b2 <sulp>
 8008b08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b0c:	ec53 2b10 	vmov	r2, r3, d0
 8008b10:	f7f7 fbda 	bl	80002c8 <__aeabi_dsub>
 8008b14:	2200      	movs	r2, #0
 8008b16:	2300      	movs	r3, #0
 8008b18:	4682      	mov	sl, r0
 8008b1a:	468b      	mov	fp, r1
 8008b1c:	f7f7 fff4 	bl	8000b08 <__aeabi_dcmpeq>
 8008b20:	2800      	cmp	r0, #0
 8008b22:	d0c1      	beq.n	8008aa8 <_strtod_l+0x8b8>
 8008b24:	e619      	b.n	800875a <_strtod_l+0x56a>
 8008b26:	4641      	mov	r1, r8
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f002 ff2d 	bl	800b988 <__ratio>
 8008b2e:	ec57 6b10 	vmov	r6, r7, d0
 8008b32:	2200      	movs	r2, #0
 8008b34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008b38:	4630      	mov	r0, r6
 8008b3a:	4639      	mov	r1, r7
 8008b3c:	f7f7 fff8 	bl	8000b30 <__aeabi_dcmple>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	d06f      	beq.n	8008c24 <_strtod_l+0xa34>
 8008b44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d17a      	bne.n	8008c40 <_strtod_l+0xa50>
 8008b4a:	f1ba 0f00 	cmp.w	sl, #0
 8008b4e:	d158      	bne.n	8008c02 <_strtod_l+0xa12>
 8008b50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d15a      	bne.n	8008c10 <_strtod_l+0xa20>
 8008b5a:	4b64      	ldr	r3, [pc, #400]	@ (8008cec <_strtod_l+0xafc>)
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	4630      	mov	r0, r6
 8008b60:	4639      	mov	r1, r7
 8008b62:	f7f7 ffdb 	bl	8000b1c <__aeabi_dcmplt>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	d159      	bne.n	8008c1e <_strtod_l+0xa2e>
 8008b6a:	4630      	mov	r0, r6
 8008b6c:	4639      	mov	r1, r7
 8008b6e:	4b60      	ldr	r3, [pc, #384]	@ (8008cf0 <_strtod_l+0xb00>)
 8008b70:	2200      	movs	r2, #0
 8008b72:	f7f7 fd61 	bl	8000638 <__aeabi_dmul>
 8008b76:	4606      	mov	r6, r0
 8008b78:	460f      	mov	r7, r1
 8008b7a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008b7e:	9606      	str	r6, [sp, #24]
 8008b80:	9307      	str	r3, [sp, #28]
 8008b82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b86:	4d57      	ldr	r5, [pc, #348]	@ (8008ce4 <_strtod_l+0xaf4>)
 8008b88:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008b8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b8e:	401d      	ands	r5, r3
 8008b90:	4b58      	ldr	r3, [pc, #352]	@ (8008cf4 <_strtod_l+0xb04>)
 8008b92:	429d      	cmp	r5, r3
 8008b94:	f040 80b2 	bne.w	8008cfc <_strtod_l+0xb0c>
 8008b98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b9a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008b9e:	ec4b ab10 	vmov	d0, sl, fp
 8008ba2:	f002 fe29 	bl	800b7f8 <__ulp>
 8008ba6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008baa:	ec51 0b10 	vmov	r0, r1, d0
 8008bae:	f7f7 fd43 	bl	8000638 <__aeabi_dmul>
 8008bb2:	4652      	mov	r2, sl
 8008bb4:	465b      	mov	r3, fp
 8008bb6:	f7f7 fb89 	bl	80002cc <__adddf3>
 8008bba:	460b      	mov	r3, r1
 8008bbc:	4949      	ldr	r1, [pc, #292]	@ (8008ce4 <_strtod_l+0xaf4>)
 8008bbe:	4a4e      	ldr	r2, [pc, #312]	@ (8008cf8 <_strtod_l+0xb08>)
 8008bc0:	4019      	ands	r1, r3
 8008bc2:	4291      	cmp	r1, r2
 8008bc4:	4682      	mov	sl, r0
 8008bc6:	d942      	bls.n	8008c4e <_strtod_l+0xa5e>
 8008bc8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008bca:	4b47      	ldr	r3, [pc, #284]	@ (8008ce8 <_strtod_l+0xaf8>)
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d103      	bne.n	8008bd8 <_strtod_l+0x9e8>
 8008bd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	f43f ad2b 	beq.w	800862e <_strtod_l+0x43e>
 8008bd8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008ce8 <_strtod_l+0xaf8>
 8008bdc:	f04f 3aff 	mov.w	sl, #4294967295
 8008be0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008be2:	9805      	ldr	r0, [sp, #20]
 8008be4:	f002 fad4 	bl	800b190 <_Bfree>
 8008be8:	9805      	ldr	r0, [sp, #20]
 8008bea:	4649      	mov	r1, r9
 8008bec:	f002 fad0 	bl	800b190 <_Bfree>
 8008bf0:	9805      	ldr	r0, [sp, #20]
 8008bf2:	4641      	mov	r1, r8
 8008bf4:	f002 facc 	bl	800b190 <_Bfree>
 8008bf8:	9805      	ldr	r0, [sp, #20]
 8008bfa:	4621      	mov	r1, r4
 8008bfc:	f002 fac8 	bl	800b190 <_Bfree>
 8008c00:	e618      	b.n	8008834 <_strtod_l+0x644>
 8008c02:	f1ba 0f01 	cmp.w	sl, #1
 8008c06:	d103      	bne.n	8008c10 <_strtod_l+0xa20>
 8008c08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	f43f ada5 	beq.w	800875a <_strtod_l+0x56a>
 8008c10:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008cc0 <_strtod_l+0xad0>
 8008c14:	4f35      	ldr	r7, [pc, #212]	@ (8008cec <_strtod_l+0xafc>)
 8008c16:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008c1a:	2600      	movs	r6, #0
 8008c1c:	e7b1      	b.n	8008b82 <_strtod_l+0x992>
 8008c1e:	4f34      	ldr	r7, [pc, #208]	@ (8008cf0 <_strtod_l+0xb00>)
 8008c20:	2600      	movs	r6, #0
 8008c22:	e7aa      	b.n	8008b7a <_strtod_l+0x98a>
 8008c24:	4b32      	ldr	r3, [pc, #200]	@ (8008cf0 <_strtod_l+0xb00>)
 8008c26:	4630      	mov	r0, r6
 8008c28:	4639      	mov	r1, r7
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f7f7 fd04 	bl	8000638 <__aeabi_dmul>
 8008c30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c32:	4606      	mov	r6, r0
 8008c34:	460f      	mov	r7, r1
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d09f      	beq.n	8008b7a <_strtod_l+0x98a>
 8008c3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008c3e:	e7a0      	b.n	8008b82 <_strtod_l+0x992>
 8008c40:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008cc8 <_strtod_l+0xad8>
 8008c44:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008c48:	ec57 6b17 	vmov	r6, r7, d7
 8008c4c:	e799      	b.n	8008b82 <_strtod_l+0x992>
 8008c4e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008c52:	9b08      	ldr	r3, [sp, #32]
 8008c54:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1c1      	bne.n	8008be0 <_strtod_l+0x9f0>
 8008c5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c60:	0d1b      	lsrs	r3, r3, #20
 8008c62:	051b      	lsls	r3, r3, #20
 8008c64:	429d      	cmp	r5, r3
 8008c66:	d1bb      	bne.n	8008be0 <_strtod_l+0x9f0>
 8008c68:	4630      	mov	r0, r6
 8008c6a:	4639      	mov	r1, r7
 8008c6c:	f7f8 f844 	bl	8000cf8 <__aeabi_d2lz>
 8008c70:	f7f7 fcb4 	bl	80005dc <__aeabi_l2d>
 8008c74:	4602      	mov	r2, r0
 8008c76:	460b      	mov	r3, r1
 8008c78:	4630      	mov	r0, r6
 8008c7a:	4639      	mov	r1, r7
 8008c7c:	f7f7 fb24 	bl	80002c8 <__aeabi_dsub>
 8008c80:	460b      	mov	r3, r1
 8008c82:	4602      	mov	r2, r0
 8008c84:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008c88:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008c8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c8e:	ea46 060a 	orr.w	r6, r6, sl
 8008c92:	431e      	orrs	r6, r3
 8008c94:	d06f      	beq.n	8008d76 <_strtod_l+0xb86>
 8008c96:	a30e      	add	r3, pc, #56	@ (adr r3, 8008cd0 <_strtod_l+0xae0>)
 8008c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9c:	f7f7 ff3e 	bl	8000b1c <__aeabi_dcmplt>
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	f47f accf 	bne.w	8008644 <_strtod_l+0x454>
 8008ca6:	a30c      	add	r3, pc, #48	@ (adr r3, 8008cd8 <_strtod_l+0xae8>)
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008cb0:	f7f7 ff52 	bl	8000b58 <__aeabi_dcmpgt>
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	d093      	beq.n	8008be0 <_strtod_l+0x9f0>
 8008cb8:	e4c4      	b.n	8008644 <_strtod_l+0x454>
 8008cba:	bf00      	nop
 8008cbc:	f3af 8000 	nop.w
 8008cc0:	00000000 	.word	0x00000000
 8008cc4:	bff00000 	.word	0xbff00000
 8008cc8:	00000000 	.word	0x00000000
 8008ccc:	3ff00000 	.word	0x3ff00000
 8008cd0:	94a03595 	.word	0x94a03595
 8008cd4:	3fdfffff 	.word	0x3fdfffff
 8008cd8:	35afe535 	.word	0x35afe535
 8008cdc:	3fe00000 	.word	0x3fe00000
 8008ce0:	000fffff 	.word	0x000fffff
 8008ce4:	7ff00000 	.word	0x7ff00000
 8008ce8:	7fefffff 	.word	0x7fefffff
 8008cec:	3ff00000 	.word	0x3ff00000
 8008cf0:	3fe00000 	.word	0x3fe00000
 8008cf4:	7fe00000 	.word	0x7fe00000
 8008cf8:	7c9fffff 	.word	0x7c9fffff
 8008cfc:	9b08      	ldr	r3, [sp, #32]
 8008cfe:	b323      	cbz	r3, 8008d4a <_strtod_l+0xb5a>
 8008d00:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008d04:	d821      	bhi.n	8008d4a <_strtod_l+0xb5a>
 8008d06:	a328      	add	r3, pc, #160	@ (adr r3, 8008da8 <_strtod_l+0xbb8>)
 8008d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	4639      	mov	r1, r7
 8008d10:	f7f7 ff0e 	bl	8000b30 <__aeabi_dcmple>
 8008d14:	b1a0      	cbz	r0, 8008d40 <_strtod_l+0xb50>
 8008d16:	4639      	mov	r1, r7
 8008d18:	4630      	mov	r0, r6
 8008d1a:	f7f7 ff65 	bl	8000be8 <__aeabi_d2uiz>
 8008d1e:	2801      	cmp	r0, #1
 8008d20:	bf38      	it	cc
 8008d22:	2001      	movcc	r0, #1
 8008d24:	f7f7 fc0e 	bl	8000544 <__aeabi_ui2d>
 8008d28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d2a:	4606      	mov	r6, r0
 8008d2c:	460f      	mov	r7, r1
 8008d2e:	b9fb      	cbnz	r3, 8008d70 <_strtod_l+0xb80>
 8008d30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008d34:	9014      	str	r0, [sp, #80]	@ 0x50
 8008d36:	9315      	str	r3, [sp, #84]	@ 0x54
 8008d38:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008d3c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008d40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008d42:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008d46:	1b5b      	subs	r3, r3, r5
 8008d48:	9311      	str	r3, [sp, #68]	@ 0x44
 8008d4a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008d4e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008d52:	f002 fd51 	bl	800b7f8 <__ulp>
 8008d56:	4650      	mov	r0, sl
 8008d58:	ec53 2b10 	vmov	r2, r3, d0
 8008d5c:	4659      	mov	r1, fp
 8008d5e:	f7f7 fc6b 	bl	8000638 <__aeabi_dmul>
 8008d62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008d66:	f7f7 fab1 	bl	80002cc <__adddf3>
 8008d6a:	4682      	mov	sl, r0
 8008d6c:	468b      	mov	fp, r1
 8008d6e:	e770      	b.n	8008c52 <_strtod_l+0xa62>
 8008d70:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008d74:	e7e0      	b.n	8008d38 <_strtod_l+0xb48>
 8008d76:	a30e      	add	r3, pc, #56	@ (adr r3, 8008db0 <_strtod_l+0xbc0>)
 8008d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7c:	f7f7 fece 	bl	8000b1c <__aeabi_dcmplt>
 8008d80:	e798      	b.n	8008cb4 <_strtod_l+0xac4>
 8008d82:	2300      	movs	r3, #0
 8008d84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d86:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008d88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d8a:	6013      	str	r3, [r2, #0]
 8008d8c:	f7ff ba6d 	b.w	800826a <_strtod_l+0x7a>
 8008d90:	2a65      	cmp	r2, #101	@ 0x65
 8008d92:	f43f ab66 	beq.w	8008462 <_strtod_l+0x272>
 8008d96:	2a45      	cmp	r2, #69	@ 0x45
 8008d98:	f43f ab63 	beq.w	8008462 <_strtod_l+0x272>
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	f7ff bb9e 	b.w	80084de <_strtod_l+0x2ee>
 8008da2:	bf00      	nop
 8008da4:	f3af 8000 	nop.w
 8008da8:	ffc00000 	.word	0xffc00000
 8008dac:	41dfffff 	.word	0x41dfffff
 8008db0:	94a03595 	.word	0x94a03595
 8008db4:	3fcfffff 	.word	0x3fcfffff

08008db8 <strtod>:
 8008db8:	460a      	mov	r2, r1
 8008dba:	4601      	mov	r1, r0
 8008dbc:	4802      	ldr	r0, [pc, #8]	@ (8008dc8 <strtod+0x10>)
 8008dbe:	4b03      	ldr	r3, [pc, #12]	@ (8008dcc <strtod+0x14>)
 8008dc0:	6800      	ldr	r0, [r0, #0]
 8008dc2:	f7ff ba15 	b.w	80081f0 <_strtod_l>
 8008dc6:	bf00      	nop
 8008dc8:	200001a4 	.word	0x200001a4
 8008dcc:	20000038 	.word	0x20000038

08008dd0 <_strtol_l.constprop.0>:
 8008dd0:	2b24      	cmp	r3, #36	@ 0x24
 8008dd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd6:	4686      	mov	lr, r0
 8008dd8:	4690      	mov	r8, r2
 8008dda:	d801      	bhi.n	8008de0 <_strtol_l.constprop.0+0x10>
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d106      	bne.n	8008dee <_strtol_l.constprop.0+0x1e>
 8008de0:	f000 fe98 	bl	8009b14 <__errno>
 8008de4:	2316      	movs	r3, #22
 8008de6:	6003      	str	r3, [r0, #0]
 8008de8:	2000      	movs	r0, #0
 8008dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dee:	4834      	ldr	r0, [pc, #208]	@ (8008ec0 <_strtol_l.constprop.0+0xf0>)
 8008df0:	460d      	mov	r5, r1
 8008df2:	462a      	mov	r2, r5
 8008df4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008df8:	5d06      	ldrb	r6, [r0, r4]
 8008dfa:	f016 0608 	ands.w	r6, r6, #8
 8008dfe:	d1f8      	bne.n	8008df2 <_strtol_l.constprop.0+0x22>
 8008e00:	2c2d      	cmp	r4, #45	@ 0x2d
 8008e02:	d12d      	bne.n	8008e60 <_strtol_l.constprop.0+0x90>
 8008e04:	782c      	ldrb	r4, [r5, #0]
 8008e06:	2601      	movs	r6, #1
 8008e08:	1c95      	adds	r5, r2, #2
 8008e0a:	f033 0210 	bics.w	r2, r3, #16
 8008e0e:	d109      	bne.n	8008e24 <_strtol_l.constprop.0+0x54>
 8008e10:	2c30      	cmp	r4, #48	@ 0x30
 8008e12:	d12a      	bne.n	8008e6a <_strtol_l.constprop.0+0x9a>
 8008e14:	782a      	ldrb	r2, [r5, #0]
 8008e16:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008e1a:	2a58      	cmp	r2, #88	@ 0x58
 8008e1c:	d125      	bne.n	8008e6a <_strtol_l.constprop.0+0x9a>
 8008e1e:	786c      	ldrb	r4, [r5, #1]
 8008e20:	2310      	movs	r3, #16
 8008e22:	3502      	adds	r5, #2
 8008e24:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008e28:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	fbbc f9f3 	udiv	r9, ip, r3
 8008e32:	4610      	mov	r0, r2
 8008e34:	fb03 ca19 	mls	sl, r3, r9, ip
 8008e38:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008e3c:	2f09      	cmp	r7, #9
 8008e3e:	d81b      	bhi.n	8008e78 <_strtol_l.constprop.0+0xa8>
 8008e40:	463c      	mov	r4, r7
 8008e42:	42a3      	cmp	r3, r4
 8008e44:	dd27      	ble.n	8008e96 <_strtol_l.constprop.0+0xc6>
 8008e46:	1c57      	adds	r7, r2, #1
 8008e48:	d007      	beq.n	8008e5a <_strtol_l.constprop.0+0x8a>
 8008e4a:	4581      	cmp	r9, r0
 8008e4c:	d320      	bcc.n	8008e90 <_strtol_l.constprop.0+0xc0>
 8008e4e:	d101      	bne.n	8008e54 <_strtol_l.constprop.0+0x84>
 8008e50:	45a2      	cmp	sl, r4
 8008e52:	db1d      	blt.n	8008e90 <_strtol_l.constprop.0+0xc0>
 8008e54:	fb00 4003 	mla	r0, r0, r3, r4
 8008e58:	2201      	movs	r2, #1
 8008e5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e5e:	e7eb      	b.n	8008e38 <_strtol_l.constprop.0+0x68>
 8008e60:	2c2b      	cmp	r4, #43	@ 0x2b
 8008e62:	bf04      	itt	eq
 8008e64:	782c      	ldrbeq	r4, [r5, #0]
 8008e66:	1c95      	addeq	r5, r2, #2
 8008e68:	e7cf      	b.n	8008e0a <_strtol_l.constprop.0+0x3a>
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1da      	bne.n	8008e24 <_strtol_l.constprop.0+0x54>
 8008e6e:	2c30      	cmp	r4, #48	@ 0x30
 8008e70:	bf0c      	ite	eq
 8008e72:	2308      	moveq	r3, #8
 8008e74:	230a      	movne	r3, #10
 8008e76:	e7d5      	b.n	8008e24 <_strtol_l.constprop.0+0x54>
 8008e78:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008e7c:	2f19      	cmp	r7, #25
 8008e7e:	d801      	bhi.n	8008e84 <_strtol_l.constprop.0+0xb4>
 8008e80:	3c37      	subs	r4, #55	@ 0x37
 8008e82:	e7de      	b.n	8008e42 <_strtol_l.constprop.0+0x72>
 8008e84:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008e88:	2f19      	cmp	r7, #25
 8008e8a:	d804      	bhi.n	8008e96 <_strtol_l.constprop.0+0xc6>
 8008e8c:	3c57      	subs	r4, #87	@ 0x57
 8008e8e:	e7d8      	b.n	8008e42 <_strtol_l.constprop.0+0x72>
 8008e90:	f04f 32ff 	mov.w	r2, #4294967295
 8008e94:	e7e1      	b.n	8008e5a <_strtol_l.constprop.0+0x8a>
 8008e96:	1c53      	adds	r3, r2, #1
 8008e98:	d108      	bne.n	8008eac <_strtol_l.constprop.0+0xdc>
 8008e9a:	2322      	movs	r3, #34	@ 0x22
 8008e9c:	f8ce 3000 	str.w	r3, [lr]
 8008ea0:	4660      	mov	r0, ip
 8008ea2:	f1b8 0f00 	cmp.w	r8, #0
 8008ea6:	d0a0      	beq.n	8008dea <_strtol_l.constprop.0+0x1a>
 8008ea8:	1e69      	subs	r1, r5, #1
 8008eaa:	e006      	b.n	8008eba <_strtol_l.constprop.0+0xea>
 8008eac:	b106      	cbz	r6, 8008eb0 <_strtol_l.constprop.0+0xe0>
 8008eae:	4240      	negs	r0, r0
 8008eb0:	f1b8 0f00 	cmp.w	r8, #0
 8008eb4:	d099      	beq.n	8008dea <_strtol_l.constprop.0+0x1a>
 8008eb6:	2a00      	cmp	r2, #0
 8008eb8:	d1f6      	bne.n	8008ea8 <_strtol_l.constprop.0+0xd8>
 8008eba:	f8c8 1000 	str.w	r1, [r8]
 8008ebe:	e794      	b.n	8008dea <_strtol_l.constprop.0+0x1a>
 8008ec0:	0800c541 	.word	0x0800c541

08008ec4 <strtol>:
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	460a      	mov	r2, r1
 8008ec8:	4601      	mov	r1, r0
 8008eca:	4802      	ldr	r0, [pc, #8]	@ (8008ed4 <strtol+0x10>)
 8008ecc:	6800      	ldr	r0, [r0, #0]
 8008ece:	f7ff bf7f 	b.w	8008dd0 <_strtol_l.constprop.0>
 8008ed2:	bf00      	nop
 8008ed4:	200001a4 	.word	0x200001a4

08008ed8 <__cvt>:
 8008ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008edc:	ec57 6b10 	vmov	r6, r7, d0
 8008ee0:	2f00      	cmp	r7, #0
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	463b      	mov	r3, r7
 8008ee8:	bfbb      	ittet	lt
 8008eea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008eee:	461f      	movlt	r7, r3
 8008ef0:	2300      	movge	r3, #0
 8008ef2:	232d      	movlt	r3, #45	@ 0x2d
 8008ef4:	700b      	strb	r3, [r1, #0]
 8008ef6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ef8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008efc:	4691      	mov	r9, r2
 8008efe:	f023 0820 	bic.w	r8, r3, #32
 8008f02:	bfbc      	itt	lt
 8008f04:	4632      	movlt	r2, r6
 8008f06:	4616      	movlt	r6, r2
 8008f08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008f0c:	d005      	beq.n	8008f1a <__cvt+0x42>
 8008f0e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008f12:	d100      	bne.n	8008f16 <__cvt+0x3e>
 8008f14:	3401      	adds	r4, #1
 8008f16:	2102      	movs	r1, #2
 8008f18:	e000      	b.n	8008f1c <__cvt+0x44>
 8008f1a:	2103      	movs	r1, #3
 8008f1c:	ab03      	add	r3, sp, #12
 8008f1e:	9301      	str	r3, [sp, #4]
 8008f20:	ab02      	add	r3, sp, #8
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	ec47 6b10 	vmov	d0, r6, r7
 8008f28:	4653      	mov	r3, sl
 8008f2a:	4622      	mov	r2, r4
 8008f2c:	f000 fee0 	bl	8009cf0 <_dtoa_r>
 8008f30:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008f34:	4605      	mov	r5, r0
 8008f36:	d119      	bne.n	8008f6c <__cvt+0x94>
 8008f38:	f019 0f01 	tst.w	r9, #1
 8008f3c:	d00e      	beq.n	8008f5c <__cvt+0x84>
 8008f3e:	eb00 0904 	add.w	r9, r0, r4
 8008f42:	2200      	movs	r2, #0
 8008f44:	2300      	movs	r3, #0
 8008f46:	4630      	mov	r0, r6
 8008f48:	4639      	mov	r1, r7
 8008f4a:	f7f7 fddd 	bl	8000b08 <__aeabi_dcmpeq>
 8008f4e:	b108      	cbz	r0, 8008f54 <__cvt+0x7c>
 8008f50:	f8cd 900c 	str.w	r9, [sp, #12]
 8008f54:	2230      	movs	r2, #48	@ 0x30
 8008f56:	9b03      	ldr	r3, [sp, #12]
 8008f58:	454b      	cmp	r3, r9
 8008f5a:	d31e      	bcc.n	8008f9a <__cvt+0xc2>
 8008f5c:	9b03      	ldr	r3, [sp, #12]
 8008f5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f60:	1b5b      	subs	r3, r3, r5
 8008f62:	4628      	mov	r0, r5
 8008f64:	6013      	str	r3, [r2, #0]
 8008f66:	b004      	add	sp, #16
 8008f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008f70:	eb00 0904 	add.w	r9, r0, r4
 8008f74:	d1e5      	bne.n	8008f42 <__cvt+0x6a>
 8008f76:	7803      	ldrb	r3, [r0, #0]
 8008f78:	2b30      	cmp	r3, #48	@ 0x30
 8008f7a:	d10a      	bne.n	8008f92 <__cvt+0xba>
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	2300      	movs	r3, #0
 8008f80:	4630      	mov	r0, r6
 8008f82:	4639      	mov	r1, r7
 8008f84:	f7f7 fdc0 	bl	8000b08 <__aeabi_dcmpeq>
 8008f88:	b918      	cbnz	r0, 8008f92 <__cvt+0xba>
 8008f8a:	f1c4 0401 	rsb	r4, r4, #1
 8008f8e:	f8ca 4000 	str.w	r4, [sl]
 8008f92:	f8da 3000 	ldr.w	r3, [sl]
 8008f96:	4499      	add	r9, r3
 8008f98:	e7d3      	b.n	8008f42 <__cvt+0x6a>
 8008f9a:	1c59      	adds	r1, r3, #1
 8008f9c:	9103      	str	r1, [sp, #12]
 8008f9e:	701a      	strb	r2, [r3, #0]
 8008fa0:	e7d9      	b.n	8008f56 <__cvt+0x7e>

08008fa2 <__exponent>:
 8008fa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fa4:	2900      	cmp	r1, #0
 8008fa6:	bfba      	itte	lt
 8008fa8:	4249      	neglt	r1, r1
 8008faa:	232d      	movlt	r3, #45	@ 0x2d
 8008fac:	232b      	movge	r3, #43	@ 0x2b
 8008fae:	2909      	cmp	r1, #9
 8008fb0:	7002      	strb	r2, [r0, #0]
 8008fb2:	7043      	strb	r3, [r0, #1]
 8008fb4:	dd29      	ble.n	800900a <__exponent+0x68>
 8008fb6:	f10d 0307 	add.w	r3, sp, #7
 8008fba:	461d      	mov	r5, r3
 8008fbc:	270a      	movs	r7, #10
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	fbb1 f6f7 	udiv	r6, r1, r7
 8008fc4:	fb07 1416 	mls	r4, r7, r6, r1
 8008fc8:	3430      	adds	r4, #48	@ 0x30
 8008fca:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008fce:	460c      	mov	r4, r1
 8008fd0:	2c63      	cmp	r4, #99	@ 0x63
 8008fd2:	f103 33ff 	add.w	r3, r3, #4294967295
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	dcf1      	bgt.n	8008fbe <__exponent+0x1c>
 8008fda:	3130      	adds	r1, #48	@ 0x30
 8008fdc:	1e94      	subs	r4, r2, #2
 8008fde:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008fe2:	1c41      	adds	r1, r0, #1
 8008fe4:	4623      	mov	r3, r4
 8008fe6:	42ab      	cmp	r3, r5
 8008fe8:	d30a      	bcc.n	8009000 <__exponent+0x5e>
 8008fea:	f10d 0309 	add.w	r3, sp, #9
 8008fee:	1a9b      	subs	r3, r3, r2
 8008ff0:	42ac      	cmp	r4, r5
 8008ff2:	bf88      	it	hi
 8008ff4:	2300      	movhi	r3, #0
 8008ff6:	3302      	adds	r3, #2
 8008ff8:	4403      	add	r3, r0
 8008ffa:	1a18      	subs	r0, r3, r0
 8008ffc:	b003      	add	sp, #12
 8008ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009000:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009004:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009008:	e7ed      	b.n	8008fe6 <__exponent+0x44>
 800900a:	2330      	movs	r3, #48	@ 0x30
 800900c:	3130      	adds	r1, #48	@ 0x30
 800900e:	7083      	strb	r3, [r0, #2]
 8009010:	70c1      	strb	r1, [r0, #3]
 8009012:	1d03      	adds	r3, r0, #4
 8009014:	e7f1      	b.n	8008ffa <__exponent+0x58>
	...

08009018 <_printf_float>:
 8009018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800901c:	b08d      	sub	sp, #52	@ 0x34
 800901e:	460c      	mov	r4, r1
 8009020:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009024:	4616      	mov	r6, r2
 8009026:	461f      	mov	r7, r3
 8009028:	4605      	mov	r5, r0
 800902a:	f000 fd29 	bl	8009a80 <_localeconv_r>
 800902e:	6803      	ldr	r3, [r0, #0]
 8009030:	9304      	str	r3, [sp, #16]
 8009032:	4618      	mov	r0, r3
 8009034:	f7f7 f93c 	bl	80002b0 <strlen>
 8009038:	2300      	movs	r3, #0
 800903a:	930a      	str	r3, [sp, #40]	@ 0x28
 800903c:	f8d8 3000 	ldr.w	r3, [r8]
 8009040:	9005      	str	r0, [sp, #20]
 8009042:	3307      	adds	r3, #7
 8009044:	f023 0307 	bic.w	r3, r3, #7
 8009048:	f103 0208 	add.w	r2, r3, #8
 800904c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009050:	f8d4 b000 	ldr.w	fp, [r4]
 8009054:	f8c8 2000 	str.w	r2, [r8]
 8009058:	e9d3 8900 	ldrd	r8, r9, [r3]
 800905c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009060:	9307      	str	r3, [sp, #28]
 8009062:	f8cd 8018 	str.w	r8, [sp, #24]
 8009066:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800906a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800906e:	4b9c      	ldr	r3, [pc, #624]	@ (80092e0 <_printf_float+0x2c8>)
 8009070:	f04f 32ff 	mov.w	r2, #4294967295
 8009074:	f7f7 fd7a 	bl	8000b6c <__aeabi_dcmpun>
 8009078:	bb70      	cbnz	r0, 80090d8 <_printf_float+0xc0>
 800907a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800907e:	4b98      	ldr	r3, [pc, #608]	@ (80092e0 <_printf_float+0x2c8>)
 8009080:	f04f 32ff 	mov.w	r2, #4294967295
 8009084:	f7f7 fd54 	bl	8000b30 <__aeabi_dcmple>
 8009088:	bb30      	cbnz	r0, 80090d8 <_printf_float+0xc0>
 800908a:	2200      	movs	r2, #0
 800908c:	2300      	movs	r3, #0
 800908e:	4640      	mov	r0, r8
 8009090:	4649      	mov	r1, r9
 8009092:	f7f7 fd43 	bl	8000b1c <__aeabi_dcmplt>
 8009096:	b110      	cbz	r0, 800909e <_printf_float+0x86>
 8009098:	232d      	movs	r3, #45	@ 0x2d
 800909a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800909e:	4a91      	ldr	r2, [pc, #580]	@ (80092e4 <_printf_float+0x2cc>)
 80090a0:	4b91      	ldr	r3, [pc, #580]	@ (80092e8 <_printf_float+0x2d0>)
 80090a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80090a6:	bf94      	ite	ls
 80090a8:	4690      	movls	r8, r2
 80090aa:	4698      	movhi	r8, r3
 80090ac:	2303      	movs	r3, #3
 80090ae:	6123      	str	r3, [r4, #16]
 80090b0:	f02b 0304 	bic.w	r3, fp, #4
 80090b4:	6023      	str	r3, [r4, #0]
 80090b6:	f04f 0900 	mov.w	r9, #0
 80090ba:	9700      	str	r7, [sp, #0]
 80090bc:	4633      	mov	r3, r6
 80090be:	aa0b      	add	r2, sp, #44	@ 0x2c
 80090c0:	4621      	mov	r1, r4
 80090c2:	4628      	mov	r0, r5
 80090c4:	f000 f9d2 	bl	800946c <_printf_common>
 80090c8:	3001      	adds	r0, #1
 80090ca:	f040 808d 	bne.w	80091e8 <_printf_float+0x1d0>
 80090ce:	f04f 30ff 	mov.w	r0, #4294967295
 80090d2:	b00d      	add	sp, #52	@ 0x34
 80090d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d8:	4642      	mov	r2, r8
 80090da:	464b      	mov	r3, r9
 80090dc:	4640      	mov	r0, r8
 80090de:	4649      	mov	r1, r9
 80090e0:	f7f7 fd44 	bl	8000b6c <__aeabi_dcmpun>
 80090e4:	b140      	cbz	r0, 80090f8 <_printf_float+0xe0>
 80090e6:	464b      	mov	r3, r9
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	bfbc      	itt	lt
 80090ec:	232d      	movlt	r3, #45	@ 0x2d
 80090ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80090f2:	4a7e      	ldr	r2, [pc, #504]	@ (80092ec <_printf_float+0x2d4>)
 80090f4:	4b7e      	ldr	r3, [pc, #504]	@ (80092f0 <_printf_float+0x2d8>)
 80090f6:	e7d4      	b.n	80090a2 <_printf_float+0x8a>
 80090f8:	6863      	ldr	r3, [r4, #4]
 80090fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80090fe:	9206      	str	r2, [sp, #24]
 8009100:	1c5a      	adds	r2, r3, #1
 8009102:	d13b      	bne.n	800917c <_printf_float+0x164>
 8009104:	2306      	movs	r3, #6
 8009106:	6063      	str	r3, [r4, #4]
 8009108:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800910c:	2300      	movs	r3, #0
 800910e:	6022      	str	r2, [r4, #0]
 8009110:	9303      	str	r3, [sp, #12]
 8009112:	ab0a      	add	r3, sp, #40	@ 0x28
 8009114:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009118:	ab09      	add	r3, sp, #36	@ 0x24
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	6861      	ldr	r1, [r4, #4]
 800911e:	ec49 8b10 	vmov	d0, r8, r9
 8009122:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009126:	4628      	mov	r0, r5
 8009128:	f7ff fed6 	bl	8008ed8 <__cvt>
 800912c:	9b06      	ldr	r3, [sp, #24]
 800912e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009130:	2b47      	cmp	r3, #71	@ 0x47
 8009132:	4680      	mov	r8, r0
 8009134:	d129      	bne.n	800918a <_printf_float+0x172>
 8009136:	1cc8      	adds	r0, r1, #3
 8009138:	db02      	blt.n	8009140 <_printf_float+0x128>
 800913a:	6863      	ldr	r3, [r4, #4]
 800913c:	4299      	cmp	r1, r3
 800913e:	dd41      	ble.n	80091c4 <_printf_float+0x1ac>
 8009140:	f1aa 0a02 	sub.w	sl, sl, #2
 8009144:	fa5f fa8a 	uxtb.w	sl, sl
 8009148:	3901      	subs	r1, #1
 800914a:	4652      	mov	r2, sl
 800914c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009150:	9109      	str	r1, [sp, #36]	@ 0x24
 8009152:	f7ff ff26 	bl	8008fa2 <__exponent>
 8009156:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009158:	1813      	adds	r3, r2, r0
 800915a:	2a01      	cmp	r2, #1
 800915c:	4681      	mov	r9, r0
 800915e:	6123      	str	r3, [r4, #16]
 8009160:	dc02      	bgt.n	8009168 <_printf_float+0x150>
 8009162:	6822      	ldr	r2, [r4, #0]
 8009164:	07d2      	lsls	r2, r2, #31
 8009166:	d501      	bpl.n	800916c <_printf_float+0x154>
 8009168:	3301      	adds	r3, #1
 800916a:	6123      	str	r3, [r4, #16]
 800916c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009170:	2b00      	cmp	r3, #0
 8009172:	d0a2      	beq.n	80090ba <_printf_float+0xa2>
 8009174:	232d      	movs	r3, #45	@ 0x2d
 8009176:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800917a:	e79e      	b.n	80090ba <_printf_float+0xa2>
 800917c:	9a06      	ldr	r2, [sp, #24]
 800917e:	2a47      	cmp	r2, #71	@ 0x47
 8009180:	d1c2      	bne.n	8009108 <_printf_float+0xf0>
 8009182:	2b00      	cmp	r3, #0
 8009184:	d1c0      	bne.n	8009108 <_printf_float+0xf0>
 8009186:	2301      	movs	r3, #1
 8009188:	e7bd      	b.n	8009106 <_printf_float+0xee>
 800918a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800918e:	d9db      	bls.n	8009148 <_printf_float+0x130>
 8009190:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009194:	d118      	bne.n	80091c8 <_printf_float+0x1b0>
 8009196:	2900      	cmp	r1, #0
 8009198:	6863      	ldr	r3, [r4, #4]
 800919a:	dd0b      	ble.n	80091b4 <_printf_float+0x19c>
 800919c:	6121      	str	r1, [r4, #16]
 800919e:	b913      	cbnz	r3, 80091a6 <_printf_float+0x18e>
 80091a0:	6822      	ldr	r2, [r4, #0]
 80091a2:	07d0      	lsls	r0, r2, #31
 80091a4:	d502      	bpl.n	80091ac <_printf_float+0x194>
 80091a6:	3301      	adds	r3, #1
 80091a8:	440b      	add	r3, r1
 80091aa:	6123      	str	r3, [r4, #16]
 80091ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 80091ae:	f04f 0900 	mov.w	r9, #0
 80091b2:	e7db      	b.n	800916c <_printf_float+0x154>
 80091b4:	b913      	cbnz	r3, 80091bc <_printf_float+0x1a4>
 80091b6:	6822      	ldr	r2, [r4, #0]
 80091b8:	07d2      	lsls	r2, r2, #31
 80091ba:	d501      	bpl.n	80091c0 <_printf_float+0x1a8>
 80091bc:	3302      	adds	r3, #2
 80091be:	e7f4      	b.n	80091aa <_printf_float+0x192>
 80091c0:	2301      	movs	r3, #1
 80091c2:	e7f2      	b.n	80091aa <_printf_float+0x192>
 80091c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80091c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091ca:	4299      	cmp	r1, r3
 80091cc:	db05      	blt.n	80091da <_printf_float+0x1c2>
 80091ce:	6823      	ldr	r3, [r4, #0]
 80091d0:	6121      	str	r1, [r4, #16]
 80091d2:	07d8      	lsls	r0, r3, #31
 80091d4:	d5ea      	bpl.n	80091ac <_printf_float+0x194>
 80091d6:	1c4b      	adds	r3, r1, #1
 80091d8:	e7e7      	b.n	80091aa <_printf_float+0x192>
 80091da:	2900      	cmp	r1, #0
 80091dc:	bfd4      	ite	le
 80091de:	f1c1 0202 	rsble	r2, r1, #2
 80091e2:	2201      	movgt	r2, #1
 80091e4:	4413      	add	r3, r2
 80091e6:	e7e0      	b.n	80091aa <_printf_float+0x192>
 80091e8:	6823      	ldr	r3, [r4, #0]
 80091ea:	055a      	lsls	r2, r3, #21
 80091ec:	d407      	bmi.n	80091fe <_printf_float+0x1e6>
 80091ee:	6923      	ldr	r3, [r4, #16]
 80091f0:	4642      	mov	r2, r8
 80091f2:	4631      	mov	r1, r6
 80091f4:	4628      	mov	r0, r5
 80091f6:	47b8      	blx	r7
 80091f8:	3001      	adds	r0, #1
 80091fa:	d12b      	bne.n	8009254 <_printf_float+0x23c>
 80091fc:	e767      	b.n	80090ce <_printf_float+0xb6>
 80091fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009202:	f240 80dd 	bls.w	80093c0 <_printf_float+0x3a8>
 8009206:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800920a:	2200      	movs	r2, #0
 800920c:	2300      	movs	r3, #0
 800920e:	f7f7 fc7b 	bl	8000b08 <__aeabi_dcmpeq>
 8009212:	2800      	cmp	r0, #0
 8009214:	d033      	beq.n	800927e <_printf_float+0x266>
 8009216:	4a37      	ldr	r2, [pc, #220]	@ (80092f4 <_printf_float+0x2dc>)
 8009218:	2301      	movs	r3, #1
 800921a:	4631      	mov	r1, r6
 800921c:	4628      	mov	r0, r5
 800921e:	47b8      	blx	r7
 8009220:	3001      	adds	r0, #1
 8009222:	f43f af54 	beq.w	80090ce <_printf_float+0xb6>
 8009226:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800922a:	4543      	cmp	r3, r8
 800922c:	db02      	blt.n	8009234 <_printf_float+0x21c>
 800922e:	6823      	ldr	r3, [r4, #0]
 8009230:	07d8      	lsls	r0, r3, #31
 8009232:	d50f      	bpl.n	8009254 <_printf_float+0x23c>
 8009234:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009238:	4631      	mov	r1, r6
 800923a:	4628      	mov	r0, r5
 800923c:	47b8      	blx	r7
 800923e:	3001      	adds	r0, #1
 8009240:	f43f af45 	beq.w	80090ce <_printf_float+0xb6>
 8009244:	f04f 0900 	mov.w	r9, #0
 8009248:	f108 38ff 	add.w	r8, r8, #4294967295
 800924c:	f104 0a1a 	add.w	sl, r4, #26
 8009250:	45c8      	cmp	r8, r9
 8009252:	dc09      	bgt.n	8009268 <_printf_float+0x250>
 8009254:	6823      	ldr	r3, [r4, #0]
 8009256:	079b      	lsls	r3, r3, #30
 8009258:	f100 8103 	bmi.w	8009462 <_printf_float+0x44a>
 800925c:	68e0      	ldr	r0, [r4, #12]
 800925e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009260:	4298      	cmp	r0, r3
 8009262:	bfb8      	it	lt
 8009264:	4618      	movlt	r0, r3
 8009266:	e734      	b.n	80090d2 <_printf_float+0xba>
 8009268:	2301      	movs	r3, #1
 800926a:	4652      	mov	r2, sl
 800926c:	4631      	mov	r1, r6
 800926e:	4628      	mov	r0, r5
 8009270:	47b8      	blx	r7
 8009272:	3001      	adds	r0, #1
 8009274:	f43f af2b 	beq.w	80090ce <_printf_float+0xb6>
 8009278:	f109 0901 	add.w	r9, r9, #1
 800927c:	e7e8      	b.n	8009250 <_printf_float+0x238>
 800927e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009280:	2b00      	cmp	r3, #0
 8009282:	dc39      	bgt.n	80092f8 <_printf_float+0x2e0>
 8009284:	4a1b      	ldr	r2, [pc, #108]	@ (80092f4 <_printf_float+0x2dc>)
 8009286:	2301      	movs	r3, #1
 8009288:	4631      	mov	r1, r6
 800928a:	4628      	mov	r0, r5
 800928c:	47b8      	blx	r7
 800928e:	3001      	adds	r0, #1
 8009290:	f43f af1d 	beq.w	80090ce <_printf_float+0xb6>
 8009294:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009298:	ea59 0303 	orrs.w	r3, r9, r3
 800929c:	d102      	bne.n	80092a4 <_printf_float+0x28c>
 800929e:	6823      	ldr	r3, [r4, #0]
 80092a0:	07d9      	lsls	r1, r3, #31
 80092a2:	d5d7      	bpl.n	8009254 <_printf_float+0x23c>
 80092a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092a8:	4631      	mov	r1, r6
 80092aa:	4628      	mov	r0, r5
 80092ac:	47b8      	blx	r7
 80092ae:	3001      	adds	r0, #1
 80092b0:	f43f af0d 	beq.w	80090ce <_printf_float+0xb6>
 80092b4:	f04f 0a00 	mov.w	sl, #0
 80092b8:	f104 0b1a 	add.w	fp, r4, #26
 80092bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092be:	425b      	negs	r3, r3
 80092c0:	4553      	cmp	r3, sl
 80092c2:	dc01      	bgt.n	80092c8 <_printf_float+0x2b0>
 80092c4:	464b      	mov	r3, r9
 80092c6:	e793      	b.n	80091f0 <_printf_float+0x1d8>
 80092c8:	2301      	movs	r3, #1
 80092ca:	465a      	mov	r2, fp
 80092cc:	4631      	mov	r1, r6
 80092ce:	4628      	mov	r0, r5
 80092d0:	47b8      	blx	r7
 80092d2:	3001      	adds	r0, #1
 80092d4:	f43f aefb 	beq.w	80090ce <_printf_float+0xb6>
 80092d8:	f10a 0a01 	add.w	sl, sl, #1
 80092dc:	e7ee      	b.n	80092bc <_printf_float+0x2a4>
 80092de:	bf00      	nop
 80092e0:	7fefffff 	.word	0x7fefffff
 80092e4:	0800c641 	.word	0x0800c641
 80092e8:	0800c645 	.word	0x0800c645
 80092ec:	0800c649 	.word	0x0800c649
 80092f0:	0800c64d 	.word	0x0800c64d
 80092f4:	0800c651 	.word	0x0800c651
 80092f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80092fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80092fe:	4553      	cmp	r3, sl
 8009300:	bfa8      	it	ge
 8009302:	4653      	movge	r3, sl
 8009304:	2b00      	cmp	r3, #0
 8009306:	4699      	mov	r9, r3
 8009308:	dc36      	bgt.n	8009378 <_printf_float+0x360>
 800930a:	f04f 0b00 	mov.w	fp, #0
 800930e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009312:	f104 021a 	add.w	r2, r4, #26
 8009316:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009318:	9306      	str	r3, [sp, #24]
 800931a:	eba3 0309 	sub.w	r3, r3, r9
 800931e:	455b      	cmp	r3, fp
 8009320:	dc31      	bgt.n	8009386 <_printf_float+0x36e>
 8009322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009324:	459a      	cmp	sl, r3
 8009326:	dc3a      	bgt.n	800939e <_printf_float+0x386>
 8009328:	6823      	ldr	r3, [r4, #0]
 800932a:	07da      	lsls	r2, r3, #31
 800932c:	d437      	bmi.n	800939e <_printf_float+0x386>
 800932e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009330:	ebaa 0903 	sub.w	r9, sl, r3
 8009334:	9b06      	ldr	r3, [sp, #24]
 8009336:	ebaa 0303 	sub.w	r3, sl, r3
 800933a:	4599      	cmp	r9, r3
 800933c:	bfa8      	it	ge
 800933e:	4699      	movge	r9, r3
 8009340:	f1b9 0f00 	cmp.w	r9, #0
 8009344:	dc33      	bgt.n	80093ae <_printf_float+0x396>
 8009346:	f04f 0800 	mov.w	r8, #0
 800934a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800934e:	f104 0b1a 	add.w	fp, r4, #26
 8009352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009354:	ebaa 0303 	sub.w	r3, sl, r3
 8009358:	eba3 0309 	sub.w	r3, r3, r9
 800935c:	4543      	cmp	r3, r8
 800935e:	f77f af79 	ble.w	8009254 <_printf_float+0x23c>
 8009362:	2301      	movs	r3, #1
 8009364:	465a      	mov	r2, fp
 8009366:	4631      	mov	r1, r6
 8009368:	4628      	mov	r0, r5
 800936a:	47b8      	blx	r7
 800936c:	3001      	adds	r0, #1
 800936e:	f43f aeae 	beq.w	80090ce <_printf_float+0xb6>
 8009372:	f108 0801 	add.w	r8, r8, #1
 8009376:	e7ec      	b.n	8009352 <_printf_float+0x33a>
 8009378:	4642      	mov	r2, r8
 800937a:	4631      	mov	r1, r6
 800937c:	4628      	mov	r0, r5
 800937e:	47b8      	blx	r7
 8009380:	3001      	adds	r0, #1
 8009382:	d1c2      	bne.n	800930a <_printf_float+0x2f2>
 8009384:	e6a3      	b.n	80090ce <_printf_float+0xb6>
 8009386:	2301      	movs	r3, #1
 8009388:	4631      	mov	r1, r6
 800938a:	4628      	mov	r0, r5
 800938c:	9206      	str	r2, [sp, #24]
 800938e:	47b8      	blx	r7
 8009390:	3001      	adds	r0, #1
 8009392:	f43f ae9c 	beq.w	80090ce <_printf_float+0xb6>
 8009396:	9a06      	ldr	r2, [sp, #24]
 8009398:	f10b 0b01 	add.w	fp, fp, #1
 800939c:	e7bb      	b.n	8009316 <_printf_float+0x2fe>
 800939e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093a2:	4631      	mov	r1, r6
 80093a4:	4628      	mov	r0, r5
 80093a6:	47b8      	blx	r7
 80093a8:	3001      	adds	r0, #1
 80093aa:	d1c0      	bne.n	800932e <_printf_float+0x316>
 80093ac:	e68f      	b.n	80090ce <_printf_float+0xb6>
 80093ae:	9a06      	ldr	r2, [sp, #24]
 80093b0:	464b      	mov	r3, r9
 80093b2:	4442      	add	r2, r8
 80093b4:	4631      	mov	r1, r6
 80093b6:	4628      	mov	r0, r5
 80093b8:	47b8      	blx	r7
 80093ba:	3001      	adds	r0, #1
 80093bc:	d1c3      	bne.n	8009346 <_printf_float+0x32e>
 80093be:	e686      	b.n	80090ce <_printf_float+0xb6>
 80093c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80093c4:	f1ba 0f01 	cmp.w	sl, #1
 80093c8:	dc01      	bgt.n	80093ce <_printf_float+0x3b6>
 80093ca:	07db      	lsls	r3, r3, #31
 80093cc:	d536      	bpl.n	800943c <_printf_float+0x424>
 80093ce:	2301      	movs	r3, #1
 80093d0:	4642      	mov	r2, r8
 80093d2:	4631      	mov	r1, r6
 80093d4:	4628      	mov	r0, r5
 80093d6:	47b8      	blx	r7
 80093d8:	3001      	adds	r0, #1
 80093da:	f43f ae78 	beq.w	80090ce <_printf_float+0xb6>
 80093de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093e2:	4631      	mov	r1, r6
 80093e4:	4628      	mov	r0, r5
 80093e6:	47b8      	blx	r7
 80093e8:	3001      	adds	r0, #1
 80093ea:	f43f ae70 	beq.w	80090ce <_printf_float+0xb6>
 80093ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80093f2:	2200      	movs	r2, #0
 80093f4:	2300      	movs	r3, #0
 80093f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093fa:	f7f7 fb85 	bl	8000b08 <__aeabi_dcmpeq>
 80093fe:	b9c0      	cbnz	r0, 8009432 <_printf_float+0x41a>
 8009400:	4653      	mov	r3, sl
 8009402:	f108 0201 	add.w	r2, r8, #1
 8009406:	4631      	mov	r1, r6
 8009408:	4628      	mov	r0, r5
 800940a:	47b8      	blx	r7
 800940c:	3001      	adds	r0, #1
 800940e:	d10c      	bne.n	800942a <_printf_float+0x412>
 8009410:	e65d      	b.n	80090ce <_printf_float+0xb6>
 8009412:	2301      	movs	r3, #1
 8009414:	465a      	mov	r2, fp
 8009416:	4631      	mov	r1, r6
 8009418:	4628      	mov	r0, r5
 800941a:	47b8      	blx	r7
 800941c:	3001      	adds	r0, #1
 800941e:	f43f ae56 	beq.w	80090ce <_printf_float+0xb6>
 8009422:	f108 0801 	add.w	r8, r8, #1
 8009426:	45d0      	cmp	r8, sl
 8009428:	dbf3      	blt.n	8009412 <_printf_float+0x3fa>
 800942a:	464b      	mov	r3, r9
 800942c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009430:	e6df      	b.n	80091f2 <_printf_float+0x1da>
 8009432:	f04f 0800 	mov.w	r8, #0
 8009436:	f104 0b1a 	add.w	fp, r4, #26
 800943a:	e7f4      	b.n	8009426 <_printf_float+0x40e>
 800943c:	2301      	movs	r3, #1
 800943e:	4642      	mov	r2, r8
 8009440:	e7e1      	b.n	8009406 <_printf_float+0x3ee>
 8009442:	2301      	movs	r3, #1
 8009444:	464a      	mov	r2, r9
 8009446:	4631      	mov	r1, r6
 8009448:	4628      	mov	r0, r5
 800944a:	47b8      	blx	r7
 800944c:	3001      	adds	r0, #1
 800944e:	f43f ae3e 	beq.w	80090ce <_printf_float+0xb6>
 8009452:	f108 0801 	add.w	r8, r8, #1
 8009456:	68e3      	ldr	r3, [r4, #12]
 8009458:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800945a:	1a5b      	subs	r3, r3, r1
 800945c:	4543      	cmp	r3, r8
 800945e:	dcf0      	bgt.n	8009442 <_printf_float+0x42a>
 8009460:	e6fc      	b.n	800925c <_printf_float+0x244>
 8009462:	f04f 0800 	mov.w	r8, #0
 8009466:	f104 0919 	add.w	r9, r4, #25
 800946a:	e7f4      	b.n	8009456 <_printf_float+0x43e>

0800946c <_printf_common>:
 800946c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009470:	4616      	mov	r6, r2
 8009472:	4698      	mov	r8, r3
 8009474:	688a      	ldr	r2, [r1, #8]
 8009476:	690b      	ldr	r3, [r1, #16]
 8009478:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800947c:	4293      	cmp	r3, r2
 800947e:	bfb8      	it	lt
 8009480:	4613      	movlt	r3, r2
 8009482:	6033      	str	r3, [r6, #0]
 8009484:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009488:	4607      	mov	r7, r0
 800948a:	460c      	mov	r4, r1
 800948c:	b10a      	cbz	r2, 8009492 <_printf_common+0x26>
 800948e:	3301      	adds	r3, #1
 8009490:	6033      	str	r3, [r6, #0]
 8009492:	6823      	ldr	r3, [r4, #0]
 8009494:	0699      	lsls	r1, r3, #26
 8009496:	bf42      	ittt	mi
 8009498:	6833      	ldrmi	r3, [r6, #0]
 800949a:	3302      	addmi	r3, #2
 800949c:	6033      	strmi	r3, [r6, #0]
 800949e:	6825      	ldr	r5, [r4, #0]
 80094a0:	f015 0506 	ands.w	r5, r5, #6
 80094a4:	d106      	bne.n	80094b4 <_printf_common+0x48>
 80094a6:	f104 0a19 	add.w	sl, r4, #25
 80094aa:	68e3      	ldr	r3, [r4, #12]
 80094ac:	6832      	ldr	r2, [r6, #0]
 80094ae:	1a9b      	subs	r3, r3, r2
 80094b0:	42ab      	cmp	r3, r5
 80094b2:	dc26      	bgt.n	8009502 <_printf_common+0x96>
 80094b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80094b8:	6822      	ldr	r2, [r4, #0]
 80094ba:	3b00      	subs	r3, #0
 80094bc:	bf18      	it	ne
 80094be:	2301      	movne	r3, #1
 80094c0:	0692      	lsls	r2, r2, #26
 80094c2:	d42b      	bmi.n	800951c <_printf_common+0xb0>
 80094c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80094c8:	4641      	mov	r1, r8
 80094ca:	4638      	mov	r0, r7
 80094cc:	47c8      	blx	r9
 80094ce:	3001      	adds	r0, #1
 80094d0:	d01e      	beq.n	8009510 <_printf_common+0xa4>
 80094d2:	6823      	ldr	r3, [r4, #0]
 80094d4:	6922      	ldr	r2, [r4, #16]
 80094d6:	f003 0306 	and.w	r3, r3, #6
 80094da:	2b04      	cmp	r3, #4
 80094dc:	bf02      	ittt	eq
 80094de:	68e5      	ldreq	r5, [r4, #12]
 80094e0:	6833      	ldreq	r3, [r6, #0]
 80094e2:	1aed      	subeq	r5, r5, r3
 80094e4:	68a3      	ldr	r3, [r4, #8]
 80094e6:	bf0c      	ite	eq
 80094e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094ec:	2500      	movne	r5, #0
 80094ee:	4293      	cmp	r3, r2
 80094f0:	bfc4      	itt	gt
 80094f2:	1a9b      	subgt	r3, r3, r2
 80094f4:	18ed      	addgt	r5, r5, r3
 80094f6:	2600      	movs	r6, #0
 80094f8:	341a      	adds	r4, #26
 80094fa:	42b5      	cmp	r5, r6
 80094fc:	d11a      	bne.n	8009534 <_printf_common+0xc8>
 80094fe:	2000      	movs	r0, #0
 8009500:	e008      	b.n	8009514 <_printf_common+0xa8>
 8009502:	2301      	movs	r3, #1
 8009504:	4652      	mov	r2, sl
 8009506:	4641      	mov	r1, r8
 8009508:	4638      	mov	r0, r7
 800950a:	47c8      	blx	r9
 800950c:	3001      	adds	r0, #1
 800950e:	d103      	bne.n	8009518 <_printf_common+0xac>
 8009510:	f04f 30ff 	mov.w	r0, #4294967295
 8009514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009518:	3501      	adds	r5, #1
 800951a:	e7c6      	b.n	80094aa <_printf_common+0x3e>
 800951c:	18e1      	adds	r1, r4, r3
 800951e:	1c5a      	adds	r2, r3, #1
 8009520:	2030      	movs	r0, #48	@ 0x30
 8009522:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009526:	4422      	add	r2, r4
 8009528:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800952c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009530:	3302      	adds	r3, #2
 8009532:	e7c7      	b.n	80094c4 <_printf_common+0x58>
 8009534:	2301      	movs	r3, #1
 8009536:	4622      	mov	r2, r4
 8009538:	4641      	mov	r1, r8
 800953a:	4638      	mov	r0, r7
 800953c:	47c8      	blx	r9
 800953e:	3001      	adds	r0, #1
 8009540:	d0e6      	beq.n	8009510 <_printf_common+0xa4>
 8009542:	3601      	adds	r6, #1
 8009544:	e7d9      	b.n	80094fa <_printf_common+0x8e>
	...

08009548 <_printf_i>:
 8009548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800954c:	7e0f      	ldrb	r7, [r1, #24]
 800954e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009550:	2f78      	cmp	r7, #120	@ 0x78
 8009552:	4691      	mov	r9, r2
 8009554:	4680      	mov	r8, r0
 8009556:	460c      	mov	r4, r1
 8009558:	469a      	mov	sl, r3
 800955a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800955e:	d807      	bhi.n	8009570 <_printf_i+0x28>
 8009560:	2f62      	cmp	r7, #98	@ 0x62
 8009562:	d80a      	bhi.n	800957a <_printf_i+0x32>
 8009564:	2f00      	cmp	r7, #0
 8009566:	f000 80d2 	beq.w	800970e <_printf_i+0x1c6>
 800956a:	2f58      	cmp	r7, #88	@ 0x58
 800956c:	f000 80b9 	beq.w	80096e2 <_printf_i+0x19a>
 8009570:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009574:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009578:	e03a      	b.n	80095f0 <_printf_i+0xa8>
 800957a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800957e:	2b15      	cmp	r3, #21
 8009580:	d8f6      	bhi.n	8009570 <_printf_i+0x28>
 8009582:	a101      	add	r1, pc, #4	@ (adr r1, 8009588 <_printf_i+0x40>)
 8009584:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009588:	080095e1 	.word	0x080095e1
 800958c:	080095f5 	.word	0x080095f5
 8009590:	08009571 	.word	0x08009571
 8009594:	08009571 	.word	0x08009571
 8009598:	08009571 	.word	0x08009571
 800959c:	08009571 	.word	0x08009571
 80095a0:	080095f5 	.word	0x080095f5
 80095a4:	08009571 	.word	0x08009571
 80095a8:	08009571 	.word	0x08009571
 80095ac:	08009571 	.word	0x08009571
 80095b0:	08009571 	.word	0x08009571
 80095b4:	080096f5 	.word	0x080096f5
 80095b8:	0800961f 	.word	0x0800961f
 80095bc:	080096af 	.word	0x080096af
 80095c0:	08009571 	.word	0x08009571
 80095c4:	08009571 	.word	0x08009571
 80095c8:	08009717 	.word	0x08009717
 80095cc:	08009571 	.word	0x08009571
 80095d0:	0800961f 	.word	0x0800961f
 80095d4:	08009571 	.word	0x08009571
 80095d8:	08009571 	.word	0x08009571
 80095dc:	080096b7 	.word	0x080096b7
 80095e0:	6833      	ldr	r3, [r6, #0]
 80095e2:	1d1a      	adds	r2, r3, #4
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	6032      	str	r2, [r6, #0]
 80095e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80095f0:	2301      	movs	r3, #1
 80095f2:	e09d      	b.n	8009730 <_printf_i+0x1e8>
 80095f4:	6833      	ldr	r3, [r6, #0]
 80095f6:	6820      	ldr	r0, [r4, #0]
 80095f8:	1d19      	adds	r1, r3, #4
 80095fa:	6031      	str	r1, [r6, #0]
 80095fc:	0606      	lsls	r6, r0, #24
 80095fe:	d501      	bpl.n	8009604 <_printf_i+0xbc>
 8009600:	681d      	ldr	r5, [r3, #0]
 8009602:	e003      	b.n	800960c <_printf_i+0xc4>
 8009604:	0645      	lsls	r5, r0, #25
 8009606:	d5fb      	bpl.n	8009600 <_printf_i+0xb8>
 8009608:	f9b3 5000 	ldrsh.w	r5, [r3]
 800960c:	2d00      	cmp	r5, #0
 800960e:	da03      	bge.n	8009618 <_printf_i+0xd0>
 8009610:	232d      	movs	r3, #45	@ 0x2d
 8009612:	426d      	negs	r5, r5
 8009614:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009618:	4859      	ldr	r0, [pc, #356]	@ (8009780 <_printf_i+0x238>)
 800961a:	230a      	movs	r3, #10
 800961c:	e011      	b.n	8009642 <_printf_i+0xfa>
 800961e:	6821      	ldr	r1, [r4, #0]
 8009620:	6833      	ldr	r3, [r6, #0]
 8009622:	0608      	lsls	r0, r1, #24
 8009624:	f853 5b04 	ldr.w	r5, [r3], #4
 8009628:	d402      	bmi.n	8009630 <_printf_i+0xe8>
 800962a:	0649      	lsls	r1, r1, #25
 800962c:	bf48      	it	mi
 800962e:	b2ad      	uxthmi	r5, r5
 8009630:	2f6f      	cmp	r7, #111	@ 0x6f
 8009632:	4853      	ldr	r0, [pc, #332]	@ (8009780 <_printf_i+0x238>)
 8009634:	6033      	str	r3, [r6, #0]
 8009636:	bf14      	ite	ne
 8009638:	230a      	movne	r3, #10
 800963a:	2308      	moveq	r3, #8
 800963c:	2100      	movs	r1, #0
 800963e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009642:	6866      	ldr	r6, [r4, #4]
 8009644:	60a6      	str	r6, [r4, #8]
 8009646:	2e00      	cmp	r6, #0
 8009648:	bfa2      	ittt	ge
 800964a:	6821      	ldrge	r1, [r4, #0]
 800964c:	f021 0104 	bicge.w	r1, r1, #4
 8009650:	6021      	strge	r1, [r4, #0]
 8009652:	b90d      	cbnz	r5, 8009658 <_printf_i+0x110>
 8009654:	2e00      	cmp	r6, #0
 8009656:	d04b      	beq.n	80096f0 <_printf_i+0x1a8>
 8009658:	4616      	mov	r6, r2
 800965a:	fbb5 f1f3 	udiv	r1, r5, r3
 800965e:	fb03 5711 	mls	r7, r3, r1, r5
 8009662:	5dc7      	ldrb	r7, [r0, r7]
 8009664:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009668:	462f      	mov	r7, r5
 800966a:	42bb      	cmp	r3, r7
 800966c:	460d      	mov	r5, r1
 800966e:	d9f4      	bls.n	800965a <_printf_i+0x112>
 8009670:	2b08      	cmp	r3, #8
 8009672:	d10b      	bne.n	800968c <_printf_i+0x144>
 8009674:	6823      	ldr	r3, [r4, #0]
 8009676:	07df      	lsls	r7, r3, #31
 8009678:	d508      	bpl.n	800968c <_printf_i+0x144>
 800967a:	6923      	ldr	r3, [r4, #16]
 800967c:	6861      	ldr	r1, [r4, #4]
 800967e:	4299      	cmp	r1, r3
 8009680:	bfde      	ittt	le
 8009682:	2330      	movle	r3, #48	@ 0x30
 8009684:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009688:	f106 36ff 	addle.w	r6, r6, #4294967295
 800968c:	1b92      	subs	r2, r2, r6
 800968e:	6122      	str	r2, [r4, #16]
 8009690:	f8cd a000 	str.w	sl, [sp]
 8009694:	464b      	mov	r3, r9
 8009696:	aa03      	add	r2, sp, #12
 8009698:	4621      	mov	r1, r4
 800969a:	4640      	mov	r0, r8
 800969c:	f7ff fee6 	bl	800946c <_printf_common>
 80096a0:	3001      	adds	r0, #1
 80096a2:	d14a      	bne.n	800973a <_printf_i+0x1f2>
 80096a4:	f04f 30ff 	mov.w	r0, #4294967295
 80096a8:	b004      	add	sp, #16
 80096aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ae:	6823      	ldr	r3, [r4, #0]
 80096b0:	f043 0320 	orr.w	r3, r3, #32
 80096b4:	6023      	str	r3, [r4, #0]
 80096b6:	4833      	ldr	r0, [pc, #204]	@ (8009784 <_printf_i+0x23c>)
 80096b8:	2778      	movs	r7, #120	@ 0x78
 80096ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80096be:	6823      	ldr	r3, [r4, #0]
 80096c0:	6831      	ldr	r1, [r6, #0]
 80096c2:	061f      	lsls	r7, r3, #24
 80096c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80096c8:	d402      	bmi.n	80096d0 <_printf_i+0x188>
 80096ca:	065f      	lsls	r7, r3, #25
 80096cc:	bf48      	it	mi
 80096ce:	b2ad      	uxthmi	r5, r5
 80096d0:	6031      	str	r1, [r6, #0]
 80096d2:	07d9      	lsls	r1, r3, #31
 80096d4:	bf44      	itt	mi
 80096d6:	f043 0320 	orrmi.w	r3, r3, #32
 80096da:	6023      	strmi	r3, [r4, #0]
 80096dc:	b11d      	cbz	r5, 80096e6 <_printf_i+0x19e>
 80096de:	2310      	movs	r3, #16
 80096e0:	e7ac      	b.n	800963c <_printf_i+0xf4>
 80096e2:	4827      	ldr	r0, [pc, #156]	@ (8009780 <_printf_i+0x238>)
 80096e4:	e7e9      	b.n	80096ba <_printf_i+0x172>
 80096e6:	6823      	ldr	r3, [r4, #0]
 80096e8:	f023 0320 	bic.w	r3, r3, #32
 80096ec:	6023      	str	r3, [r4, #0]
 80096ee:	e7f6      	b.n	80096de <_printf_i+0x196>
 80096f0:	4616      	mov	r6, r2
 80096f2:	e7bd      	b.n	8009670 <_printf_i+0x128>
 80096f4:	6833      	ldr	r3, [r6, #0]
 80096f6:	6825      	ldr	r5, [r4, #0]
 80096f8:	6961      	ldr	r1, [r4, #20]
 80096fa:	1d18      	adds	r0, r3, #4
 80096fc:	6030      	str	r0, [r6, #0]
 80096fe:	062e      	lsls	r6, r5, #24
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	d501      	bpl.n	8009708 <_printf_i+0x1c0>
 8009704:	6019      	str	r1, [r3, #0]
 8009706:	e002      	b.n	800970e <_printf_i+0x1c6>
 8009708:	0668      	lsls	r0, r5, #25
 800970a:	d5fb      	bpl.n	8009704 <_printf_i+0x1bc>
 800970c:	8019      	strh	r1, [r3, #0]
 800970e:	2300      	movs	r3, #0
 8009710:	6123      	str	r3, [r4, #16]
 8009712:	4616      	mov	r6, r2
 8009714:	e7bc      	b.n	8009690 <_printf_i+0x148>
 8009716:	6833      	ldr	r3, [r6, #0]
 8009718:	1d1a      	adds	r2, r3, #4
 800971a:	6032      	str	r2, [r6, #0]
 800971c:	681e      	ldr	r6, [r3, #0]
 800971e:	6862      	ldr	r2, [r4, #4]
 8009720:	2100      	movs	r1, #0
 8009722:	4630      	mov	r0, r6
 8009724:	f7f6 fd74 	bl	8000210 <memchr>
 8009728:	b108      	cbz	r0, 800972e <_printf_i+0x1e6>
 800972a:	1b80      	subs	r0, r0, r6
 800972c:	6060      	str	r0, [r4, #4]
 800972e:	6863      	ldr	r3, [r4, #4]
 8009730:	6123      	str	r3, [r4, #16]
 8009732:	2300      	movs	r3, #0
 8009734:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009738:	e7aa      	b.n	8009690 <_printf_i+0x148>
 800973a:	6923      	ldr	r3, [r4, #16]
 800973c:	4632      	mov	r2, r6
 800973e:	4649      	mov	r1, r9
 8009740:	4640      	mov	r0, r8
 8009742:	47d0      	blx	sl
 8009744:	3001      	adds	r0, #1
 8009746:	d0ad      	beq.n	80096a4 <_printf_i+0x15c>
 8009748:	6823      	ldr	r3, [r4, #0]
 800974a:	079b      	lsls	r3, r3, #30
 800974c:	d413      	bmi.n	8009776 <_printf_i+0x22e>
 800974e:	68e0      	ldr	r0, [r4, #12]
 8009750:	9b03      	ldr	r3, [sp, #12]
 8009752:	4298      	cmp	r0, r3
 8009754:	bfb8      	it	lt
 8009756:	4618      	movlt	r0, r3
 8009758:	e7a6      	b.n	80096a8 <_printf_i+0x160>
 800975a:	2301      	movs	r3, #1
 800975c:	4632      	mov	r2, r6
 800975e:	4649      	mov	r1, r9
 8009760:	4640      	mov	r0, r8
 8009762:	47d0      	blx	sl
 8009764:	3001      	adds	r0, #1
 8009766:	d09d      	beq.n	80096a4 <_printf_i+0x15c>
 8009768:	3501      	adds	r5, #1
 800976a:	68e3      	ldr	r3, [r4, #12]
 800976c:	9903      	ldr	r1, [sp, #12]
 800976e:	1a5b      	subs	r3, r3, r1
 8009770:	42ab      	cmp	r3, r5
 8009772:	dcf2      	bgt.n	800975a <_printf_i+0x212>
 8009774:	e7eb      	b.n	800974e <_printf_i+0x206>
 8009776:	2500      	movs	r5, #0
 8009778:	f104 0619 	add.w	r6, r4, #25
 800977c:	e7f5      	b.n	800976a <_printf_i+0x222>
 800977e:	bf00      	nop
 8009780:	0800c653 	.word	0x0800c653
 8009784:	0800c664 	.word	0x0800c664

08009788 <std>:
 8009788:	2300      	movs	r3, #0
 800978a:	b510      	push	{r4, lr}
 800978c:	4604      	mov	r4, r0
 800978e:	e9c0 3300 	strd	r3, r3, [r0]
 8009792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009796:	6083      	str	r3, [r0, #8]
 8009798:	8181      	strh	r1, [r0, #12]
 800979a:	6643      	str	r3, [r0, #100]	@ 0x64
 800979c:	81c2      	strh	r2, [r0, #14]
 800979e:	6183      	str	r3, [r0, #24]
 80097a0:	4619      	mov	r1, r3
 80097a2:	2208      	movs	r2, #8
 80097a4:	305c      	adds	r0, #92	@ 0x5c
 80097a6:	f000 f8f4 	bl	8009992 <memset>
 80097aa:	4b0d      	ldr	r3, [pc, #52]	@ (80097e0 <std+0x58>)
 80097ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80097ae:	4b0d      	ldr	r3, [pc, #52]	@ (80097e4 <std+0x5c>)
 80097b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80097b2:	4b0d      	ldr	r3, [pc, #52]	@ (80097e8 <std+0x60>)
 80097b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80097b6:	4b0d      	ldr	r3, [pc, #52]	@ (80097ec <std+0x64>)
 80097b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80097ba:	4b0d      	ldr	r3, [pc, #52]	@ (80097f0 <std+0x68>)
 80097bc:	6224      	str	r4, [r4, #32]
 80097be:	429c      	cmp	r4, r3
 80097c0:	d006      	beq.n	80097d0 <std+0x48>
 80097c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80097c6:	4294      	cmp	r4, r2
 80097c8:	d002      	beq.n	80097d0 <std+0x48>
 80097ca:	33d0      	adds	r3, #208	@ 0xd0
 80097cc:	429c      	cmp	r4, r3
 80097ce:	d105      	bne.n	80097dc <std+0x54>
 80097d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80097d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097d8:	f000 b9c6 	b.w	8009b68 <__retarget_lock_init_recursive>
 80097dc:	bd10      	pop	{r4, pc}
 80097de:	bf00      	nop
 80097e0:	0800990d 	.word	0x0800990d
 80097e4:	0800992f 	.word	0x0800992f
 80097e8:	08009967 	.word	0x08009967
 80097ec:	0800998b 	.word	0x0800998b
 80097f0:	20000cf0 	.word	0x20000cf0

080097f4 <stdio_exit_handler>:
 80097f4:	4a02      	ldr	r2, [pc, #8]	@ (8009800 <stdio_exit_handler+0xc>)
 80097f6:	4903      	ldr	r1, [pc, #12]	@ (8009804 <stdio_exit_handler+0x10>)
 80097f8:	4803      	ldr	r0, [pc, #12]	@ (8009808 <stdio_exit_handler+0x14>)
 80097fa:	f000 b869 	b.w	80098d0 <_fwalk_sglue>
 80097fe:	bf00      	nop
 8009800:	2000002c 	.word	0x2000002c
 8009804:	0800bb99 	.word	0x0800bb99
 8009808:	200001a8 	.word	0x200001a8

0800980c <cleanup_stdio>:
 800980c:	6841      	ldr	r1, [r0, #4]
 800980e:	4b0c      	ldr	r3, [pc, #48]	@ (8009840 <cleanup_stdio+0x34>)
 8009810:	4299      	cmp	r1, r3
 8009812:	b510      	push	{r4, lr}
 8009814:	4604      	mov	r4, r0
 8009816:	d001      	beq.n	800981c <cleanup_stdio+0x10>
 8009818:	f002 f9be 	bl	800bb98 <_fflush_r>
 800981c:	68a1      	ldr	r1, [r4, #8]
 800981e:	4b09      	ldr	r3, [pc, #36]	@ (8009844 <cleanup_stdio+0x38>)
 8009820:	4299      	cmp	r1, r3
 8009822:	d002      	beq.n	800982a <cleanup_stdio+0x1e>
 8009824:	4620      	mov	r0, r4
 8009826:	f002 f9b7 	bl	800bb98 <_fflush_r>
 800982a:	68e1      	ldr	r1, [r4, #12]
 800982c:	4b06      	ldr	r3, [pc, #24]	@ (8009848 <cleanup_stdio+0x3c>)
 800982e:	4299      	cmp	r1, r3
 8009830:	d004      	beq.n	800983c <cleanup_stdio+0x30>
 8009832:	4620      	mov	r0, r4
 8009834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009838:	f002 b9ae 	b.w	800bb98 <_fflush_r>
 800983c:	bd10      	pop	{r4, pc}
 800983e:	bf00      	nop
 8009840:	20000cf0 	.word	0x20000cf0
 8009844:	20000d58 	.word	0x20000d58
 8009848:	20000dc0 	.word	0x20000dc0

0800984c <global_stdio_init.part.0>:
 800984c:	b510      	push	{r4, lr}
 800984e:	4b0b      	ldr	r3, [pc, #44]	@ (800987c <global_stdio_init.part.0+0x30>)
 8009850:	4c0b      	ldr	r4, [pc, #44]	@ (8009880 <global_stdio_init.part.0+0x34>)
 8009852:	4a0c      	ldr	r2, [pc, #48]	@ (8009884 <global_stdio_init.part.0+0x38>)
 8009854:	601a      	str	r2, [r3, #0]
 8009856:	4620      	mov	r0, r4
 8009858:	2200      	movs	r2, #0
 800985a:	2104      	movs	r1, #4
 800985c:	f7ff ff94 	bl	8009788 <std>
 8009860:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009864:	2201      	movs	r2, #1
 8009866:	2109      	movs	r1, #9
 8009868:	f7ff ff8e 	bl	8009788 <std>
 800986c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009870:	2202      	movs	r2, #2
 8009872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009876:	2112      	movs	r1, #18
 8009878:	f7ff bf86 	b.w	8009788 <std>
 800987c:	20000e28 	.word	0x20000e28
 8009880:	20000cf0 	.word	0x20000cf0
 8009884:	080097f5 	.word	0x080097f5

08009888 <__sfp_lock_acquire>:
 8009888:	4801      	ldr	r0, [pc, #4]	@ (8009890 <__sfp_lock_acquire+0x8>)
 800988a:	f000 b96e 	b.w	8009b6a <__retarget_lock_acquire_recursive>
 800988e:	bf00      	nop
 8009890:	20000e31 	.word	0x20000e31

08009894 <__sfp_lock_release>:
 8009894:	4801      	ldr	r0, [pc, #4]	@ (800989c <__sfp_lock_release+0x8>)
 8009896:	f000 b969 	b.w	8009b6c <__retarget_lock_release_recursive>
 800989a:	bf00      	nop
 800989c:	20000e31 	.word	0x20000e31

080098a0 <__sinit>:
 80098a0:	b510      	push	{r4, lr}
 80098a2:	4604      	mov	r4, r0
 80098a4:	f7ff fff0 	bl	8009888 <__sfp_lock_acquire>
 80098a8:	6a23      	ldr	r3, [r4, #32]
 80098aa:	b11b      	cbz	r3, 80098b4 <__sinit+0x14>
 80098ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098b0:	f7ff bff0 	b.w	8009894 <__sfp_lock_release>
 80098b4:	4b04      	ldr	r3, [pc, #16]	@ (80098c8 <__sinit+0x28>)
 80098b6:	6223      	str	r3, [r4, #32]
 80098b8:	4b04      	ldr	r3, [pc, #16]	@ (80098cc <__sinit+0x2c>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d1f5      	bne.n	80098ac <__sinit+0xc>
 80098c0:	f7ff ffc4 	bl	800984c <global_stdio_init.part.0>
 80098c4:	e7f2      	b.n	80098ac <__sinit+0xc>
 80098c6:	bf00      	nop
 80098c8:	0800980d 	.word	0x0800980d
 80098cc:	20000e28 	.word	0x20000e28

080098d0 <_fwalk_sglue>:
 80098d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098d4:	4607      	mov	r7, r0
 80098d6:	4688      	mov	r8, r1
 80098d8:	4614      	mov	r4, r2
 80098da:	2600      	movs	r6, #0
 80098dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098e0:	f1b9 0901 	subs.w	r9, r9, #1
 80098e4:	d505      	bpl.n	80098f2 <_fwalk_sglue+0x22>
 80098e6:	6824      	ldr	r4, [r4, #0]
 80098e8:	2c00      	cmp	r4, #0
 80098ea:	d1f7      	bne.n	80098dc <_fwalk_sglue+0xc>
 80098ec:	4630      	mov	r0, r6
 80098ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098f2:	89ab      	ldrh	r3, [r5, #12]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d907      	bls.n	8009908 <_fwalk_sglue+0x38>
 80098f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80098fc:	3301      	adds	r3, #1
 80098fe:	d003      	beq.n	8009908 <_fwalk_sglue+0x38>
 8009900:	4629      	mov	r1, r5
 8009902:	4638      	mov	r0, r7
 8009904:	47c0      	blx	r8
 8009906:	4306      	orrs	r6, r0
 8009908:	3568      	adds	r5, #104	@ 0x68
 800990a:	e7e9      	b.n	80098e0 <_fwalk_sglue+0x10>

0800990c <__sread>:
 800990c:	b510      	push	{r4, lr}
 800990e:	460c      	mov	r4, r1
 8009910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009914:	f000 f8da 	bl	8009acc <_read_r>
 8009918:	2800      	cmp	r0, #0
 800991a:	bfab      	itete	ge
 800991c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800991e:	89a3      	ldrhlt	r3, [r4, #12]
 8009920:	181b      	addge	r3, r3, r0
 8009922:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009926:	bfac      	ite	ge
 8009928:	6563      	strge	r3, [r4, #84]	@ 0x54
 800992a:	81a3      	strhlt	r3, [r4, #12]
 800992c:	bd10      	pop	{r4, pc}

0800992e <__swrite>:
 800992e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009932:	461f      	mov	r7, r3
 8009934:	898b      	ldrh	r3, [r1, #12]
 8009936:	05db      	lsls	r3, r3, #23
 8009938:	4605      	mov	r5, r0
 800993a:	460c      	mov	r4, r1
 800993c:	4616      	mov	r6, r2
 800993e:	d505      	bpl.n	800994c <__swrite+0x1e>
 8009940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009944:	2302      	movs	r3, #2
 8009946:	2200      	movs	r2, #0
 8009948:	f000 f8ae 	bl	8009aa8 <_lseek_r>
 800994c:	89a3      	ldrh	r3, [r4, #12]
 800994e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009952:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009956:	81a3      	strh	r3, [r4, #12]
 8009958:	4632      	mov	r2, r6
 800995a:	463b      	mov	r3, r7
 800995c:	4628      	mov	r0, r5
 800995e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009962:	f000 b8c5 	b.w	8009af0 <_write_r>

08009966 <__sseek>:
 8009966:	b510      	push	{r4, lr}
 8009968:	460c      	mov	r4, r1
 800996a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800996e:	f000 f89b 	bl	8009aa8 <_lseek_r>
 8009972:	1c43      	adds	r3, r0, #1
 8009974:	89a3      	ldrh	r3, [r4, #12]
 8009976:	bf15      	itete	ne
 8009978:	6560      	strne	r0, [r4, #84]	@ 0x54
 800997a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800997e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009982:	81a3      	strheq	r3, [r4, #12]
 8009984:	bf18      	it	ne
 8009986:	81a3      	strhne	r3, [r4, #12]
 8009988:	bd10      	pop	{r4, pc}

0800998a <__sclose>:
 800998a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800998e:	f000 b87b 	b.w	8009a88 <_close_r>

08009992 <memset>:
 8009992:	4402      	add	r2, r0
 8009994:	4603      	mov	r3, r0
 8009996:	4293      	cmp	r3, r2
 8009998:	d100      	bne.n	800999c <memset+0xa>
 800999a:	4770      	bx	lr
 800999c:	f803 1b01 	strb.w	r1, [r3], #1
 80099a0:	e7f9      	b.n	8009996 <memset+0x4>

080099a2 <strncmp>:
 80099a2:	b510      	push	{r4, lr}
 80099a4:	b16a      	cbz	r2, 80099c2 <strncmp+0x20>
 80099a6:	3901      	subs	r1, #1
 80099a8:	1884      	adds	r4, r0, r2
 80099aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099ae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d103      	bne.n	80099be <strncmp+0x1c>
 80099b6:	42a0      	cmp	r0, r4
 80099b8:	d001      	beq.n	80099be <strncmp+0x1c>
 80099ba:	2a00      	cmp	r2, #0
 80099bc:	d1f5      	bne.n	80099aa <strncmp+0x8>
 80099be:	1ad0      	subs	r0, r2, r3
 80099c0:	bd10      	pop	{r4, pc}
 80099c2:	4610      	mov	r0, r2
 80099c4:	e7fc      	b.n	80099c0 <strncmp+0x1e>
	...

080099c8 <strtok>:
 80099c8:	4b16      	ldr	r3, [pc, #88]	@ (8009a24 <strtok+0x5c>)
 80099ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ce:	681f      	ldr	r7, [r3, #0]
 80099d0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80099d2:	4605      	mov	r5, r0
 80099d4:	460e      	mov	r6, r1
 80099d6:	b9ec      	cbnz	r4, 8009a14 <strtok+0x4c>
 80099d8:	2050      	movs	r0, #80	@ 0x50
 80099da:	f001 fad1 	bl	800af80 <malloc>
 80099de:	4602      	mov	r2, r0
 80099e0:	6478      	str	r0, [r7, #68]	@ 0x44
 80099e2:	b920      	cbnz	r0, 80099ee <strtok+0x26>
 80099e4:	4b10      	ldr	r3, [pc, #64]	@ (8009a28 <strtok+0x60>)
 80099e6:	4811      	ldr	r0, [pc, #68]	@ (8009a2c <strtok+0x64>)
 80099e8:	215b      	movs	r1, #91	@ 0x5b
 80099ea:	f000 f8d9 	bl	8009ba0 <__assert_func>
 80099ee:	e9c0 4400 	strd	r4, r4, [r0]
 80099f2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80099f6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80099fa:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80099fe:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8009a02:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8009a06:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8009a0a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009a0e:	6184      	str	r4, [r0, #24]
 8009a10:	7704      	strb	r4, [r0, #28]
 8009a12:	6244      	str	r4, [r0, #36]	@ 0x24
 8009a14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a16:	4631      	mov	r1, r6
 8009a18:	4628      	mov	r0, r5
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a20:	f000 b806 	b.w	8009a30 <__strtok_r>
 8009a24:	200001a4 	.word	0x200001a4
 8009a28:	0800c675 	.word	0x0800c675
 8009a2c:	0800c68c 	.word	0x0800c68c

08009a30 <__strtok_r>:
 8009a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a32:	4604      	mov	r4, r0
 8009a34:	b908      	cbnz	r0, 8009a3a <__strtok_r+0xa>
 8009a36:	6814      	ldr	r4, [r2, #0]
 8009a38:	b144      	cbz	r4, 8009a4c <__strtok_r+0x1c>
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009a40:	460f      	mov	r7, r1
 8009a42:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009a46:	b91e      	cbnz	r6, 8009a50 <__strtok_r+0x20>
 8009a48:	b965      	cbnz	r5, 8009a64 <__strtok_r+0x34>
 8009a4a:	6015      	str	r5, [r2, #0]
 8009a4c:	2000      	movs	r0, #0
 8009a4e:	e005      	b.n	8009a5c <__strtok_r+0x2c>
 8009a50:	42b5      	cmp	r5, r6
 8009a52:	d1f6      	bne.n	8009a42 <__strtok_r+0x12>
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d1f0      	bne.n	8009a3a <__strtok_r+0xa>
 8009a58:	6014      	str	r4, [r2, #0]
 8009a5a:	7003      	strb	r3, [r0, #0]
 8009a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a5e:	461c      	mov	r4, r3
 8009a60:	e00c      	b.n	8009a7c <__strtok_r+0x4c>
 8009a62:	b915      	cbnz	r5, 8009a6a <__strtok_r+0x3a>
 8009a64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009a68:	460e      	mov	r6, r1
 8009a6a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009a6e:	42ab      	cmp	r3, r5
 8009a70:	d1f7      	bne.n	8009a62 <__strtok_r+0x32>
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d0f3      	beq.n	8009a5e <__strtok_r+0x2e>
 8009a76:	2300      	movs	r3, #0
 8009a78:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009a7c:	6014      	str	r4, [r2, #0]
 8009a7e:	e7ed      	b.n	8009a5c <__strtok_r+0x2c>

08009a80 <_localeconv_r>:
 8009a80:	4800      	ldr	r0, [pc, #0]	@ (8009a84 <_localeconv_r+0x4>)
 8009a82:	4770      	bx	lr
 8009a84:	20000128 	.word	0x20000128

08009a88 <_close_r>:
 8009a88:	b538      	push	{r3, r4, r5, lr}
 8009a8a:	4d06      	ldr	r5, [pc, #24]	@ (8009aa4 <_close_r+0x1c>)
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	4604      	mov	r4, r0
 8009a90:	4608      	mov	r0, r1
 8009a92:	602b      	str	r3, [r5, #0]
 8009a94:	f7f9 fd94 	bl	80035c0 <_close>
 8009a98:	1c43      	adds	r3, r0, #1
 8009a9a:	d102      	bne.n	8009aa2 <_close_r+0x1a>
 8009a9c:	682b      	ldr	r3, [r5, #0]
 8009a9e:	b103      	cbz	r3, 8009aa2 <_close_r+0x1a>
 8009aa0:	6023      	str	r3, [r4, #0]
 8009aa2:	bd38      	pop	{r3, r4, r5, pc}
 8009aa4:	20000e2c 	.word	0x20000e2c

08009aa8 <_lseek_r>:
 8009aa8:	b538      	push	{r3, r4, r5, lr}
 8009aaa:	4d07      	ldr	r5, [pc, #28]	@ (8009ac8 <_lseek_r+0x20>)
 8009aac:	4604      	mov	r4, r0
 8009aae:	4608      	mov	r0, r1
 8009ab0:	4611      	mov	r1, r2
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	602a      	str	r2, [r5, #0]
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	f7f9 fda9 	bl	800360e <_lseek>
 8009abc:	1c43      	adds	r3, r0, #1
 8009abe:	d102      	bne.n	8009ac6 <_lseek_r+0x1e>
 8009ac0:	682b      	ldr	r3, [r5, #0]
 8009ac2:	b103      	cbz	r3, 8009ac6 <_lseek_r+0x1e>
 8009ac4:	6023      	str	r3, [r4, #0]
 8009ac6:	bd38      	pop	{r3, r4, r5, pc}
 8009ac8:	20000e2c 	.word	0x20000e2c

08009acc <_read_r>:
 8009acc:	b538      	push	{r3, r4, r5, lr}
 8009ace:	4d07      	ldr	r5, [pc, #28]	@ (8009aec <_read_r+0x20>)
 8009ad0:	4604      	mov	r4, r0
 8009ad2:	4608      	mov	r0, r1
 8009ad4:	4611      	mov	r1, r2
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	602a      	str	r2, [r5, #0]
 8009ada:	461a      	mov	r2, r3
 8009adc:	f7f9 fd37 	bl	800354e <_read>
 8009ae0:	1c43      	adds	r3, r0, #1
 8009ae2:	d102      	bne.n	8009aea <_read_r+0x1e>
 8009ae4:	682b      	ldr	r3, [r5, #0]
 8009ae6:	b103      	cbz	r3, 8009aea <_read_r+0x1e>
 8009ae8:	6023      	str	r3, [r4, #0]
 8009aea:	bd38      	pop	{r3, r4, r5, pc}
 8009aec:	20000e2c 	.word	0x20000e2c

08009af0 <_write_r>:
 8009af0:	b538      	push	{r3, r4, r5, lr}
 8009af2:	4d07      	ldr	r5, [pc, #28]	@ (8009b10 <_write_r+0x20>)
 8009af4:	4604      	mov	r4, r0
 8009af6:	4608      	mov	r0, r1
 8009af8:	4611      	mov	r1, r2
 8009afa:	2200      	movs	r2, #0
 8009afc:	602a      	str	r2, [r5, #0]
 8009afe:	461a      	mov	r2, r3
 8009b00:	f7f9 fd42 	bl	8003588 <_write>
 8009b04:	1c43      	adds	r3, r0, #1
 8009b06:	d102      	bne.n	8009b0e <_write_r+0x1e>
 8009b08:	682b      	ldr	r3, [r5, #0]
 8009b0a:	b103      	cbz	r3, 8009b0e <_write_r+0x1e>
 8009b0c:	6023      	str	r3, [r4, #0]
 8009b0e:	bd38      	pop	{r3, r4, r5, pc}
 8009b10:	20000e2c 	.word	0x20000e2c

08009b14 <__errno>:
 8009b14:	4b01      	ldr	r3, [pc, #4]	@ (8009b1c <__errno+0x8>)
 8009b16:	6818      	ldr	r0, [r3, #0]
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	200001a4 	.word	0x200001a4

08009b20 <__libc_init_array>:
 8009b20:	b570      	push	{r4, r5, r6, lr}
 8009b22:	4d0d      	ldr	r5, [pc, #52]	@ (8009b58 <__libc_init_array+0x38>)
 8009b24:	4c0d      	ldr	r4, [pc, #52]	@ (8009b5c <__libc_init_array+0x3c>)
 8009b26:	1b64      	subs	r4, r4, r5
 8009b28:	10a4      	asrs	r4, r4, #2
 8009b2a:	2600      	movs	r6, #0
 8009b2c:	42a6      	cmp	r6, r4
 8009b2e:	d109      	bne.n	8009b44 <__libc_init_array+0x24>
 8009b30:	4d0b      	ldr	r5, [pc, #44]	@ (8009b60 <__libc_init_array+0x40>)
 8009b32:	4c0c      	ldr	r4, [pc, #48]	@ (8009b64 <__libc_init_array+0x44>)
 8009b34:	f002 fcb0 	bl	800c498 <_init>
 8009b38:	1b64      	subs	r4, r4, r5
 8009b3a:	10a4      	asrs	r4, r4, #2
 8009b3c:	2600      	movs	r6, #0
 8009b3e:	42a6      	cmp	r6, r4
 8009b40:	d105      	bne.n	8009b4e <__libc_init_array+0x2e>
 8009b42:	bd70      	pop	{r4, r5, r6, pc}
 8009b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b48:	4798      	blx	r3
 8009b4a:	3601      	adds	r6, #1
 8009b4c:	e7ee      	b.n	8009b2c <__libc_init_array+0xc>
 8009b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b52:	4798      	blx	r3
 8009b54:	3601      	adds	r6, #1
 8009b56:	e7f2      	b.n	8009b3e <__libc_init_array+0x1e>
 8009b58:	0800c974 	.word	0x0800c974
 8009b5c:	0800c974 	.word	0x0800c974
 8009b60:	0800c974 	.word	0x0800c974
 8009b64:	0800c978 	.word	0x0800c978

08009b68 <__retarget_lock_init_recursive>:
 8009b68:	4770      	bx	lr

08009b6a <__retarget_lock_acquire_recursive>:
 8009b6a:	4770      	bx	lr

08009b6c <__retarget_lock_release_recursive>:
 8009b6c:	4770      	bx	lr

08009b6e <memcpy>:
 8009b6e:	440a      	add	r2, r1
 8009b70:	4291      	cmp	r1, r2
 8009b72:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b76:	d100      	bne.n	8009b7a <memcpy+0xc>
 8009b78:	4770      	bx	lr
 8009b7a:	b510      	push	{r4, lr}
 8009b7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b84:	4291      	cmp	r1, r2
 8009b86:	d1f9      	bne.n	8009b7c <memcpy+0xe>
 8009b88:	bd10      	pop	{r4, pc}
 8009b8a:	0000      	movs	r0, r0
 8009b8c:	0000      	movs	r0, r0
	...

08009b90 <nan>:
 8009b90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009b98 <nan+0x8>
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	00000000 	.word	0x00000000
 8009b9c:	7ff80000 	.word	0x7ff80000

08009ba0 <__assert_func>:
 8009ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ba2:	4614      	mov	r4, r2
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	4b09      	ldr	r3, [pc, #36]	@ (8009bcc <__assert_func+0x2c>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4605      	mov	r5, r0
 8009bac:	68d8      	ldr	r0, [r3, #12]
 8009bae:	b954      	cbnz	r4, 8009bc6 <__assert_func+0x26>
 8009bb0:	4b07      	ldr	r3, [pc, #28]	@ (8009bd0 <__assert_func+0x30>)
 8009bb2:	461c      	mov	r4, r3
 8009bb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009bb8:	9100      	str	r1, [sp, #0]
 8009bba:	462b      	mov	r3, r5
 8009bbc:	4905      	ldr	r1, [pc, #20]	@ (8009bd4 <__assert_func+0x34>)
 8009bbe:	f002 f813 	bl	800bbe8 <fiprintf>
 8009bc2:	f002 f833 	bl	800bc2c <abort>
 8009bc6:	4b04      	ldr	r3, [pc, #16]	@ (8009bd8 <__assert_func+0x38>)
 8009bc8:	e7f4      	b.n	8009bb4 <__assert_func+0x14>
 8009bca:	bf00      	nop
 8009bcc:	200001a4 	.word	0x200001a4
 8009bd0:	0800c729 	.word	0x0800c729
 8009bd4:	0800c6fb 	.word	0x0800c6fb
 8009bd8:	0800c6ee 	.word	0x0800c6ee

08009bdc <quorem>:
 8009bdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be0:	6903      	ldr	r3, [r0, #16]
 8009be2:	690c      	ldr	r4, [r1, #16]
 8009be4:	42a3      	cmp	r3, r4
 8009be6:	4607      	mov	r7, r0
 8009be8:	db7e      	blt.n	8009ce8 <quorem+0x10c>
 8009bea:	3c01      	subs	r4, #1
 8009bec:	f101 0814 	add.w	r8, r1, #20
 8009bf0:	00a3      	lsls	r3, r4, #2
 8009bf2:	f100 0514 	add.w	r5, r0, #20
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009bfc:	9301      	str	r3, [sp, #4]
 8009bfe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c06:	3301      	adds	r3, #1
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c0e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c12:	d32e      	bcc.n	8009c72 <quorem+0x96>
 8009c14:	f04f 0a00 	mov.w	sl, #0
 8009c18:	46c4      	mov	ip, r8
 8009c1a:	46ae      	mov	lr, r5
 8009c1c:	46d3      	mov	fp, sl
 8009c1e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009c22:	b298      	uxth	r0, r3
 8009c24:	fb06 a000 	mla	r0, r6, r0, sl
 8009c28:	0c02      	lsrs	r2, r0, #16
 8009c2a:	0c1b      	lsrs	r3, r3, #16
 8009c2c:	fb06 2303 	mla	r3, r6, r3, r2
 8009c30:	f8de 2000 	ldr.w	r2, [lr]
 8009c34:	b280      	uxth	r0, r0
 8009c36:	b292      	uxth	r2, r2
 8009c38:	1a12      	subs	r2, r2, r0
 8009c3a:	445a      	add	r2, fp
 8009c3c:	f8de 0000 	ldr.w	r0, [lr]
 8009c40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009c4a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009c4e:	b292      	uxth	r2, r2
 8009c50:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009c54:	45e1      	cmp	r9, ip
 8009c56:	f84e 2b04 	str.w	r2, [lr], #4
 8009c5a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009c5e:	d2de      	bcs.n	8009c1e <quorem+0x42>
 8009c60:	9b00      	ldr	r3, [sp, #0]
 8009c62:	58eb      	ldr	r3, [r5, r3]
 8009c64:	b92b      	cbnz	r3, 8009c72 <quorem+0x96>
 8009c66:	9b01      	ldr	r3, [sp, #4]
 8009c68:	3b04      	subs	r3, #4
 8009c6a:	429d      	cmp	r5, r3
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	d32f      	bcc.n	8009cd0 <quorem+0xf4>
 8009c70:	613c      	str	r4, [r7, #16]
 8009c72:	4638      	mov	r0, r7
 8009c74:	f001 fd10 	bl	800b698 <__mcmp>
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	db25      	blt.n	8009cc8 <quorem+0xec>
 8009c7c:	4629      	mov	r1, r5
 8009c7e:	2000      	movs	r0, #0
 8009c80:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c84:	f8d1 c000 	ldr.w	ip, [r1]
 8009c88:	fa1f fe82 	uxth.w	lr, r2
 8009c8c:	fa1f f38c 	uxth.w	r3, ip
 8009c90:	eba3 030e 	sub.w	r3, r3, lr
 8009c94:	4403      	add	r3, r0
 8009c96:	0c12      	lsrs	r2, r2, #16
 8009c98:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009c9c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ca6:	45c1      	cmp	r9, r8
 8009ca8:	f841 3b04 	str.w	r3, [r1], #4
 8009cac:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009cb0:	d2e6      	bcs.n	8009c80 <quorem+0xa4>
 8009cb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009cb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cba:	b922      	cbnz	r2, 8009cc6 <quorem+0xea>
 8009cbc:	3b04      	subs	r3, #4
 8009cbe:	429d      	cmp	r5, r3
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	d30b      	bcc.n	8009cdc <quorem+0x100>
 8009cc4:	613c      	str	r4, [r7, #16]
 8009cc6:	3601      	adds	r6, #1
 8009cc8:	4630      	mov	r0, r6
 8009cca:	b003      	add	sp, #12
 8009ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd0:	6812      	ldr	r2, [r2, #0]
 8009cd2:	3b04      	subs	r3, #4
 8009cd4:	2a00      	cmp	r2, #0
 8009cd6:	d1cb      	bne.n	8009c70 <quorem+0x94>
 8009cd8:	3c01      	subs	r4, #1
 8009cda:	e7c6      	b.n	8009c6a <quorem+0x8e>
 8009cdc:	6812      	ldr	r2, [r2, #0]
 8009cde:	3b04      	subs	r3, #4
 8009ce0:	2a00      	cmp	r2, #0
 8009ce2:	d1ef      	bne.n	8009cc4 <quorem+0xe8>
 8009ce4:	3c01      	subs	r4, #1
 8009ce6:	e7ea      	b.n	8009cbe <quorem+0xe2>
 8009ce8:	2000      	movs	r0, #0
 8009cea:	e7ee      	b.n	8009cca <quorem+0xee>
 8009cec:	0000      	movs	r0, r0
	...

08009cf0 <_dtoa_r>:
 8009cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf4:	69c7      	ldr	r7, [r0, #28]
 8009cf6:	b099      	sub	sp, #100	@ 0x64
 8009cf8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009cfc:	ec55 4b10 	vmov	r4, r5, d0
 8009d00:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009d02:	9109      	str	r1, [sp, #36]	@ 0x24
 8009d04:	4683      	mov	fp, r0
 8009d06:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d08:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009d0a:	b97f      	cbnz	r7, 8009d2c <_dtoa_r+0x3c>
 8009d0c:	2010      	movs	r0, #16
 8009d0e:	f001 f937 	bl	800af80 <malloc>
 8009d12:	4602      	mov	r2, r0
 8009d14:	f8cb 001c 	str.w	r0, [fp, #28]
 8009d18:	b920      	cbnz	r0, 8009d24 <_dtoa_r+0x34>
 8009d1a:	4ba7      	ldr	r3, [pc, #668]	@ (8009fb8 <_dtoa_r+0x2c8>)
 8009d1c:	21ef      	movs	r1, #239	@ 0xef
 8009d1e:	48a7      	ldr	r0, [pc, #668]	@ (8009fbc <_dtoa_r+0x2cc>)
 8009d20:	f7ff ff3e 	bl	8009ba0 <__assert_func>
 8009d24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009d28:	6007      	str	r7, [r0, #0]
 8009d2a:	60c7      	str	r7, [r0, #12]
 8009d2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009d30:	6819      	ldr	r1, [r3, #0]
 8009d32:	b159      	cbz	r1, 8009d4c <_dtoa_r+0x5c>
 8009d34:	685a      	ldr	r2, [r3, #4]
 8009d36:	604a      	str	r2, [r1, #4]
 8009d38:	2301      	movs	r3, #1
 8009d3a:	4093      	lsls	r3, r2
 8009d3c:	608b      	str	r3, [r1, #8]
 8009d3e:	4658      	mov	r0, fp
 8009d40:	f001 fa26 	bl	800b190 <_Bfree>
 8009d44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	601a      	str	r2, [r3, #0]
 8009d4c:	1e2b      	subs	r3, r5, #0
 8009d4e:	bfb9      	ittee	lt
 8009d50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009d54:	9303      	strlt	r3, [sp, #12]
 8009d56:	2300      	movge	r3, #0
 8009d58:	6033      	strge	r3, [r6, #0]
 8009d5a:	9f03      	ldr	r7, [sp, #12]
 8009d5c:	4b98      	ldr	r3, [pc, #608]	@ (8009fc0 <_dtoa_r+0x2d0>)
 8009d5e:	bfbc      	itt	lt
 8009d60:	2201      	movlt	r2, #1
 8009d62:	6032      	strlt	r2, [r6, #0]
 8009d64:	43bb      	bics	r3, r7
 8009d66:	d112      	bne.n	8009d8e <_dtoa_r+0x9e>
 8009d68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009d6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009d6e:	6013      	str	r3, [r2, #0]
 8009d70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d74:	4323      	orrs	r3, r4
 8009d76:	f000 854d 	beq.w	800a814 <_dtoa_r+0xb24>
 8009d7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d7c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009fd4 <_dtoa_r+0x2e4>
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f000 854f 	beq.w	800a824 <_dtoa_r+0xb34>
 8009d86:	f10a 0303 	add.w	r3, sl, #3
 8009d8a:	f000 bd49 	b.w	800a820 <_dtoa_r+0xb30>
 8009d8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d92:	2200      	movs	r2, #0
 8009d94:	ec51 0b17 	vmov	r0, r1, d7
 8009d98:	2300      	movs	r3, #0
 8009d9a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009d9e:	f7f6 feb3 	bl	8000b08 <__aeabi_dcmpeq>
 8009da2:	4680      	mov	r8, r0
 8009da4:	b158      	cbz	r0, 8009dbe <_dtoa_r+0xce>
 8009da6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009da8:	2301      	movs	r3, #1
 8009daa:	6013      	str	r3, [r2, #0]
 8009dac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009dae:	b113      	cbz	r3, 8009db6 <_dtoa_r+0xc6>
 8009db0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009db2:	4b84      	ldr	r3, [pc, #528]	@ (8009fc4 <_dtoa_r+0x2d4>)
 8009db4:	6013      	str	r3, [r2, #0]
 8009db6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009fd8 <_dtoa_r+0x2e8>
 8009dba:	f000 bd33 	b.w	800a824 <_dtoa_r+0xb34>
 8009dbe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009dc2:	aa16      	add	r2, sp, #88	@ 0x58
 8009dc4:	a917      	add	r1, sp, #92	@ 0x5c
 8009dc6:	4658      	mov	r0, fp
 8009dc8:	f001 fd86 	bl	800b8d8 <__d2b>
 8009dcc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009dd0:	4681      	mov	r9, r0
 8009dd2:	2e00      	cmp	r6, #0
 8009dd4:	d077      	beq.n	8009ec6 <_dtoa_r+0x1d6>
 8009dd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009dd8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009de0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009de4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009de8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009dec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009df0:	4619      	mov	r1, r3
 8009df2:	2200      	movs	r2, #0
 8009df4:	4b74      	ldr	r3, [pc, #464]	@ (8009fc8 <_dtoa_r+0x2d8>)
 8009df6:	f7f6 fa67 	bl	80002c8 <__aeabi_dsub>
 8009dfa:	a369      	add	r3, pc, #420	@ (adr r3, 8009fa0 <_dtoa_r+0x2b0>)
 8009dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e00:	f7f6 fc1a 	bl	8000638 <__aeabi_dmul>
 8009e04:	a368      	add	r3, pc, #416	@ (adr r3, 8009fa8 <_dtoa_r+0x2b8>)
 8009e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0a:	f7f6 fa5f 	bl	80002cc <__adddf3>
 8009e0e:	4604      	mov	r4, r0
 8009e10:	4630      	mov	r0, r6
 8009e12:	460d      	mov	r5, r1
 8009e14:	f7f6 fba6 	bl	8000564 <__aeabi_i2d>
 8009e18:	a365      	add	r3, pc, #404	@ (adr r3, 8009fb0 <_dtoa_r+0x2c0>)
 8009e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1e:	f7f6 fc0b 	bl	8000638 <__aeabi_dmul>
 8009e22:	4602      	mov	r2, r0
 8009e24:	460b      	mov	r3, r1
 8009e26:	4620      	mov	r0, r4
 8009e28:	4629      	mov	r1, r5
 8009e2a:	f7f6 fa4f 	bl	80002cc <__adddf3>
 8009e2e:	4604      	mov	r4, r0
 8009e30:	460d      	mov	r5, r1
 8009e32:	f7f6 feb1 	bl	8000b98 <__aeabi_d2iz>
 8009e36:	2200      	movs	r2, #0
 8009e38:	4607      	mov	r7, r0
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	4629      	mov	r1, r5
 8009e40:	f7f6 fe6c 	bl	8000b1c <__aeabi_dcmplt>
 8009e44:	b140      	cbz	r0, 8009e58 <_dtoa_r+0x168>
 8009e46:	4638      	mov	r0, r7
 8009e48:	f7f6 fb8c 	bl	8000564 <__aeabi_i2d>
 8009e4c:	4622      	mov	r2, r4
 8009e4e:	462b      	mov	r3, r5
 8009e50:	f7f6 fe5a 	bl	8000b08 <__aeabi_dcmpeq>
 8009e54:	b900      	cbnz	r0, 8009e58 <_dtoa_r+0x168>
 8009e56:	3f01      	subs	r7, #1
 8009e58:	2f16      	cmp	r7, #22
 8009e5a:	d851      	bhi.n	8009f00 <_dtoa_r+0x210>
 8009e5c:	4b5b      	ldr	r3, [pc, #364]	@ (8009fcc <_dtoa_r+0x2dc>)
 8009e5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e6a:	f7f6 fe57 	bl	8000b1c <__aeabi_dcmplt>
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	d048      	beq.n	8009f04 <_dtoa_r+0x214>
 8009e72:	3f01      	subs	r7, #1
 8009e74:	2300      	movs	r3, #0
 8009e76:	9312      	str	r3, [sp, #72]	@ 0x48
 8009e78:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009e7a:	1b9b      	subs	r3, r3, r6
 8009e7c:	1e5a      	subs	r2, r3, #1
 8009e7e:	bf44      	itt	mi
 8009e80:	f1c3 0801 	rsbmi	r8, r3, #1
 8009e84:	2300      	movmi	r3, #0
 8009e86:	9208      	str	r2, [sp, #32]
 8009e88:	bf54      	ite	pl
 8009e8a:	f04f 0800 	movpl.w	r8, #0
 8009e8e:	9308      	strmi	r3, [sp, #32]
 8009e90:	2f00      	cmp	r7, #0
 8009e92:	db39      	blt.n	8009f08 <_dtoa_r+0x218>
 8009e94:	9b08      	ldr	r3, [sp, #32]
 8009e96:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009e98:	443b      	add	r3, r7
 8009e9a:	9308      	str	r3, [sp, #32]
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ea2:	2b09      	cmp	r3, #9
 8009ea4:	d864      	bhi.n	8009f70 <_dtoa_r+0x280>
 8009ea6:	2b05      	cmp	r3, #5
 8009ea8:	bfc4      	itt	gt
 8009eaa:	3b04      	subgt	r3, #4
 8009eac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eb0:	f1a3 0302 	sub.w	r3, r3, #2
 8009eb4:	bfcc      	ite	gt
 8009eb6:	2400      	movgt	r4, #0
 8009eb8:	2401      	movle	r4, #1
 8009eba:	2b03      	cmp	r3, #3
 8009ebc:	d863      	bhi.n	8009f86 <_dtoa_r+0x296>
 8009ebe:	e8df f003 	tbb	[pc, r3]
 8009ec2:	372a      	.short	0x372a
 8009ec4:	5535      	.short	0x5535
 8009ec6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009eca:	441e      	add	r6, r3
 8009ecc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009ed0:	2b20      	cmp	r3, #32
 8009ed2:	bfc1      	itttt	gt
 8009ed4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009ed8:	409f      	lslgt	r7, r3
 8009eda:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009ede:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009ee2:	bfd6      	itet	le
 8009ee4:	f1c3 0320 	rsble	r3, r3, #32
 8009ee8:	ea47 0003 	orrgt.w	r0, r7, r3
 8009eec:	fa04 f003 	lslle.w	r0, r4, r3
 8009ef0:	f7f6 fb28 	bl	8000544 <__aeabi_ui2d>
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009efa:	3e01      	subs	r6, #1
 8009efc:	9214      	str	r2, [sp, #80]	@ 0x50
 8009efe:	e777      	b.n	8009df0 <_dtoa_r+0x100>
 8009f00:	2301      	movs	r3, #1
 8009f02:	e7b8      	b.n	8009e76 <_dtoa_r+0x186>
 8009f04:	9012      	str	r0, [sp, #72]	@ 0x48
 8009f06:	e7b7      	b.n	8009e78 <_dtoa_r+0x188>
 8009f08:	427b      	negs	r3, r7
 8009f0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	eba8 0807 	sub.w	r8, r8, r7
 8009f12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009f14:	e7c4      	b.n	8009ea0 <_dtoa_r+0x1b0>
 8009f16:	2300      	movs	r3, #0
 8009f18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	dc35      	bgt.n	8009f8c <_dtoa_r+0x29c>
 8009f20:	2301      	movs	r3, #1
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	9307      	str	r3, [sp, #28]
 8009f26:	461a      	mov	r2, r3
 8009f28:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f2a:	e00b      	b.n	8009f44 <_dtoa_r+0x254>
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e7f3      	b.n	8009f18 <_dtoa_r+0x228>
 8009f30:	2300      	movs	r3, #0
 8009f32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f36:	18fb      	adds	r3, r7, r3
 8009f38:	9300      	str	r3, [sp, #0]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	9307      	str	r3, [sp, #28]
 8009f40:	bfb8      	it	lt
 8009f42:	2301      	movlt	r3, #1
 8009f44:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009f48:	2100      	movs	r1, #0
 8009f4a:	2204      	movs	r2, #4
 8009f4c:	f102 0514 	add.w	r5, r2, #20
 8009f50:	429d      	cmp	r5, r3
 8009f52:	d91f      	bls.n	8009f94 <_dtoa_r+0x2a4>
 8009f54:	6041      	str	r1, [r0, #4]
 8009f56:	4658      	mov	r0, fp
 8009f58:	f001 f8da 	bl	800b110 <_Balloc>
 8009f5c:	4682      	mov	sl, r0
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	d13c      	bne.n	8009fdc <_dtoa_r+0x2ec>
 8009f62:	4b1b      	ldr	r3, [pc, #108]	@ (8009fd0 <_dtoa_r+0x2e0>)
 8009f64:	4602      	mov	r2, r0
 8009f66:	f240 11af 	movw	r1, #431	@ 0x1af
 8009f6a:	e6d8      	b.n	8009d1e <_dtoa_r+0x2e>
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	e7e0      	b.n	8009f32 <_dtoa_r+0x242>
 8009f70:	2401      	movs	r4, #1
 8009f72:	2300      	movs	r3, #0
 8009f74:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f76:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009f78:	f04f 33ff 	mov.w	r3, #4294967295
 8009f7c:	9300      	str	r3, [sp, #0]
 8009f7e:	9307      	str	r3, [sp, #28]
 8009f80:	2200      	movs	r2, #0
 8009f82:	2312      	movs	r3, #18
 8009f84:	e7d0      	b.n	8009f28 <_dtoa_r+0x238>
 8009f86:	2301      	movs	r3, #1
 8009f88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f8a:	e7f5      	b.n	8009f78 <_dtoa_r+0x288>
 8009f8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f8e:	9300      	str	r3, [sp, #0]
 8009f90:	9307      	str	r3, [sp, #28]
 8009f92:	e7d7      	b.n	8009f44 <_dtoa_r+0x254>
 8009f94:	3101      	adds	r1, #1
 8009f96:	0052      	lsls	r2, r2, #1
 8009f98:	e7d8      	b.n	8009f4c <_dtoa_r+0x25c>
 8009f9a:	bf00      	nop
 8009f9c:	f3af 8000 	nop.w
 8009fa0:	636f4361 	.word	0x636f4361
 8009fa4:	3fd287a7 	.word	0x3fd287a7
 8009fa8:	8b60c8b3 	.word	0x8b60c8b3
 8009fac:	3fc68a28 	.word	0x3fc68a28
 8009fb0:	509f79fb 	.word	0x509f79fb
 8009fb4:	3fd34413 	.word	0x3fd34413
 8009fb8:	0800c675 	.word	0x0800c675
 8009fbc:	0800c737 	.word	0x0800c737
 8009fc0:	7ff00000 	.word	0x7ff00000
 8009fc4:	0800c652 	.word	0x0800c652
 8009fc8:	3ff80000 	.word	0x3ff80000
 8009fcc:	0800c890 	.word	0x0800c890
 8009fd0:	0800c78f 	.word	0x0800c78f
 8009fd4:	0800c733 	.word	0x0800c733
 8009fd8:	0800c651 	.word	0x0800c651
 8009fdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009fe0:	6018      	str	r0, [r3, #0]
 8009fe2:	9b07      	ldr	r3, [sp, #28]
 8009fe4:	2b0e      	cmp	r3, #14
 8009fe6:	f200 80a4 	bhi.w	800a132 <_dtoa_r+0x442>
 8009fea:	2c00      	cmp	r4, #0
 8009fec:	f000 80a1 	beq.w	800a132 <_dtoa_r+0x442>
 8009ff0:	2f00      	cmp	r7, #0
 8009ff2:	dd33      	ble.n	800a05c <_dtoa_r+0x36c>
 8009ff4:	4bad      	ldr	r3, [pc, #692]	@ (800a2ac <_dtoa_r+0x5bc>)
 8009ff6:	f007 020f 	and.w	r2, r7, #15
 8009ffa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ffe:	ed93 7b00 	vldr	d7, [r3]
 800a002:	05f8      	lsls	r0, r7, #23
 800a004:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a008:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a00c:	d516      	bpl.n	800a03c <_dtoa_r+0x34c>
 800a00e:	4ba8      	ldr	r3, [pc, #672]	@ (800a2b0 <_dtoa_r+0x5c0>)
 800a010:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a014:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a018:	f7f6 fc38 	bl	800088c <__aeabi_ddiv>
 800a01c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a020:	f004 040f 	and.w	r4, r4, #15
 800a024:	2603      	movs	r6, #3
 800a026:	4da2      	ldr	r5, [pc, #648]	@ (800a2b0 <_dtoa_r+0x5c0>)
 800a028:	b954      	cbnz	r4, 800a040 <_dtoa_r+0x350>
 800a02a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a02e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a032:	f7f6 fc2b 	bl	800088c <__aeabi_ddiv>
 800a036:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a03a:	e028      	b.n	800a08e <_dtoa_r+0x39e>
 800a03c:	2602      	movs	r6, #2
 800a03e:	e7f2      	b.n	800a026 <_dtoa_r+0x336>
 800a040:	07e1      	lsls	r1, r4, #31
 800a042:	d508      	bpl.n	800a056 <_dtoa_r+0x366>
 800a044:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a048:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a04c:	f7f6 faf4 	bl	8000638 <__aeabi_dmul>
 800a050:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a054:	3601      	adds	r6, #1
 800a056:	1064      	asrs	r4, r4, #1
 800a058:	3508      	adds	r5, #8
 800a05a:	e7e5      	b.n	800a028 <_dtoa_r+0x338>
 800a05c:	f000 80d2 	beq.w	800a204 <_dtoa_r+0x514>
 800a060:	427c      	negs	r4, r7
 800a062:	4b92      	ldr	r3, [pc, #584]	@ (800a2ac <_dtoa_r+0x5bc>)
 800a064:	4d92      	ldr	r5, [pc, #584]	@ (800a2b0 <_dtoa_r+0x5c0>)
 800a066:	f004 020f 	and.w	r2, r4, #15
 800a06a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a072:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a076:	f7f6 fadf 	bl	8000638 <__aeabi_dmul>
 800a07a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a07e:	1124      	asrs	r4, r4, #4
 800a080:	2300      	movs	r3, #0
 800a082:	2602      	movs	r6, #2
 800a084:	2c00      	cmp	r4, #0
 800a086:	f040 80b2 	bne.w	800a1ee <_dtoa_r+0x4fe>
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d1d3      	bne.n	800a036 <_dtoa_r+0x346>
 800a08e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a090:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a094:	2b00      	cmp	r3, #0
 800a096:	f000 80b7 	beq.w	800a208 <_dtoa_r+0x518>
 800a09a:	4b86      	ldr	r3, [pc, #536]	@ (800a2b4 <_dtoa_r+0x5c4>)
 800a09c:	2200      	movs	r2, #0
 800a09e:	4620      	mov	r0, r4
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	f7f6 fd3b 	bl	8000b1c <__aeabi_dcmplt>
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	f000 80ae 	beq.w	800a208 <_dtoa_r+0x518>
 800a0ac:	9b07      	ldr	r3, [sp, #28]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f000 80aa 	beq.w	800a208 <_dtoa_r+0x518>
 800a0b4:	9b00      	ldr	r3, [sp, #0]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	dd37      	ble.n	800a12a <_dtoa_r+0x43a>
 800a0ba:	1e7b      	subs	r3, r7, #1
 800a0bc:	9304      	str	r3, [sp, #16]
 800a0be:	4620      	mov	r0, r4
 800a0c0:	4b7d      	ldr	r3, [pc, #500]	@ (800a2b8 <_dtoa_r+0x5c8>)
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	4629      	mov	r1, r5
 800a0c6:	f7f6 fab7 	bl	8000638 <__aeabi_dmul>
 800a0ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0ce:	9c00      	ldr	r4, [sp, #0]
 800a0d0:	3601      	adds	r6, #1
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	f7f6 fa46 	bl	8000564 <__aeabi_i2d>
 800a0d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0dc:	f7f6 faac 	bl	8000638 <__aeabi_dmul>
 800a0e0:	4b76      	ldr	r3, [pc, #472]	@ (800a2bc <_dtoa_r+0x5cc>)
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f7f6 f8f2 	bl	80002cc <__adddf3>
 800a0e8:	4605      	mov	r5, r0
 800a0ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a0ee:	2c00      	cmp	r4, #0
 800a0f0:	f040 808d 	bne.w	800a20e <_dtoa_r+0x51e>
 800a0f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0f8:	4b71      	ldr	r3, [pc, #452]	@ (800a2c0 <_dtoa_r+0x5d0>)
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f7f6 f8e4 	bl	80002c8 <__aeabi_dsub>
 800a100:	4602      	mov	r2, r0
 800a102:	460b      	mov	r3, r1
 800a104:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a108:	462a      	mov	r2, r5
 800a10a:	4633      	mov	r3, r6
 800a10c:	f7f6 fd24 	bl	8000b58 <__aeabi_dcmpgt>
 800a110:	2800      	cmp	r0, #0
 800a112:	f040 828b 	bne.w	800a62c <_dtoa_r+0x93c>
 800a116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a11a:	462a      	mov	r2, r5
 800a11c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a120:	f7f6 fcfc 	bl	8000b1c <__aeabi_dcmplt>
 800a124:	2800      	cmp	r0, #0
 800a126:	f040 8128 	bne.w	800a37a <_dtoa_r+0x68a>
 800a12a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a12e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a132:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a134:	2b00      	cmp	r3, #0
 800a136:	f2c0 815a 	blt.w	800a3ee <_dtoa_r+0x6fe>
 800a13a:	2f0e      	cmp	r7, #14
 800a13c:	f300 8157 	bgt.w	800a3ee <_dtoa_r+0x6fe>
 800a140:	4b5a      	ldr	r3, [pc, #360]	@ (800a2ac <_dtoa_r+0x5bc>)
 800a142:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a146:	ed93 7b00 	vldr	d7, [r3]
 800a14a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	ed8d 7b00 	vstr	d7, [sp]
 800a152:	da03      	bge.n	800a15c <_dtoa_r+0x46c>
 800a154:	9b07      	ldr	r3, [sp, #28]
 800a156:	2b00      	cmp	r3, #0
 800a158:	f340 8101 	ble.w	800a35e <_dtoa_r+0x66e>
 800a15c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a160:	4656      	mov	r6, sl
 800a162:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a166:	4620      	mov	r0, r4
 800a168:	4629      	mov	r1, r5
 800a16a:	f7f6 fb8f 	bl	800088c <__aeabi_ddiv>
 800a16e:	f7f6 fd13 	bl	8000b98 <__aeabi_d2iz>
 800a172:	4680      	mov	r8, r0
 800a174:	f7f6 f9f6 	bl	8000564 <__aeabi_i2d>
 800a178:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a17c:	f7f6 fa5c 	bl	8000638 <__aeabi_dmul>
 800a180:	4602      	mov	r2, r0
 800a182:	460b      	mov	r3, r1
 800a184:	4620      	mov	r0, r4
 800a186:	4629      	mov	r1, r5
 800a188:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a18c:	f7f6 f89c 	bl	80002c8 <__aeabi_dsub>
 800a190:	f806 4b01 	strb.w	r4, [r6], #1
 800a194:	9d07      	ldr	r5, [sp, #28]
 800a196:	eba6 040a 	sub.w	r4, r6, sl
 800a19a:	42a5      	cmp	r5, r4
 800a19c:	4602      	mov	r2, r0
 800a19e:	460b      	mov	r3, r1
 800a1a0:	f040 8117 	bne.w	800a3d2 <_dtoa_r+0x6e2>
 800a1a4:	f7f6 f892 	bl	80002cc <__adddf3>
 800a1a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1ac:	4604      	mov	r4, r0
 800a1ae:	460d      	mov	r5, r1
 800a1b0:	f7f6 fcd2 	bl	8000b58 <__aeabi_dcmpgt>
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	f040 80f9 	bne.w	800a3ac <_dtoa_r+0x6bc>
 800a1ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1be:	4620      	mov	r0, r4
 800a1c0:	4629      	mov	r1, r5
 800a1c2:	f7f6 fca1 	bl	8000b08 <__aeabi_dcmpeq>
 800a1c6:	b118      	cbz	r0, 800a1d0 <_dtoa_r+0x4e0>
 800a1c8:	f018 0f01 	tst.w	r8, #1
 800a1cc:	f040 80ee 	bne.w	800a3ac <_dtoa_r+0x6bc>
 800a1d0:	4649      	mov	r1, r9
 800a1d2:	4658      	mov	r0, fp
 800a1d4:	f000 ffdc 	bl	800b190 <_Bfree>
 800a1d8:	2300      	movs	r3, #0
 800a1da:	7033      	strb	r3, [r6, #0]
 800a1dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a1de:	3701      	adds	r7, #1
 800a1e0:	601f      	str	r7, [r3, #0]
 800a1e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	f000 831d 	beq.w	800a824 <_dtoa_r+0xb34>
 800a1ea:	601e      	str	r6, [r3, #0]
 800a1ec:	e31a      	b.n	800a824 <_dtoa_r+0xb34>
 800a1ee:	07e2      	lsls	r2, r4, #31
 800a1f0:	d505      	bpl.n	800a1fe <_dtoa_r+0x50e>
 800a1f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a1f6:	f7f6 fa1f 	bl	8000638 <__aeabi_dmul>
 800a1fa:	3601      	adds	r6, #1
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	1064      	asrs	r4, r4, #1
 800a200:	3508      	adds	r5, #8
 800a202:	e73f      	b.n	800a084 <_dtoa_r+0x394>
 800a204:	2602      	movs	r6, #2
 800a206:	e742      	b.n	800a08e <_dtoa_r+0x39e>
 800a208:	9c07      	ldr	r4, [sp, #28]
 800a20a:	9704      	str	r7, [sp, #16]
 800a20c:	e761      	b.n	800a0d2 <_dtoa_r+0x3e2>
 800a20e:	4b27      	ldr	r3, [pc, #156]	@ (800a2ac <_dtoa_r+0x5bc>)
 800a210:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a212:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a216:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a21a:	4454      	add	r4, sl
 800a21c:	2900      	cmp	r1, #0
 800a21e:	d053      	beq.n	800a2c8 <_dtoa_r+0x5d8>
 800a220:	4928      	ldr	r1, [pc, #160]	@ (800a2c4 <_dtoa_r+0x5d4>)
 800a222:	2000      	movs	r0, #0
 800a224:	f7f6 fb32 	bl	800088c <__aeabi_ddiv>
 800a228:	4633      	mov	r3, r6
 800a22a:	462a      	mov	r2, r5
 800a22c:	f7f6 f84c 	bl	80002c8 <__aeabi_dsub>
 800a230:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a234:	4656      	mov	r6, sl
 800a236:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a23a:	f7f6 fcad 	bl	8000b98 <__aeabi_d2iz>
 800a23e:	4605      	mov	r5, r0
 800a240:	f7f6 f990 	bl	8000564 <__aeabi_i2d>
 800a244:	4602      	mov	r2, r0
 800a246:	460b      	mov	r3, r1
 800a248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a24c:	f7f6 f83c 	bl	80002c8 <__aeabi_dsub>
 800a250:	3530      	adds	r5, #48	@ 0x30
 800a252:	4602      	mov	r2, r0
 800a254:	460b      	mov	r3, r1
 800a256:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a25a:	f806 5b01 	strb.w	r5, [r6], #1
 800a25e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a262:	f7f6 fc5b 	bl	8000b1c <__aeabi_dcmplt>
 800a266:	2800      	cmp	r0, #0
 800a268:	d171      	bne.n	800a34e <_dtoa_r+0x65e>
 800a26a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a26e:	4911      	ldr	r1, [pc, #68]	@ (800a2b4 <_dtoa_r+0x5c4>)
 800a270:	2000      	movs	r0, #0
 800a272:	f7f6 f829 	bl	80002c8 <__aeabi_dsub>
 800a276:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a27a:	f7f6 fc4f 	bl	8000b1c <__aeabi_dcmplt>
 800a27e:	2800      	cmp	r0, #0
 800a280:	f040 8095 	bne.w	800a3ae <_dtoa_r+0x6be>
 800a284:	42a6      	cmp	r6, r4
 800a286:	f43f af50 	beq.w	800a12a <_dtoa_r+0x43a>
 800a28a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a28e:	4b0a      	ldr	r3, [pc, #40]	@ (800a2b8 <_dtoa_r+0x5c8>)
 800a290:	2200      	movs	r2, #0
 800a292:	f7f6 f9d1 	bl	8000638 <__aeabi_dmul>
 800a296:	4b08      	ldr	r3, [pc, #32]	@ (800a2b8 <_dtoa_r+0x5c8>)
 800a298:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a29c:	2200      	movs	r2, #0
 800a29e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2a2:	f7f6 f9c9 	bl	8000638 <__aeabi_dmul>
 800a2a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2aa:	e7c4      	b.n	800a236 <_dtoa_r+0x546>
 800a2ac:	0800c890 	.word	0x0800c890
 800a2b0:	0800c868 	.word	0x0800c868
 800a2b4:	3ff00000 	.word	0x3ff00000
 800a2b8:	40240000 	.word	0x40240000
 800a2bc:	401c0000 	.word	0x401c0000
 800a2c0:	40140000 	.word	0x40140000
 800a2c4:	3fe00000 	.word	0x3fe00000
 800a2c8:	4631      	mov	r1, r6
 800a2ca:	4628      	mov	r0, r5
 800a2cc:	f7f6 f9b4 	bl	8000638 <__aeabi_dmul>
 800a2d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a2d4:	9415      	str	r4, [sp, #84]	@ 0x54
 800a2d6:	4656      	mov	r6, sl
 800a2d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2dc:	f7f6 fc5c 	bl	8000b98 <__aeabi_d2iz>
 800a2e0:	4605      	mov	r5, r0
 800a2e2:	f7f6 f93f 	bl	8000564 <__aeabi_i2d>
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2ee:	f7f5 ffeb 	bl	80002c8 <__aeabi_dsub>
 800a2f2:	3530      	adds	r5, #48	@ 0x30
 800a2f4:	f806 5b01 	strb.w	r5, [r6], #1
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	42a6      	cmp	r6, r4
 800a2fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a302:	f04f 0200 	mov.w	r2, #0
 800a306:	d124      	bne.n	800a352 <_dtoa_r+0x662>
 800a308:	4bac      	ldr	r3, [pc, #688]	@ (800a5bc <_dtoa_r+0x8cc>)
 800a30a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a30e:	f7f5 ffdd 	bl	80002cc <__adddf3>
 800a312:	4602      	mov	r2, r0
 800a314:	460b      	mov	r3, r1
 800a316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a31a:	f7f6 fc1d 	bl	8000b58 <__aeabi_dcmpgt>
 800a31e:	2800      	cmp	r0, #0
 800a320:	d145      	bne.n	800a3ae <_dtoa_r+0x6be>
 800a322:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a326:	49a5      	ldr	r1, [pc, #660]	@ (800a5bc <_dtoa_r+0x8cc>)
 800a328:	2000      	movs	r0, #0
 800a32a:	f7f5 ffcd 	bl	80002c8 <__aeabi_dsub>
 800a32e:	4602      	mov	r2, r0
 800a330:	460b      	mov	r3, r1
 800a332:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a336:	f7f6 fbf1 	bl	8000b1c <__aeabi_dcmplt>
 800a33a:	2800      	cmp	r0, #0
 800a33c:	f43f aef5 	beq.w	800a12a <_dtoa_r+0x43a>
 800a340:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a342:	1e73      	subs	r3, r6, #1
 800a344:	9315      	str	r3, [sp, #84]	@ 0x54
 800a346:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a34a:	2b30      	cmp	r3, #48	@ 0x30
 800a34c:	d0f8      	beq.n	800a340 <_dtoa_r+0x650>
 800a34e:	9f04      	ldr	r7, [sp, #16]
 800a350:	e73e      	b.n	800a1d0 <_dtoa_r+0x4e0>
 800a352:	4b9b      	ldr	r3, [pc, #620]	@ (800a5c0 <_dtoa_r+0x8d0>)
 800a354:	f7f6 f970 	bl	8000638 <__aeabi_dmul>
 800a358:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a35c:	e7bc      	b.n	800a2d8 <_dtoa_r+0x5e8>
 800a35e:	d10c      	bne.n	800a37a <_dtoa_r+0x68a>
 800a360:	4b98      	ldr	r3, [pc, #608]	@ (800a5c4 <_dtoa_r+0x8d4>)
 800a362:	2200      	movs	r2, #0
 800a364:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a368:	f7f6 f966 	bl	8000638 <__aeabi_dmul>
 800a36c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a370:	f7f6 fbe8 	bl	8000b44 <__aeabi_dcmpge>
 800a374:	2800      	cmp	r0, #0
 800a376:	f000 8157 	beq.w	800a628 <_dtoa_r+0x938>
 800a37a:	2400      	movs	r4, #0
 800a37c:	4625      	mov	r5, r4
 800a37e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a380:	43db      	mvns	r3, r3
 800a382:	9304      	str	r3, [sp, #16]
 800a384:	4656      	mov	r6, sl
 800a386:	2700      	movs	r7, #0
 800a388:	4621      	mov	r1, r4
 800a38a:	4658      	mov	r0, fp
 800a38c:	f000 ff00 	bl	800b190 <_Bfree>
 800a390:	2d00      	cmp	r5, #0
 800a392:	d0dc      	beq.n	800a34e <_dtoa_r+0x65e>
 800a394:	b12f      	cbz	r7, 800a3a2 <_dtoa_r+0x6b2>
 800a396:	42af      	cmp	r7, r5
 800a398:	d003      	beq.n	800a3a2 <_dtoa_r+0x6b2>
 800a39a:	4639      	mov	r1, r7
 800a39c:	4658      	mov	r0, fp
 800a39e:	f000 fef7 	bl	800b190 <_Bfree>
 800a3a2:	4629      	mov	r1, r5
 800a3a4:	4658      	mov	r0, fp
 800a3a6:	f000 fef3 	bl	800b190 <_Bfree>
 800a3aa:	e7d0      	b.n	800a34e <_dtoa_r+0x65e>
 800a3ac:	9704      	str	r7, [sp, #16]
 800a3ae:	4633      	mov	r3, r6
 800a3b0:	461e      	mov	r6, r3
 800a3b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3b6:	2a39      	cmp	r2, #57	@ 0x39
 800a3b8:	d107      	bne.n	800a3ca <_dtoa_r+0x6da>
 800a3ba:	459a      	cmp	sl, r3
 800a3bc:	d1f8      	bne.n	800a3b0 <_dtoa_r+0x6c0>
 800a3be:	9a04      	ldr	r2, [sp, #16]
 800a3c0:	3201      	adds	r2, #1
 800a3c2:	9204      	str	r2, [sp, #16]
 800a3c4:	2230      	movs	r2, #48	@ 0x30
 800a3c6:	f88a 2000 	strb.w	r2, [sl]
 800a3ca:	781a      	ldrb	r2, [r3, #0]
 800a3cc:	3201      	adds	r2, #1
 800a3ce:	701a      	strb	r2, [r3, #0]
 800a3d0:	e7bd      	b.n	800a34e <_dtoa_r+0x65e>
 800a3d2:	4b7b      	ldr	r3, [pc, #492]	@ (800a5c0 <_dtoa_r+0x8d0>)
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	f7f6 f92f 	bl	8000638 <__aeabi_dmul>
 800a3da:	2200      	movs	r2, #0
 800a3dc:	2300      	movs	r3, #0
 800a3de:	4604      	mov	r4, r0
 800a3e0:	460d      	mov	r5, r1
 800a3e2:	f7f6 fb91 	bl	8000b08 <__aeabi_dcmpeq>
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	f43f aebb 	beq.w	800a162 <_dtoa_r+0x472>
 800a3ec:	e6f0      	b.n	800a1d0 <_dtoa_r+0x4e0>
 800a3ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a3f0:	2a00      	cmp	r2, #0
 800a3f2:	f000 80db 	beq.w	800a5ac <_dtoa_r+0x8bc>
 800a3f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3f8:	2a01      	cmp	r2, #1
 800a3fa:	f300 80bf 	bgt.w	800a57c <_dtoa_r+0x88c>
 800a3fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a400:	2a00      	cmp	r2, #0
 800a402:	f000 80b7 	beq.w	800a574 <_dtoa_r+0x884>
 800a406:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a40a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a40c:	4646      	mov	r6, r8
 800a40e:	9a08      	ldr	r2, [sp, #32]
 800a410:	2101      	movs	r1, #1
 800a412:	441a      	add	r2, r3
 800a414:	4658      	mov	r0, fp
 800a416:	4498      	add	r8, r3
 800a418:	9208      	str	r2, [sp, #32]
 800a41a:	f000 ffb7 	bl	800b38c <__i2b>
 800a41e:	4605      	mov	r5, r0
 800a420:	b15e      	cbz	r6, 800a43a <_dtoa_r+0x74a>
 800a422:	9b08      	ldr	r3, [sp, #32]
 800a424:	2b00      	cmp	r3, #0
 800a426:	dd08      	ble.n	800a43a <_dtoa_r+0x74a>
 800a428:	42b3      	cmp	r3, r6
 800a42a:	9a08      	ldr	r2, [sp, #32]
 800a42c:	bfa8      	it	ge
 800a42e:	4633      	movge	r3, r6
 800a430:	eba8 0803 	sub.w	r8, r8, r3
 800a434:	1af6      	subs	r6, r6, r3
 800a436:	1ad3      	subs	r3, r2, r3
 800a438:	9308      	str	r3, [sp, #32]
 800a43a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a43c:	b1f3      	cbz	r3, 800a47c <_dtoa_r+0x78c>
 800a43e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a440:	2b00      	cmp	r3, #0
 800a442:	f000 80b7 	beq.w	800a5b4 <_dtoa_r+0x8c4>
 800a446:	b18c      	cbz	r4, 800a46c <_dtoa_r+0x77c>
 800a448:	4629      	mov	r1, r5
 800a44a:	4622      	mov	r2, r4
 800a44c:	4658      	mov	r0, fp
 800a44e:	f001 f85d 	bl	800b50c <__pow5mult>
 800a452:	464a      	mov	r2, r9
 800a454:	4601      	mov	r1, r0
 800a456:	4605      	mov	r5, r0
 800a458:	4658      	mov	r0, fp
 800a45a:	f000 ffad 	bl	800b3b8 <__multiply>
 800a45e:	4649      	mov	r1, r9
 800a460:	9004      	str	r0, [sp, #16]
 800a462:	4658      	mov	r0, fp
 800a464:	f000 fe94 	bl	800b190 <_Bfree>
 800a468:	9b04      	ldr	r3, [sp, #16]
 800a46a:	4699      	mov	r9, r3
 800a46c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a46e:	1b1a      	subs	r2, r3, r4
 800a470:	d004      	beq.n	800a47c <_dtoa_r+0x78c>
 800a472:	4649      	mov	r1, r9
 800a474:	4658      	mov	r0, fp
 800a476:	f001 f849 	bl	800b50c <__pow5mult>
 800a47a:	4681      	mov	r9, r0
 800a47c:	2101      	movs	r1, #1
 800a47e:	4658      	mov	r0, fp
 800a480:	f000 ff84 	bl	800b38c <__i2b>
 800a484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a486:	4604      	mov	r4, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f000 81cf 	beq.w	800a82c <_dtoa_r+0xb3c>
 800a48e:	461a      	mov	r2, r3
 800a490:	4601      	mov	r1, r0
 800a492:	4658      	mov	r0, fp
 800a494:	f001 f83a 	bl	800b50c <__pow5mult>
 800a498:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	4604      	mov	r4, r0
 800a49e:	f300 8095 	bgt.w	800a5cc <_dtoa_r+0x8dc>
 800a4a2:	9b02      	ldr	r3, [sp, #8]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f040 8087 	bne.w	800a5b8 <_dtoa_r+0x8c8>
 800a4aa:	9b03      	ldr	r3, [sp, #12]
 800a4ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	f040 8089 	bne.w	800a5c8 <_dtoa_r+0x8d8>
 800a4b6:	9b03      	ldr	r3, [sp, #12]
 800a4b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a4bc:	0d1b      	lsrs	r3, r3, #20
 800a4be:	051b      	lsls	r3, r3, #20
 800a4c0:	b12b      	cbz	r3, 800a4ce <_dtoa_r+0x7de>
 800a4c2:	9b08      	ldr	r3, [sp, #32]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	9308      	str	r3, [sp, #32]
 800a4c8:	f108 0801 	add.w	r8, r8, #1
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	f000 81b0 	beq.w	800a838 <_dtoa_r+0xb48>
 800a4d8:	6923      	ldr	r3, [r4, #16]
 800a4da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a4de:	6918      	ldr	r0, [r3, #16]
 800a4e0:	f000 ff08 	bl	800b2f4 <__hi0bits>
 800a4e4:	f1c0 0020 	rsb	r0, r0, #32
 800a4e8:	9b08      	ldr	r3, [sp, #32]
 800a4ea:	4418      	add	r0, r3
 800a4ec:	f010 001f 	ands.w	r0, r0, #31
 800a4f0:	d077      	beq.n	800a5e2 <_dtoa_r+0x8f2>
 800a4f2:	f1c0 0320 	rsb	r3, r0, #32
 800a4f6:	2b04      	cmp	r3, #4
 800a4f8:	dd6b      	ble.n	800a5d2 <_dtoa_r+0x8e2>
 800a4fa:	9b08      	ldr	r3, [sp, #32]
 800a4fc:	f1c0 001c 	rsb	r0, r0, #28
 800a500:	4403      	add	r3, r0
 800a502:	4480      	add	r8, r0
 800a504:	4406      	add	r6, r0
 800a506:	9308      	str	r3, [sp, #32]
 800a508:	f1b8 0f00 	cmp.w	r8, #0
 800a50c:	dd05      	ble.n	800a51a <_dtoa_r+0x82a>
 800a50e:	4649      	mov	r1, r9
 800a510:	4642      	mov	r2, r8
 800a512:	4658      	mov	r0, fp
 800a514:	f001 f854 	bl	800b5c0 <__lshift>
 800a518:	4681      	mov	r9, r0
 800a51a:	9b08      	ldr	r3, [sp, #32]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	dd05      	ble.n	800a52c <_dtoa_r+0x83c>
 800a520:	4621      	mov	r1, r4
 800a522:	461a      	mov	r2, r3
 800a524:	4658      	mov	r0, fp
 800a526:	f001 f84b 	bl	800b5c0 <__lshift>
 800a52a:	4604      	mov	r4, r0
 800a52c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d059      	beq.n	800a5e6 <_dtoa_r+0x8f6>
 800a532:	4621      	mov	r1, r4
 800a534:	4648      	mov	r0, r9
 800a536:	f001 f8af 	bl	800b698 <__mcmp>
 800a53a:	2800      	cmp	r0, #0
 800a53c:	da53      	bge.n	800a5e6 <_dtoa_r+0x8f6>
 800a53e:	1e7b      	subs	r3, r7, #1
 800a540:	9304      	str	r3, [sp, #16]
 800a542:	4649      	mov	r1, r9
 800a544:	2300      	movs	r3, #0
 800a546:	220a      	movs	r2, #10
 800a548:	4658      	mov	r0, fp
 800a54a:	f000 fe43 	bl	800b1d4 <__multadd>
 800a54e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a550:	4681      	mov	r9, r0
 800a552:	2b00      	cmp	r3, #0
 800a554:	f000 8172 	beq.w	800a83c <_dtoa_r+0xb4c>
 800a558:	2300      	movs	r3, #0
 800a55a:	4629      	mov	r1, r5
 800a55c:	220a      	movs	r2, #10
 800a55e:	4658      	mov	r0, fp
 800a560:	f000 fe38 	bl	800b1d4 <__multadd>
 800a564:	9b00      	ldr	r3, [sp, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	4605      	mov	r5, r0
 800a56a:	dc67      	bgt.n	800a63c <_dtoa_r+0x94c>
 800a56c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a56e:	2b02      	cmp	r3, #2
 800a570:	dc41      	bgt.n	800a5f6 <_dtoa_r+0x906>
 800a572:	e063      	b.n	800a63c <_dtoa_r+0x94c>
 800a574:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a576:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a57a:	e746      	b.n	800a40a <_dtoa_r+0x71a>
 800a57c:	9b07      	ldr	r3, [sp, #28]
 800a57e:	1e5c      	subs	r4, r3, #1
 800a580:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a582:	42a3      	cmp	r3, r4
 800a584:	bfbf      	itttt	lt
 800a586:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a588:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a58a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a58c:	1ae3      	sublt	r3, r4, r3
 800a58e:	bfb4      	ite	lt
 800a590:	18d2      	addlt	r2, r2, r3
 800a592:	1b1c      	subge	r4, r3, r4
 800a594:	9b07      	ldr	r3, [sp, #28]
 800a596:	bfbc      	itt	lt
 800a598:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a59a:	2400      	movlt	r4, #0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	bfb5      	itete	lt
 800a5a0:	eba8 0603 	sublt.w	r6, r8, r3
 800a5a4:	9b07      	ldrge	r3, [sp, #28]
 800a5a6:	2300      	movlt	r3, #0
 800a5a8:	4646      	movge	r6, r8
 800a5aa:	e730      	b.n	800a40e <_dtoa_r+0x71e>
 800a5ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a5ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a5b0:	4646      	mov	r6, r8
 800a5b2:	e735      	b.n	800a420 <_dtoa_r+0x730>
 800a5b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a5b6:	e75c      	b.n	800a472 <_dtoa_r+0x782>
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	e788      	b.n	800a4ce <_dtoa_r+0x7de>
 800a5bc:	3fe00000 	.word	0x3fe00000
 800a5c0:	40240000 	.word	0x40240000
 800a5c4:	40140000 	.word	0x40140000
 800a5c8:	9b02      	ldr	r3, [sp, #8]
 800a5ca:	e780      	b.n	800a4ce <_dtoa_r+0x7de>
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5d0:	e782      	b.n	800a4d8 <_dtoa_r+0x7e8>
 800a5d2:	d099      	beq.n	800a508 <_dtoa_r+0x818>
 800a5d4:	9a08      	ldr	r2, [sp, #32]
 800a5d6:	331c      	adds	r3, #28
 800a5d8:	441a      	add	r2, r3
 800a5da:	4498      	add	r8, r3
 800a5dc:	441e      	add	r6, r3
 800a5de:	9208      	str	r2, [sp, #32]
 800a5e0:	e792      	b.n	800a508 <_dtoa_r+0x818>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	e7f6      	b.n	800a5d4 <_dtoa_r+0x8e4>
 800a5e6:	9b07      	ldr	r3, [sp, #28]
 800a5e8:	9704      	str	r7, [sp, #16]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	dc20      	bgt.n	800a630 <_dtoa_r+0x940>
 800a5ee:	9300      	str	r3, [sp, #0]
 800a5f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	dd1e      	ble.n	800a634 <_dtoa_r+0x944>
 800a5f6:	9b00      	ldr	r3, [sp, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	f47f aec0 	bne.w	800a37e <_dtoa_r+0x68e>
 800a5fe:	4621      	mov	r1, r4
 800a600:	2205      	movs	r2, #5
 800a602:	4658      	mov	r0, fp
 800a604:	f000 fde6 	bl	800b1d4 <__multadd>
 800a608:	4601      	mov	r1, r0
 800a60a:	4604      	mov	r4, r0
 800a60c:	4648      	mov	r0, r9
 800a60e:	f001 f843 	bl	800b698 <__mcmp>
 800a612:	2800      	cmp	r0, #0
 800a614:	f77f aeb3 	ble.w	800a37e <_dtoa_r+0x68e>
 800a618:	4656      	mov	r6, sl
 800a61a:	2331      	movs	r3, #49	@ 0x31
 800a61c:	f806 3b01 	strb.w	r3, [r6], #1
 800a620:	9b04      	ldr	r3, [sp, #16]
 800a622:	3301      	adds	r3, #1
 800a624:	9304      	str	r3, [sp, #16]
 800a626:	e6ae      	b.n	800a386 <_dtoa_r+0x696>
 800a628:	9c07      	ldr	r4, [sp, #28]
 800a62a:	9704      	str	r7, [sp, #16]
 800a62c:	4625      	mov	r5, r4
 800a62e:	e7f3      	b.n	800a618 <_dtoa_r+0x928>
 800a630:	9b07      	ldr	r3, [sp, #28]
 800a632:	9300      	str	r3, [sp, #0]
 800a634:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a636:	2b00      	cmp	r3, #0
 800a638:	f000 8104 	beq.w	800a844 <_dtoa_r+0xb54>
 800a63c:	2e00      	cmp	r6, #0
 800a63e:	dd05      	ble.n	800a64c <_dtoa_r+0x95c>
 800a640:	4629      	mov	r1, r5
 800a642:	4632      	mov	r2, r6
 800a644:	4658      	mov	r0, fp
 800a646:	f000 ffbb 	bl	800b5c0 <__lshift>
 800a64a:	4605      	mov	r5, r0
 800a64c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d05a      	beq.n	800a708 <_dtoa_r+0xa18>
 800a652:	6869      	ldr	r1, [r5, #4]
 800a654:	4658      	mov	r0, fp
 800a656:	f000 fd5b 	bl	800b110 <_Balloc>
 800a65a:	4606      	mov	r6, r0
 800a65c:	b928      	cbnz	r0, 800a66a <_dtoa_r+0x97a>
 800a65e:	4b84      	ldr	r3, [pc, #528]	@ (800a870 <_dtoa_r+0xb80>)
 800a660:	4602      	mov	r2, r0
 800a662:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a666:	f7ff bb5a 	b.w	8009d1e <_dtoa_r+0x2e>
 800a66a:	692a      	ldr	r2, [r5, #16]
 800a66c:	3202      	adds	r2, #2
 800a66e:	0092      	lsls	r2, r2, #2
 800a670:	f105 010c 	add.w	r1, r5, #12
 800a674:	300c      	adds	r0, #12
 800a676:	f7ff fa7a 	bl	8009b6e <memcpy>
 800a67a:	2201      	movs	r2, #1
 800a67c:	4631      	mov	r1, r6
 800a67e:	4658      	mov	r0, fp
 800a680:	f000 ff9e 	bl	800b5c0 <__lshift>
 800a684:	f10a 0301 	add.w	r3, sl, #1
 800a688:	9307      	str	r3, [sp, #28]
 800a68a:	9b00      	ldr	r3, [sp, #0]
 800a68c:	4453      	add	r3, sl
 800a68e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a690:	9b02      	ldr	r3, [sp, #8]
 800a692:	f003 0301 	and.w	r3, r3, #1
 800a696:	462f      	mov	r7, r5
 800a698:	930a      	str	r3, [sp, #40]	@ 0x28
 800a69a:	4605      	mov	r5, r0
 800a69c:	9b07      	ldr	r3, [sp, #28]
 800a69e:	4621      	mov	r1, r4
 800a6a0:	3b01      	subs	r3, #1
 800a6a2:	4648      	mov	r0, r9
 800a6a4:	9300      	str	r3, [sp, #0]
 800a6a6:	f7ff fa99 	bl	8009bdc <quorem>
 800a6aa:	4639      	mov	r1, r7
 800a6ac:	9002      	str	r0, [sp, #8]
 800a6ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a6b2:	4648      	mov	r0, r9
 800a6b4:	f000 fff0 	bl	800b698 <__mcmp>
 800a6b8:	462a      	mov	r2, r5
 800a6ba:	9008      	str	r0, [sp, #32]
 800a6bc:	4621      	mov	r1, r4
 800a6be:	4658      	mov	r0, fp
 800a6c0:	f001 f806 	bl	800b6d0 <__mdiff>
 800a6c4:	68c2      	ldr	r2, [r0, #12]
 800a6c6:	4606      	mov	r6, r0
 800a6c8:	bb02      	cbnz	r2, 800a70c <_dtoa_r+0xa1c>
 800a6ca:	4601      	mov	r1, r0
 800a6cc:	4648      	mov	r0, r9
 800a6ce:	f000 ffe3 	bl	800b698 <__mcmp>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	4631      	mov	r1, r6
 800a6d6:	4658      	mov	r0, fp
 800a6d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a6da:	f000 fd59 	bl	800b190 <_Bfree>
 800a6de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6e2:	9e07      	ldr	r6, [sp, #28]
 800a6e4:	ea43 0102 	orr.w	r1, r3, r2
 800a6e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6ea:	4319      	orrs	r1, r3
 800a6ec:	d110      	bne.n	800a710 <_dtoa_r+0xa20>
 800a6ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a6f2:	d029      	beq.n	800a748 <_dtoa_r+0xa58>
 800a6f4:	9b08      	ldr	r3, [sp, #32]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	dd02      	ble.n	800a700 <_dtoa_r+0xa10>
 800a6fa:	9b02      	ldr	r3, [sp, #8]
 800a6fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a700:	9b00      	ldr	r3, [sp, #0]
 800a702:	f883 8000 	strb.w	r8, [r3]
 800a706:	e63f      	b.n	800a388 <_dtoa_r+0x698>
 800a708:	4628      	mov	r0, r5
 800a70a:	e7bb      	b.n	800a684 <_dtoa_r+0x994>
 800a70c:	2201      	movs	r2, #1
 800a70e:	e7e1      	b.n	800a6d4 <_dtoa_r+0x9e4>
 800a710:	9b08      	ldr	r3, [sp, #32]
 800a712:	2b00      	cmp	r3, #0
 800a714:	db04      	blt.n	800a720 <_dtoa_r+0xa30>
 800a716:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a718:	430b      	orrs	r3, r1
 800a71a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a71c:	430b      	orrs	r3, r1
 800a71e:	d120      	bne.n	800a762 <_dtoa_r+0xa72>
 800a720:	2a00      	cmp	r2, #0
 800a722:	dded      	ble.n	800a700 <_dtoa_r+0xa10>
 800a724:	4649      	mov	r1, r9
 800a726:	2201      	movs	r2, #1
 800a728:	4658      	mov	r0, fp
 800a72a:	f000 ff49 	bl	800b5c0 <__lshift>
 800a72e:	4621      	mov	r1, r4
 800a730:	4681      	mov	r9, r0
 800a732:	f000 ffb1 	bl	800b698 <__mcmp>
 800a736:	2800      	cmp	r0, #0
 800a738:	dc03      	bgt.n	800a742 <_dtoa_r+0xa52>
 800a73a:	d1e1      	bne.n	800a700 <_dtoa_r+0xa10>
 800a73c:	f018 0f01 	tst.w	r8, #1
 800a740:	d0de      	beq.n	800a700 <_dtoa_r+0xa10>
 800a742:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a746:	d1d8      	bne.n	800a6fa <_dtoa_r+0xa0a>
 800a748:	9a00      	ldr	r2, [sp, #0]
 800a74a:	2339      	movs	r3, #57	@ 0x39
 800a74c:	7013      	strb	r3, [r2, #0]
 800a74e:	4633      	mov	r3, r6
 800a750:	461e      	mov	r6, r3
 800a752:	3b01      	subs	r3, #1
 800a754:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a758:	2a39      	cmp	r2, #57	@ 0x39
 800a75a:	d052      	beq.n	800a802 <_dtoa_r+0xb12>
 800a75c:	3201      	adds	r2, #1
 800a75e:	701a      	strb	r2, [r3, #0]
 800a760:	e612      	b.n	800a388 <_dtoa_r+0x698>
 800a762:	2a00      	cmp	r2, #0
 800a764:	dd07      	ble.n	800a776 <_dtoa_r+0xa86>
 800a766:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a76a:	d0ed      	beq.n	800a748 <_dtoa_r+0xa58>
 800a76c:	9a00      	ldr	r2, [sp, #0]
 800a76e:	f108 0301 	add.w	r3, r8, #1
 800a772:	7013      	strb	r3, [r2, #0]
 800a774:	e608      	b.n	800a388 <_dtoa_r+0x698>
 800a776:	9b07      	ldr	r3, [sp, #28]
 800a778:	9a07      	ldr	r2, [sp, #28]
 800a77a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a77e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a780:	4293      	cmp	r3, r2
 800a782:	d028      	beq.n	800a7d6 <_dtoa_r+0xae6>
 800a784:	4649      	mov	r1, r9
 800a786:	2300      	movs	r3, #0
 800a788:	220a      	movs	r2, #10
 800a78a:	4658      	mov	r0, fp
 800a78c:	f000 fd22 	bl	800b1d4 <__multadd>
 800a790:	42af      	cmp	r7, r5
 800a792:	4681      	mov	r9, r0
 800a794:	f04f 0300 	mov.w	r3, #0
 800a798:	f04f 020a 	mov.w	r2, #10
 800a79c:	4639      	mov	r1, r7
 800a79e:	4658      	mov	r0, fp
 800a7a0:	d107      	bne.n	800a7b2 <_dtoa_r+0xac2>
 800a7a2:	f000 fd17 	bl	800b1d4 <__multadd>
 800a7a6:	4607      	mov	r7, r0
 800a7a8:	4605      	mov	r5, r0
 800a7aa:	9b07      	ldr	r3, [sp, #28]
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	9307      	str	r3, [sp, #28]
 800a7b0:	e774      	b.n	800a69c <_dtoa_r+0x9ac>
 800a7b2:	f000 fd0f 	bl	800b1d4 <__multadd>
 800a7b6:	4629      	mov	r1, r5
 800a7b8:	4607      	mov	r7, r0
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	220a      	movs	r2, #10
 800a7be:	4658      	mov	r0, fp
 800a7c0:	f000 fd08 	bl	800b1d4 <__multadd>
 800a7c4:	4605      	mov	r5, r0
 800a7c6:	e7f0      	b.n	800a7aa <_dtoa_r+0xaba>
 800a7c8:	9b00      	ldr	r3, [sp, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	bfcc      	ite	gt
 800a7ce:	461e      	movgt	r6, r3
 800a7d0:	2601      	movle	r6, #1
 800a7d2:	4456      	add	r6, sl
 800a7d4:	2700      	movs	r7, #0
 800a7d6:	4649      	mov	r1, r9
 800a7d8:	2201      	movs	r2, #1
 800a7da:	4658      	mov	r0, fp
 800a7dc:	f000 fef0 	bl	800b5c0 <__lshift>
 800a7e0:	4621      	mov	r1, r4
 800a7e2:	4681      	mov	r9, r0
 800a7e4:	f000 ff58 	bl	800b698 <__mcmp>
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	dcb0      	bgt.n	800a74e <_dtoa_r+0xa5e>
 800a7ec:	d102      	bne.n	800a7f4 <_dtoa_r+0xb04>
 800a7ee:	f018 0f01 	tst.w	r8, #1
 800a7f2:	d1ac      	bne.n	800a74e <_dtoa_r+0xa5e>
 800a7f4:	4633      	mov	r3, r6
 800a7f6:	461e      	mov	r6, r3
 800a7f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7fc:	2a30      	cmp	r2, #48	@ 0x30
 800a7fe:	d0fa      	beq.n	800a7f6 <_dtoa_r+0xb06>
 800a800:	e5c2      	b.n	800a388 <_dtoa_r+0x698>
 800a802:	459a      	cmp	sl, r3
 800a804:	d1a4      	bne.n	800a750 <_dtoa_r+0xa60>
 800a806:	9b04      	ldr	r3, [sp, #16]
 800a808:	3301      	adds	r3, #1
 800a80a:	9304      	str	r3, [sp, #16]
 800a80c:	2331      	movs	r3, #49	@ 0x31
 800a80e:	f88a 3000 	strb.w	r3, [sl]
 800a812:	e5b9      	b.n	800a388 <_dtoa_r+0x698>
 800a814:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a816:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a874 <_dtoa_r+0xb84>
 800a81a:	b11b      	cbz	r3, 800a824 <_dtoa_r+0xb34>
 800a81c:	f10a 0308 	add.w	r3, sl, #8
 800a820:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a822:	6013      	str	r3, [r2, #0]
 800a824:	4650      	mov	r0, sl
 800a826:	b019      	add	sp, #100	@ 0x64
 800a828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a82c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a82e:	2b01      	cmp	r3, #1
 800a830:	f77f ae37 	ble.w	800a4a2 <_dtoa_r+0x7b2>
 800a834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a836:	930a      	str	r3, [sp, #40]	@ 0x28
 800a838:	2001      	movs	r0, #1
 800a83a:	e655      	b.n	800a4e8 <_dtoa_r+0x7f8>
 800a83c:	9b00      	ldr	r3, [sp, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f77f aed6 	ble.w	800a5f0 <_dtoa_r+0x900>
 800a844:	4656      	mov	r6, sl
 800a846:	4621      	mov	r1, r4
 800a848:	4648      	mov	r0, r9
 800a84a:	f7ff f9c7 	bl	8009bdc <quorem>
 800a84e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a852:	f806 8b01 	strb.w	r8, [r6], #1
 800a856:	9b00      	ldr	r3, [sp, #0]
 800a858:	eba6 020a 	sub.w	r2, r6, sl
 800a85c:	4293      	cmp	r3, r2
 800a85e:	ddb3      	ble.n	800a7c8 <_dtoa_r+0xad8>
 800a860:	4649      	mov	r1, r9
 800a862:	2300      	movs	r3, #0
 800a864:	220a      	movs	r2, #10
 800a866:	4658      	mov	r0, fp
 800a868:	f000 fcb4 	bl	800b1d4 <__multadd>
 800a86c:	4681      	mov	r9, r0
 800a86e:	e7ea      	b.n	800a846 <_dtoa_r+0xb56>
 800a870:	0800c78f 	.word	0x0800c78f
 800a874:	0800c72a 	.word	0x0800c72a

0800a878 <_free_r>:
 800a878:	b538      	push	{r3, r4, r5, lr}
 800a87a:	4605      	mov	r5, r0
 800a87c:	2900      	cmp	r1, #0
 800a87e:	d041      	beq.n	800a904 <_free_r+0x8c>
 800a880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a884:	1f0c      	subs	r4, r1, #4
 800a886:	2b00      	cmp	r3, #0
 800a888:	bfb8      	it	lt
 800a88a:	18e4      	addlt	r4, r4, r3
 800a88c:	f000 fc34 	bl	800b0f8 <__malloc_lock>
 800a890:	4a1d      	ldr	r2, [pc, #116]	@ (800a908 <_free_r+0x90>)
 800a892:	6813      	ldr	r3, [r2, #0]
 800a894:	b933      	cbnz	r3, 800a8a4 <_free_r+0x2c>
 800a896:	6063      	str	r3, [r4, #4]
 800a898:	6014      	str	r4, [r2, #0]
 800a89a:	4628      	mov	r0, r5
 800a89c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8a0:	f000 bc30 	b.w	800b104 <__malloc_unlock>
 800a8a4:	42a3      	cmp	r3, r4
 800a8a6:	d908      	bls.n	800a8ba <_free_r+0x42>
 800a8a8:	6820      	ldr	r0, [r4, #0]
 800a8aa:	1821      	adds	r1, r4, r0
 800a8ac:	428b      	cmp	r3, r1
 800a8ae:	bf01      	itttt	eq
 800a8b0:	6819      	ldreq	r1, [r3, #0]
 800a8b2:	685b      	ldreq	r3, [r3, #4]
 800a8b4:	1809      	addeq	r1, r1, r0
 800a8b6:	6021      	streq	r1, [r4, #0]
 800a8b8:	e7ed      	b.n	800a896 <_free_r+0x1e>
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	b10b      	cbz	r3, 800a8c4 <_free_r+0x4c>
 800a8c0:	42a3      	cmp	r3, r4
 800a8c2:	d9fa      	bls.n	800a8ba <_free_r+0x42>
 800a8c4:	6811      	ldr	r1, [r2, #0]
 800a8c6:	1850      	adds	r0, r2, r1
 800a8c8:	42a0      	cmp	r0, r4
 800a8ca:	d10b      	bne.n	800a8e4 <_free_r+0x6c>
 800a8cc:	6820      	ldr	r0, [r4, #0]
 800a8ce:	4401      	add	r1, r0
 800a8d0:	1850      	adds	r0, r2, r1
 800a8d2:	4283      	cmp	r3, r0
 800a8d4:	6011      	str	r1, [r2, #0]
 800a8d6:	d1e0      	bne.n	800a89a <_free_r+0x22>
 800a8d8:	6818      	ldr	r0, [r3, #0]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	6053      	str	r3, [r2, #4]
 800a8de:	4408      	add	r0, r1
 800a8e0:	6010      	str	r0, [r2, #0]
 800a8e2:	e7da      	b.n	800a89a <_free_r+0x22>
 800a8e4:	d902      	bls.n	800a8ec <_free_r+0x74>
 800a8e6:	230c      	movs	r3, #12
 800a8e8:	602b      	str	r3, [r5, #0]
 800a8ea:	e7d6      	b.n	800a89a <_free_r+0x22>
 800a8ec:	6820      	ldr	r0, [r4, #0]
 800a8ee:	1821      	adds	r1, r4, r0
 800a8f0:	428b      	cmp	r3, r1
 800a8f2:	bf04      	itt	eq
 800a8f4:	6819      	ldreq	r1, [r3, #0]
 800a8f6:	685b      	ldreq	r3, [r3, #4]
 800a8f8:	6063      	str	r3, [r4, #4]
 800a8fa:	bf04      	itt	eq
 800a8fc:	1809      	addeq	r1, r1, r0
 800a8fe:	6021      	streq	r1, [r4, #0]
 800a900:	6054      	str	r4, [r2, #4]
 800a902:	e7ca      	b.n	800a89a <_free_r+0x22>
 800a904:	bd38      	pop	{r3, r4, r5, pc}
 800a906:	bf00      	nop
 800a908:	20000e38 	.word	0x20000e38

0800a90c <rshift>:
 800a90c:	6903      	ldr	r3, [r0, #16]
 800a90e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a912:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a916:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a91a:	f100 0414 	add.w	r4, r0, #20
 800a91e:	dd45      	ble.n	800a9ac <rshift+0xa0>
 800a920:	f011 011f 	ands.w	r1, r1, #31
 800a924:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a928:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a92c:	d10c      	bne.n	800a948 <rshift+0x3c>
 800a92e:	f100 0710 	add.w	r7, r0, #16
 800a932:	4629      	mov	r1, r5
 800a934:	42b1      	cmp	r1, r6
 800a936:	d334      	bcc.n	800a9a2 <rshift+0x96>
 800a938:	1a9b      	subs	r3, r3, r2
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	1eea      	subs	r2, r5, #3
 800a93e:	4296      	cmp	r6, r2
 800a940:	bf38      	it	cc
 800a942:	2300      	movcc	r3, #0
 800a944:	4423      	add	r3, r4
 800a946:	e015      	b.n	800a974 <rshift+0x68>
 800a948:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a94c:	f1c1 0820 	rsb	r8, r1, #32
 800a950:	40cf      	lsrs	r7, r1
 800a952:	f105 0e04 	add.w	lr, r5, #4
 800a956:	46a1      	mov	r9, r4
 800a958:	4576      	cmp	r6, lr
 800a95a:	46f4      	mov	ip, lr
 800a95c:	d815      	bhi.n	800a98a <rshift+0x7e>
 800a95e:	1a9a      	subs	r2, r3, r2
 800a960:	0092      	lsls	r2, r2, #2
 800a962:	3a04      	subs	r2, #4
 800a964:	3501      	adds	r5, #1
 800a966:	42ae      	cmp	r6, r5
 800a968:	bf38      	it	cc
 800a96a:	2200      	movcc	r2, #0
 800a96c:	18a3      	adds	r3, r4, r2
 800a96e:	50a7      	str	r7, [r4, r2]
 800a970:	b107      	cbz	r7, 800a974 <rshift+0x68>
 800a972:	3304      	adds	r3, #4
 800a974:	1b1a      	subs	r2, r3, r4
 800a976:	42a3      	cmp	r3, r4
 800a978:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a97c:	bf08      	it	eq
 800a97e:	2300      	moveq	r3, #0
 800a980:	6102      	str	r2, [r0, #16]
 800a982:	bf08      	it	eq
 800a984:	6143      	streq	r3, [r0, #20]
 800a986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a98a:	f8dc c000 	ldr.w	ip, [ip]
 800a98e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a992:	ea4c 0707 	orr.w	r7, ip, r7
 800a996:	f849 7b04 	str.w	r7, [r9], #4
 800a99a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a99e:	40cf      	lsrs	r7, r1
 800a9a0:	e7da      	b.n	800a958 <rshift+0x4c>
 800a9a2:	f851 cb04 	ldr.w	ip, [r1], #4
 800a9a6:	f847 cf04 	str.w	ip, [r7, #4]!
 800a9aa:	e7c3      	b.n	800a934 <rshift+0x28>
 800a9ac:	4623      	mov	r3, r4
 800a9ae:	e7e1      	b.n	800a974 <rshift+0x68>

0800a9b0 <__hexdig_fun>:
 800a9b0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a9b4:	2b09      	cmp	r3, #9
 800a9b6:	d802      	bhi.n	800a9be <__hexdig_fun+0xe>
 800a9b8:	3820      	subs	r0, #32
 800a9ba:	b2c0      	uxtb	r0, r0
 800a9bc:	4770      	bx	lr
 800a9be:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a9c2:	2b05      	cmp	r3, #5
 800a9c4:	d801      	bhi.n	800a9ca <__hexdig_fun+0x1a>
 800a9c6:	3847      	subs	r0, #71	@ 0x47
 800a9c8:	e7f7      	b.n	800a9ba <__hexdig_fun+0xa>
 800a9ca:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a9ce:	2b05      	cmp	r3, #5
 800a9d0:	d801      	bhi.n	800a9d6 <__hexdig_fun+0x26>
 800a9d2:	3827      	subs	r0, #39	@ 0x27
 800a9d4:	e7f1      	b.n	800a9ba <__hexdig_fun+0xa>
 800a9d6:	2000      	movs	r0, #0
 800a9d8:	4770      	bx	lr
	...

0800a9dc <__gethex>:
 800a9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e0:	b085      	sub	sp, #20
 800a9e2:	468a      	mov	sl, r1
 800a9e4:	9302      	str	r3, [sp, #8]
 800a9e6:	680b      	ldr	r3, [r1, #0]
 800a9e8:	9001      	str	r0, [sp, #4]
 800a9ea:	4690      	mov	r8, r2
 800a9ec:	1c9c      	adds	r4, r3, #2
 800a9ee:	46a1      	mov	r9, r4
 800a9f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a9f4:	2830      	cmp	r0, #48	@ 0x30
 800a9f6:	d0fa      	beq.n	800a9ee <__gethex+0x12>
 800a9f8:	eba9 0303 	sub.w	r3, r9, r3
 800a9fc:	f1a3 0b02 	sub.w	fp, r3, #2
 800aa00:	f7ff ffd6 	bl	800a9b0 <__hexdig_fun>
 800aa04:	4605      	mov	r5, r0
 800aa06:	2800      	cmp	r0, #0
 800aa08:	d168      	bne.n	800aadc <__gethex+0x100>
 800aa0a:	49a0      	ldr	r1, [pc, #640]	@ (800ac8c <__gethex+0x2b0>)
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	4648      	mov	r0, r9
 800aa10:	f7fe ffc7 	bl	80099a2 <strncmp>
 800aa14:	4607      	mov	r7, r0
 800aa16:	2800      	cmp	r0, #0
 800aa18:	d167      	bne.n	800aaea <__gethex+0x10e>
 800aa1a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800aa1e:	4626      	mov	r6, r4
 800aa20:	f7ff ffc6 	bl	800a9b0 <__hexdig_fun>
 800aa24:	2800      	cmp	r0, #0
 800aa26:	d062      	beq.n	800aaee <__gethex+0x112>
 800aa28:	4623      	mov	r3, r4
 800aa2a:	7818      	ldrb	r0, [r3, #0]
 800aa2c:	2830      	cmp	r0, #48	@ 0x30
 800aa2e:	4699      	mov	r9, r3
 800aa30:	f103 0301 	add.w	r3, r3, #1
 800aa34:	d0f9      	beq.n	800aa2a <__gethex+0x4e>
 800aa36:	f7ff ffbb 	bl	800a9b0 <__hexdig_fun>
 800aa3a:	fab0 f580 	clz	r5, r0
 800aa3e:	096d      	lsrs	r5, r5, #5
 800aa40:	f04f 0b01 	mov.w	fp, #1
 800aa44:	464a      	mov	r2, r9
 800aa46:	4616      	mov	r6, r2
 800aa48:	3201      	adds	r2, #1
 800aa4a:	7830      	ldrb	r0, [r6, #0]
 800aa4c:	f7ff ffb0 	bl	800a9b0 <__hexdig_fun>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	d1f8      	bne.n	800aa46 <__gethex+0x6a>
 800aa54:	498d      	ldr	r1, [pc, #564]	@ (800ac8c <__gethex+0x2b0>)
 800aa56:	2201      	movs	r2, #1
 800aa58:	4630      	mov	r0, r6
 800aa5a:	f7fe ffa2 	bl	80099a2 <strncmp>
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	d13f      	bne.n	800aae2 <__gethex+0x106>
 800aa62:	b944      	cbnz	r4, 800aa76 <__gethex+0x9a>
 800aa64:	1c74      	adds	r4, r6, #1
 800aa66:	4622      	mov	r2, r4
 800aa68:	4616      	mov	r6, r2
 800aa6a:	3201      	adds	r2, #1
 800aa6c:	7830      	ldrb	r0, [r6, #0]
 800aa6e:	f7ff ff9f 	bl	800a9b0 <__hexdig_fun>
 800aa72:	2800      	cmp	r0, #0
 800aa74:	d1f8      	bne.n	800aa68 <__gethex+0x8c>
 800aa76:	1ba4      	subs	r4, r4, r6
 800aa78:	00a7      	lsls	r7, r4, #2
 800aa7a:	7833      	ldrb	r3, [r6, #0]
 800aa7c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800aa80:	2b50      	cmp	r3, #80	@ 0x50
 800aa82:	d13e      	bne.n	800ab02 <__gethex+0x126>
 800aa84:	7873      	ldrb	r3, [r6, #1]
 800aa86:	2b2b      	cmp	r3, #43	@ 0x2b
 800aa88:	d033      	beq.n	800aaf2 <__gethex+0x116>
 800aa8a:	2b2d      	cmp	r3, #45	@ 0x2d
 800aa8c:	d034      	beq.n	800aaf8 <__gethex+0x11c>
 800aa8e:	1c71      	adds	r1, r6, #1
 800aa90:	2400      	movs	r4, #0
 800aa92:	7808      	ldrb	r0, [r1, #0]
 800aa94:	f7ff ff8c 	bl	800a9b0 <__hexdig_fun>
 800aa98:	1e43      	subs	r3, r0, #1
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	2b18      	cmp	r3, #24
 800aa9e:	d830      	bhi.n	800ab02 <__gethex+0x126>
 800aaa0:	f1a0 0210 	sub.w	r2, r0, #16
 800aaa4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aaa8:	f7ff ff82 	bl	800a9b0 <__hexdig_fun>
 800aaac:	f100 3cff 	add.w	ip, r0, #4294967295
 800aab0:	fa5f fc8c 	uxtb.w	ip, ip
 800aab4:	f1bc 0f18 	cmp.w	ip, #24
 800aab8:	f04f 030a 	mov.w	r3, #10
 800aabc:	d91e      	bls.n	800aafc <__gethex+0x120>
 800aabe:	b104      	cbz	r4, 800aac2 <__gethex+0xe6>
 800aac0:	4252      	negs	r2, r2
 800aac2:	4417      	add	r7, r2
 800aac4:	f8ca 1000 	str.w	r1, [sl]
 800aac8:	b1ed      	cbz	r5, 800ab06 <__gethex+0x12a>
 800aaca:	f1bb 0f00 	cmp.w	fp, #0
 800aace:	bf0c      	ite	eq
 800aad0:	2506      	moveq	r5, #6
 800aad2:	2500      	movne	r5, #0
 800aad4:	4628      	mov	r0, r5
 800aad6:	b005      	add	sp, #20
 800aad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aadc:	2500      	movs	r5, #0
 800aade:	462c      	mov	r4, r5
 800aae0:	e7b0      	b.n	800aa44 <__gethex+0x68>
 800aae2:	2c00      	cmp	r4, #0
 800aae4:	d1c7      	bne.n	800aa76 <__gethex+0x9a>
 800aae6:	4627      	mov	r7, r4
 800aae8:	e7c7      	b.n	800aa7a <__gethex+0x9e>
 800aaea:	464e      	mov	r6, r9
 800aaec:	462f      	mov	r7, r5
 800aaee:	2501      	movs	r5, #1
 800aaf0:	e7c3      	b.n	800aa7a <__gethex+0x9e>
 800aaf2:	2400      	movs	r4, #0
 800aaf4:	1cb1      	adds	r1, r6, #2
 800aaf6:	e7cc      	b.n	800aa92 <__gethex+0xb6>
 800aaf8:	2401      	movs	r4, #1
 800aafa:	e7fb      	b.n	800aaf4 <__gethex+0x118>
 800aafc:	fb03 0002 	mla	r0, r3, r2, r0
 800ab00:	e7ce      	b.n	800aaa0 <__gethex+0xc4>
 800ab02:	4631      	mov	r1, r6
 800ab04:	e7de      	b.n	800aac4 <__gethex+0xe8>
 800ab06:	eba6 0309 	sub.w	r3, r6, r9
 800ab0a:	3b01      	subs	r3, #1
 800ab0c:	4629      	mov	r1, r5
 800ab0e:	2b07      	cmp	r3, #7
 800ab10:	dc0a      	bgt.n	800ab28 <__gethex+0x14c>
 800ab12:	9801      	ldr	r0, [sp, #4]
 800ab14:	f000 fafc 	bl	800b110 <_Balloc>
 800ab18:	4604      	mov	r4, r0
 800ab1a:	b940      	cbnz	r0, 800ab2e <__gethex+0x152>
 800ab1c:	4b5c      	ldr	r3, [pc, #368]	@ (800ac90 <__gethex+0x2b4>)
 800ab1e:	4602      	mov	r2, r0
 800ab20:	21e4      	movs	r1, #228	@ 0xe4
 800ab22:	485c      	ldr	r0, [pc, #368]	@ (800ac94 <__gethex+0x2b8>)
 800ab24:	f7ff f83c 	bl	8009ba0 <__assert_func>
 800ab28:	3101      	adds	r1, #1
 800ab2a:	105b      	asrs	r3, r3, #1
 800ab2c:	e7ef      	b.n	800ab0e <__gethex+0x132>
 800ab2e:	f100 0a14 	add.w	sl, r0, #20
 800ab32:	2300      	movs	r3, #0
 800ab34:	4655      	mov	r5, sl
 800ab36:	469b      	mov	fp, r3
 800ab38:	45b1      	cmp	r9, r6
 800ab3a:	d337      	bcc.n	800abac <__gethex+0x1d0>
 800ab3c:	f845 bb04 	str.w	fp, [r5], #4
 800ab40:	eba5 050a 	sub.w	r5, r5, sl
 800ab44:	10ad      	asrs	r5, r5, #2
 800ab46:	6125      	str	r5, [r4, #16]
 800ab48:	4658      	mov	r0, fp
 800ab4a:	f000 fbd3 	bl	800b2f4 <__hi0bits>
 800ab4e:	016d      	lsls	r5, r5, #5
 800ab50:	f8d8 6000 	ldr.w	r6, [r8]
 800ab54:	1a2d      	subs	r5, r5, r0
 800ab56:	42b5      	cmp	r5, r6
 800ab58:	dd54      	ble.n	800ac04 <__gethex+0x228>
 800ab5a:	1bad      	subs	r5, r5, r6
 800ab5c:	4629      	mov	r1, r5
 800ab5e:	4620      	mov	r0, r4
 800ab60:	f000 ff67 	bl	800ba32 <__any_on>
 800ab64:	4681      	mov	r9, r0
 800ab66:	b178      	cbz	r0, 800ab88 <__gethex+0x1ac>
 800ab68:	1e6b      	subs	r3, r5, #1
 800ab6a:	1159      	asrs	r1, r3, #5
 800ab6c:	f003 021f 	and.w	r2, r3, #31
 800ab70:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ab74:	f04f 0901 	mov.w	r9, #1
 800ab78:	fa09 f202 	lsl.w	r2, r9, r2
 800ab7c:	420a      	tst	r2, r1
 800ab7e:	d003      	beq.n	800ab88 <__gethex+0x1ac>
 800ab80:	454b      	cmp	r3, r9
 800ab82:	dc36      	bgt.n	800abf2 <__gethex+0x216>
 800ab84:	f04f 0902 	mov.w	r9, #2
 800ab88:	4629      	mov	r1, r5
 800ab8a:	4620      	mov	r0, r4
 800ab8c:	f7ff febe 	bl	800a90c <rshift>
 800ab90:	442f      	add	r7, r5
 800ab92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab96:	42bb      	cmp	r3, r7
 800ab98:	da42      	bge.n	800ac20 <__gethex+0x244>
 800ab9a:	9801      	ldr	r0, [sp, #4]
 800ab9c:	4621      	mov	r1, r4
 800ab9e:	f000 faf7 	bl	800b190 <_Bfree>
 800aba2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aba4:	2300      	movs	r3, #0
 800aba6:	6013      	str	r3, [r2, #0]
 800aba8:	25a3      	movs	r5, #163	@ 0xa3
 800abaa:	e793      	b.n	800aad4 <__gethex+0xf8>
 800abac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800abb0:	2a2e      	cmp	r2, #46	@ 0x2e
 800abb2:	d012      	beq.n	800abda <__gethex+0x1fe>
 800abb4:	2b20      	cmp	r3, #32
 800abb6:	d104      	bne.n	800abc2 <__gethex+0x1e6>
 800abb8:	f845 bb04 	str.w	fp, [r5], #4
 800abbc:	f04f 0b00 	mov.w	fp, #0
 800abc0:	465b      	mov	r3, fp
 800abc2:	7830      	ldrb	r0, [r6, #0]
 800abc4:	9303      	str	r3, [sp, #12]
 800abc6:	f7ff fef3 	bl	800a9b0 <__hexdig_fun>
 800abca:	9b03      	ldr	r3, [sp, #12]
 800abcc:	f000 000f 	and.w	r0, r0, #15
 800abd0:	4098      	lsls	r0, r3
 800abd2:	ea4b 0b00 	orr.w	fp, fp, r0
 800abd6:	3304      	adds	r3, #4
 800abd8:	e7ae      	b.n	800ab38 <__gethex+0x15c>
 800abda:	45b1      	cmp	r9, r6
 800abdc:	d8ea      	bhi.n	800abb4 <__gethex+0x1d8>
 800abde:	492b      	ldr	r1, [pc, #172]	@ (800ac8c <__gethex+0x2b0>)
 800abe0:	9303      	str	r3, [sp, #12]
 800abe2:	2201      	movs	r2, #1
 800abe4:	4630      	mov	r0, r6
 800abe6:	f7fe fedc 	bl	80099a2 <strncmp>
 800abea:	9b03      	ldr	r3, [sp, #12]
 800abec:	2800      	cmp	r0, #0
 800abee:	d1e1      	bne.n	800abb4 <__gethex+0x1d8>
 800abf0:	e7a2      	b.n	800ab38 <__gethex+0x15c>
 800abf2:	1ea9      	subs	r1, r5, #2
 800abf4:	4620      	mov	r0, r4
 800abf6:	f000 ff1c 	bl	800ba32 <__any_on>
 800abfa:	2800      	cmp	r0, #0
 800abfc:	d0c2      	beq.n	800ab84 <__gethex+0x1a8>
 800abfe:	f04f 0903 	mov.w	r9, #3
 800ac02:	e7c1      	b.n	800ab88 <__gethex+0x1ac>
 800ac04:	da09      	bge.n	800ac1a <__gethex+0x23e>
 800ac06:	1b75      	subs	r5, r6, r5
 800ac08:	4621      	mov	r1, r4
 800ac0a:	9801      	ldr	r0, [sp, #4]
 800ac0c:	462a      	mov	r2, r5
 800ac0e:	f000 fcd7 	bl	800b5c0 <__lshift>
 800ac12:	1b7f      	subs	r7, r7, r5
 800ac14:	4604      	mov	r4, r0
 800ac16:	f100 0a14 	add.w	sl, r0, #20
 800ac1a:	f04f 0900 	mov.w	r9, #0
 800ac1e:	e7b8      	b.n	800ab92 <__gethex+0x1b6>
 800ac20:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ac24:	42bd      	cmp	r5, r7
 800ac26:	dd6f      	ble.n	800ad08 <__gethex+0x32c>
 800ac28:	1bed      	subs	r5, r5, r7
 800ac2a:	42ae      	cmp	r6, r5
 800ac2c:	dc34      	bgt.n	800ac98 <__gethex+0x2bc>
 800ac2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac32:	2b02      	cmp	r3, #2
 800ac34:	d022      	beq.n	800ac7c <__gethex+0x2a0>
 800ac36:	2b03      	cmp	r3, #3
 800ac38:	d024      	beq.n	800ac84 <__gethex+0x2a8>
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d115      	bne.n	800ac6a <__gethex+0x28e>
 800ac3e:	42ae      	cmp	r6, r5
 800ac40:	d113      	bne.n	800ac6a <__gethex+0x28e>
 800ac42:	2e01      	cmp	r6, #1
 800ac44:	d10b      	bne.n	800ac5e <__gethex+0x282>
 800ac46:	9a02      	ldr	r2, [sp, #8]
 800ac48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ac4c:	6013      	str	r3, [r2, #0]
 800ac4e:	2301      	movs	r3, #1
 800ac50:	6123      	str	r3, [r4, #16]
 800ac52:	f8ca 3000 	str.w	r3, [sl]
 800ac56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac58:	2562      	movs	r5, #98	@ 0x62
 800ac5a:	601c      	str	r4, [r3, #0]
 800ac5c:	e73a      	b.n	800aad4 <__gethex+0xf8>
 800ac5e:	1e71      	subs	r1, r6, #1
 800ac60:	4620      	mov	r0, r4
 800ac62:	f000 fee6 	bl	800ba32 <__any_on>
 800ac66:	2800      	cmp	r0, #0
 800ac68:	d1ed      	bne.n	800ac46 <__gethex+0x26a>
 800ac6a:	9801      	ldr	r0, [sp, #4]
 800ac6c:	4621      	mov	r1, r4
 800ac6e:	f000 fa8f 	bl	800b190 <_Bfree>
 800ac72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac74:	2300      	movs	r3, #0
 800ac76:	6013      	str	r3, [r2, #0]
 800ac78:	2550      	movs	r5, #80	@ 0x50
 800ac7a:	e72b      	b.n	800aad4 <__gethex+0xf8>
 800ac7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d1f3      	bne.n	800ac6a <__gethex+0x28e>
 800ac82:	e7e0      	b.n	800ac46 <__gethex+0x26a>
 800ac84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1dd      	bne.n	800ac46 <__gethex+0x26a>
 800ac8a:	e7ee      	b.n	800ac6a <__gethex+0x28e>
 800ac8c:	0800c4e8 	.word	0x0800c4e8
 800ac90:	0800c78f 	.word	0x0800c78f
 800ac94:	0800c7a0 	.word	0x0800c7a0
 800ac98:	1e6f      	subs	r7, r5, #1
 800ac9a:	f1b9 0f00 	cmp.w	r9, #0
 800ac9e:	d130      	bne.n	800ad02 <__gethex+0x326>
 800aca0:	b127      	cbz	r7, 800acac <__gethex+0x2d0>
 800aca2:	4639      	mov	r1, r7
 800aca4:	4620      	mov	r0, r4
 800aca6:	f000 fec4 	bl	800ba32 <__any_on>
 800acaa:	4681      	mov	r9, r0
 800acac:	117a      	asrs	r2, r7, #5
 800acae:	2301      	movs	r3, #1
 800acb0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800acb4:	f007 071f 	and.w	r7, r7, #31
 800acb8:	40bb      	lsls	r3, r7
 800acba:	4213      	tst	r3, r2
 800acbc:	4629      	mov	r1, r5
 800acbe:	4620      	mov	r0, r4
 800acc0:	bf18      	it	ne
 800acc2:	f049 0902 	orrne.w	r9, r9, #2
 800acc6:	f7ff fe21 	bl	800a90c <rshift>
 800acca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800acce:	1b76      	subs	r6, r6, r5
 800acd0:	2502      	movs	r5, #2
 800acd2:	f1b9 0f00 	cmp.w	r9, #0
 800acd6:	d047      	beq.n	800ad68 <__gethex+0x38c>
 800acd8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800acdc:	2b02      	cmp	r3, #2
 800acde:	d015      	beq.n	800ad0c <__gethex+0x330>
 800ace0:	2b03      	cmp	r3, #3
 800ace2:	d017      	beq.n	800ad14 <__gethex+0x338>
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d109      	bne.n	800acfc <__gethex+0x320>
 800ace8:	f019 0f02 	tst.w	r9, #2
 800acec:	d006      	beq.n	800acfc <__gethex+0x320>
 800acee:	f8da 3000 	ldr.w	r3, [sl]
 800acf2:	ea49 0903 	orr.w	r9, r9, r3
 800acf6:	f019 0f01 	tst.w	r9, #1
 800acfa:	d10e      	bne.n	800ad1a <__gethex+0x33e>
 800acfc:	f045 0510 	orr.w	r5, r5, #16
 800ad00:	e032      	b.n	800ad68 <__gethex+0x38c>
 800ad02:	f04f 0901 	mov.w	r9, #1
 800ad06:	e7d1      	b.n	800acac <__gethex+0x2d0>
 800ad08:	2501      	movs	r5, #1
 800ad0a:	e7e2      	b.n	800acd2 <__gethex+0x2f6>
 800ad0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad0e:	f1c3 0301 	rsb	r3, r3, #1
 800ad12:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ad14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d0f0      	beq.n	800acfc <__gethex+0x320>
 800ad1a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ad1e:	f104 0314 	add.w	r3, r4, #20
 800ad22:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ad26:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ad2a:	f04f 0c00 	mov.w	ip, #0
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad34:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ad38:	d01b      	beq.n	800ad72 <__gethex+0x396>
 800ad3a:	3201      	adds	r2, #1
 800ad3c:	6002      	str	r2, [r0, #0]
 800ad3e:	2d02      	cmp	r5, #2
 800ad40:	f104 0314 	add.w	r3, r4, #20
 800ad44:	d13c      	bne.n	800adc0 <__gethex+0x3e4>
 800ad46:	f8d8 2000 	ldr.w	r2, [r8]
 800ad4a:	3a01      	subs	r2, #1
 800ad4c:	42b2      	cmp	r2, r6
 800ad4e:	d109      	bne.n	800ad64 <__gethex+0x388>
 800ad50:	1171      	asrs	r1, r6, #5
 800ad52:	2201      	movs	r2, #1
 800ad54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ad58:	f006 061f 	and.w	r6, r6, #31
 800ad5c:	fa02 f606 	lsl.w	r6, r2, r6
 800ad60:	421e      	tst	r6, r3
 800ad62:	d13a      	bne.n	800adda <__gethex+0x3fe>
 800ad64:	f045 0520 	orr.w	r5, r5, #32
 800ad68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad6a:	601c      	str	r4, [r3, #0]
 800ad6c:	9b02      	ldr	r3, [sp, #8]
 800ad6e:	601f      	str	r7, [r3, #0]
 800ad70:	e6b0      	b.n	800aad4 <__gethex+0xf8>
 800ad72:	4299      	cmp	r1, r3
 800ad74:	f843 cc04 	str.w	ip, [r3, #-4]
 800ad78:	d8d9      	bhi.n	800ad2e <__gethex+0x352>
 800ad7a:	68a3      	ldr	r3, [r4, #8]
 800ad7c:	459b      	cmp	fp, r3
 800ad7e:	db17      	blt.n	800adb0 <__gethex+0x3d4>
 800ad80:	6861      	ldr	r1, [r4, #4]
 800ad82:	9801      	ldr	r0, [sp, #4]
 800ad84:	3101      	adds	r1, #1
 800ad86:	f000 f9c3 	bl	800b110 <_Balloc>
 800ad8a:	4681      	mov	r9, r0
 800ad8c:	b918      	cbnz	r0, 800ad96 <__gethex+0x3ba>
 800ad8e:	4b1a      	ldr	r3, [pc, #104]	@ (800adf8 <__gethex+0x41c>)
 800ad90:	4602      	mov	r2, r0
 800ad92:	2184      	movs	r1, #132	@ 0x84
 800ad94:	e6c5      	b.n	800ab22 <__gethex+0x146>
 800ad96:	6922      	ldr	r2, [r4, #16]
 800ad98:	3202      	adds	r2, #2
 800ad9a:	f104 010c 	add.w	r1, r4, #12
 800ad9e:	0092      	lsls	r2, r2, #2
 800ada0:	300c      	adds	r0, #12
 800ada2:	f7fe fee4 	bl	8009b6e <memcpy>
 800ada6:	4621      	mov	r1, r4
 800ada8:	9801      	ldr	r0, [sp, #4]
 800adaa:	f000 f9f1 	bl	800b190 <_Bfree>
 800adae:	464c      	mov	r4, r9
 800adb0:	6923      	ldr	r3, [r4, #16]
 800adb2:	1c5a      	adds	r2, r3, #1
 800adb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800adb8:	6122      	str	r2, [r4, #16]
 800adba:	2201      	movs	r2, #1
 800adbc:	615a      	str	r2, [r3, #20]
 800adbe:	e7be      	b.n	800ad3e <__gethex+0x362>
 800adc0:	6922      	ldr	r2, [r4, #16]
 800adc2:	455a      	cmp	r2, fp
 800adc4:	dd0b      	ble.n	800adde <__gethex+0x402>
 800adc6:	2101      	movs	r1, #1
 800adc8:	4620      	mov	r0, r4
 800adca:	f7ff fd9f 	bl	800a90c <rshift>
 800adce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800add2:	3701      	adds	r7, #1
 800add4:	42bb      	cmp	r3, r7
 800add6:	f6ff aee0 	blt.w	800ab9a <__gethex+0x1be>
 800adda:	2501      	movs	r5, #1
 800addc:	e7c2      	b.n	800ad64 <__gethex+0x388>
 800adde:	f016 061f 	ands.w	r6, r6, #31
 800ade2:	d0fa      	beq.n	800adda <__gethex+0x3fe>
 800ade4:	4453      	add	r3, sl
 800ade6:	f1c6 0620 	rsb	r6, r6, #32
 800adea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800adee:	f000 fa81 	bl	800b2f4 <__hi0bits>
 800adf2:	42b0      	cmp	r0, r6
 800adf4:	dbe7      	blt.n	800adc6 <__gethex+0x3ea>
 800adf6:	e7f0      	b.n	800adda <__gethex+0x3fe>
 800adf8:	0800c78f 	.word	0x0800c78f

0800adfc <L_shift>:
 800adfc:	f1c2 0208 	rsb	r2, r2, #8
 800ae00:	0092      	lsls	r2, r2, #2
 800ae02:	b570      	push	{r4, r5, r6, lr}
 800ae04:	f1c2 0620 	rsb	r6, r2, #32
 800ae08:	6843      	ldr	r3, [r0, #4]
 800ae0a:	6804      	ldr	r4, [r0, #0]
 800ae0c:	fa03 f506 	lsl.w	r5, r3, r6
 800ae10:	432c      	orrs	r4, r5
 800ae12:	40d3      	lsrs	r3, r2
 800ae14:	6004      	str	r4, [r0, #0]
 800ae16:	f840 3f04 	str.w	r3, [r0, #4]!
 800ae1a:	4288      	cmp	r0, r1
 800ae1c:	d3f4      	bcc.n	800ae08 <L_shift+0xc>
 800ae1e:	bd70      	pop	{r4, r5, r6, pc}

0800ae20 <__match>:
 800ae20:	b530      	push	{r4, r5, lr}
 800ae22:	6803      	ldr	r3, [r0, #0]
 800ae24:	3301      	adds	r3, #1
 800ae26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae2a:	b914      	cbnz	r4, 800ae32 <__match+0x12>
 800ae2c:	6003      	str	r3, [r0, #0]
 800ae2e:	2001      	movs	r0, #1
 800ae30:	bd30      	pop	{r4, r5, pc}
 800ae32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae36:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ae3a:	2d19      	cmp	r5, #25
 800ae3c:	bf98      	it	ls
 800ae3e:	3220      	addls	r2, #32
 800ae40:	42a2      	cmp	r2, r4
 800ae42:	d0f0      	beq.n	800ae26 <__match+0x6>
 800ae44:	2000      	movs	r0, #0
 800ae46:	e7f3      	b.n	800ae30 <__match+0x10>

0800ae48 <__hexnan>:
 800ae48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae4c:	680b      	ldr	r3, [r1, #0]
 800ae4e:	6801      	ldr	r1, [r0, #0]
 800ae50:	115e      	asrs	r6, r3, #5
 800ae52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ae56:	f013 031f 	ands.w	r3, r3, #31
 800ae5a:	b087      	sub	sp, #28
 800ae5c:	bf18      	it	ne
 800ae5e:	3604      	addne	r6, #4
 800ae60:	2500      	movs	r5, #0
 800ae62:	1f37      	subs	r7, r6, #4
 800ae64:	4682      	mov	sl, r0
 800ae66:	4690      	mov	r8, r2
 800ae68:	9301      	str	r3, [sp, #4]
 800ae6a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ae6e:	46b9      	mov	r9, r7
 800ae70:	463c      	mov	r4, r7
 800ae72:	9502      	str	r5, [sp, #8]
 800ae74:	46ab      	mov	fp, r5
 800ae76:	784a      	ldrb	r2, [r1, #1]
 800ae78:	1c4b      	adds	r3, r1, #1
 800ae7a:	9303      	str	r3, [sp, #12]
 800ae7c:	b342      	cbz	r2, 800aed0 <__hexnan+0x88>
 800ae7e:	4610      	mov	r0, r2
 800ae80:	9105      	str	r1, [sp, #20]
 800ae82:	9204      	str	r2, [sp, #16]
 800ae84:	f7ff fd94 	bl	800a9b0 <__hexdig_fun>
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	d151      	bne.n	800af30 <__hexnan+0xe8>
 800ae8c:	9a04      	ldr	r2, [sp, #16]
 800ae8e:	9905      	ldr	r1, [sp, #20]
 800ae90:	2a20      	cmp	r2, #32
 800ae92:	d818      	bhi.n	800aec6 <__hexnan+0x7e>
 800ae94:	9b02      	ldr	r3, [sp, #8]
 800ae96:	459b      	cmp	fp, r3
 800ae98:	dd13      	ble.n	800aec2 <__hexnan+0x7a>
 800ae9a:	454c      	cmp	r4, r9
 800ae9c:	d206      	bcs.n	800aeac <__hexnan+0x64>
 800ae9e:	2d07      	cmp	r5, #7
 800aea0:	dc04      	bgt.n	800aeac <__hexnan+0x64>
 800aea2:	462a      	mov	r2, r5
 800aea4:	4649      	mov	r1, r9
 800aea6:	4620      	mov	r0, r4
 800aea8:	f7ff ffa8 	bl	800adfc <L_shift>
 800aeac:	4544      	cmp	r4, r8
 800aeae:	d952      	bls.n	800af56 <__hexnan+0x10e>
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	f1a4 0904 	sub.w	r9, r4, #4
 800aeb6:	f844 3c04 	str.w	r3, [r4, #-4]
 800aeba:	f8cd b008 	str.w	fp, [sp, #8]
 800aebe:	464c      	mov	r4, r9
 800aec0:	461d      	mov	r5, r3
 800aec2:	9903      	ldr	r1, [sp, #12]
 800aec4:	e7d7      	b.n	800ae76 <__hexnan+0x2e>
 800aec6:	2a29      	cmp	r2, #41	@ 0x29
 800aec8:	d157      	bne.n	800af7a <__hexnan+0x132>
 800aeca:	3102      	adds	r1, #2
 800aecc:	f8ca 1000 	str.w	r1, [sl]
 800aed0:	f1bb 0f00 	cmp.w	fp, #0
 800aed4:	d051      	beq.n	800af7a <__hexnan+0x132>
 800aed6:	454c      	cmp	r4, r9
 800aed8:	d206      	bcs.n	800aee8 <__hexnan+0xa0>
 800aeda:	2d07      	cmp	r5, #7
 800aedc:	dc04      	bgt.n	800aee8 <__hexnan+0xa0>
 800aede:	462a      	mov	r2, r5
 800aee0:	4649      	mov	r1, r9
 800aee2:	4620      	mov	r0, r4
 800aee4:	f7ff ff8a 	bl	800adfc <L_shift>
 800aee8:	4544      	cmp	r4, r8
 800aeea:	d936      	bls.n	800af5a <__hexnan+0x112>
 800aeec:	f1a8 0204 	sub.w	r2, r8, #4
 800aef0:	4623      	mov	r3, r4
 800aef2:	f853 1b04 	ldr.w	r1, [r3], #4
 800aef6:	f842 1f04 	str.w	r1, [r2, #4]!
 800aefa:	429f      	cmp	r7, r3
 800aefc:	d2f9      	bcs.n	800aef2 <__hexnan+0xaa>
 800aefe:	1b3b      	subs	r3, r7, r4
 800af00:	f023 0303 	bic.w	r3, r3, #3
 800af04:	3304      	adds	r3, #4
 800af06:	3401      	adds	r4, #1
 800af08:	3e03      	subs	r6, #3
 800af0a:	42b4      	cmp	r4, r6
 800af0c:	bf88      	it	hi
 800af0e:	2304      	movhi	r3, #4
 800af10:	4443      	add	r3, r8
 800af12:	2200      	movs	r2, #0
 800af14:	f843 2b04 	str.w	r2, [r3], #4
 800af18:	429f      	cmp	r7, r3
 800af1a:	d2fb      	bcs.n	800af14 <__hexnan+0xcc>
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	b91b      	cbnz	r3, 800af28 <__hexnan+0xe0>
 800af20:	4547      	cmp	r7, r8
 800af22:	d128      	bne.n	800af76 <__hexnan+0x12e>
 800af24:	2301      	movs	r3, #1
 800af26:	603b      	str	r3, [r7, #0]
 800af28:	2005      	movs	r0, #5
 800af2a:	b007      	add	sp, #28
 800af2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af30:	3501      	adds	r5, #1
 800af32:	2d08      	cmp	r5, #8
 800af34:	f10b 0b01 	add.w	fp, fp, #1
 800af38:	dd06      	ble.n	800af48 <__hexnan+0x100>
 800af3a:	4544      	cmp	r4, r8
 800af3c:	d9c1      	bls.n	800aec2 <__hexnan+0x7a>
 800af3e:	2300      	movs	r3, #0
 800af40:	f844 3c04 	str.w	r3, [r4, #-4]
 800af44:	2501      	movs	r5, #1
 800af46:	3c04      	subs	r4, #4
 800af48:	6822      	ldr	r2, [r4, #0]
 800af4a:	f000 000f 	and.w	r0, r0, #15
 800af4e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800af52:	6020      	str	r0, [r4, #0]
 800af54:	e7b5      	b.n	800aec2 <__hexnan+0x7a>
 800af56:	2508      	movs	r5, #8
 800af58:	e7b3      	b.n	800aec2 <__hexnan+0x7a>
 800af5a:	9b01      	ldr	r3, [sp, #4]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d0dd      	beq.n	800af1c <__hexnan+0xd4>
 800af60:	f1c3 0320 	rsb	r3, r3, #32
 800af64:	f04f 32ff 	mov.w	r2, #4294967295
 800af68:	40da      	lsrs	r2, r3
 800af6a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800af6e:	4013      	ands	r3, r2
 800af70:	f846 3c04 	str.w	r3, [r6, #-4]
 800af74:	e7d2      	b.n	800af1c <__hexnan+0xd4>
 800af76:	3f04      	subs	r7, #4
 800af78:	e7d0      	b.n	800af1c <__hexnan+0xd4>
 800af7a:	2004      	movs	r0, #4
 800af7c:	e7d5      	b.n	800af2a <__hexnan+0xe2>
	...

0800af80 <malloc>:
 800af80:	4b02      	ldr	r3, [pc, #8]	@ (800af8c <malloc+0xc>)
 800af82:	4601      	mov	r1, r0
 800af84:	6818      	ldr	r0, [r3, #0]
 800af86:	f000 b825 	b.w	800afd4 <_malloc_r>
 800af8a:	bf00      	nop
 800af8c:	200001a4 	.word	0x200001a4

0800af90 <sbrk_aligned>:
 800af90:	b570      	push	{r4, r5, r6, lr}
 800af92:	4e0f      	ldr	r6, [pc, #60]	@ (800afd0 <sbrk_aligned+0x40>)
 800af94:	460c      	mov	r4, r1
 800af96:	6831      	ldr	r1, [r6, #0]
 800af98:	4605      	mov	r5, r0
 800af9a:	b911      	cbnz	r1, 800afa2 <sbrk_aligned+0x12>
 800af9c:	f000 fe36 	bl	800bc0c <_sbrk_r>
 800afa0:	6030      	str	r0, [r6, #0]
 800afa2:	4621      	mov	r1, r4
 800afa4:	4628      	mov	r0, r5
 800afa6:	f000 fe31 	bl	800bc0c <_sbrk_r>
 800afaa:	1c43      	adds	r3, r0, #1
 800afac:	d103      	bne.n	800afb6 <sbrk_aligned+0x26>
 800afae:	f04f 34ff 	mov.w	r4, #4294967295
 800afb2:	4620      	mov	r0, r4
 800afb4:	bd70      	pop	{r4, r5, r6, pc}
 800afb6:	1cc4      	adds	r4, r0, #3
 800afb8:	f024 0403 	bic.w	r4, r4, #3
 800afbc:	42a0      	cmp	r0, r4
 800afbe:	d0f8      	beq.n	800afb2 <sbrk_aligned+0x22>
 800afc0:	1a21      	subs	r1, r4, r0
 800afc2:	4628      	mov	r0, r5
 800afc4:	f000 fe22 	bl	800bc0c <_sbrk_r>
 800afc8:	3001      	adds	r0, #1
 800afca:	d1f2      	bne.n	800afb2 <sbrk_aligned+0x22>
 800afcc:	e7ef      	b.n	800afae <sbrk_aligned+0x1e>
 800afce:	bf00      	nop
 800afd0:	20000e34 	.word	0x20000e34

0800afd4 <_malloc_r>:
 800afd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afd8:	1ccd      	adds	r5, r1, #3
 800afda:	f025 0503 	bic.w	r5, r5, #3
 800afde:	3508      	adds	r5, #8
 800afe0:	2d0c      	cmp	r5, #12
 800afe2:	bf38      	it	cc
 800afe4:	250c      	movcc	r5, #12
 800afe6:	2d00      	cmp	r5, #0
 800afe8:	4606      	mov	r6, r0
 800afea:	db01      	blt.n	800aff0 <_malloc_r+0x1c>
 800afec:	42a9      	cmp	r1, r5
 800afee:	d904      	bls.n	800affa <_malloc_r+0x26>
 800aff0:	230c      	movs	r3, #12
 800aff2:	6033      	str	r3, [r6, #0]
 800aff4:	2000      	movs	r0, #0
 800aff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800affa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b0d0 <_malloc_r+0xfc>
 800affe:	f000 f87b 	bl	800b0f8 <__malloc_lock>
 800b002:	f8d8 3000 	ldr.w	r3, [r8]
 800b006:	461c      	mov	r4, r3
 800b008:	bb44      	cbnz	r4, 800b05c <_malloc_r+0x88>
 800b00a:	4629      	mov	r1, r5
 800b00c:	4630      	mov	r0, r6
 800b00e:	f7ff ffbf 	bl	800af90 <sbrk_aligned>
 800b012:	1c43      	adds	r3, r0, #1
 800b014:	4604      	mov	r4, r0
 800b016:	d158      	bne.n	800b0ca <_malloc_r+0xf6>
 800b018:	f8d8 4000 	ldr.w	r4, [r8]
 800b01c:	4627      	mov	r7, r4
 800b01e:	2f00      	cmp	r7, #0
 800b020:	d143      	bne.n	800b0aa <_malloc_r+0xd6>
 800b022:	2c00      	cmp	r4, #0
 800b024:	d04b      	beq.n	800b0be <_malloc_r+0xea>
 800b026:	6823      	ldr	r3, [r4, #0]
 800b028:	4639      	mov	r1, r7
 800b02a:	4630      	mov	r0, r6
 800b02c:	eb04 0903 	add.w	r9, r4, r3
 800b030:	f000 fdec 	bl	800bc0c <_sbrk_r>
 800b034:	4581      	cmp	r9, r0
 800b036:	d142      	bne.n	800b0be <_malloc_r+0xea>
 800b038:	6821      	ldr	r1, [r4, #0]
 800b03a:	1a6d      	subs	r5, r5, r1
 800b03c:	4629      	mov	r1, r5
 800b03e:	4630      	mov	r0, r6
 800b040:	f7ff ffa6 	bl	800af90 <sbrk_aligned>
 800b044:	3001      	adds	r0, #1
 800b046:	d03a      	beq.n	800b0be <_malloc_r+0xea>
 800b048:	6823      	ldr	r3, [r4, #0]
 800b04a:	442b      	add	r3, r5
 800b04c:	6023      	str	r3, [r4, #0]
 800b04e:	f8d8 3000 	ldr.w	r3, [r8]
 800b052:	685a      	ldr	r2, [r3, #4]
 800b054:	bb62      	cbnz	r2, 800b0b0 <_malloc_r+0xdc>
 800b056:	f8c8 7000 	str.w	r7, [r8]
 800b05a:	e00f      	b.n	800b07c <_malloc_r+0xa8>
 800b05c:	6822      	ldr	r2, [r4, #0]
 800b05e:	1b52      	subs	r2, r2, r5
 800b060:	d420      	bmi.n	800b0a4 <_malloc_r+0xd0>
 800b062:	2a0b      	cmp	r2, #11
 800b064:	d917      	bls.n	800b096 <_malloc_r+0xc2>
 800b066:	1961      	adds	r1, r4, r5
 800b068:	42a3      	cmp	r3, r4
 800b06a:	6025      	str	r5, [r4, #0]
 800b06c:	bf18      	it	ne
 800b06e:	6059      	strne	r1, [r3, #4]
 800b070:	6863      	ldr	r3, [r4, #4]
 800b072:	bf08      	it	eq
 800b074:	f8c8 1000 	streq.w	r1, [r8]
 800b078:	5162      	str	r2, [r4, r5]
 800b07a:	604b      	str	r3, [r1, #4]
 800b07c:	4630      	mov	r0, r6
 800b07e:	f000 f841 	bl	800b104 <__malloc_unlock>
 800b082:	f104 000b 	add.w	r0, r4, #11
 800b086:	1d23      	adds	r3, r4, #4
 800b088:	f020 0007 	bic.w	r0, r0, #7
 800b08c:	1ac2      	subs	r2, r0, r3
 800b08e:	bf1c      	itt	ne
 800b090:	1a1b      	subne	r3, r3, r0
 800b092:	50a3      	strne	r3, [r4, r2]
 800b094:	e7af      	b.n	800aff6 <_malloc_r+0x22>
 800b096:	6862      	ldr	r2, [r4, #4]
 800b098:	42a3      	cmp	r3, r4
 800b09a:	bf0c      	ite	eq
 800b09c:	f8c8 2000 	streq.w	r2, [r8]
 800b0a0:	605a      	strne	r2, [r3, #4]
 800b0a2:	e7eb      	b.n	800b07c <_malloc_r+0xa8>
 800b0a4:	4623      	mov	r3, r4
 800b0a6:	6864      	ldr	r4, [r4, #4]
 800b0a8:	e7ae      	b.n	800b008 <_malloc_r+0x34>
 800b0aa:	463c      	mov	r4, r7
 800b0ac:	687f      	ldr	r7, [r7, #4]
 800b0ae:	e7b6      	b.n	800b01e <_malloc_r+0x4a>
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	42a3      	cmp	r3, r4
 800b0b6:	d1fb      	bne.n	800b0b0 <_malloc_r+0xdc>
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	6053      	str	r3, [r2, #4]
 800b0bc:	e7de      	b.n	800b07c <_malloc_r+0xa8>
 800b0be:	230c      	movs	r3, #12
 800b0c0:	6033      	str	r3, [r6, #0]
 800b0c2:	4630      	mov	r0, r6
 800b0c4:	f000 f81e 	bl	800b104 <__malloc_unlock>
 800b0c8:	e794      	b.n	800aff4 <_malloc_r+0x20>
 800b0ca:	6005      	str	r5, [r0, #0]
 800b0cc:	e7d6      	b.n	800b07c <_malloc_r+0xa8>
 800b0ce:	bf00      	nop
 800b0d0:	20000e38 	.word	0x20000e38

0800b0d4 <__ascii_mbtowc>:
 800b0d4:	b082      	sub	sp, #8
 800b0d6:	b901      	cbnz	r1, 800b0da <__ascii_mbtowc+0x6>
 800b0d8:	a901      	add	r1, sp, #4
 800b0da:	b142      	cbz	r2, 800b0ee <__ascii_mbtowc+0x1a>
 800b0dc:	b14b      	cbz	r3, 800b0f2 <__ascii_mbtowc+0x1e>
 800b0de:	7813      	ldrb	r3, [r2, #0]
 800b0e0:	600b      	str	r3, [r1, #0]
 800b0e2:	7812      	ldrb	r2, [r2, #0]
 800b0e4:	1e10      	subs	r0, r2, #0
 800b0e6:	bf18      	it	ne
 800b0e8:	2001      	movne	r0, #1
 800b0ea:	b002      	add	sp, #8
 800b0ec:	4770      	bx	lr
 800b0ee:	4610      	mov	r0, r2
 800b0f0:	e7fb      	b.n	800b0ea <__ascii_mbtowc+0x16>
 800b0f2:	f06f 0001 	mvn.w	r0, #1
 800b0f6:	e7f8      	b.n	800b0ea <__ascii_mbtowc+0x16>

0800b0f8 <__malloc_lock>:
 800b0f8:	4801      	ldr	r0, [pc, #4]	@ (800b100 <__malloc_lock+0x8>)
 800b0fa:	f7fe bd36 	b.w	8009b6a <__retarget_lock_acquire_recursive>
 800b0fe:	bf00      	nop
 800b100:	20000e30 	.word	0x20000e30

0800b104 <__malloc_unlock>:
 800b104:	4801      	ldr	r0, [pc, #4]	@ (800b10c <__malloc_unlock+0x8>)
 800b106:	f7fe bd31 	b.w	8009b6c <__retarget_lock_release_recursive>
 800b10a:	bf00      	nop
 800b10c:	20000e30 	.word	0x20000e30

0800b110 <_Balloc>:
 800b110:	b570      	push	{r4, r5, r6, lr}
 800b112:	69c6      	ldr	r6, [r0, #28]
 800b114:	4604      	mov	r4, r0
 800b116:	460d      	mov	r5, r1
 800b118:	b976      	cbnz	r6, 800b138 <_Balloc+0x28>
 800b11a:	2010      	movs	r0, #16
 800b11c:	f7ff ff30 	bl	800af80 <malloc>
 800b120:	4602      	mov	r2, r0
 800b122:	61e0      	str	r0, [r4, #28]
 800b124:	b920      	cbnz	r0, 800b130 <_Balloc+0x20>
 800b126:	4b18      	ldr	r3, [pc, #96]	@ (800b188 <_Balloc+0x78>)
 800b128:	4818      	ldr	r0, [pc, #96]	@ (800b18c <_Balloc+0x7c>)
 800b12a:	216b      	movs	r1, #107	@ 0x6b
 800b12c:	f7fe fd38 	bl	8009ba0 <__assert_func>
 800b130:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b134:	6006      	str	r6, [r0, #0]
 800b136:	60c6      	str	r6, [r0, #12]
 800b138:	69e6      	ldr	r6, [r4, #28]
 800b13a:	68f3      	ldr	r3, [r6, #12]
 800b13c:	b183      	cbz	r3, 800b160 <_Balloc+0x50>
 800b13e:	69e3      	ldr	r3, [r4, #28]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b146:	b9b8      	cbnz	r0, 800b178 <_Balloc+0x68>
 800b148:	2101      	movs	r1, #1
 800b14a:	fa01 f605 	lsl.w	r6, r1, r5
 800b14e:	1d72      	adds	r2, r6, #5
 800b150:	0092      	lsls	r2, r2, #2
 800b152:	4620      	mov	r0, r4
 800b154:	f000 fd71 	bl	800bc3a <_calloc_r>
 800b158:	b160      	cbz	r0, 800b174 <_Balloc+0x64>
 800b15a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b15e:	e00e      	b.n	800b17e <_Balloc+0x6e>
 800b160:	2221      	movs	r2, #33	@ 0x21
 800b162:	2104      	movs	r1, #4
 800b164:	4620      	mov	r0, r4
 800b166:	f000 fd68 	bl	800bc3a <_calloc_r>
 800b16a:	69e3      	ldr	r3, [r4, #28]
 800b16c:	60f0      	str	r0, [r6, #12]
 800b16e:	68db      	ldr	r3, [r3, #12]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d1e4      	bne.n	800b13e <_Balloc+0x2e>
 800b174:	2000      	movs	r0, #0
 800b176:	bd70      	pop	{r4, r5, r6, pc}
 800b178:	6802      	ldr	r2, [r0, #0]
 800b17a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b17e:	2300      	movs	r3, #0
 800b180:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b184:	e7f7      	b.n	800b176 <_Balloc+0x66>
 800b186:	bf00      	nop
 800b188:	0800c675 	.word	0x0800c675
 800b18c:	0800c800 	.word	0x0800c800

0800b190 <_Bfree>:
 800b190:	b570      	push	{r4, r5, r6, lr}
 800b192:	69c6      	ldr	r6, [r0, #28]
 800b194:	4605      	mov	r5, r0
 800b196:	460c      	mov	r4, r1
 800b198:	b976      	cbnz	r6, 800b1b8 <_Bfree+0x28>
 800b19a:	2010      	movs	r0, #16
 800b19c:	f7ff fef0 	bl	800af80 <malloc>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	61e8      	str	r0, [r5, #28]
 800b1a4:	b920      	cbnz	r0, 800b1b0 <_Bfree+0x20>
 800b1a6:	4b09      	ldr	r3, [pc, #36]	@ (800b1cc <_Bfree+0x3c>)
 800b1a8:	4809      	ldr	r0, [pc, #36]	@ (800b1d0 <_Bfree+0x40>)
 800b1aa:	218f      	movs	r1, #143	@ 0x8f
 800b1ac:	f7fe fcf8 	bl	8009ba0 <__assert_func>
 800b1b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1b4:	6006      	str	r6, [r0, #0]
 800b1b6:	60c6      	str	r6, [r0, #12]
 800b1b8:	b13c      	cbz	r4, 800b1ca <_Bfree+0x3a>
 800b1ba:	69eb      	ldr	r3, [r5, #28]
 800b1bc:	6862      	ldr	r2, [r4, #4]
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b1c4:	6021      	str	r1, [r4, #0]
 800b1c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b1ca:	bd70      	pop	{r4, r5, r6, pc}
 800b1cc:	0800c675 	.word	0x0800c675
 800b1d0:	0800c800 	.word	0x0800c800

0800b1d4 <__multadd>:
 800b1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d8:	690d      	ldr	r5, [r1, #16]
 800b1da:	4607      	mov	r7, r0
 800b1dc:	460c      	mov	r4, r1
 800b1de:	461e      	mov	r6, r3
 800b1e0:	f101 0c14 	add.w	ip, r1, #20
 800b1e4:	2000      	movs	r0, #0
 800b1e6:	f8dc 3000 	ldr.w	r3, [ip]
 800b1ea:	b299      	uxth	r1, r3
 800b1ec:	fb02 6101 	mla	r1, r2, r1, r6
 800b1f0:	0c1e      	lsrs	r6, r3, #16
 800b1f2:	0c0b      	lsrs	r3, r1, #16
 800b1f4:	fb02 3306 	mla	r3, r2, r6, r3
 800b1f8:	b289      	uxth	r1, r1
 800b1fa:	3001      	adds	r0, #1
 800b1fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b200:	4285      	cmp	r5, r0
 800b202:	f84c 1b04 	str.w	r1, [ip], #4
 800b206:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b20a:	dcec      	bgt.n	800b1e6 <__multadd+0x12>
 800b20c:	b30e      	cbz	r6, 800b252 <__multadd+0x7e>
 800b20e:	68a3      	ldr	r3, [r4, #8]
 800b210:	42ab      	cmp	r3, r5
 800b212:	dc19      	bgt.n	800b248 <__multadd+0x74>
 800b214:	6861      	ldr	r1, [r4, #4]
 800b216:	4638      	mov	r0, r7
 800b218:	3101      	adds	r1, #1
 800b21a:	f7ff ff79 	bl	800b110 <_Balloc>
 800b21e:	4680      	mov	r8, r0
 800b220:	b928      	cbnz	r0, 800b22e <__multadd+0x5a>
 800b222:	4602      	mov	r2, r0
 800b224:	4b0c      	ldr	r3, [pc, #48]	@ (800b258 <__multadd+0x84>)
 800b226:	480d      	ldr	r0, [pc, #52]	@ (800b25c <__multadd+0x88>)
 800b228:	21ba      	movs	r1, #186	@ 0xba
 800b22a:	f7fe fcb9 	bl	8009ba0 <__assert_func>
 800b22e:	6922      	ldr	r2, [r4, #16]
 800b230:	3202      	adds	r2, #2
 800b232:	f104 010c 	add.w	r1, r4, #12
 800b236:	0092      	lsls	r2, r2, #2
 800b238:	300c      	adds	r0, #12
 800b23a:	f7fe fc98 	bl	8009b6e <memcpy>
 800b23e:	4621      	mov	r1, r4
 800b240:	4638      	mov	r0, r7
 800b242:	f7ff ffa5 	bl	800b190 <_Bfree>
 800b246:	4644      	mov	r4, r8
 800b248:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b24c:	3501      	adds	r5, #1
 800b24e:	615e      	str	r6, [r3, #20]
 800b250:	6125      	str	r5, [r4, #16]
 800b252:	4620      	mov	r0, r4
 800b254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b258:	0800c78f 	.word	0x0800c78f
 800b25c:	0800c800 	.word	0x0800c800

0800b260 <__s2b>:
 800b260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b264:	460c      	mov	r4, r1
 800b266:	4615      	mov	r5, r2
 800b268:	461f      	mov	r7, r3
 800b26a:	2209      	movs	r2, #9
 800b26c:	3308      	adds	r3, #8
 800b26e:	4606      	mov	r6, r0
 800b270:	fb93 f3f2 	sdiv	r3, r3, r2
 800b274:	2100      	movs	r1, #0
 800b276:	2201      	movs	r2, #1
 800b278:	429a      	cmp	r2, r3
 800b27a:	db09      	blt.n	800b290 <__s2b+0x30>
 800b27c:	4630      	mov	r0, r6
 800b27e:	f7ff ff47 	bl	800b110 <_Balloc>
 800b282:	b940      	cbnz	r0, 800b296 <__s2b+0x36>
 800b284:	4602      	mov	r2, r0
 800b286:	4b19      	ldr	r3, [pc, #100]	@ (800b2ec <__s2b+0x8c>)
 800b288:	4819      	ldr	r0, [pc, #100]	@ (800b2f0 <__s2b+0x90>)
 800b28a:	21d3      	movs	r1, #211	@ 0xd3
 800b28c:	f7fe fc88 	bl	8009ba0 <__assert_func>
 800b290:	0052      	lsls	r2, r2, #1
 800b292:	3101      	adds	r1, #1
 800b294:	e7f0      	b.n	800b278 <__s2b+0x18>
 800b296:	9b08      	ldr	r3, [sp, #32]
 800b298:	6143      	str	r3, [r0, #20]
 800b29a:	2d09      	cmp	r5, #9
 800b29c:	f04f 0301 	mov.w	r3, #1
 800b2a0:	6103      	str	r3, [r0, #16]
 800b2a2:	dd16      	ble.n	800b2d2 <__s2b+0x72>
 800b2a4:	f104 0909 	add.w	r9, r4, #9
 800b2a8:	46c8      	mov	r8, r9
 800b2aa:	442c      	add	r4, r5
 800b2ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b2b0:	4601      	mov	r1, r0
 800b2b2:	3b30      	subs	r3, #48	@ 0x30
 800b2b4:	220a      	movs	r2, #10
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	f7ff ff8c 	bl	800b1d4 <__multadd>
 800b2bc:	45a0      	cmp	r8, r4
 800b2be:	d1f5      	bne.n	800b2ac <__s2b+0x4c>
 800b2c0:	f1a5 0408 	sub.w	r4, r5, #8
 800b2c4:	444c      	add	r4, r9
 800b2c6:	1b2d      	subs	r5, r5, r4
 800b2c8:	1963      	adds	r3, r4, r5
 800b2ca:	42bb      	cmp	r3, r7
 800b2cc:	db04      	blt.n	800b2d8 <__s2b+0x78>
 800b2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2d2:	340a      	adds	r4, #10
 800b2d4:	2509      	movs	r5, #9
 800b2d6:	e7f6      	b.n	800b2c6 <__s2b+0x66>
 800b2d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b2dc:	4601      	mov	r1, r0
 800b2de:	3b30      	subs	r3, #48	@ 0x30
 800b2e0:	220a      	movs	r2, #10
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	f7ff ff76 	bl	800b1d4 <__multadd>
 800b2e8:	e7ee      	b.n	800b2c8 <__s2b+0x68>
 800b2ea:	bf00      	nop
 800b2ec:	0800c78f 	.word	0x0800c78f
 800b2f0:	0800c800 	.word	0x0800c800

0800b2f4 <__hi0bits>:
 800b2f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	bf36      	itet	cc
 800b2fc:	0403      	lslcc	r3, r0, #16
 800b2fe:	2000      	movcs	r0, #0
 800b300:	2010      	movcc	r0, #16
 800b302:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b306:	bf3c      	itt	cc
 800b308:	021b      	lslcc	r3, r3, #8
 800b30a:	3008      	addcc	r0, #8
 800b30c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b310:	bf3c      	itt	cc
 800b312:	011b      	lslcc	r3, r3, #4
 800b314:	3004      	addcc	r0, #4
 800b316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b31a:	bf3c      	itt	cc
 800b31c:	009b      	lslcc	r3, r3, #2
 800b31e:	3002      	addcc	r0, #2
 800b320:	2b00      	cmp	r3, #0
 800b322:	db05      	blt.n	800b330 <__hi0bits+0x3c>
 800b324:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b328:	f100 0001 	add.w	r0, r0, #1
 800b32c:	bf08      	it	eq
 800b32e:	2020      	moveq	r0, #32
 800b330:	4770      	bx	lr

0800b332 <__lo0bits>:
 800b332:	6803      	ldr	r3, [r0, #0]
 800b334:	4602      	mov	r2, r0
 800b336:	f013 0007 	ands.w	r0, r3, #7
 800b33a:	d00b      	beq.n	800b354 <__lo0bits+0x22>
 800b33c:	07d9      	lsls	r1, r3, #31
 800b33e:	d421      	bmi.n	800b384 <__lo0bits+0x52>
 800b340:	0798      	lsls	r0, r3, #30
 800b342:	bf49      	itett	mi
 800b344:	085b      	lsrmi	r3, r3, #1
 800b346:	089b      	lsrpl	r3, r3, #2
 800b348:	2001      	movmi	r0, #1
 800b34a:	6013      	strmi	r3, [r2, #0]
 800b34c:	bf5c      	itt	pl
 800b34e:	6013      	strpl	r3, [r2, #0]
 800b350:	2002      	movpl	r0, #2
 800b352:	4770      	bx	lr
 800b354:	b299      	uxth	r1, r3
 800b356:	b909      	cbnz	r1, 800b35c <__lo0bits+0x2a>
 800b358:	0c1b      	lsrs	r3, r3, #16
 800b35a:	2010      	movs	r0, #16
 800b35c:	b2d9      	uxtb	r1, r3
 800b35e:	b909      	cbnz	r1, 800b364 <__lo0bits+0x32>
 800b360:	3008      	adds	r0, #8
 800b362:	0a1b      	lsrs	r3, r3, #8
 800b364:	0719      	lsls	r1, r3, #28
 800b366:	bf04      	itt	eq
 800b368:	091b      	lsreq	r3, r3, #4
 800b36a:	3004      	addeq	r0, #4
 800b36c:	0799      	lsls	r1, r3, #30
 800b36e:	bf04      	itt	eq
 800b370:	089b      	lsreq	r3, r3, #2
 800b372:	3002      	addeq	r0, #2
 800b374:	07d9      	lsls	r1, r3, #31
 800b376:	d403      	bmi.n	800b380 <__lo0bits+0x4e>
 800b378:	085b      	lsrs	r3, r3, #1
 800b37a:	f100 0001 	add.w	r0, r0, #1
 800b37e:	d003      	beq.n	800b388 <__lo0bits+0x56>
 800b380:	6013      	str	r3, [r2, #0]
 800b382:	4770      	bx	lr
 800b384:	2000      	movs	r0, #0
 800b386:	4770      	bx	lr
 800b388:	2020      	movs	r0, #32
 800b38a:	4770      	bx	lr

0800b38c <__i2b>:
 800b38c:	b510      	push	{r4, lr}
 800b38e:	460c      	mov	r4, r1
 800b390:	2101      	movs	r1, #1
 800b392:	f7ff febd 	bl	800b110 <_Balloc>
 800b396:	4602      	mov	r2, r0
 800b398:	b928      	cbnz	r0, 800b3a6 <__i2b+0x1a>
 800b39a:	4b05      	ldr	r3, [pc, #20]	@ (800b3b0 <__i2b+0x24>)
 800b39c:	4805      	ldr	r0, [pc, #20]	@ (800b3b4 <__i2b+0x28>)
 800b39e:	f240 1145 	movw	r1, #325	@ 0x145
 800b3a2:	f7fe fbfd 	bl	8009ba0 <__assert_func>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	6144      	str	r4, [r0, #20]
 800b3aa:	6103      	str	r3, [r0, #16]
 800b3ac:	bd10      	pop	{r4, pc}
 800b3ae:	bf00      	nop
 800b3b0:	0800c78f 	.word	0x0800c78f
 800b3b4:	0800c800 	.word	0x0800c800

0800b3b8 <__multiply>:
 800b3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3bc:	4614      	mov	r4, r2
 800b3be:	690a      	ldr	r2, [r1, #16]
 800b3c0:	6923      	ldr	r3, [r4, #16]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	bfa8      	it	ge
 800b3c6:	4623      	movge	r3, r4
 800b3c8:	460f      	mov	r7, r1
 800b3ca:	bfa4      	itt	ge
 800b3cc:	460c      	movge	r4, r1
 800b3ce:	461f      	movge	r7, r3
 800b3d0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b3d4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b3d8:	68a3      	ldr	r3, [r4, #8]
 800b3da:	6861      	ldr	r1, [r4, #4]
 800b3dc:	eb0a 0609 	add.w	r6, sl, r9
 800b3e0:	42b3      	cmp	r3, r6
 800b3e2:	b085      	sub	sp, #20
 800b3e4:	bfb8      	it	lt
 800b3e6:	3101      	addlt	r1, #1
 800b3e8:	f7ff fe92 	bl	800b110 <_Balloc>
 800b3ec:	b930      	cbnz	r0, 800b3fc <__multiply+0x44>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	4b44      	ldr	r3, [pc, #272]	@ (800b504 <__multiply+0x14c>)
 800b3f2:	4845      	ldr	r0, [pc, #276]	@ (800b508 <__multiply+0x150>)
 800b3f4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b3f8:	f7fe fbd2 	bl	8009ba0 <__assert_func>
 800b3fc:	f100 0514 	add.w	r5, r0, #20
 800b400:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b404:	462b      	mov	r3, r5
 800b406:	2200      	movs	r2, #0
 800b408:	4543      	cmp	r3, r8
 800b40a:	d321      	bcc.n	800b450 <__multiply+0x98>
 800b40c:	f107 0114 	add.w	r1, r7, #20
 800b410:	f104 0214 	add.w	r2, r4, #20
 800b414:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b418:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b41c:	9302      	str	r3, [sp, #8]
 800b41e:	1b13      	subs	r3, r2, r4
 800b420:	3b15      	subs	r3, #21
 800b422:	f023 0303 	bic.w	r3, r3, #3
 800b426:	3304      	adds	r3, #4
 800b428:	f104 0715 	add.w	r7, r4, #21
 800b42c:	42ba      	cmp	r2, r7
 800b42e:	bf38      	it	cc
 800b430:	2304      	movcc	r3, #4
 800b432:	9301      	str	r3, [sp, #4]
 800b434:	9b02      	ldr	r3, [sp, #8]
 800b436:	9103      	str	r1, [sp, #12]
 800b438:	428b      	cmp	r3, r1
 800b43a:	d80c      	bhi.n	800b456 <__multiply+0x9e>
 800b43c:	2e00      	cmp	r6, #0
 800b43e:	dd03      	ble.n	800b448 <__multiply+0x90>
 800b440:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b444:	2b00      	cmp	r3, #0
 800b446:	d05b      	beq.n	800b500 <__multiply+0x148>
 800b448:	6106      	str	r6, [r0, #16]
 800b44a:	b005      	add	sp, #20
 800b44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b450:	f843 2b04 	str.w	r2, [r3], #4
 800b454:	e7d8      	b.n	800b408 <__multiply+0x50>
 800b456:	f8b1 a000 	ldrh.w	sl, [r1]
 800b45a:	f1ba 0f00 	cmp.w	sl, #0
 800b45e:	d024      	beq.n	800b4aa <__multiply+0xf2>
 800b460:	f104 0e14 	add.w	lr, r4, #20
 800b464:	46a9      	mov	r9, r5
 800b466:	f04f 0c00 	mov.w	ip, #0
 800b46a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b46e:	f8d9 3000 	ldr.w	r3, [r9]
 800b472:	fa1f fb87 	uxth.w	fp, r7
 800b476:	b29b      	uxth	r3, r3
 800b478:	fb0a 330b 	mla	r3, sl, fp, r3
 800b47c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b480:	f8d9 7000 	ldr.w	r7, [r9]
 800b484:	4463      	add	r3, ip
 800b486:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b48a:	fb0a c70b 	mla	r7, sl, fp, ip
 800b48e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b492:	b29b      	uxth	r3, r3
 800b494:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b498:	4572      	cmp	r2, lr
 800b49a:	f849 3b04 	str.w	r3, [r9], #4
 800b49e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b4a2:	d8e2      	bhi.n	800b46a <__multiply+0xb2>
 800b4a4:	9b01      	ldr	r3, [sp, #4]
 800b4a6:	f845 c003 	str.w	ip, [r5, r3]
 800b4aa:	9b03      	ldr	r3, [sp, #12]
 800b4ac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b4b0:	3104      	adds	r1, #4
 800b4b2:	f1b9 0f00 	cmp.w	r9, #0
 800b4b6:	d021      	beq.n	800b4fc <__multiply+0x144>
 800b4b8:	682b      	ldr	r3, [r5, #0]
 800b4ba:	f104 0c14 	add.w	ip, r4, #20
 800b4be:	46ae      	mov	lr, r5
 800b4c0:	f04f 0a00 	mov.w	sl, #0
 800b4c4:	f8bc b000 	ldrh.w	fp, [ip]
 800b4c8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b4cc:	fb09 770b 	mla	r7, r9, fp, r7
 800b4d0:	4457      	add	r7, sl
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b4d8:	f84e 3b04 	str.w	r3, [lr], #4
 800b4dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b4e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b4e4:	f8be 3000 	ldrh.w	r3, [lr]
 800b4e8:	fb09 330a 	mla	r3, r9, sl, r3
 800b4ec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b4f0:	4562      	cmp	r2, ip
 800b4f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b4f6:	d8e5      	bhi.n	800b4c4 <__multiply+0x10c>
 800b4f8:	9f01      	ldr	r7, [sp, #4]
 800b4fa:	51eb      	str	r3, [r5, r7]
 800b4fc:	3504      	adds	r5, #4
 800b4fe:	e799      	b.n	800b434 <__multiply+0x7c>
 800b500:	3e01      	subs	r6, #1
 800b502:	e79b      	b.n	800b43c <__multiply+0x84>
 800b504:	0800c78f 	.word	0x0800c78f
 800b508:	0800c800 	.word	0x0800c800

0800b50c <__pow5mult>:
 800b50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b510:	4615      	mov	r5, r2
 800b512:	f012 0203 	ands.w	r2, r2, #3
 800b516:	4607      	mov	r7, r0
 800b518:	460e      	mov	r6, r1
 800b51a:	d007      	beq.n	800b52c <__pow5mult+0x20>
 800b51c:	4c25      	ldr	r4, [pc, #148]	@ (800b5b4 <__pow5mult+0xa8>)
 800b51e:	3a01      	subs	r2, #1
 800b520:	2300      	movs	r3, #0
 800b522:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b526:	f7ff fe55 	bl	800b1d4 <__multadd>
 800b52a:	4606      	mov	r6, r0
 800b52c:	10ad      	asrs	r5, r5, #2
 800b52e:	d03d      	beq.n	800b5ac <__pow5mult+0xa0>
 800b530:	69fc      	ldr	r4, [r7, #28]
 800b532:	b97c      	cbnz	r4, 800b554 <__pow5mult+0x48>
 800b534:	2010      	movs	r0, #16
 800b536:	f7ff fd23 	bl	800af80 <malloc>
 800b53a:	4602      	mov	r2, r0
 800b53c:	61f8      	str	r0, [r7, #28]
 800b53e:	b928      	cbnz	r0, 800b54c <__pow5mult+0x40>
 800b540:	4b1d      	ldr	r3, [pc, #116]	@ (800b5b8 <__pow5mult+0xac>)
 800b542:	481e      	ldr	r0, [pc, #120]	@ (800b5bc <__pow5mult+0xb0>)
 800b544:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b548:	f7fe fb2a 	bl	8009ba0 <__assert_func>
 800b54c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b550:	6004      	str	r4, [r0, #0]
 800b552:	60c4      	str	r4, [r0, #12]
 800b554:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b558:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b55c:	b94c      	cbnz	r4, 800b572 <__pow5mult+0x66>
 800b55e:	f240 2171 	movw	r1, #625	@ 0x271
 800b562:	4638      	mov	r0, r7
 800b564:	f7ff ff12 	bl	800b38c <__i2b>
 800b568:	2300      	movs	r3, #0
 800b56a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b56e:	4604      	mov	r4, r0
 800b570:	6003      	str	r3, [r0, #0]
 800b572:	f04f 0900 	mov.w	r9, #0
 800b576:	07eb      	lsls	r3, r5, #31
 800b578:	d50a      	bpl.n	800b590 <__pow5mult+0x84>
 800b57a:	4631      	mov	r1, r6
 800b57c:	4622      	mov	r2, r4
 800b57e:	4638      	mov	r0, r7
 800b580:	f7ff ff1a 	bl	800b3b8 <__multiply>
 800b584:	4631      	mov	r1, r6
 800b586:	4680      	mov	r8, r0
 800b588:	4638      	mov	r0, r7
 800b58a:	f7ff fe01 	bl	800b190 <_Bfree>
 800b58e:	4646      	mov	r6, r8
 800b590:	106d      	asrs	r5, r5, #1
 800b592:	d00b      	beq.n	800b5ac <__pow5mult+0xa0>
 800b594:	6820      	ldr	r0, [r4, #0]
 800b596:	b938      	cbnz	r0, 800b5a8 <__pow5mult+0x9c>
 800b598:	4622      	mov	r2, r4
 800b59a:	4621      	mov	r1, r4
 800b59c:	4638      	mov	r0, r7
 800b59e:	f7ff ff0b 	bl	800b3b8 <__multiply>
 800b5a2:	6020      	str	r0, [r4, #0]
 800b5a4:	f8c0 9000 	str.w	r9, [r0]
 800b5a8:	4604      	mov	r4, r0
 800b5aa:	e7e4      	b.n	800b576 <__pow5mult+0x6a>
 800b5ac:	4630      	mov	r0, r6
 800b5ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5b2:	bf00      	nop
 800b5b4:	0800c85c 	.word	0x0800c85c
 800b5b8:	0800c675 	.word	0x0800c675
 800b5bc:	0800c800 	.word	0x0800c800

0800b5c0 <__lshift>:
 800b5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5c4:	460c      	mov	r4, r1
 800b5c6:	6849      	ldr	r1, [r1, #4]
 800b5c8:	6923      	ldr	r3, [r4, #16]
 800b5ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b5ce:	68a3      	ldr	r3, [r4, #8]
 800b5d0:	4607      	mov	r7, r0
 800b5d2:	4691      	mov	r9, r2
 800b5d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b5d8:	f108 0601 	add.w	r6, r8, #1
 800b5dc:	42b3      	cmp	r3, r6
 800b5de:	db0b      	blt.n	800b5f8 <__lshift+0x38>
 800b5e0:	4638      	mov	r0, r7
 800b5e2:	f7ff fd95 	bl	800b110 <_Balloc>
 800b5e6:	4605      	mov	r5, r0
 800b5e8:	b948      	cbnz	r0, 800b5fe <__lshift+0x3e>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	4b28      	ldr	r3, [pc, #160]	@ (800b690 <__lshift+0xd0>)
 800b5ee:	4829      	ldr	r0, [pc, #164]	@ (800b694 <__lshift+0xd4>)
 800b5f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b5f4:	f7fe fad4 	bl	8009ba0 <__assert_func>
 800b5f8:	3101      	adds	r1, #1
 800b5fa:	005b      	lsls	r3, r3, #1
 800b5fc:	e7ee      	b.n	800b5dc <__lshift+0x1c>
 800b5fe:	2300      	movs	r3, #0
 800b600:	f100 0114 	add.w	r1, r0, #20
 800b604:	f100 0210 	add.w	r2, r0, #16
 800b608:	4618      	mov	r0, r3
 800b60a:	4553      	cmp	r3, sl
 800b60c:	db33      	blt.n	800b676 <__lshift+0xb6>
 800b60e:	6920      	ldr	r0, [r4, #16]
 800b610:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b614:	f104 0314 	add.w	r3, r4, #20
 800b618:	f019 091f 	ands.w	r9, r9, #31
 800b61c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b620:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b624:	d02b      	beq.n	800b67e <__lshift+0xbe>
 800b626:	f1c9 0e20 	rsb	lr, r9, #32
 800b62a:	468a      	mov	sl, r1
 800b62c:	2200      	movs	r2, #0
 800b62e:	6818      	ldr	r0, [r3, #0]
 800b630:	fa00 f009 	lsl.w	r0, r0, r9
 800b634:	4310      	orrs	r0, r2
 800b636:	f84a 0b04 	str.w	r0, [sl], #4
 800b63a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b63e:	459c      	cmp	ip, r3
 800b640:	fa22 f20e 	lsr.w	r2, r2, lr
 800b644:	d8f3      	bhi.n	800b62e <__lshift+0x6e>
 800b646:	ebac 0304 	sub.w	r3, ip, r4
 800b64a:	3b15      	subs	r3, #21
 800b64c:	f023 0303 	bic.w	r3, r3, #3
 800b650:	3304      	adds	r3, #4
 800b652:	f104 0015 	add.w	r0, r4, #21
 800b656:	4584      	cmp	ip, r0
 800b658:	bf38      	it	cc
 800b65a:	2304      	movcc	r3, #4
 800b65c:	50ca      	str	r2, [r1, r3]
 800b65e:	b10a      	cbz	r2, 800b664 <__lshift+0xa4>
 800b660:	f108 0602 	add.w	r6, r8, #2
 800b664:	3e01      	subs	r6, #1
 800b666:	4638      	mov	r0, r7
 800b668:	612e      	str	r6, [r5, #16]
 800b66a:	4621      	mov	r1, r4
 800b66c:	f7ff fd90 	bl	800b190 <_Bfree>
 800b670:	4628      	mov	r0, r5
 800b672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b676:	f842 0f04 	str.w	r0, [r2, #4]!
 800b67a:	3301      	adds	r3, #1
 800b67c:	e7c5      	b.n	800b60a <__lshift+0x4a>
 800b67e:	3904      	subs	r1, #4
 800b680:	f853 2b04 	ldr.w	r2, [r3], #4
 800b684:	f841 2f04 	str.w	r2, [r1, #4]!
 800b688:	459c      	cmp	ip, r3
 800b68a:	d8f9      	bhi.n	800b680 <__lshift+0xc0>
 800b68c:	e7ea      	b.n	800b664 <__lshift+0xa4>
 800b68e:	bf00      	nop
 800b690:	0800c78f 	.word	0x0800c78f
 800b694:	0800c800 	.word	0x0800c800

0800b698 <__mcmp>:
 800b698:	690a      	ldr	r2, [r1, #16]
 800b69a:	4603      	mov	r3, r0
 800b69c:	6900      	ldr	r0, [r0, #16]
 800b69e:	1a80      	subs	r0, r0, r2
 800b6a0:	b530      	push	{r4, r5, lr}
 800b6a2:	d10e      	bne.n	800b6c2 <__mcmp+0x2a>
 800b6a4:	3314      	adds	r3, #20
 800b6a6:	3114      	adds	r1, #20
 800b6a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b6ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b6b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b6b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b6b8:	4295      	cmp	r5, r2
 800b6ba:	d003      	beq.n	800b6c4 <__mcmp+0x2c>
 800b6bc:	d205      	bcs.n	800b6ca <__mcmp+0x32>
 800b6be:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c2:	bd30      	pop	{r4, r5, pc}
 800b6c4:	42a3      	cmp	r3, r4
 800b6c6:	d3f3      	bcc.n	800b6b0 <__mcmp+0x18>
 800b6c8:	e7fb      	b.n	800b6c2 <__mcmp+0x2a>
 800b6ca:	2001      	movs	r0, #1
 800b6cc:	e7f9      	b.n	800b6c2 <__mcmp+0x2a>
	...

0800b6d0 <__mdiff>:
 800b6d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d4:	4689      	mov	r9, r1
 800b6d6:	4606      	mov	r6, r0
 800b6d8:	4611      	mov	r1, r2
 800b6da:	4648      	mov	r0, r9
 800b6dc:	4614      	mov	r4, r2
 800b6de:	f7ff ffdb 	bl	800b698 <__mcmp>
 800b6e2:	1e05      	subs	r5, r0, #0
 800b6e4:	d112      	bne.n	800b70c <__mdiff+0x3c>
 800b6e6:	4629      	mov	r1, r5
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	f7ff fd11 	bl	800b110 <_Balloc>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	b928      	cbnz	r0, 800b6fe <__mdiff+0x2e>
 800b6f2:	4b3f      	ldr	r3, [pc, #252]	@ (800b7f0 <__mdiff+0x120>)
 800b6f4:	f240 2137 	movw	r1, #567	@ 0x237
 800b6f8:	483e      	ldr	r0, [pc, #248]	@ (800b7f4 <__mdiff+0x124>)
 800b6fa:	f7fe fa51 	bl	8009ba0 <__assert_func>
 800b6fe:	2301      	movs	r3, #1
 800b700:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b704:	4610      	mov	r0, r2
 800b706:	b003      	add	sp, #12
 800b708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b70c:	bfbc      	itt	lt
 800b70e:	464b      	movlt	r3, r9
 800b710:	46a1      	movlt	r9, r4
 800b712:	4630      	mov	r0, r6
 800b714:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b718:	bfba      	itte	lt
 800b71a:	461c      	movlt	r4, r3
 800b71c:	2501      	movlt	r5, #1
 800b71e:	2500      	movge	r5, #0
 800b720:	f7ff fcf6 	bl	800b110 <_Balloc>
 800b724:	4602      	mov	r2, r0
 800b726:	b918      	cbnz	r0, 800b730 <__mdiff+0x60>
 800b728:	4b31      	ldr	r3, [pc, #196]	@ (800b7f0 <__mdiff+0x120>)
 800b72a:	f240 2145 	movw	r1, #581	@ 0x245
 800b72e:	e7e3      	b.n	800b6f8 <__mdiff+0x28>
 800b730:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b734:	6926      	ldr	r6, [r4, #16]
 800b736:	60c5      	str	r5, [r0, #12]
 800b738:	f109 0310 	add.w	r3, r9, #16
 800b73c:	f109 0514 	add.w	r5, r9, #20
 800b740:	f104 0e14 	add.w	lr, r4, #20
 800b744:	f100 0b14 	add.w	fp, r0, #20
 800b748:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b74c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b750:	9301      	str	r3, [sp, #4]
 800b752:	46d9      	mov	r9, fp
 800b754:	f04f 0c00 	mov.w	ip, #0
 800b758:	9b01      	ldr	r3, [sp, #4]
 800b75a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b75e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b762:	9301      	str	r3, [sp, #4]
 800b764:	fa1f f38a 	uxth.w	r3, sl
 800b768:	4619      	mov	r1, r3
 800b76a:	b283      	uxth	r3, r0
 800b76c:	1acb      	subs	r3, r1, r3
 800b76e:	0c00      	lsrs	r0, r0, #16
 800b770:	4463      	add	r3, ip
 800b772:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b776:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b77a:	b29b      	uxth	r3, r3
 800b77c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b780:	4576      	cmp	r6, lr
 800b782:	f849 3b04 	str.w	r3, [r9], #4
 800b786:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b78a:	d8e5      	bhi.n	800b758 <__mdiff+0x88>
 800b78c:	1b33      	subs	r3, r6, r4
 800b78e:	3b15      	subs	r3, #21
 800b790:	f023 0303 	bic.w	r3, r3, #3
 800b794:	3415      	adds	r4, #21
 800b796:	3304      	adds	r3, #4
 800b798:	42a6      	cmp	r6, r4
 800b79a:	bf38      	it	cc
 800b79c:	2304      	movcc	r3, #4
 800b79e:	441d      	add	r5, r3
 800b7a0:	445b      	add	r3, fp
 800b7a2:	461e      	mov	r6, r3
 800b7a4:	462c      	mov	r4, r5
 800b7a6:	4544      	cmp	r4, r8
 800b7a8:	d30e      	bcc.n	800b7c8 <__mdiff+0xf8>
 800b7aa:	f108 0103 	add.w	r1, r8, #3
 800b7ae:	1b49      	subs	r1, r1, r5
 800b7b0:	f021 0103 	bic.w	r1, r1, #3
 800b7b4:	3d03      	subs	r5, #3
 800b7b6:	45a8      	cmp	r8, r5
 800b7b8:	bf38      	it	cc
 800b7ba:	2100      	movcc	r1, #0
 800b7bc:	440b      	add	r3, r1
 800b7be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b7c2:	b191      	cbz	r1, 800b7ea <__mdiff+0x11a>
 800b7c4:	6117      	str	r7, [r2, #16]
 800b7c6:	e79d      	b.n	800b704 <__mdiff+0x34>
 800b7c8:	f854 1b04 	ldr.w	r1, [r4], #4
 800b7cc:	46e6      	mov	lr, ip
 800b7ce:	0c08      	lsrs	r0, r1, #16
 800b7d0:	fa1c fc81 	uxtah	ip, ip, r1
 800b7d4:	4471      	add	r1, lr
 800b7d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b7da:	b289      	uxth	r1, r1
 800b7dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b7e0:	f846 1b04 	str.w	r1, [r6], #4
 800b7e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b7e8:	e7dd      	b.n	800b7a6 <__mdiff+0xd6>
 800b7ea:	3f01      	subs	r7, #1
 800b7ec:	e7e7      	b.n	800b7be <__mdiff+0xee>
 800b7ee:	bf00      	nop
 800b7f0:	0800c78f 	.word	0x0800c78f
 800b7f4:	0800c800 	.word	0x0800c800

0800b7f8 <__ulp>:
 800b7f8:	b082      	sub	sp, #8
 800b7fa:	ed8d 0b00 	vstr	d0, [sp]
 800b7fe:	9a01      	ldr	r2, [sp, #4]
 800b800:	4b0f      	ldr	r3, [pc, #60]	@ (800b840 <__ulp+0x48>)
 800b802:	4013      	ands	r3, r2
 800b804:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b808:	2b00      	cmp	r3, #0
 800b80a:	dc08      	bgt.n	800b81e <__ulp+0x26>
 800b80c:	425b      	negs	r3, r3
 800b80e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b812:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b816:	da04      	bge.n	800b822 <__ulp+0x2a>
 800b818:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b81c:	4113      	asrs	r3, r2
 800b81e:	2200      	movs	r2, #0
 800b820:	e008      	b.n	800b834 <__ulp+0x3c>
 800b822:	f1a2 0314 	sub.w	r3, r2, #20
 800b826:	2b1e      	cmp	r3, #30
 800b828:	bfda      	itte	le
 800b82a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b82e:	40da      	lsrle	r2, r3
 800b830:	2201      	movgt	r2, #1
 800b832:	2300      	movs	r3, #0
 800b834:	4619      	mov	r1, r3
 800b836:	4610      	mov	r0, r2
 800b838:	ec41 0b10 	vmov	d0, r0, r1
 800b83c:	b002      	add	sp, #8
 800b83e:	4770      	bx	lr
 800b840:	7ff00000 	.word	0x7ff00000

0800b844 <__b2d>:
 800b844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b848:	6906      	ldr	r6, [r0, #16]
 800b84a:	f100 0814 	add.w	r8, r0, #20
 800b84e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b852:	1f37      	subs	r7, r6, #4
 800b854:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b858:	4610      	mov	r0, r2
 800b85a:	f7ff fd4b 	bl	800b2f4 <__hi0bits>
 800b85e:	f1c0 0320 	rsb	r3, r0, #32
 800b862:	280a      	cmp	r0, #10
 800b864:	600b      	str	r3, [r1, #0]
 800b866:	491b      	ldr	r1, [pc, #108]	@ (800b8d4 <__b2d+0x90>)
 800b868:	dc15      	bgt.n	800b896 <__b2d+0x52>
 800b86a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b86e:	fa22 f30c 	lsr.w	r3, r2, ip
 800b872:	45b8      	cmp	r8, r7
 800b874:	ea43 0501 	orr.w	r5, r3, r1
 800b878:	bf34      	ite	cc
 800b87a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b87e:	2300      	movcs	r3, #0
 800b880:	3015      	adds	r0, #21
 800b882:	fa02 f000 	lsl.w	r0, r2, r0
 800b886:	fa23 f30c 	lsr.w	r3, r3, ip
 800b88a:	4303      	orrs	r3, r0
 800b88c:	461c      	mov	r4, r3
 800b88e:	ec45 4b10 	vmov	d0, r4, r5
 800b892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b896:	45b8      	cmp	r8, r7
 800b898:	bf3a      	itte	cc
 800b89a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b89e:	f1a6 0708 	subcc.w	r7, r6, #8
 800b8a2:	2300      	movcs	r3, #0
 800b8a4:	380b      	subs	r0, #11
 800b8a6:	d012      	beq.n	800b8ce <__b2d+0x8a>
 800b8a8:	f1c0 0120 	rsb	r1, r0, #32
 800b8ac:	fa23 f401 	lsr.w	r4, r3, r1
 800b8b0:	4082      	lsls	r2, r0
 800b8b2:	4322      	orrs	r2, r4
 800b8b4:	4547      	cmp	r7, r8
 800b8b6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b8ba:	bf8c      	ite	hi
 800b8bc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b8c0:	2200      	movls	r2, #0
 800b8c2:	4083      	lsls	r3, r0
 800b8c4:	40ca      	lsrs	r2, r1
 800b8c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	e7de      	b.n	800b88c <__b2d+0x48>
 800b8ce:	ea42 0501 	orr.w	r5, r2, r1
 800b8d2:	e7db      	b.n	800b88c <__b2d+0x48>
 800b8d4:	3ff00000 	.word	0x3ff00000

0800b8d8 <__d2b>:
 800b8d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b8dc:	460f      	mov	r7, r1
 800b8de:	2101      	movs	r1, #1
 800b8e0:	ec59 8b10 	vmov	r8, r9, d0
 800b8e4:	4616      	mov	r6, r2
 800b8e6:	f7ff fc13 	bl	800b110 <_Balloc>
 800b8ea:	4604      	mov	r4, r0
 800b8ec:	b930      	cbnz	r0, 800b8fc <__d2b+0x24>
 800b8ee:	4602      	mov	r2, r0
 800b8f0:	4b23      	ldr	r3, [pc, #140]	@ (800b980 <__d2b+0xa8>)
 800b8f2:	4824      	ldr	r0, [pc, #144]	@ (800b984 <__d2b+0xac>)
 800b8f4:	f240 310f 	movw	r1, #783	@ 0x30f
 800b8f8:	f7fe f952 	bl	8009ba0 <__assert_func>
 800b8fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b900:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b904:	b10d      	cbz	r5, 800b90a <__d2b+0x32>
 800b906:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b90a:	9301      	str	r3, [sp, #4]
 800b90c:	f1b8 0300 	subs.w	r3, r8, #0
 800b910:	d023      	beq.n	800b95a <__d2b+0x82>
 800b912:	4668      	mov	r0, sp
 800b914:	9300      	str	r3, [sp, #0]
 800b916:	f7ff fd0c 	bl	800b332 <__lo0bits>
 800b91a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b91e:	b1d0      	cbz	r0, 800b956 <__d2b+0x7e>
 800b920:	f1c0 0320 	rsb	r3, r0, #32
 800b924:	fa02 f303 	lsl.w	r3, r2, r3
 800b928:	430b      	orrs	r3, r1
 800b92a:	40c2      	lsrs	r2, r0
 800b92c:	6163      	str	r3, [r4, #20]
 800b92e:	9201      	str	r2, [sp, #4]
 800b930:	9b01      	ldr	r3, [sp, #4]
 800b932:	61a3      	str	r3, [r4, #24]
 800b934:	2b00      	cmp	r3, #0
 800b936:	bf0c      	ite	eq
 800b938:	2201      	moveq	r2, #1
 800b93a:	2202      	movne	r2, #2
 800b93c:	6122      	str	r2, [r4, #16]
 800b93e:	b1a5      	cbz	r5, 800b96a <__d2b+0x92>
 800b940:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b944:	4405      	add	r5, r0
 800b946:	603d      	str	r5, [r7, #0]
 800b948:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b94c:	6030      	str	r0, [r6, #0]
 800b94e:	4620      	mov	r0, r4
 800b950:	b003      	add	sp, #12
 800b952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b956:	6161      	str	r1, [r4, #20]
 800b958:	e7ea      	b.n	800b930 <__d2b+0x58>
 800b95a:	a801      	add	r0, sp, #4
 800b95c:	f7ff fce9 	bl	800b332 <__lo0bits>
 800b960:	9b01      	ldr	r3, [sp, #4]
 800b962:	6163      	str	r3, [r4, #20]
 800b964:	3020      	adds	r0, #32
 800b966:	2201      	movs	r2, #1
 800b968:	e7e8      	b.n	800b93c <__d2b+0x64>
 800b96a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b96e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b972:	6038      	str	r0, [r7, #0]
 800b974:	6918      	ldr	r0, [r3, #16]
 800b976:	f7ff fcbd 	bl	800b2f4 <__hi0bits>
 800b97a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b97e:	e7e5      	b.n	800b94c <__d2b+0x74>
 800b980:	0800c78f 	.word	0x0800c78f
 800b984:	0800c800 	.word	0x0800c800

0800b988 <__ratio>:
 800b988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b98c:	b085      	sub	sp, #20
 800b98e:	e9cd 1000 	strd	r1, r0, [sp]
 800b992:	a902      	add	r1, sp, #8
 800b994:	f7ff ff56 	bl	800b844 <__b2d>
 800b998:	9800      	ldr	r0, [sp, #0]
 800b99a:	a903      	add	r1, sp, #12
 800b99c:	ec55 4b10 	vmov	r4, r5, d0
 800b9a0:	f7ff ff50 	bl	800b844 <__b2d>
 800b9a4:	9b01      	ldr	r3, [sp, #4]
 800b9a6:	6919      	ldr	r1, [r3, #16]
 800b9a8:	9b00      	ldr	r3, [sp, #0]
 800b9aa:	691b      	ldr	r3, [r3, #16]
 800b9ac:	1ac9      	subs	r1, r1, r3
 800b9ae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b9b2:	1a9b      	subs	r3, r3, r2
 800b9b4:	ec5b ab10 	vmov	sl, fp, d0
 800b9b8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	bfce      	itee	gt
 800b9c0:	462a      	movgt	r2, r5
 800b9c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b9c6:	465a      	movle	r2, fp
 800b9c8:	462f      	mov	r7, r5
 800b9ca:	46d9      	mov	r9, fp
 800b9cc:	bfcc      	ite	gt
 800b9ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b9d2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b9d6:	464b      	mov	r3, r9
 800b9d8:	4652      	mov	r2, sl
 800b9da:	4620      	mov	r0, r4
 800b9dc:	4639      	mov	r1, r7
 800b9de:	f7f4 ff55 	bl	800088c <__aeabi_ddiv>
 800b9e2:	ec41 0b10 	vmov	d0, r0, r1
 800b9e6:	b005      	add	sp, #20
 800b9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b9ec <__copybits>:
 800b9ec:	3901      	subs	r1, #1
 800b9ee:	b570      	push	{r4, r5, r6, lr}
 800b9f0:	1149      	asrs	r1, r1, #5
 800b9f2:	6914      	ldr	r4, [r2, #16]
 800b9f4:	3101      	adds	r1, #1
 800b9f6:	f102 0314 	add.w	r3, r2, #20
 800b9fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b9fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ba02:	1f05      	subs	r5, r0, #4
 800ba04:	42a3      	cmp	r3, r4
 800ba06:	d30c      	bcc.n	800ba22 <__copybits+0x36>
 800ba08:	1aa3      	subs	r3, r4, r2
 800ba0a:	3b11      	subs	r3, #17
 800ba0c:	f023 0303 	bic.w	r3, r3, #3
 800ba10:	3211      	adds	r2, #17
 800ba12:	42a2      	cmp	r2, r4
 800ba14:	bf88      	it	hi
 800ba16:	2300      	movhi	r3, #0
 800ba18:	4418      	add	r0, r3
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	4288      	cmp	r0, r1
 800ba1e:	d305      	bcc.n	800ba2c <__copybits+0x40>
 800ba20:	bd70      	pop	{r4, r5, r6, pc}
 800ba22:	f853 6b04 	ldr.w	r6, [r3], #4
 800ba26:	f845 6f04 	str.w	r6, [r5, #4]!
 800ba2a:	e7eb      	b.n	800ba04 <__copybits+0x18>
 800ba2c:	f840 3b04 	str.w	r3, [r0], #4
 800ba30:	e7f4      	b.n	800ba1c <__copybits+0x30>

0800ba32 <__any_on>:
 800ba32:	f100 0214 	add.w	r2, r0, #20
 800ba36:	6900      	ldr	r0, [r0, #16]
 800ba38:	114b      	asrs	r3, r1, #5
 800ba3a:	4298      	cmp	r0, r3
 800ba3c:	b510      	push	{r4, lr}
 800ba3e:	db11      	blt.n	800ba64 <__any_on+0x32>
 800ba40:	dd0a      	ble.n	800ba58 <__any_on+0x26>
 800ba42:	f011 011f 	ands.w	r1, r1, #31
 800ba46:	d007      	beq.n	800ba58 <__any_on+0x26>
 800ba48:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ba4c:	fa24 f001 	lsr.w	r0, r4, r1
 800ba50:	fa00 f101 	lsl.w	r1, r0, r1
 800ba54:	428c      	cmp	r4, r1
 800ba56:	d10b      	bne.n	800ba70 <__any_on+0x3e>
 800ba58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d803      	bhi.n	800ba68 <__any_on+0x36>
 800ba60:	2000      	movs	r0, #0
 800ba62:	bd10      	pop	{r4, pc}
 800ba64:	4603      	mov	r3, r0
 800ba66:	e7f7      	b.n	800ba58 <__any_on+0x26>
 800ba68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba6c:	2900      	cmp	r1, #0
 800ba6e:	d0f5      	beq.n	800ba5c <__any_on+0x2a>
 800ba70:	2001      	movs	r0, #1
 800ba72:	e7f6      	b.n	800ba62 <__any_on+0x30>

0800ba74 <__ascii_wctomb>:
 800ba74:	4603      	mov	r3, r0
 800ba76:	4608      	mov	r0, r1
 800ba78:	b141      	cbz	r1, 800ba8c <__ascii_wctomb+0x18>
 800ba7a:	2aff      	cmp	r2, #255	@ 0xff
 800ba7c:	d904      	bls.n	800ba88 <__ascii_wctomb+0x14>
 800ba7e:	228a      	movs	r2, #138	@ 0x8a
 800ba80:	601a      	str	r2, [r3, #0]
 800ba82:	f04f 30ff 	mov.w	r0, #4294967295
 800ba86:	4770      	bx	lr
 800ba88:	700a      	strb	r2, [r1, #0]
 800ba8a:	2001      	movs	r0, #1
 800ba8c:	4770      	bx	lr
	...

0800ba90 <__sflush_r>:
 800ba90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba98:	0716      	lsls	r6, r2, #28
 800ba9a:	4605      	mov	r5, r0
 800ba9c:	460c      	mov	r4, r1
 800ba9e:	d454      	bmi.n	800bb4a <__sflush_r+0xba>
 800baa0:	684b      	ldr	r3, [r1, #4]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	dc02      	bgt.n	800baac <__sflush_r+0x1c>
 800baa6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	dd48      	ble.n	800bb3e <__sflush_r+0xae>
 800baac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800baae:	2e00      	cmp	r6, #0
 800bab0:	d045      	beq.n	800bb3e <__sflush_r+0xae>
 800bab2:	2300      	movs	r3, #0
 800bab4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bab8:	682f      	ldr	r7, [r5, #0]
 800baba:	6a21      	ldr	r1, [r4, #32]
 800babc:	602b      	str	r3, [r5, #0]
 800babe:	d030      	beq.n	800bb22 <__sflush_r+0x92>
 800bac0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bac2:	89a3      	ldrh	r3, [r4, #12]
 800bac4:	0759      	lsls	r1, r3, #29
 800bac6:	d505      	bpl.n	800bad4 <__sflush_r+0x44>
 800bac8:	6863      	ldr	r3, [r4, #4]
 800baca:	1ad2      	subs	r2, r2, r3
 800bacc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bace:	b10b      	cbz	r3, 800bad4 <__sflush_r+0x44>
 800bad0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bad2:	1ad2      	subs	r2, r2, r3
 800bad4:	2300      	movs	r3, #0
 800bad6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bad8:	6a21      	ldr	r1, [r4, #32]
 800bada:	4628      	mov	r0, r5
 800badc:	47b0      	blx	r6
 800bade:	1c43      	adds	r3, r0, #1
 800bae0:	89a3      	ldrh	r3, [r4, #12]
 800bae2:	d106      	bne.n	800baf2 <__sflush_r+0x62>
 800bae4:	6829      	ldr	r1, [r5, #0]
 800bae6:	291d      	cmp	r1, #29
 800bae8:	d82b      	bhi.n	800bb42 <__sflush_r+0xb2>
 800baea:	4a2a      	ldr	r2, [pc, #168]	@ (800bb94 <__sflush_r+0x104>)
 800baec:	410a      	asrs	r2, r1
 800baee:	07d6      	lsls	r6, r2, #31
 800baf0:	d427      	bmi.n	800bb42 <__sflush_r+0xb2>
 800baf2:	2200      	movs	r2, #0
 800baf4:	6062      	str	r2, [r4, #4]
 800baf6:	04d9      	lsls	r1, r3, #19
 800baf8:	6922      	ldr	r2, [r4, #16]
 800bafa:	6022      	str	r2, [r4, #0]
 800bafc:	d504      	bpl.n	800bb08 <__sflush_r+0x78>
 800bafe:	1c42      	adds	r2, r0, #1
 800bb00:	d101      	bne.n	800bb06 <__sflush_r+0x76>
 800bb02:	682b      	ldr	r3, [r5, #0]
 800bb04:	b903      	cbnz	r3, 800bb08 <__sflush_r+0x78>
 800bb06:	6560      	str	r0, [r4, #84]	@ 0x54
 800bb08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb0a:	602f      	str	r7, [r5, #0]
 800bb0c:	b1b9      	cbz	r1, 800bb3e <__sflush_r+0xae>
 800bb0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb12:	4299      	cmp	r1, r3
 800bb14:	d002      	beq.n	800bb1c <__sflush_r+0x8c>
 800bb16:	4628      	mov	r0, r5
 800bb18:	f7fe feae 	bl	800a878 <_free_r>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb20:	e00d      	b.n	800bb3e <__sflush_r+0xae>
 800bb22:	2301      	movs	r3, #1
 800bb24:	4628      	mov	r0, r5
 800bb26:	47b0      	blx	r6
 800bb28:	4602      	mov	r2, r0
 800bb2a:	1c50      	adds	r0, r2, #1
 800bb2c:	d1c9      	bne.n	800bac2 <__sflush_r+0x32>
 800bb2e:	682b      	ldr	r3, [r5, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d0c6      	beq.n	800bac2 <__sflush_r+0x32>
 800bb34:	2b1d      	cmp	r3, #29
 800bb36:	d001      	beq.n	800bb3c <__sflush_r+0xac>
 800bb38:	2b16      	cmp	r3, #22
 800bb3a:	d11e      	bne.n	800bb7a <__sflush_r+0xea>
 800bb3c:	602f      	str	r7, [r5, #0]
 800bb3e:	2000      	movs	r0, #0
 800bb40:	e022      	b.n	800bb88 <__sflush_r+0xf8>
 800bb42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb46:	b21b      	sxth	r3, r3
 800bb48:	e01b      	b.n	800bb82 <__sflush_r+0xf2>
 800bb4a:	690f      	ldr	r7, [r1, #16]
 800bb4c:	2f00      	cmp	r7, #0
 800bb4e:	d0f6      	beq.n	800bb3e <__sflush_r+0xae>
 800bb50:	0793      	lsls	r3, r2, #30
 800bb52:	680e      	ldr	r6, [r1, #0]
 800bb54:	bf08      	it	eq
 800bb56:	694b      	ldreq	r3, [r1, #20]
 800bb58:	600f      	str	r7, [r1, #0]
 800bb5a:	bf18      	it	ne
 800bb5c:	2300      	movne	r3, #0
 800bb5e:	eba6 0807 	sub.w	r8, r6, r7
 800bb62:	608b      	str	r3, [r1, #8]
 800bb64:	f1b8 0f00 	cmp.w	r8, #0
 800bb68:	dde9      	ble.n	800bb3e <__sflush_r+0xae>
 800bb6a:	6a21      	ldr	r1, [r4, #32]
 800bb6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bb6e:	4643      	mov	r3, r8
 800bb70:	463a      	mov	r2, r7
 800bb72:	4628      	mov	r0, r5
 800bb74:	47b0      	blx	r6
 800bb76:	2800      	cmp	r0, #0
 800bb78:	dc08      	bgt.n	800bb8c <__sflush_r+0xfc>
 800bb7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb82:	81a3      	strh	r3, [r4, #12]
 800bb84:	f04f 30ff 	mov.w	r0, #4294967295
 800bb88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb8c:	4407      	add	r7, r0
 800bb8e:	eba8 0800 	sub.w	r8, r8, r0
 800bb92:	e7e7      	b.n	800bb64 <__sflush_r+0xd4>
 800bb94:	dfbffffe 	.word	0xdfbffffe

0800bb98 <_fflush_r>:
 800bb98:	b538      	push	{r3, r4, r5, lr}
 800bb9a:	690b      	ldr	r3, [r1, #16]
 800bb9c:	4605      	mov	r5, r0
 800bb9e:	460c      	mov	r4, r1
 800bba0:	b913      	cbnz	r3, 800bba8 <_fflush_r+0x10>
 800bba2:	2500      	movs	r5, #0
 800bba4:	4628      	mov	r0, r5
 800bba6:	bd38      	pop	{r3, r4, r5, pc}
 800bba8:	b118      	cbz	r0, 800bbb2 <_fflush_r+0x1a>
 800bbaa:	6a03      	ldr	r3, [r0, #32]
 800bbac:	b90b      	cbnz	r3, 800bbb2 <_fflush_r+0x1a>
 800bbae:	f7fd fe77 	bl	80098a0 <__sinit>
 800bbb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d0f3      	beq.n	800bba2 <_fflush_r+0xa>
 800bbba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bbbc:	07d0      	lsls	r0, r2, #31
 800bbbe:	d404      	bmi.n	800bbca <_fflush_r+0x32>
 800bbc0:	0599      	lsls	r1, r3, #22
 800bbc2:	d402      	bmi.n	800bbca <_fflush_r+0x32>
 800bbc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbc6:	f7fd ffd0 	bl	8009b6a <__retarget_lock_acquire_recursive>
 800bbca:	4628      	mov	r0, r5
 800bbcc:	4621      	mov	r1, r4
 800bbce:	f7ff ff5f 	bl	800ba90 <__sflush_r>
 800bbd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bbd4:	07da      	lsls	r2, r3, #31
 800bbd6:	4605      	mov	r5, r0
 800bbd8:	d4e4      	bmi.n	800bba4 <_fflush_r+0xc>
 800bbda:	89a3      	ldrh	r3, [r4, #12]
 800bbdc:	059b      	lsls	r3, r3, #22
 800bbde:	d4e1      	bmi.n	800bba4 <_fflush_r+0xc>
 800bbe0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbe2:	f7fd ffc3 	bl	8009b6c <__retarget_lock_release_recursive>
 800bbe6:	e7dd      	b.n	800bba4 <_fflush_r+0xc>

0800bbe8 <fiprintf>:
 800bbe8:	b40e      	push	{r1, r2, r3}
 800bbea:	b503      	push	{r0, r1, lr}
 800bbec:	4601      	mov	r1, r0
 800bbee:	ab03      	add	r3, sp, #12
 800bbf0:	4805      	ldr	r0, [pc, #20]	@ (800bc08 <fiprintf+0x20>)
 800bbf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbf6:	6800      	ldr	r0, [r0, #0]
 800bbf8:	9301      	str	r3, [sp, #4]
 800bbfa:	f000 f85b 	bl	800bcb4 <_vfiprintf_r>
 800bbfe:	b002      	add	sp, #8
 800bc00:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc04:	b003      	add	sp, #12
 800bc06:	4770      	bx	lr
 800bc08:	200001a4 	.word	0x200001a4

0800bc0c <_sbrk_r>:
 800bc0c:	b538      	push	{r3, r4, r5, lr}
 800bc0e:	4d06      	ldr	r5, [pc, #24]	@ (800bc28 <_sbrk_r+0x1c>)
 800bc10:	2300      	movs	r3, #0
 800bc12:	4604      	mov	r4, r0
 800bc14:	4608      	mov	r0, r1
 800bc16:	602b      	str	r3, [r5, #0]
 800bc18:	f7f7 fd06 	bl	8003628 <_sbrk>
 800bc1c:	1c43      	adds	r3, r0, #1
 800bc1e:	d102      	bne.n	800bc26 <_sbrk_r+0x1a>
 800bc20:	682b      	ldr	r3, [r5, #0]
 800bc22:	b103      	cbz	r3, 800bc26 <_sbrk_r+0x1a>
 800bc24:	6023      	str	r3, [r4, #0]
 800bc26:	bd38      	pop	{r3, r4, r5, pc}
 800bc28:	20000e2c 	.word	0x20000e2c

0800bc2c <abort>:
 800bc2c:	b508      	push	{r3, lr}
 800bc2e:	2006      	movs	r0, #6
 800bc30:	f000 fa14 	bl	800c05c <raise>
 800bc34:	2001      	movs	r0, #1
 800bc36:	f7f7 fc7f 	bl	8003538 <_exit>

0800bc3a <_calloc_r>:
 800bc3a:	b570      	push	{r4, r5, r6, lr}
 800bc3c:	fba1 5402 	umull	r5, r4, r1, r2
 800bc40:	b93c      	cbnz	r4, 800bc52 <_calloc_r+0x18>
 800bc42:	4629      	mov	r1, r5
 800bc44:	f7ff f9c6 	bl	800afd4 <_malloc_r>
 800bc48:	4606      	mov	r6, r0
 800bc4a:	b928      	cbnz	r0, 800bc58 <_calloc_r+0x1e>
 800bc4c:	2600      	movs	r6, #0
 800bc4e:	4630      	mov	r0, r6
 800bc50:	bd70      	pop	{r4, r5, r6, pc}
 800bc52:	220c      	movs	r2, #12
 800bc54:	6002      	str	r2, [r0, #0]
 800bc56:	e7f9      	b.n	800bc4c <_calloc_r+0x12>
 800bc58:	462a      	mov	r2, r5
 800bc5a:	4621      	mov	r1, r4
 800bc5c:	f7fd fe99 	bl	8009992 <memset>
 800bc60:	e7f5      	b.n	800bc4e <_calloc_r+0x14>

0800bc62 <__sfputc_r>:
 800bc62:	6893      	ldr	r3, [r2, #8]
 800bc64:	3b01      	subs	r3, #1
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	b410      	push	{r4}
 800bc6a:	6093      	str	r3, [r2, #8]
 800bc6c:	da08      	bge.n	800bc80 <__sfputc_r+0x1e>
 800bc6e:	6994      	ldr	r4, [r2, #24]
 800bc70:	42a3      	cmp	r3, r4
 800bc72:	db01      	blt.n	800bc78 <__sfputc_r+0x16>
 800bc74:	290a      	cmp	r1, #10
 800bc76:	d103      	bne.n	800bc80 <__sfputc_r+0x1e>
 800bc78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc7c:	f000 b932 	b.w	800bee4 <__swbuf_r>
 800bc80:	6813      	ldr	r3, [r2, #0]
 800bc82:	1c58      	adds	r0, r3, #1
 800bc84:	6010      	str	r0, [r2, #0]
 800bc86:	7019      	strb	r1, [r3, #0]
 800bc88:	4608      	mov	r0, r1
 800bc8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <__sfputs_r>:
 800bc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc92:	4606      	mov	r6, r0
 800bc94:	460f      	mov	r7, r1
 800bc96:	4614      	mov	r4, r2
 800bc98:	18d5      	adds	r5, r2, r3
 800bc9a:	42ac      	cmp	r4, r5
 800bc9c:	d101      	bne.n	800bca2 <__sfputs_r+0x12>
 800bc9e:	2000      	movs	r0, #0
 800bca0:	e007      	b.n	800bcb2 <__sfputs_r+0x22>
 800bca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bca6:	463a      	mov	r2, r7
 800bca8:	4630      	mov	r0, r6
 800bcaa:	f7ff ffda 	bl	800bc62 <__sfputc_r>
 800bcae:	1c43      	adds	r3, r0, #1
 800bcb0:	d1f3      	bne.n	800bc9a <__sfputs_r+0xa>
 800bcb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bcb4 <_vfiprintf_r>:
 800bcb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcb8:	460d      	mov	r5, r1
 800bcba:	b09d      	sub	sp, #116	@ 0x74
 800bcbc:	4614      	mov	r4, r2
 800bcbe:	4698      	mov	r8, r3
 800bcc0:	4606      	mov	r6, r0
 800bcc2:	b118      	cbz	r0, 800bccc <_vfiprintf_r+0x18>
 800bcc4:	6a03      	ldr	r3, [r0, #32]
 800bcc6:	b90b      	cbnz	r3, 800bccc <_vfiprintf_r+0x18>
 800bcc8:	f7fd fdea 	bl	80098a0 <__sinit>
 800bccc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcce:	07d9      	lsls	r1, r3, #31
 800bcd0:	d405      	bmi.n	800bcde <_vfiprintf_r+0x2a>
 800bcd2:	89ab      	ldrh	r3, [r5, #12]
 800bcd4:	059a      	lsls	r2, r3, #22
 800bcd6:	d402      	bmi.n	800bcde <_vfiprintf_r+0x2a>
 800bcd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcda:	f7fd ff46 	bl	8009b6a <__retarget_lock_acquire_recursive>
 800bcde:	89ab      	ldrh	r3, [r5, #12]
 800bce0:	071b      	lsls	r3, r3, #28
 800bce2:	d501      	bpl.n	800bce8 <_vfiprintf_r+0x34>
 800bce4:	692b      	ldr	r3, [r5, #16]
 800bce6:	b99b      	cbnz	r3, 800bd10 <_vfiprintf_r+0x5c>
 800bce8:	4629      	mov	r1, r5
 800bcea:	4630      	mov	r0, r6
 800bcec:	f000 f938 	bl	800bf60 <__swsetup_r>
 800bcf0:	b170      	cbz	r0, 800bd10 <_vfiprintf_r+0x5c>
 800bcf2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcf4:	07dc      	lsls	r4, r3, #31
 800bcf6:	d504      	bpl.n	800bd02 <_vfiprintf_r+0x4e>
 800bcf8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcfc:	b01d      	add	sp, #116	@ 0x74
 800bcfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd02:	89ab      	ldrh	r3, [r5, #12]
 800bd04:	0598      	lsls	r0, r3, #22
 800bd06:	d4f7      	bmi.n	800bcf8 <_vfiprintf_r+0x44>
 800bd08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd0a:	f7fd ff2f 	bl	8009b6c <__retarget_lock_release_recursive>
 800bd0e:	e7f3      	b.n	800bcf8 <_vfiprintf_r+0x44>
 800bd10:	2300      	movs	r3, #0
 800bd12:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd14:	2320      	movs	r3, #32
 800bd16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd1e:	2330      	movs	r3, #48	@ 0x30
 800bd20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bed0 <_vfiprintf_r+0x21c>
 800bd24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd28:	f04f 0901 	mov.w	r9, #1
 800bd2c:	4623      	mov	r3, r4
 800bd2e:	469a      	mov	sl, r3
 800bd30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd34:	b10a      	cbz	r2, 800bd3a <_vfiprintf_r+0x86>
 800bd36:	2a25      	cmp	r2, #37	@ 0x25
 800bd38:	d1f9      	bne.n	800bd2e <_vfiprintf_r+0x7a>
 800bd3a:	ebba 0b04 	subs.w	fp, sl, r4
 800bd3e:	d00b      	beq.n	800bd58 <_vfiprintf_r+0xa4>
 800bd40:	465b      	mov	r3, fp
 800bd42:	4622      	mov	r2, r4
 800bd44:	4629      	mov	r1, r5
 800bd46:	4630      	mov	r0, r6
 800bd48:	f7ff ffa2 	bl	800bc90 <__sfputs_r>
 800bd4c:	3001      	adds	r0, #1
 800bd4e:	f000 80a7 	beq.w	800bea0 <_vfiprintf_r+0x1ec>
 800bd52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd54:	445a      	add	r2, fp
 800bd56:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd58:	f89a 3000 	ldrb.w	r3, [sl]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	f000 809f 	beq.w	800bea0 <_vfiprintf_r+0x1ec>
 800bd62:	2300      	movs	r3, #0
 800bd64:	f04f 32ff 	mov.w	r2, #4294967295
 800bd68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd6c:	f10a 0a01 	add.w	sl, sl, #1
 800bd70:	9304      	str	r3, [sp, #16]
 800bd72:	9307      	str	r3, [sp, #28]
 800bd74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd78:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd7a:	4654      	mov	r4, sl
 800bd7c:	2205      	movs	r2, #5
 800bd7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd82:	4853      	ldr	r0, [pc, #332]	@ (800bed0 <_vfiprintf_r+0x21c>)
 800bd84:	f7f4 fa44 	bl	8000210 <memchr>
 800bd88:	9a04      	ldr	r2, [sp, #16]
 800bd8a:	b9d8      	cbnz	r0, 800bdc4 <_vfiprintf_r+0x110>
 800bd8c:	06d1      	lsls	r1, r2, #27
 800bd8e:	bf44      	itt	mi
 800bd90:	2320      	movmi	r3, #32
 800bd92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd96:	0713      	lsls	r3, r2, #28
 800bd98:	bf44      	itt	mi
 800bd9a:	232b      	movmi	r3, #43	@ 0x2b
 800bd9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bda0:	f89a 3000 	ldrb.w	r3, [sl]
 800bda4:	2b2a      	cmp	r3, #42	@ 0x2a
 800bda6:	d015      	beq.n	800bdd4 <_vfiprintf_r+0x120>
 800bda8:	9a07      	ldr	r2, [sp, #28]
 800bdaa:	4654      	mov	r4, sl
 800bdac:	2000      	movs	r0, #0
 800bdae:	f04f 0c0a 	mov.w	ip, #10
 800bdb2:	4621      	mov	r1, r4
 800bdb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdb8:	3b30      	subs	r3, #48	@ 0x30
 800bdba:	2b09      	cmp	r3, #9
 800bdbc:	d94b      	bls.n	800be56 <_vfiprintf_r+0x1a2>
 800bdbe:	b1b0      	cbz	r0, 800bdee <_vfiprintf_r+0x13a>
 800bdc0:	9207      	str	r2, [sp, #28]
 800bdc2:	e014      	b.n	800bdee <_vfiprintf_r+0x13a>
 800bdc4:	eba0 0308 	sub.w	r3, r0, r8
 800bdc8:	fa09 f303 	lsl.w	r3, r9, r3
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	9304      	str	r3, [sp, #16]
 800bdd0:	46a2      	mov	sl, r4
 800bdd2:	e7d2      	b.n	800bd7a <_vfiprintf_r+0xc6>
 800bdd4:	9b03      	ldr	r3, [sp, #12]
 800bdd6:	1d19      	adds	r1, r3, #4
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	9103      	str	r1, [sp, #12]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	bfbb      	ittet	lt
 800bde0:	425b      	neglt	r3, r3
 800bde2:	f042 0202 	orrlt.w	r2, r2, #2
 800bde6:	9307      	strge	r3, [sp, #28]
 800bde8:	9307      	strlt	r3, [sp, #28]
 800bdea:	bfb8      	it	lt
 800bdec:	9204      	strlt	r2, [sp, #16]
 800bdee:	7823      	ldrb	r3, [r4, #0]
 800bdf0:	2b2e      	cmp	r3, #46	@ 0x2e
 800bdf2:	d10a      	bne.n	800be0a <_vfiprintf_r+0x156>
 800bdf4:	7863      	ldrb	r3, [r4, #1]
 800bdf6:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdf8:	d132      	bne.n	800be60 <_vfiprintf_r+0x1ac>
 800bdfa:	9b03      	ldr	r3, [sp, #12]
 800bdfc:	1d1a      	adds	r2, r3, #4
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	9203      	str	r2, [sp, #12]
 800be02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be06:	3402      	adds	r4, #2
 800be08:	9305      	str	r3, [sp, #20]
 800be0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bee0 <_vfiprintf_r+0x22c>
 800be0e:	7821      	ldrb	r1, [r4, #0]
 800be10:	2203      	movs	r2, #3
 800be12:	4650      	mov	r0, sl
 800be14:	f7f4 f9fc 	bl	8000210 <memchr>
 800be18:	b138      	cbz	r0, 800be2a <_vfiprintf_r+0x176>
 800be1a:	9b04      	ldr	r3, [sp, #16]
 800be1c:	eba0 000a 	sub.w	r0, r0, sl
 800be20:	2240      	movs	r2, #64	@ 0x40
 800be22:	4082      	lsls	r2, r0
 800be24:	4313      	orrs	r3, r2
 800be26:	3401      	adds	r4, #1
 800be28:	9304      	str	r3, [sp, #16]
 800be2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be2e:	4829      	ldr	r0, [pc, #164]	@ (800bed4 <_vfiprintf_r+0x220>)
 800be30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be34:	2206      	movs	r2, #6
 800be36:	f7f4 f9eb 	bl	8000210 <memchr>
 800be3a:	2800      	cmp	r0, #0
 800be3c:	d03f      	beq.n	800bebe <_vfiprintf_r+0x20a>
 800be3e:	4b26      	ldr	r3, [pc, #152]	@ (800bed8 <_vfiprintf_r+0x224>)
 800be40:	bb1b      	cbnz	r3, 800be8a <_vfiprintf_r+0x1d6>
 800be42:	9b03      	ldr	r3, [sp, #12]
 800be44:	3307      	adds	r3, #7
 800be46:	f023 0307 	bic.w	r3, r3, #7
 800be4a:	3308      	adds	r3, #8
 800be4c:	9303      	str	r3, [sp, #12]
 800be4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be50:	443b      	add	r3, r7
 800be52:	9309      	str	r3, [sp, #36]	@ 0x24
 800be54:	e76a      	b.n	800bd2c <_vfiprintf_r+0x78>
 800be56:	fb0c 3202 	mla	r2, ip, r2, r3
 800be5a:	460c      	mov	r4, r1
 800be5c:	2001      	movs	r0, #1
 800be5e:	e7a8      	b.n	800bdb2 <_vfiprintf_r+0xfe>
 800be60:	2300      	movs	r3, #0
 800be62:	3401      	adds	r4, #1
 800be64:	9305      	str	r3, [sp, #20]
 800be66:	4619      	mov	r1, r3
 800be68:	f04f 0c0a 	mov.w	ip, #10
 800be6c:	4620      	mov	r0, r4
 800be6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be72:	3a30      	subs	r2, #48	@ 0x30
 800be74:	2a09      	cmp	r2, #9
 800be76:	d903      	bls.n	800be80 <_vfiprintf_r+0x1cc>
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d0c6      	beq.n	800be0a <_vfiprintf_r+0x156>
 800be7c:	9105      	str	r1, [sp, #20]
 800be7e:	e7c4      	b.n	800be0a <_vfiprintf_r+0x156>
 800be80:	fb0c 2101 	mla	r1, ip, r1, r2
 800be84:	4604      	mov	r4, r0
 800be86:	2301      	movs	r3, #1
 800be88:	e7f0      	b.n	800be6c <_vfiprintf_r+0x1b8>
 800be8a:	ab03      	add	r3, sp, #12
 800be8c:	9300      	str	r3, [sp, #0]
 800be8e:	462a      	mov	r2, r5
 800be90:	4b12      	ldr	r3, [pc, #72]	@ (800bedc <_vfiprintf_r+0x228>)
 800be92:	a904      	add	r1, sp, #16
 800be94:	4630      	mov	r0, r6
 800be96:	f7fd f8bf 	bl	8009018 <_printf_float>
 800be9a:	4607      	mov	r7, r0
 800be9c:	1c78      	adds	r0, r7, #1
 800be9e:	d1d6      	bne.n	800be4e <_vfiprintf_r+0x19a>
 800bea0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bea2:	07d9      	lsls	r1, r3, #31
 800bea4:	d405      	bmi.n	800beb2 <_vfiprintf_r+0x1fe>
 800bea6:	89ab      	ldrh	r3, [r5, #12]
 800bea8:	059a      	lsls	r2, r3, #22
 800beaa:	d402      	bmi.n	800beb2 <_vfiprintf_r+0x1fe>
 800beac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800beae:	f7fd fe5d 	bl	8009b6c <__retarget_lock_release_recursive>
 800beb2:	89ab      	ldrh	r3, [r5, #12]
 800beb4:	065b      	lsls	r3, r3, #25
 800beb6:	f53f af1f 	bmi.w	800bcf8 <_vfiprintf_r+0x44>
 800beba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bebc:	e71e      	b.n	800bcfc <_vfiprintf_r+0x48>
 800bebe:	ab03      	add	r3, sp, #12
 800bec0:	9300      	str	r3, [sp, #0]
 800bec2:	462a      	mov	r2, r5
 800bec4:	4b05      	ldr	r3, [pc, #20]	@ (800bedc <_vfiprintf_r+0x228>)
 800bec6:	a904      	add	r1, sp, #16
 800bec8:	4630      	mov	r0, r6
 800beca:	f7fd fb3d 	bl	8009548 <_printf_i>
 800bece:	e7e4      	b.n	800be9a <_vfiprintf_r+0x1e6>
 800bed0:	0800c958 	.word	0x0800c958
 800bed4:	0800c962 	.word	0x0800c962
 800bed8:	08009019 	.word	0x08009019
 800bedc:	0800bc91 	.word	0x0800bc91
 800bee0:	0800c95e 	.word	0x0800c95e

0800bee4 <__swbuf_r>:
 800bee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bee6:	460e      	mov	r6, r1
 800bee8:	4614      	mov	r4, r2
 800beea:	4605      	mov	r5, r0
 800beec:	b118      	cbz	r0, 800bef6 <__swbuf_r+0x12>
 800beee:	6a03      	ldr	r3, [r0, #32]
 800bef0:	b90b      	cbnz	r3, 800bef6 <__swbuf_r+0x12>
 800bef2:	f7fd fcd5 	bl	80098a0 <__sinit>
 800bef6:	69a3      	ldr	r3, [r4, #24]
 800bef8:	60a3      	str	r3, [r4, #8]
 800befa:	89a3      	ldrh	r3, [r4, #12]
 800befc:	071a      	lsls	r2, r3, #28
 800befe:	d501      	bpl.n	800bf04 <__swbuf_r+0x20>
 800bf00:	6923      	ldr	r3, [r4, #16]
 800bf02:	b943      	cbnz	r3, 800bf16 <__swbuf_r+0x32>
 800bf04:	4621      	mov	r1, r4
 800bf06:	4628      	mov	r0, r5
 800bf08:	f000 f82a 	bl	800bf60 <__swsetup_r>
 800bf0c:	b118      	cbz	r0, 800bf16 <__swbuf_r+0x32>
 800bf0e:	f04f 37ff 	mov.w	r7, #4294967295
 800bf12:	4638      	mov	r0, r7
 800bf14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf16:	6823      	ldr	r3, [r4, #0]
 800bf18:	6922      	ldr	r2, [r4, #16]
 800bf1a:	1a98      	subs	r0, r3, r2
 800bf1c:	6963      	ldr	r3, [r4, #20]
 800bf1e:	b2f6      	uxtb	r6, r6
 800bf20:	4283      	cmp	r3, r0
 800bf22:	4637      	mov	r7, r6
 800bf24:	dc05      	bgt.n	800bf32 <__swbuf_r+0x4e>
 800bf26:	4621      	mov	r1, r4
 800bf28:	4628      	mov	r0, r5
 800bf2a:	f7ff fe35 	bl	800bb98 <_fflush_r>
 800bf2e:	2800      	cmp	r0, #0
 800bf30:	d1ed      	bne.n	800bf0e <__swbuf_r+0x2a>
 800bf32:	68a3      	ldr	r3, [r4, #8]
 800bf34:	3b01      	subs	r3, #1
 800bf36:	60a3      	str	r3, [r4, #8]
 800bf38:	6823      	ldr	r3, [r4, #0]
 800bf3a:	1c5a      	adds	r2, r3, #1
 800bf3c:	6022      	str	r2, [r4, #0]
 800bf3e:	701e      	strb	r6, [r3, #0]
 800bf40:	6962      	ldr	r2, [r4, #20]
 800bf42:	1c43      	adds	r3, r0, #1
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d004      	beq.n	800bf52 <__swbuf_r+0x6e>
 800bf48:	89a3      	ldrh	r3, [r4, #12]
 800bf4a:	07db      	lsls	r3, r3, #31
 800bf4c:	d5e1      	bpl.n	800bf12 <__swbuf_r+0x2e>
 800bf4e:	2e0a      	cmp	r6, #10
 800bf50:	d1df      	bne.n	800bf12 <__swbuf_r+0x2e>
 800bf52:	4621      	mov	r1, r4
 800bf54:	4628      	mov	r0, r5
 800bf56:	f7ff fe1f 	bl	800bb98 <_fflush_r>
 800bf5a:	2800      	cmp	r0, #0
 800bf5c:	d0d9      	beq.n	800bf12 <__swbuf_r+0x2e>
 800bf5e:	e7d6      	b.n	800bf0e <__swbuf_r+0x2a>

0800bf60 <__swsetup_r>:
 800bf60:	b538      	push	{r3, r4, r5, lr}
 800bf62:	4b29      	ldr	r3, [pc, #164]	@ (800c008 <__swsetup_r+0xa8>)
 800bf64:	4605      	mov	r5, r0
 800bf66:	6818      	ldr	r0, [r3, #0]
 800bf68:	460c      	mov	r4, r1
 800bf6a:	b118      	cbz	r0, 800bf74 <__swsetup_r+0x14>
 800bf6c:	6a03      	ldr	r3, [r0, #32]
 800bf6e:	b90b      	cbnz	r3, 800bf74 <__swsetup_r+0x14>
 800bf70:	f7fd fc96 	bl	80098a0 <__sinit>
 800bf74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf78:	0719      	lsls	r1, r3, #28
 800bf7a:	d422      	bmi.n	800bfc2 <__swsetup_r+0x62>
 800bf7c:	06da      	lsls	r2, r3, #27
 800bf7e:	d407      	bmi.n	800bf90 <__swsetup_r+0x30>
 800bf80:	2209      	movs	r2, #9
 800bf82:	602a      	str	r2, [r5, #0]
 800bf84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf88:	81a3      	strh	r3, [r4, #12]
 800bf8a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf8e:	e033      	b.n	800bff8 <__swsetup_r+0x98>
 800bf90:	0758      	lsls	r0, r3, #29
 800bf92:	d512      	bpl.n	800bfba <__swsetup_r+0x5a>
 800bf94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bf96:	b141      	cbz	r1, 800bfaa <__swsetup_r+0x4a>
 800bf98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bf9c:	4299      	cmp	r1, r3
 800bf9e:	d002      	beq.n	800bfa6 <__swsetup_r+0x46>
 800bfa0:	4628      	mov	r0, r5
 800bfa2:	f7fe fc69 	bl	800a878 <_free_r>
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	6363      	str	r3, [r4, #52]	@ 0x34
 800bfaa:	89a3      	ldrh	r3, [r4, #12]
 800bfac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bfb0:	81a3      	strh	r3, [r4, #12]
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	6063      	str	r3, [r4, #4]
 800bfb6:	6923      	ldr	r3, [r4, #16]
 800bfb8:	6023      	str	r3, [r4, #0]
 800bfba:	89a3      	ldrh	r3, [r4, #12]
 800bfbc:	f043 0308 	orr.w	r3, r3, #8
 800bfc0:	81a3      	strh	r3, [r4, #12]
 800bfc2:	6923      	ldr	r3, [r4, #16]
 800bfc4:	b94b      	cbnz	r3, 800bfda <__swsetup_r+0x7a>
 800bfc6:	89a3      	ldrh	r3, [r4, #12]
 800bfc8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bfcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bfd0:	d003      	beq.n	800bfda <__swsetup_r+0x7a>
 800bfd2:	4621      	mov	r1, r4
 800bfd4:	4628      	mov	r0, r5
 800bfd6:	f000 f883 	bl	800c0e0 <__smakebuf_r>
 800bfda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfde:	f013 0201 	ands.w	r2, r3, #1
 800bfe2:	d00a      	beq.n	800bffa <__swsetup_r+0x9a>
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	60a2      	str	r2, [r4, #8]
 800bfe8:	6962      	ldr	r2, [r4, #20]
 800bfea:	4252      	negs	r2, r2
 800bfec:	61a2      	str	r2, [r4, #24]
 800bfee:	6922      	ldr	r2, [r4, #16]
 800bff0:	b942      	cbnz	r2, 800c004 <__swsetup_r+0xa4>
 800bff2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bff6:	d1c5      	bne.n	800bf84 <__swsetup_r+0x24>
 800bff8:	bd38      	pop	{r3, r4, r5, pc}
 800bffa:	0799      	lsls	r1, r3, #30
 800bffc:	bf58      	it	pl
 800bffe:	6962      	ldrpl	r2, [r4, #20]
 800c000:	60a2      	str	r2, [r4, #8]
 800c002:	e7f4      	b.n	800bfee <__swsetup_r+0x8e>
 800c004:	2000      	movs	r0, #0
 800c006:	e7f7      	b.n	800bff8 <__swsetup_r+0x98>
 800c008:	200001a4 	.word	0x200001a4

0800c00c <_raise_r>:
 800c00c:	291f      	cmp	r1, #31
 800c00e:	b538      	push	{r3, r4, r5, lr}
 800c010:	4605      	mov	r5, r0
 800c012:	460c      	mov	r4, r1
 800c014:	d904      	bls.n	800c020 <_raise_r+0x14>
 800c016:	2316      	movs	r3, #22
 800c018:	6003      	str	r3, [r0, #0]
 800c01a:	f04f 30ff 	mov.w	r0, #4294967295
 800c01e:	bd38      	pop	{r3, r4, r5, pc}
 800c020:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c022:	b112      	cbz	r2, 800c02a <_raise_r+0x1e>
 800c024:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c028:	b94b      	cbnz	r3, 800c03e <_raise_r+0x32>
 800c02a:	4628      	mov	r0, r5
 800c02c:	f000 f830 	bl	800c090 <_getpid_r>
 800c030:	4622      	mov	r2, r4
 800c032:	4601      	mov	r1, r0
 800c034:	4628      	mov	r0, r5
 800c036:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c03a:	f000 b817 	b.w	800c06c <_kill_r>
 800c03e:	2b01      	cmp	r3, #1
 800c040:	d00a      	beq.n	800c058 <_raise_r+0x4c>
 800c042:	1c59      	adds	r1, r3, #1
 800c044:	d103      	bne.n	800c04e <_raise_r+0x42>
 800c046:	2316      	movs	r3, #22
 800c048:	6003      	str	r3, [r0, #0]
 800c04a:	2001      	movs	r0, #1
 800c04c:	e7e7      	b.n	800c01e <_raise_r+0x12>
 800c04e:	2100      	movs	r1, #0
 800c050:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c054:	4620      	mov	r0, r4
 800c056:	4798      	blx	r3
 800c058:	2000      	movs	r0, #0
 800c05a:	e7e0      	b.n	800c01e <_raise_r+0x12>

0800c05c <raise>:
 800c05c:	4b02      	ldr	r3, [pc, #8]	@ (800c068 <raise+0xc>)
 800c05e:	4601      	mov	r1, r0
 800c060:	6818      	ldr	r0, [r3, #0]
 800c062:	f7ff bfd3 	b.w	800c00c <_raise_r>
 800c066:	bf00      	nop
 800c068:	200001a4 	.word	0x200001a4

0800c06c <_kill_r>:
 800c06c:	b538      	push	{r3, r4, r5, lr}
 800c06e:	4d07      	ldr	r5, [pc, #28]	@ (800c08c <_kill_r+0x20>)
 800c070:	2300      	movs	r3, #0
 800c072:	4604      	mov	r4, r0
 800c074:	4608      	mov	r0, r1
 800c076:	4611      	mov	r1, r2
 800c078:	602b      	str	r3, [r5, #0]
 800c07a:	f7f7 fa4d 	bl	8003518 <_kill>
 800c07e:	1c43      	adds	r3, r0, #1
 800c080:	d102      	bne.n	800c088 <_kill_r+0x1c>
 800c082:	682b      	ldr	r3, [r5, #0]
 800c084:	b103      	cbz	r3, 800c088 <_kill_r+0x1c>
 800c086:	6023      	str	r3, [r4, #0]
 800c088:	bd38      	pop	{r3, r4, r5, pc}
 800c08a:	bf00      	nop
 800c08c:	20000e2c 	.word	0x20000e2c

0800c090 <_getpid_r>:
 800c090:	f7f7 ba3a 	b.w	8003508 <_getpid>

0800c094 <__swhatbuf_r>:
 800c094:	b570      	push	{r4, r5, r6, lr}
 800c096:	460c      	mov	r4, r1
 800c098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c09c:	2900      	cmp	r1, #0
 800c09e:	b096      	sub	sp, #88	@ 0x58
 800c0a0:	4615      	mov	r5, r2
 800c0a2:	461e      	mov	r6, r3
 800c0a4:	da0d      	bge.n	800c0c2 <__swhatbuf_r+0x2e>
 800c0a6:	89a3      	ldrh	r3, [r4, #12]
 800c0a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c0ac:	f04f 0100 	mov.w	r1, #0
 800c0b0:	bf14      	ite	ne
 800c0b2:	2340      	movne	r3, #64	@ 0x40
 800c0b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c0b8:	2000      	movs	r0, #0
 800c0ba:	6031      	str	r1, [r6, #0]
 800c0bc:	602b      	str	r3, [r5, #0]
 800c0be:	b016      	add	sp, #88	@ 0x58
 800c0c0:	bd70      	pop	{r4, r5, r6, pc}
 800c0c2:	466a      	mov	r2, sp
 800c0c4:	f000 f848 	bl	800c158 <_fstat_r>
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	dbec      	blt.n	800c0a6 <__swhatbuf_r+0x12>
 800c0cc:	9901      	ldr	r1, [sp, #4]
 800c0ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c0d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c0d6:	4259      	negs	r1, r3
 800c0d8:	4159      	adcs	r1, r3
 800c0da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c0de:	e7eb      	b.n	800c0b8 <__swhatbuf_r+0x24>

0800c0e0 <__smakebuf_r>:
 800c0e0:	898b      	ldrh	r3, [r1, #12]
 800c0e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0e4:	079d      	lsls	r5, r3, #30
 800c0e6:	4606      	mov	r6, r0
 800c0e8:	460c      	mov	r4, r1
 800c0ea:	d507      	bpl.n	800c0fc <__smakebuf_r+0x1c>
 800c0ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c0f0:	6023      	str	r3, [r4, #0]
 800c0f2:	6123      	str	r3, [r4, #16]
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	6163      	str	r3, [r4, #20]
 800c0f8:	b003      	add	sp, #12
 800c0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0fc:	ab01      	add	r3, sp, #4
 800c0fe:	466a      	mov	r2, sp
 800c100:	f7ff ffc8 	bl	800c094 <__swhatbuf_r>
 800c104:	9f00      	ldr	r7, [sp, #0]
 800c106:	4605      	mov	r5, r0
 800c108:	4639      	mov	r1, r7
 800c10a:	4630      	mov	r0, r6
 800c10c:	f7fe ff62 	bl	800afd4 <_malloc_r>
 800c110:	b948      	cbnz	r0, 800c126 <__smakebuf_r+0x46>
 800c112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c116:	059a      	lsls	r2, r3, #22
 800c118:	d4ee      	bmi.n	800c0f8 <__smakebuf_r+0x18>
 800c11a:	f023 0303 	bic.w	r3, r3, #3
 800c11e:	f043 0302 	orr.w	r3, r3, #2
 800c122:	81a3      	strh	r3, [r4, #12]
 800c124:	e7e2      	b.n	800c0ec <__smakebuf_r+0xc>
 800c126:	89a3      	ldrh	r3, [r4, #12]
 800c128:	6020      	str	r0, [r4, #0]
 800c12a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c12e:	81a3      	strh	r3, [r4, #12]
 800c130:	9b01      	ldr	r3, [sp, #4]
 800c132:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c136:	b15b      	cbz	r3, 800c150 <__smakebuf_r+0x70>
 800c138:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c13c:	4630      	mov	r0, r6
 800c13e:	f000 f81d 	bl	800c17c <_isatty_r>
 800c142:	b128      	cbz	r0, 800c150 <__smakebuf_r+0x70>
 800c144:	89a3      	ldrh	r3, [r4, #12]
 800c146:	f023 0303 	bic.w	r3, r3, #3
 800c14a:	f043 0301 	orr.w	r3, r3, #1
 800c14e:	81a3      	strh	r3, [r4, #12]
 800c150:	89a3      	ldrh	r3, [r4, #12]
 800c152:	431d      	orrs	r5, r3
 800c154:	81a5      	strh	r5, [r4, #12]
 800c156:	e7cf      	b.n	800c0f8 <__smakebuf_r+0x18>

0800c158 <_fstat_r>:
 800c158:	b538      	push	{r3, r4, r5, lr}
 800c15a:	4d07      	ldr	r5, [pc, #28]	@ (800c178 <_fstat_r+0x20>)
 800c15c:	2300      	movs	r3, #0
 800c15e:	4604      	mov	r4, r0
 800c160:	4608      	mov	r0, r1
 800c162:	4611      	mov	r1, r2
 800c164:	602b      	str	r3, [r5, #0]
 800c166:	f7f7 fa37 	bl	80035d8 <_fstat>
 800c16a:	1c43      	adds	r3, r0, #1
 800c16c:	d102      	bne.n	800c174 <_fstat_r+0x1c>
 800c16e:	682b      	ldr	r3, [r5, #0]
 800c170:	b103      	cbz	r3, 800c174 <_fstat_r+0x1c>
 800c172:	6023      	str	r3, [r4, #0]
 800c174:	bd38      	pop	{r3, r4, r5, pc}
 800c176:	bf00      	nop
 800c178:	20000e2c 	.word	0x20000e2c

0800c17c <_isatty_r>:
 800c17c:	b538      	push	{r3, r4, r5, lr}
 800c17e:	4d06      	ldr	r5, [pc, #24]	@ (800c198 <_isatty_r+0x1c>)
 800c180:	2300      	movs	r3, #0
 800c182:	4604      	mov	r4, r0
 800c184:	4608      	mov	r0, r1
 800c186:	602b      	str	r3, [r5, #0]
 800c188:	f7f7 fa36 	bl	80035f8 <_isatty>
 800c18c:	1c43      	adds	r3, r0, #1
 800c18e:	d102      	bne.n	800c196 <_isatty_r+0x1a>
 800c190:	682b      	ldr	r3, [r5, #0]
 800c192:	b103      	cbz	r3, 800c196 <_isatty_r+0x1a>
 800c194:	6023      	str	r3, [r4, #0]
 800c196:	bd38      	pop	{r3, r4, r5, pc}
 800c198:	20000e2c 	.word	0x20000e2c

0800c19c <sqrt>:
 800c19c:	b538      	push	{r3, r4, r5, lr}
 800c19e:	ed2d 8b02 	vpush	{d8}
 800c1a2:	ec55 4b10 	vmov	r4, r5, d0
 800c1a6:	f000 f879 	bl	800c29c <__ieee754_sqrt>
 800c1aa:	4622      	mov	r2, r4
 800c1ac:	462b      	mov	r3, r5
 800c1ae:	4620      	mov	r0, r4
 800c1b0:	4629      	mov	r1, r5
 800c1b2:	eeb0 8a40 	vmov.f32	s16, s0
 800c1b6:	eef0 8a60 	vmov.f32	s17, s1
 800c1ba:	f7f4 fcd7 	bl	8000b6c <__aeabi_dcmpun>
 800c1be:	b990      	cbnz	r0, 800c1e6 <sqrt+0x4a>
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	4629      	mov	r1, r5
 800c1c8:	f7f4 fca8 	bl	8000b1c <__aeabi_dcmplt>
 800c1cc:	b158      	cbz	r0, 800c1e6 <sqrt+0x4a>
 800c1ce:	f7fd fca1 	bl	8009b14 <__errno>
 800c1d2:	2321      	movs	r3, #33	@ 0x21
 800c1d4:	6003      	str	r3, [r0, #0]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	2300      	movs	r3, #0
 800c1da:	4610      	mov	r0, r2
 800c1dc:	4619      	mov	r1, r3
 800c1de:	f7f4 fb55 	bl	800088c <__aeabi_ddiv>
 800c1e2:	ec41 0b18 	vmov	d8, r0, r1
 800c1e6:	eeb0 0a48 	vmov.f32	s0, s16
 800c1ea:	eef0 0a68 	vmov.f32	s1, s17
 800c1ee:	ecbd 8b02 	vpop	{d8}
 800c1f2:	bd38      	pop	{r3, r4, r5, pc}

0800c1f4 <fmax>:
 800c1f4:	b508      	push	{r3, lr}
 800c1f6:	ed2d 8b04 	vpush	{d8-d9}
 800c1fa:	eeb0 8a40 	vmov.f32	s16, s0
 800c1fe:	eef0 8a60 	vmov.f32	s17, s1
 800c202:	eeb0 9a41 	vmov.f32	s18, s2
 800c206:	eef0 9a61 	vmov.f32	s19, s3
 800c20a:	f000 f81d 	bl	800c248 <__fpclassifyd>
 800c20e:	b950      	cbnz	r0, 800c226 <fmax+0x32>
 800c210:	eeb0 8a49 	vmov.f32	s16, s18
 800c214:	eef0 8a69 	vmov.f32	s17, s19
 800c218:	eeb0 0a48 	vmov.f32	s0, s16
 800c21c:	eef0 0a68 	vmov.f32	s1, s17
 800c220:	ecbd 8b04 	vpop	{d8-d9}
 800c224:	bd08      	pop	{r3, pc}
 800c226:	eeb0 0a49 	vmov.f32	s0, s18
 800c22a:	eef0 0a69 	vmov.f32	s1, s19
 800c22e:	f000 f80b 	bl	800c248 <__fpclassifyd>
 800c232:	2800      	cmp	r0, #0
 800c234:	d0f0      	beq.n	800c218 <fmax+0x24>
 800c236:	ec53 2b19 	vmov	r2, r3, d9
 800c23a:	ec51 0b18 	vmov	r0, r1, d8
 800c23e:	f7f4 fc8b 	bl	8000b58 <__aeabi_dcmpgt>
 800c242:	2800      	cmp	r0, #0
 800c244:	d0e4      	beq.n	800c210 <fmax+0x1c>
 800c246:	e7e7      	b.n	800c218 <fmax+0x24>

0800c248 <__fpclassifyd>:
 800c248:	ec51 0b10 	vmov	r0, r1, d0
 800c24c:	b510      	push	{r4, lr}
 800c24e:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800c252:	460b      	mov	r3, r1
 800c254:	d019      	beq.n	800c28a <__fpclassifyd+0x42>
 800c256:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800c25a:	490e      	ldr	r1, [pc, #56]	@ (800c294 <__fpclassifyd+0x4c>)
 800c25c:	428a      	cmp	r2, r1
 800c25e:	d90e      	bls.n	800c27e <__fpclassifyd+0x36>
 800c260:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800c264:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 800c268:	428a      	cmp	r2, r1
 800c26a:	d908      	bls.n	800c27e <__fpclassifyd+0x36>
 800c26c:	4a0a      	ldr	r2, [pc, #40]	@ (800c298 <__fpclassifyd+0x50>)
 800c26e:	4213      	tst	r3, r2
 800c270:	d007      	beq.n	800c282 <__fpclassifyd+0x3a>
 800c272:	4294      	cmp	r4, r2
 800c274:	d107      	bne.n	800c286 <__fpclassifyd+0x3e>
 800c276:	fab0 f080 	clz	r0, r0
 800c27a:	0940      	lsrs	r0, r0, #5
 800c27c:	bd10      	pop	{r4, pc}
 800c27e:	2004      	movs	r0, #4
 800c280:	e7fc      	b.n	800c27c <__fpclassifyd+0x34>
 800c282:	2003      	movs	r0, #3
 800c284:	e7fa      	b.n	800c27c <__fpclassifyd+0x34>
 800c286:	2000      	movs	r0, #0
 800c288:	e7f8      	b.n	800c27c <__fpclassifyd+0x34>
 800c28a:	2800      	cmp	r0, #0
 800c28c:	d1ee      	bne.n	800c26c <__fpclassifyd+0x24>
 800c28e:	2002      	movs	r0, #2
 800c290:	e7f4      	b.n	800c27c <__fpclassifyd+0x34>
 800c292:	bf00      	nop
 800c294:	7fdfffff 	.word	0x7fdfffff
 800c298:	7ff00000 	.word	0x7ff00000

0800c29c <__ieee754_sqrt>:
 800c29c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a0:	4a68      	ldr	r2, [pc, #416]	@ (800c444 <__ieee754_sqrt+0x1a8>)
 800c2a2:	ec55 4b10 	vmov	r4, r5, d0
 800c2a6:	43aa      	bics	r2, r5
 800c2a8:	462b      	mov	r3, r5
 800c2aa:	4621      	mov	r1, r4
 800c2ac:	d110      	bne.n	800c2d0 <__ieee754_sqrt+0x34>
 800c2ae:	4622      	mov	r2, r4
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	4629      	mov	r1, r5
 800c2b4:	f7f4 f9c0 	bl	8000638 <__aeabi_dmul>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	4620      	mov	r0, r4
 800c2be:	4629      	mov	r1, r5
 800c2c0:	f7f4 f804 	bl	80002cc <__adddf3>
 800c2c4:	4604      	mov	r4, r0
 800c2c6:	460d      	mov	r5, r1
 800c2c8:	ec45 4b10 	vmov	d0, r4, r5
 800c2cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2d0:	2d00      	cmp	r5, #0
 800c2d2:	dc0e      	bgt.n	800c2f2 <__ieee754_sqrt+0x56>
 800c2d4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c2d8:	4322      	orrs	r2, r4
 800c2da:	d0f5      	beq.n	800c2c8 <__ieee754_sqrt+0x2c>
 800c2dc:	b19d      	cbz	r5, 800c306 <__ieee754_sqrt+0x6a>
 800c2de:	4622      	mov	r2, r4
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	4629      	mov	r1, r5
 800c2e4:	f7f3 fff0 	bl	80002c8 <__aeabi_dsub>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	460b      	mov	r3, r1
 800c2ec:	f7f4 face 	bl	800088c <__aeabi_ddiv>
 800c2f0:	e7e8      	b.n	800c2c4 <__ieee754_sqrt+0x28>
 800c2f2:	152a      	asrs	r2, r5, #20
 800c2f4:	d115      	bne.n	800c322 <__ieee754_sqrt+0x86>
 800c2f6:	2000      	movs	r0, #0
 800c2f8:	e009      	b.n	800c30e <__ieee754_sqrt+0x72>
 800c2fa:	0acb      	lsrs	r3, r1, #11
 800c2fc:	3a15      	subs	r2, #21
 800c2fe:	0549      	lsls	r1, r1, #21
 800c300:	2b00      	cmp	r3, #0
 800c302:	d0fa      	beq.n	800c2fa <__ieee754_sqrt+0x5e>
 800c304:	e7f7      	b.n	800c2f6 <__ieee754_sqrt+0x5a>
 800c306:	462a      	mov	r2, r5
 800c308:	e7fa      	b.n	800c300 <__ieee754_sqrt+0x64>
 800c30a:	005b      	lsls	r3, r3, #1
 800c30c:	3001      	adds	r0, #1
 800c30e:	02dc      	lsls	r4, r3, #11
 800c310:	d5fb      	bpl.n	800c30a <__ieee754_sqrt+0x6e>
 800c312:	1e44      	subs	r4, r0, #1
 800c314:	1b12      	subs	r2, r2, r4
 800c316:	f1c0 0420 	rsb	r4, r0, #32
 800c31a:	fa21 f404 	lsr.w	r4, r1, r4
 800c31e:	4323      	orrs	r3, r4
 800c320:	4081      	lsls	r1, r0
 800c322:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c326:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c32a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c32e:	07d2      	lsls	r2, r2, #31
 800c330:	bf5c      	itt	pl
 800c332:	005b      	lslpl	r3, r3, #1
 800c334:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c338:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c33c:	bf58      	it	pl
 800c33e:	0049      	lslpl	r1, r1, #1
 800c340:	2600      	movs	r6, #0
 800c342:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c346:	106d      	asrs	r5, r5, #1
 800c348:	0049      	lsls	r1, r1, #1
 800c34a:	2016      	movs	r0, #22
 800c34c:	4632      	mov	r2, r6
 800c34e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c352:	1917      	adds	r7, r2, r4
 800c354:	429f      	cmp	r7, r3
 800c356:	bfde      	ittt	le
 800c358:	193a      	addle	r2, r7, r4
 800c35a:	1bdb      	suble	r3, r3, r7
 800c35c:	1936      	addle	r6, r6, r4
 800c35e:	0fcf      	lsrs	r7, r1, #31
 800c360:	3801      	subs	r0, #1
 800c362:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c366:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c36a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c36e:	d1f0      	bne.n	800c352 <__ieee754_sqrt+0xb6>
 800c370:	4604      	mov	r4, r0
 800c372:	2720      	movs	r7, #32
 800c374:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c378:	429a      	cmp	r2, r3
 800c37a:	eb00 0e0c 	add.w	lr, r0, ip
 800c37e:	db02      	blt.n	800c386 <__ieee754_sqrt+0xea>
 800c380:	d113      	bne.n	800c3aa <__ieee754_sqrt+0x10e>
 800c382:	458e      	cmp	lr, r1
 800c384:	d811      	bhi.n	800c3aa <__ieee754_sqrt+0x10e>
 800c386:	f1be 0f00 	cmp.w	lr, #0
 800c38a:	eb0e 000c 	add.w	r0, lr, ip
 800c38e:	da42      	bge.n	800c416 <__ieee754_sqrt+0x17a>
 800c390:	2800      	cmp	r0, #0
 800c392:	db40      	blt.n	800c416 <__ieee754_sqrt+0x17a>
 800c394:	f102 0801 	add.w	r8, r2, #1
 800c398:	1a9b      	subs	r3, r3, r2
 800c39a:	458e      	cmp	lr, r1
 800c39c:	bf88      	it	hi
 800c39e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c3a2:	eba1 010e 	sub.w	r1, r1, lr
 800c3a6:	4464      	add	r4, ip
 800c3a8:	4642      	mov	r2, r8
 800c3aa:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c3ae:	3f01      	subs	r7, #1
 800c3b0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c3b4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c3b8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c3bc:	d1dc      	bne.n	800c378 <__ieee754_sqrt+0xdc>
 800c3be:	4319      	orrs	r1, r3
 800c3c0:	d01b      	beq.n	800c3fa <__ieee754_sqrt+0x15e>
 800c3c2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c448 <__ieee754_sqrt+0x1ac>
 800c3c6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c44c <__ieee754_sqrt+0x1b0>
 800c3ca:	e9da 0100 	ldrd	r0, r1, [sl]
 800c3ce:	e9db 2300 	ldrd	r2, r3, [fp]
 800c3d2:	f7f3 ff79 	bl	80002c8 <__aeabi_dsub>
 800c3d6:	e9da 8900 	ldrd	r8, r9, [sl]
 800c3da:	4602      	mov	r2, r0
 800c3dc:	460b      	mov	r3, r1
 800c3de:	4640      	mov	r0, r8
 800c3e0:	4649      	mov	r1, r9
 800c3e2:	f7f4 fba5 	bl	8000b30 <__aeabi_dcmple>
 800c3e6:	b140      	cbz	r0, 800c3fa <__ieee754_sqrt+0x15e>
 800c3e8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c3ec:	e9da 0100 	ldrd	r0, r1, [sl]
 800c3f0:	e9db 2300 	ldrd	r2, r3, [fp]
 800c3f4:	d111      	bne.n	800c41a <__ieee754_sqrt+0x17e>
 800c3f6:	3601      	adds	r6, #1
 800c3f8:	463c      	mov	r4, r7
 800c3fa:	1072      	asrs	r2, r6, #1
 800c3fc:	0863      	lsrs	r3, r4, #1
 800c3fe:	07f1      	lsls	r1, r6, #31
 800c400:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c404:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c408:	bf48      	it	mi
 800c40a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c40e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c412:	4618      	mov	r0, r3
 800c414:	e756      	b.n	800c2c4 <__ieee754_sqrt+0x28>
 800c416:	4690      	mov	r8, r2
 800c418:	e7be      	b.n	800c398 <__ieee754_sqrt+0xfc>
 800c41a:	f7f3 ff57 	bl	80002cc <__adddf3>
 800c41e:	e9da 8900 	ldrd	r8, r9, [sl]
 800c422:	4602      	mov	r2, r0
 800c424:	460b      	mov	r3, r1
 800c426:	4640      	mov	r0, r8
 800c428:	4649      	mov	r1, r9
 800c42a:	f7f4 fb77 	bl	8000b1c <__aeabi_dcmplt>
 800c42e:	b120      	cbz	r0, 800c43a <__ieee754_sqrt+0x19e>
 800c430:	1ca0      	adds	r0, r4, #2
 800c432:	bf08      	it	eq
 800c434:	3601      	addeq	r6, #1
 800c436:	3402      	adds	r4, #2
 800c438:	e7df      	b.n	800c3fa <__ieee754_sqrt+0x15e>
 800c43a:	1c63      	adds	r3, r4, #1
 800c43c:	f023 0401 	bic.w	r4, r3, #1
 800c440:	e7db      	b.n	800c3fa <__ieee754_sqrt+0x15e>
 800c442:	bf00      	nop
 800c444:	7ff00000 	.word	0x7ff00000
 800c448:	20000200 	.word	0x20000200
 800c44c:	200001f8 	.word	0x200001f8

0800c450 <roundf>:
 800c450:	ee10 0a10 	vmov	r0, s0
 800c454:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800c458:	3a7f      	subs	r2, #127	@ 0x7f
 800c45a:	2a16      	cmp	r2, #22
 800c45c:	dc15      	bgt.n	800c48a <roundf+0x3a>
 800c45e:	2a00      	cmp	r2, #0
 800c460:	da08      	bge.n	800c474 <roundf+0x24>
 800c462:	3201      	adds	r2, #1
 800c464:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800c468:	d101      	bne.n	800c46e <roundf+0x1e>
 800c46a:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800c46e:	ee00 3a10 	vmov	s0, r3
 800c472:	4770      	bx	lr
 800c474:	4907      	ldr	r1, [pc, #28]	@ (800c494 <roundf+0x44>)
 800c476:	4111      	asrs	r1, r2
 800c478:	4201      	tst	r1, r0
 800c47a:	d0fa      	beq.n	800c472 <roundf+0x22>
 800c47c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c480:	4113      	asrs	r3, r2
 800c482:	4403      	add	r3, r0
 800c484:	ea23 0301 	bic.w	r3, r3, r1
 800c488:	e7f1      	b.n	800c46e <roundf+0x1e>
 800c48a:	2a80      	cmp	r2, #128	@ 0x80
 800c48c:	d1f1      	bne.n	800c472 <roundf+0x22>
 800c48e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c492:	4770      	bx	lr
 800c494:	007fffff 	.word	0x007fffff

0800c498 <_init>:
 800c498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49a:	bf00      	nop
 800c49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c49e:	bc08      	pop	{r3}
 800c4a0:	469e      	mov	lr, r3
 800c4a2:	4770      	bx	lr

0800c4a4 <_fini>:
 800c4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4a6:	bf00      	nop
 800c4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4aa:	bc08      	pop	{r3}
 800c4ac:	469e      	mov	lr, r3
 800c4ae:	4770      	bx	lr
